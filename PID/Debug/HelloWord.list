
HelloWord.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064b4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08006694  08006694  00016694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800680c  0800680c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800680c  0800680c  0001680c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006814  08006814  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006814  08006814  00016814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006818  08006818  00016818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800681c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b70  20000074  08006890  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004be4  08006890  00024be4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a810  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000384e  00000000  00000000  0003a8b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016d8  00000000  00000000  0003e108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001540  00000000  00000000  0003f7e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000254f0  00000000  00000000  00040d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001929c  00000000  00000000  00066210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e95d3  00000000  00000000  0007f4ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00168a7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000625c  00000000  00000000  00168ad0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000074 	.word	0x20000074
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800667c 	.word	0x0800667c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000078 	.word	0x20000078
 800021c:	0800667c 	.word	0x0800667c

08000220 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000220:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000222:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000226:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002b0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800022a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800022e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000232:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000234:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000236:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000238:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800023a:	d332      	bcc.n	80002a2 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800023c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800023e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000240:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000242:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000244:	d314      	bcc.n	8000270 <_CheckCase2>

08000246 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000246:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000248:	19d0      	adds	r0, r2, r7
 800024a:	bf00      	nop

0800024c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800024c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000250:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000254:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000256:	d005      	beq.n	8000264 <_CSDone>
        LDRB     R3,[R1], #+1
 8000258:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000260:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000262:	d1f3      	bne.n	800024c <_LoopCopyStraight>

08000264 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000264:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000268:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800026a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800026e:	4770      	bx	lr

08000270 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000270:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000272:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000274:	d319      	bcc.n	80002aa <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000276:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000278:	1b12      	subs	r2, r2, r4

0800027a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800027e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000282:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000286:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000288:	d005      	beq.n	8000296 <_No2ChunkNeeded>

0800028a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800028a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800028e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000292:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000294:	d1f9      	bne.n	800028a <_LoopCopyAfterWrapAround>

08000296 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000296:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800029a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800029c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800029e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002a0:	4770      	bx	lr

080002a2 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002a2:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002a4:	3801      	subs	r0, #1
        CMP      R0,R2
 80002a6:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002a8:	d2cd      	bcs.n	8000246 <_Case4>

080002aa <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002aa:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002ac:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002ae:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002b0:	2000420c 	.word	0x2000420c

080002b4 <__aeabi_uldivmod>:
 80002b4:	b953      	cbnz	r3, 80002cc <__aeabi_uldivmod+0x18>
 80002b6:	b94a      	cbnz	r2, 80002cc <__aeabi_uldivmod+0x18>
 80002b8:	2900      	cmp	r1, #0
 80002ba:	bf08      	it	eq
 80002bc:	2800      	cmpeq	r0, #0
 80002be:	bf1c      	itt	ne
 80002c0:	f04f 31ff 	movne.w	r1, #4294967295
 80002c4:	f04f 30ff 	movne.w	r0, #4294967295
 80002c8:	f000 b974 	b.w	80005b4 <__aeabi_idiv0>
 80002cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d4:	f000 f806 	bl	80002e4 <__udivmoddi4>
 80002d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e0:	b004      	add	sp, #16
 80002e2:	4770      	bx	lr

080002e4 <__udivmoddi4>:
 80002e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e8:	9d08      	ldr	r5, [sp, #32]
 80002ea:	4604      	mov	r4, r0
 80002ec:	468e      	mov	lr, r1
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d14d      	bne.n	800038e <__udivmoddi4+0xaa>
 80002f2:	428a      	cmp	r2, r1
 80002f4:	4694      	mov	ip, r2
 80002f6:	d969      	bls.n	80003cc <__udivmoddi4+0xe8>
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	b152      	cbz	r2, 8000314 <__udivmoddi4+0x30>
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	f1c2 0120 	rsb	r1, r2, #32
 8000306:	fa20 f101 	lsr.w	r1, r0, r1
 800030a:	fa0c fc02 	lsl.w	ip, ip, r2
 800030e:	ea41 0e03 	orr.w	lr, r1, r3
 8000312:	4094      	lsls	r4, r2
 8000314:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000318:	0c21      	lsrs	r1, r4, #16
 800031a:	fbbe f6f8 	udiv	r6, lr, r8
 800031e:	fa1f f78c 	uxth.w	r7, ip
 8000322:	fb08 e316 	mls	r3, r8, r6, lr
 8000326:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800032a:	fb06 f107 	mul.w	r1, r6, r7
 800032e:	4299      	cmp	r1, r3
 8000330:	d90a      	bls.n	8000348 <__udivmoddi4+0x64>
 8000332:	eb1c 0303 	adds.w	r3, ip, r3
 8000336:	f106 30ff 	add.w	r0, r6, #4294967295
 800033a:	f080 811f 	bcs.w	800057c <__udivmoddi4+0x298>
 800033e:	4299      	cmp	r1, r3
 8000340:	f240 811c 	bls.w	800057c <__udivmoddi4+0x298>
 8000344:	3e02      	subs	r6, #2
 8000346:	4463      	add	r3, ip
 8000348:	1a5b      	subs	r3, r3, r1
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000350:	fb08 3310 	mls	r3, r8, r0, r3
 8000354:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000358:	fb00 f707 	mul.w	r7, r0, r7
 800035c:	42a7      	cmp	r7, r4
 800035e:	d90a      	bls.n	8000376 <__udivmoddi4+0x92>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 33ff 	add.w	r3, r0, #4294967295
 8000368:	f080 810a 	bcs.w	8000580 <__udivmoddi4+0x29c>
 800036c:	42a7      	cmp	r7, r4
 800036e:	f240 8107 	bls.w	8000580 <__udivmoddi4+0x29c>
 8000372:	4464      	add	r4, ip
 8000374:	3802      	subs	r0, #2
 8000376:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037a:	1be4      	subs	r4, r4, r7
 800037c:	2600      	movs	r6, #0
 800037e:	b11d      	cbz	r5, 8000388 <__udivmoddi4+0xa4>
 8000380:	40d4      	lsrs	r4, r2
 8000382:	2300      	movs	r3, #0
 8000384:	e9c5 4300 	strd	r4, r3, [r5]
 8000388:	4631      	mov	r1, r6
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	428b      	cmp	r3, r1
 8000390:	d909      	bls.n	80003a6 <__udivmoddi4+0xc2>
 8000392:	2d00      	cmp	r5, #0
 8000394:	f000 80ef 	beq.w	8000576 <__udivmoddi4+0x292>
 8000398:	2600      	movs	r6, #0
 800039a:	e9c5 0100 	strd	r0, r1, [r5]
 800039e:	4630      	mov	r0, r6
 80003a0:	4631      	mov	r1, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	fab3 f683 	clz	r6, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d14a      	bne.n	8000444 <__udivmoddi4+0x160>
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xd4>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 80f9 	bhi.w	80005aa <__udivmoddi4+0x2c6>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb61 0303 	sbc.w	r3, r1, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	469e      	mov	lr, r3
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e0      	beq.n	8000388 <__udivmoddi4+0xa4>
 80003c6:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ca:	e7dd      	b.n	8000388 <__udivmoddi4+0xa4>
 80003cc:	b902      	cbnz	r2, 80003d0 <__udivmoddi4+0xec>
 80003ce:	deff      	udf	#255	; 0xff
 80003d0:	fab2 f282 	clz	r2, r2
 80003d4:	2a00      	cmp	r2, #0
 80003d6:	f040 8092 	bne.w	80004fe <__udivmoddi4+0x21a>
 80003da:	eba1 010c 	sub.w	r1, r1, ip
 80003de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e2:	fa1f fe8c 	uxth.w	lr, ip
 80003e6:	2601      	movs	r6, #1
 80003e8:	0c20      	lsrs	r0, r4, #16
 80003ea:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ee:	fb07 1113 	mls	r1, r7, r3, r1
 80003f2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f6:	fb0e f003 	mul.w	r0, lr, r3
 80003fa:	4288      	cmp	r0, r1
 80003fc:	d908      	bls.n	8000410 <__udivmoddi4+0x12c>
 80003fe:	eb1c 0101 	adds.w	r1, ip, r1
 8000402:	f103 38ff 	add.w	r8, r3, #4294967295
 8000406:	d202      	bcs.n	800040e <__udivmoddi4+0x12a>
 8000408:	4288      	cmp	r0, r1
 800040a:	f200 80cb 	bhi.w	80005a4 <__udivmoddi4+0x2c0>
 800040e:	4643      	mov	r3, r8
 8000410:	1a09      	subs	r1, r1, r0
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb1 f0f7 	udiv	r0, r1, r7
 8000418:	fb07 1110 	mls	r1, r7, r0, r1
 800041c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000420:	fb0e fe00 	mul.w	lr, lr, r0
 8000424:	45a6      	cmp	lr, r4
 8000426:	d908      	bls.n	800043a <__udivmoddi4+0x156>
 8000428:	eb1c 0404 	adds.w	r4, ip, r4
 800042c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000430:	d202      	bcs.n	8000438 <__udivmoddi4+0x154>
 8000432:	45a6      	cmp	lr, r4
 8000434:	f200 80bb 	bhi.w	80005ae <__udivmoddi4+0x2ca>
 8000438:	4608      	mov	r0, r1
 800043a:	eba4 040e 	sub.w	r4, r4, lr
 800043e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000442:	e79c      	b.n	800037e <__udivmoddi4+0x9a>
 8000444:	f1c6 0720 	rsb	r7, r6, #32
 8000448:	40b3      	lsls	r3, r6
 800044a:	fa22 fc07 	lsr.w	ip, r2, r7
 800044e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000452:	fa20 f407 	lsr.w	r4, r0, r7
 8000456:	fa01 f306 	lsl.w	r3, r1, r6
 800045a:	431c      	orrs	r4, r3
 800045c:	40f9      	lsrs	r1, r7
 800045e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000462:	fa00 f306 	lsl.w	r3, r0, r6
 8000466:	fbb1 f8f9 	udiv	r8, r1, r9
 800046a:	0c20      	lsrs	r0, r4, #16
 800046c:	fa1f fe8c 	uxth.w	lr, ip
 8000470:	fb09 1118 	mls	r1, r9, r8, r1
 8000474:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000478:	fb08 f00e 	mul.w	r0, r8, lr
 800047c:	4288      	cmp	r0, r1
 800047e:	fa02 f206 	lsl.w	r2, r2, r6
 8000482:	d90b      	bls.n	800049c <__udivmoddi4+0x1b8>
 8000484:	eb1c 0101 	adds.w	r1, ip, r1
 8000488:	f108 3aff 	add.w	sl, r8, #4294967295
 800048c:	f080 8088 	bcs.w	80005a0 <__udivmoddi4+0x2bc>
 8000490:	4288      	cmp	r0, r1
 8000492:	f240 8085 	bls.w	80005a0 <__udivmoddi4+0x2bc>
 8000496:	f1a8 0802 	sub.w	r8, r8, #2
 800049a:	4461      	add	r1, ip
 800049c:	1a09      	subs	r1, r1, r0
 800049e:	b2a4      	uxth	r4, r4
 80004a0:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a4:	fb09 1110 	mls	r1, r9, r0, r1
 80004a8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004ac:	fb00 fe0e 	mul.w	lr, r0, lr
 80004b0:	458e      	cmp	lr, r1
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x1e2>
 80004b4:	eb1c 0101 	adds.w	r1, ip, r1
 80004b8:	f100 34ff 	add.w	r4, r0, #4294967295
 80004bc:	d26c      	bcs.n	8000598 <__udivmoddi4+0x2b4>
 80004be:	458e      	cmp	lr, r1
 80004c0:	d96a      	bls.n	8000598 <__udivmoddi4+0x2b4>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4461      	add	r1, ip
 80004c6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ca:	fba0 9402 	umull	r9, r4, r0, r2
 80004ce:	eba1 010e 	sub.w	r1, r1, lr
 80004d2:	42a1      	cmp	r1, r4
 80004d4:	46c8      	mov	r8, r9
 80004d6:	46a6      	mov	lr, r4
 80004d8:	d356      	bcc.n	8000588 <__udivmoddi4+0x2a4>
 80004da:	d053      	beq.n	8000584 <__udivmoddi4+0x2a0>
 80004dc:	b15d      	cbz	r5, 80004f6 <__udivmoddi4+0x212>
 80004de:	ebb3 0208 	subs.w	r2, r3, r8
 80004e2:	eb61 010e 	sbc.w	r1, r1, lr
 80004e6:	fa01 f707 	lsl.w	r7, r1, r7
 80004ea:	fa22 f306 	lsr.w	r3, r2, r6
 80004ee:	40f1      	lsrs	r1, r6
 80004f0:	431f      	orrs	r7, r3
 80004f2:	e9c5 7100 	strd	r7, r1, [r5]
 80004f6:	2600      	movs	r6, #0
 80004f8:	4631      	mov	r1, r6
 80004fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fe:	f1c2 0320 	rsb	r3, r2, #32
 8000502:	40d8      	lsrs	r0, r3
 8000504:	fa0c fc02 	lsl.w	ip, ip, r2
 8000508:	fa21 f303 	lsr.w	r3, r1, r3
 800050c:	4091      	lsls	r1, r2
 800050e:	4301      	orrs	r1, r0
 8000510:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000514:	fa1f fe8c 	uxth.w	lr, ip
 8000518:	fbb3 f0f7 	udiv	r0, r3, r7
 800051c:	fb07 3610 	mls	r6, r7, r0, r3
 8000520:	0c0b      	lsrs	r3, r1, #16
 8000522:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000526:	fb00 f60e 	mul.w	r6, r0, lr
 800052a:	429e      	cmp	r6, r3
 800052c:	fa04 f402 	lsl.w	r4, r4, r2
 8000530:	d908      	bls.n	8000544 <__udivmoddi4+0x260>
 8000532:	eb1c 0303 	adds.w	r3, ip, r3
 8000536:	f100 38ff 	add.w	r8, r0, #4294967295
 800053a:	d22f      	bcs.n	800059c <__udivmoddi4+0x2b8>
 800053c:	429e      	cmp	r6, r3
 800053e:	d92d      	bls.n	800059c <__udivmoddi4+0x2b8>
 8000540:	3802      	subs	r0, #2
 8000542:	4463      	add	r3, ip
 8000544:	1b9b      	subs	r3, r3, r6
 8000546:	b289      	uxth	r1, r1
 8000548:	fbb3 f6f7 	udiv	r6, r3, r7
 800054c:	fb07 3316 	mls	r3, r7, r6, r3
 8000550:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000554:	fb06 f30e 	mul.w	r3, r6, lr
 8000558:	428b      	cmp	r3, r1
 800055a:	d908      	bls.n	800056e <__udivmoddi4+0x28a>
 800055c:	eb1c 0101 	adds.w	r1, ip, r1
 8000560:	f106 38ff 	add.w	r8, r6, #4294967295
 8000564:	d216      	bcs.n	8000594 <__udivmoddi4+0x2b0>
 8000566:	428b      	cmp	r3, r1
 8000568:	d914      	bls.n	8000594 <__udivmoddi4+0x2b0>
 800056a:	3e02      	subs	r6, #2
 800056c:	4461      	add	r1, ip
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000574:	e738      	b.n	80003e8 <__udivmoddi4+0x104>
 8000576:	462e      	mov	r6, r5
 8000578:	4628      	mov	r0, r5
 800057a:	e705      	b.n	8000388 <__udivmoddi4+0xa4>
 800057c:	4606      	mov	r6, r0
 800057e:	e6e3      	b.n	8000348 <__udivmoddi4+0x64>
 8000580:	4618      	mov	r0, r3
 8000582:	e6f8      	b.n	8000376 <__udivmoddi4+0x92>
 8000584:	454b      	cmp	r3, r9
 8000586:	d2a9      	bcs.n	80004dc <__udivmoddi4+0x1f8>
 8000588:	ebb9 0802 	subs.w	r8, r9, r2
 800058c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000590:	3801      	subs	r0, #1
 8000592:	e7a3      	b.n	80004dc <__udivmoddi4+0x1f8>
 8000594:	4646      	mov	r6, r8
 8000596:	e7ea      	b.n	800056e <__udivmoddi4+0x28a>
 8000598:	4620      	mov	r0, r4
 800059a:	e794      	b.n	80004c6 <__udivmoddi4+0x1e2>
 800059c:	4640      	mov	r0, r8
 800059e:	e7d1      	b.n	8000544 <__udivmoddi4+0x260>
 80005a0:	46d0      	mov	r8, sl
 80005a2:	e77b      	b.n	800049c <__udivmoddi4+0x1b8>
 80005a4:	3b02      	subs	r3, #2
 80005a6:	4461      	add	r1, ip
 80005a8:	e732      	b.n	8000410 <__udivmoddi4+0x12c>
 80005aa:	4630      	mov	r0, r6
 80005ac:	e709      	b.n	80003c2 <__udivmoddi4+0xde>
 80005ae:	4464      	add	r4, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e742      	b.n	800043a <__udivmoddi4+0x156>

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	60f8      	str	r0, [r7, #12]
 80005c0:	60b9      	str	r1, [r7, #8]
 80005c2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	4a07      	ldr	r2, [pc, #28]	; (80005e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80005c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	4a06      	ldr	r2, [pc, #24]	; (80005e8 <vApplicationGetIdleTaskMemory+0x30>)
 80005ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	2280      	movs	r2, #128	; 0x80
 80005d4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005d6:	bf00      	nop
 80005d8:	3714      	adds	r7, #20
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	20000090 	.word	0x20000090
 80005e8:	20000144 	.word	0x20000144

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b5b0      	push	{r4, r5, r7, lr}
 80005ee:	b088      	sub	sp, #32
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f2:	f000 faf6 	bl	8000be2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f6:	f000 f827 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fa:	f000 f8c3 	bl	8000784 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005fe:	f000 f891 	bl	8000724 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
#if SVW
  DWT->CTRL |= 1;
 8000602:	4b0e      	ldr	r3, [pc, #56]	; (800063c <main+0x50>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4a0d      	ldr	r2, [pc, #52]	; (800063c <main+0x50>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	6013      	str	r3, [r2, #0]
  SEGGER_SYSVIEW_Conf();
 800060e:	f004 fb63 	bl	8004cd8 <SEGGER_SYSVIEW_Conf>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000612:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <main+0x54>)
 8000614:	1d3c      	adds	r4, r7, #4
 8000616:	461d      	mov	r5, r3
 8000618:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800061a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800061c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000620:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	2100      	movs	r1, #0
 8000628:	4618      	mov	r0, r3
 800062a:	f003 f845 	bl	80036b8 <osThreadCreate>
 800062e:	4603      	mov	r3, r0
 8000630:	4a04      	ldr	r2, [pc, #16]	; (8000644 <main+0x58>)
 8000632:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000634:	f003 f839 	bl	80036aa <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000638:	e7fe      	b.n	8000638 <main+0x4c>
 800063a:	bf00      	nop
 800063c:	e0001000 	.word	0xe0001000
 8000640:	080066a0 	.word	0x080066a0
 8000644:	200003c8 	.word	0x200003c8

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b094      	sub	sp, #80	; 0x50
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0320 	add.w	r3, r7, #32
 8000652:	2230      	movs	r2, #48	; 0x30
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f005 ff46 	bl	80064e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800066c:	f000 fe10 	bl	8001290 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000670:	4b2a      	ldr	r3, [pc, #168]	; (800071c <SystemClock_Config+0xd4>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000674:	4a29      	ldr	r2, [pc, #164]	; (800071c <SystemClock_Config+0xd4>)
 8000676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800067a:	6413      	str	r3, [r2, #64]	; 0x40
 800067c:	4b27      	ldr	r3, [pc, #156]	; (800071c <SystemClock_Config+0xd4>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000688:	4b25      	ldr	r3, [pc, #148]	; (8000720 <SystemClock_Config+0xd8>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a24      	ldr	r2, [pc, #144]	; (8000720 <SystemClock_Config+0xd8>)
 800068e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000692:	6013      	str	r3, [r2, #0]
 8000694:	4b22      	ldr	r3, [pc, #136]	; (8000720 <SystemClock_Config+0xd8>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a0:	2301      	movs	r3, #1
 80006a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006a4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006aa:	2302      	movs	r3, #2
 80006ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006b4:	2304      	movs	r3, #4
 80006b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80006b8:	23d8      	movs	r3, #216	; 0xd8
 80006ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006bc:	2302      	movs	r3, #2
 80006be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80006c0:	2309      	movs	r3, #9
 80006c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c4:	f107 0320 	add.w	r3, r7, #32
 80006c8:	4618      	mov	r0, r3
 80006ca:	f000 fe41 	bl	8001350 <HAL_RCC_OscConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80006d4:	f000 f932 	bl	800093c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006d8:	f000 fdea 	bl	80012b0 <HAL_PWREx_EnableOverDrive>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006e2:	f000 f92b 	bl	800093c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e6:	230f      	movs	r3, #15
 80006e8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ea:	2302      	movs	r3, #2
 80006ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006f2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80006fe:	f107 030c 	add.w	r3, r7, #12
 8000702:	2107      	movs	r1, #7
 8000704:	4618      	mov	r0, r3
 8000706:	f001 f8c7 	bl	8001898 <HAL_RCC_ClockConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000710:	f000 f914 	bl	800093c <Error_Handler>
  }
}
 8000714:	bf00      	nop
 8000716:	3750      	adds	r7, #80	; 0x50
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40023800 	.word	0x40023800
 8000720:	40007000 	.word	0x40007000

08000724 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000728:	4b14      	ldr	r3, [pc, #80]	; (800077c <MX_USART3_UART_Init+0x58>)
 800072a:	4a15      	ldr	r2, [pc, #84]	; (8000780 <MX_USART3_UART_Init+0x5c>)
 800072c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800072e:	4b13      	ldr	r3, [pc, #76]	; (800077c <MX_USART3_UART_Init+0x58>)
 8000730:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000734:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000736:	4b11      	ldr	r3, [pc, #68]	; (800077c <MX_USART3_UART_Init+0x58>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800073c:	4b0f      	ldr	r3, [pc, #60]	; (800077c <MX_USART3_UART_Init+0x58>)
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <MX_USART3_UART_Init+0x58>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000748:	4b0c      	ldr	r3, [pc, #48]	; (800077c <MX_USART3_UART_Init+0x58>)
 800074a:	220c      	movs	r2, #12
 800074c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074e:	4b0b      	ldr	r3, [pc, #44]	; (800077c <MX_USART3_UART_Init+0x58>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000754:	4b09      	ldr	r3, [pc, #36]	; (800077c <MX_USART3_UART_Init+0x58>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800075a:	4b08      	ldr	r3, [pc, #32]	; (800077c <MX_USART3_UART_Init+0x58>)
 800075c:	2200      	movs	r2, #0
 800075e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <MX_USART3_UART_Init+0x58>)
 8000762:	2200      	movs	r2, #0
 8000764:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000766:	4805      	ldr	r0, [pc, #20]	; (800077c <MX_USART3_UART_Init+0x58>)
 8000768:	f002 f918 	bl	800299c <HAL_UART_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000772:	f000 f8e3 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000344 	.word	0x20000344
 8000780:	40004800 	.word	0x40004800

08000784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08c      	sub	sp, #48	; 0x30
 8000788:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078a:	f107 031c 	add.w	r3, r7, #28
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079a:	4b55      	ldr	r3, [pc, #340]	; (80008f0 <MX_GPIO_Init+0x16c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a54      	ldr	r2, [pc, #336]	; (80008f0 <MX_GPIO_Init+0x16c>)
 80007a0:	f043 0304 	orr.w	r3, r3, #4
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b52      	ldr	r3, [pc, #328]	; (80008f0 <MX_GPIO_Init+0x16c>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0304 	and.w	r3, r3, #4
 80007ae:	61bb      	str	r3, [r7, #24]
 80007b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b2:	4b4f      	ldr	r3, [pc, #316]	; (80008f0 <MX_GPIO_Init+0x16c>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a4e      	ldr	r2, [pc, #312]	; (80008f0 <MX_GPIO_Init+0x16c>)
 80007b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b4c      	ldr	r3, [pc, #304]	; (80008f0 <MX_GPIO_Init+0x16c>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007c6:	617b      	str	r3, [r7, #20]
 80007c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ca:	4b49      	ldr	r3, [pc, #292]	; (80008f0 <MX_GPIO_Init+0x16c>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a48      	ldr	r2, [pc, #288]	; (80008f0 <MX_GPIO_Init+0x16c>)
 80007d0:	f043 0302 	orr.w	r3, r3, #2
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b46      	ldr	r3, [pc, #280]	; (80008f0 <MX_GPIO_Init+0x16c>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0302 	and.w	r3, r3, #2
 80007de:	613b      	str	r3, [r7, #16]
 80007e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007e2:	4b43      	ldr	r3, [pc, #268]	; (80008f0 <MX_GPIO_Init+0x16c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a42      	ldr	r2, [pc, #264]	; (80008f0 <MX_GPIO_Init+0x16c>)
 80007e8:	f043 0308 	orr.w	r3, r3, #8
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b40      	ldr	r3, [pc, #256]	; (80008f0 <MX_GPIO_Init+0x16c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0308 	and.w	r3, r3, #8
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007fa:	4b3d      	ldr	r3, [pc, #244]	; (80008f0 <MX_GPIO_Init+0x16c>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a3c      	ldr	r2, [pc, #240]	; (80008f0 <MX_GPIO_Init+0x16c>)
 8000800:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b3a      	ldr	r3, [pc, #232]	; (80008f0 <MX_GPIO_Init+0x16c>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	4b37      	ldr	r3, [pc, #220]	; (80008f0 <MX_GPIO_Init+0x16c>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a36      	ldr	r2, [pc, #216]	; (80008f0 <MX_GPIO_Init+0x16c>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b34      	ldr	r3, [pc, #208]	; (80008f0 <MX_GPIO_Init+0x16c>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000830:	4830      	ldr	r0, [pc, #192]	; (80008f4 <MX_GPIO_Init+0x170>)
 8000832:	f000 fd13 	bl	800125c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	2140      	movs	r1, #64	; 0x40
 800083a:	482f      	ldr	r0, [pc, #188]	; (80008f8 <MX_GPIO_Init+0x174>)
 800083c:	f000 fd0e 	bl	800125c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000840:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000846:	4b2d      	ldr	r3, [pc, #180]	; (80008fc <MX_GPIO_Init+0x178>)
 8000848:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	4619      	mov	r1, r3
 8000854:	482a      	ldr	r0, [pc, #168]	; (8000900 <MX_GPIO_Init+0x17c>)
 8000856:	f000 fb65 	bl	8000f24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800085a:	f244 0381 	movw	r3, #16513	; 0x4081
 800085e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000860:	2301      	movs	r3, #1
 8000862:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	2300      	movs	r3, #0
 800086a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800086c:	f107 031c 	add.w	r3, r7, #28
 8000870:	4619      	mov	r1, r3
 8000872:	4820      	ldr	r0, [pc, #128]	; (80008f4 <MX_GPIO_Init+0x170>)
 8000874:	f000 fb56 	bl	8000f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000878:	2340      	movs	r3, #64	; 0x40
 800087a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087c:	2301      	movs	r3, #1
 800087e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000884:	2300      	movs	r3, #0
 8000886:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	4619      	mov	r1, r3
 800088e:	481a      	ldr	r0, [pc, #104]	; (80008f8 <MX_GPIO_Init+0x174>)
 8000890:	f000 fb48 	bl	8000f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000894:	2380      	movs	r3, #128	; 0x80
 8000896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000898:	2300      	movs	r3, #0
 800089a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008a0:	f107 031c 	add.w	r3, r7, #28
 80008a4:	4619      	mov	r1, r3
 80008a6:	4814      	ldr	r0, [pc, #80]	; (80008f8 <MX_GPIO_Init+0x174>)
 80008a8:	f000 fb3c 	bl	8000f24 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80008ac:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b2:	2302      	movs	r3, #2
 80008b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ba:	2303      	movs	r3, #3
 80008bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008be:	230a      	movs	r3, #10
 80008c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	4619      	mov	r1, r3
 80008c8:	480e      	ldr	r0, [pc, #56]	; (8000904 <MX_GPIO_Init+0x180>)
 80008ca:	f000 fb2b 	bl	8000f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80008ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d4:	2300      	movs	r3, #0
 80008d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80008dc:	f107 031c 	add.w	r3, r7, #28
 80008e0:	4619      	mov	r1, r3
 80008e2:	4808      	ldr	r0, [pc, #32]	; (8000904 <MX_GPIO_Init+0x180>)
 80008e4:	f000 fb1e 	bl	8000f24 <HAL_GPIO_Init>

}
 80008e8:	bf00      	nop
 80008ea:	3730      	adds	r7, #48	; 0x30
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40020400 	.word	0x40020400
 80008f8:	40021800 	.word	0x40021800
 80008fc:	10110000 	.word	0x10110000
 8000900:	40020800 	.word	0x40020800
 8000904:	40020000 	.word	0x40020000

08000908 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000910:	2001      	movs	r0, #1
 8000912:	f002 ff1d 	bl	8003750 <osDelay>
 8000916:	e7fb      	b.n	8000910 <StartDefaultTask+0x8>

08000918 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a04      	ldr	r2, [pc, #16]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d101      	bne.n	800092e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800092a:	f000 f967 	bl	8000bfc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40001000 	.word	0x40001000

0800093c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000940:	b672      	cpsid	i
}
 8000942:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000944:	e7fe      	b.n	8000944 <Error_Handler+0x8>
	...

08000948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800094e:	4b11      	ldr	r3, [pc, #68]	; (8000994 <HAL_MspInit+0x4c>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	4a10      	ldr	r2, [pc, #64]	; (8000994 <HAL_MspInit+0x4c>)
 8000954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000958:	6413      	str	r3, [r2, #64]	; 0x40
 800095a:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <HAL_MspInit+0x4c>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000966:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <HAL_MspInit+0x4c>)
 8000968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096a:	4a0a      	ldr	r2, [pc, #40]	; (8000994 <HAL_MspInit+0x4c>)
 800096c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000970:	6453      	str	r3, [r2, #68]	; 0x44
 8000972:	4b08      	ldr	r3, [pc, #32]	; (8000994 <HAL_MspInit+0x4c>)
 8000974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000976:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	210f      	movs	r1, #15
 8000982:	f06f 0001 	mvn.w	r0, #1
 8000986:	f000 fa11 	bl	8000dac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40023800 	.word	0x40023800

08000998 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b0aa      	sub	sp, #168	; 0xa8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	2280      	movs	r2, #128	; 0x80
 80009b6:	2100      	movs	r1, #0
 80009b8:	4618      	mov	r0, r3
 80009ba:	f005 fd95 	bl	80064e8 <memset>
  if(huart->Instance==USART3)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a26      	ldr	r2, [pc, #152]	; (8000a5c <HAL_UART_MspInit+0xc4>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d144      	bne.n	8000a52 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80009c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009cc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80009ce:	2300      	movs	r3, #0
 80009d0:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009d2:	f107 0314 	add.w	r3, r7, #20
 80009d6:	4618      	mov	r0, r3
 80009d8:	f001 f9b6 	bl	8001d48 <HAL_RCCEx_PeriphCLKConfig>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80009e2:	f7ff ffab 	bl	800093c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009e6:	4b1e      	ldr	r3, [pc, #120]	; (8000a60 <HAL_UART_MspInit+0xc8>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	4a1d      	ldr	r2, [pc, #116]	; (8000a60 <HAL_UART_MspInit+0xc8>)
 80009ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009f0:	6413      	str	r3, [r2, #64]	; 0x40
 80009f2:	4b1b      	ldr	r3, [pc, #108]	; (8000a60 <HAL_UART_MspInit+0xc8>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009fa:	613b      	str	r3, [r7, #16]
 80009fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009fe:	4b18      	ldr	r3, [pc, #96]	; (8000a60 <HAL_UART_MspInit+0xc8>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a17      	ldr	r2, [pc, #92]	; (8000a60 <HAL_UART_MspInit+0xc8>)
 8000a04:	f043 0308 	orr.w	r3, r3, #8
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <HAL_UART_MspInit+0xc8>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0308 	and.w	r3, r3, #8
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a16:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2a:	2303      	movs	r3, #3
 8000a2c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a30:	2307      	movs	r3, #7
 8000a32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a36:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4809      	ldr	r0, [pc, #36]	; (8000a64 <HAL_UART_MspInit+0xcc>)
 8000a3e:	f000 fa71 	bl	8000f24 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2105      	movs	r1, #5
 8000a46:	2027      	movs	r0, #39	; 0x27
 8000a48:	f000 f9b0 	bl	8000dac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000a4c:	2027      	movs	r0, #39	; 0x27
 8000a4e:	f000 f9c9 	bl	8000de4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a52:	bf00      	nop
 8000a54:	37a8      	adds	r7, #168	; 0xa8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40004800 	.word	0x40004800
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40020c00 	.word	0x40020c00

08000a68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08c      	sub	sp, #48	; 0x30
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a70:	2300      	movs	r3, #0
 8000a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	6879      	ldr	r1, [r7, #4]
 8000a7c:	2036      	movs	r0, #54	; 0x36
 8000a7e:	f000 f995 	bl	8000dac <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a82:	2036      	movs	r0, #54	; 0x36
 8000a84:	f000 f9ae 	bl	8000de4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a88:	4b1f      	ldr	r3, [pc, #124]	; (8000b08 <HAL_InitTick+0xa0>)
 8000a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8c:	4a1e      	ldr	r2, [pc, #120]	; (8000b08 <HAL_InitTick+0xa0>)
 8000a8e:	f043 0310 	orr.w	r3, r3, #16
 8000a92:	6413      	str	r3, [r2, #64]	; 0x40
 8000a94:	4b1c      	ldr	r3, [pc, #112]	; (8000b08 <HAL_InitTick+0xa0>)
 8000a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a98:	f003 0310 	and.w	r3, r3, #16
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000aa0:	f107 0210 	add.w	r2, r7, #16
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	4611      	mov	r1, r2
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f001 f91a 	bl	8001ce4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000ab0:	f001 f8f0 	bl	8001c94 <HAL_RCC_GetPCLK1Freq>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	005b      	lsls	r3, r3, #1
 8000ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000abc:	4a13      	ldr	r2, [pc, #76]	; (8000b0c <HAL_InitTick+0xa4>)
 8000abe:	fba2 2303 	umull	r2, r3, r2, r3
 8000ac2:	0c9b      	lsrs	r3, r3, #18
 8000ac4:	3b01      	subs	r3, #1
 8000ac6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ac8:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <HAL_InitTick+0xa8>)
 8000aca:	4a12      	ldr	r2, [pc, #72]	; (8000b14 <HAL_InitTick+0xac>)
 8000acc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ace:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <HAL_InitTick+0xa8>)
 8000ad0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ad4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ad6:	4a0e      	ldr	r2, [pc, #56]	; (8000b10 <HAL_InitTick+0xa8>)
 8000ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ada:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <HAL_InitTick+0xa8>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <HAL_InitTick+0xa8>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000ae8:	4809      	ldr	r0, [pc, #36]	; (8000b10 <HAL_InitTick+0xa8>)
 8000aea:	f001 fc77 	bl	80023dc <HAL_TIM_Base_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d104      	bne.n	8000afe <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000af4:	4806      	ldr	r0, [pc, #24]	; (8000b10 <HAL_InitTick+0xa8>)
 8000af6:	f001 fcd3 	bl	80024a0 <HAL_TIM_Base_Start_IT>
 8000afa:	4603      	mov	r3, r0
 8000afc:	e000      	b.n	8000b00 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3730      	adds	r7, #48	; 0x30
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	431bde83 	.word	0x431bde83
 8000b10:	200003cc 	.word	0x200003cc
 8000b14:	40001000 	.word	0x40001000

08000b18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <NMI_Handler+0x4>

08000b1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b22:	e7fe      	b.n	8000b22 <HardFault_Handler+0x4>

08000b24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <MemManage_Handler+0x4>

08000b2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b2e:	e7fe      	b.n	8000b2e <BusFault_Handler+0x4>

08000b30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <UsageFault_Handler+0x4>

08000b36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000b48:	4802      	ldr	r0, [pc, #8]	; (8000b54 <USART3_IRQHandler+0x10>)
 8000b4a:	f001 ff75 	bl	8002a38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000344 	.word	0x20000344

08000b58 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b5c:	4802      	ldr	r0, [pc, #8]	; (8000b68 <TIM6_DAC_IRQHandler+0x10>)
 8000b5e:	f001 fd17 	bl	8002590 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	200003cc 	.word	0x200003cc

08000b6c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <SystemInit+0x20>)
 8000b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b76:	4a05      	ldr	r2, [pc, #20]	; (8000b8c <SystemInit+0x20>)
 8000b78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bc8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b94:	480d      	ldr	r0, [pc, #52]	; (8000bcc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b96:	490e      	ldr	r1, [pc, #56]	; (8000bd0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b98:	4a0e      	ldr	r2, [pc, #56]	; (8000bd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b9c:	e002      	b.n	8000ba4 <LoopCopyDataInit>

08000b9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ba2:	3304      	adds	r3, #4

08000ba4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba8:	d3f9      	bcc.n	8000b9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000baa:	4a0b      	ldr	r2, [pc, #44]	; (8000bd8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bac:	4c0b      	ldr	r4, [pc, #44]	; (8000bdc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb0:	e001      	b.n	8000bb6 <LoopFillZerobss>

08000bb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb4:	3204      	adds	r2, #4

08000bb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb8:	d3fb      	bcc.n	8000bb2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bba:	f7ff ffd7 	bl	8000b6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bbe:	f005 fc4f 	bl	8006460 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bc2:	f7ff fd13 	bl	80005ec <main>
  bx  lr    
 8000bc6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bc8:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8000bcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000bd4:	0800681c 	.word	0x0800681c
  ldr r2, =_sbss
 8000bd8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000bdc:	20004be4 	.word	0x20004be4

08000be0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000be0:	e7fe      	b.n	8000be0 <ADC_IRQHandler>

08000be2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be6:	2003      	movs	r0, #3
 8000be8:	f000 f8d5 	bl	8000d96 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bec:	200f      	movs	r0, #15
 8000bee:	f7ff ff3b 	bl	8000a68 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000bf2:	f7ff fea9 	bl	8000948 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000bf6:	2300      	movs	r3, #0
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <HAL_IncTick+0x20>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	461a      	mov	r2, r3
 8000c06:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <HAL_IncTick+0x24>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	4a04      	ldr	r2, [pc, #16]	; (8000c20 <HAL_IncTick+0x24>)
 8000c0e:	6013      	str	r3, [r2, #0]
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	20000008 	.word	0x20000008
 8000c20:	20000418 	.word	0x20000418

08000c24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  return uwTick;
 8000c28:	4b03      	ldr	r3, [pc, #12]	; (8000c38 <HAL_GetTick+0x14>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	20000418 	.word	0x20000418

08000c3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b085      	sub	sp, #20
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	f003 0307 	and.w	r3, r3, #7
 8000c4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c4c:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <__NVIC_SetPriorityGrouping+0x40>)
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c52:	68ba      	ldr	r2, [r7, #8]
 8000c54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c58:	4013      	ands	r3, r2
 8000c5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c64:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <__NVIC_SetPriorityGrouping+0x44>)
 8000c66:	4313      	orrs	r3, r2
 8000c68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c6a:	4a04      	ldr	r2, [pc, #16]	; (8000c7c <__NVIC_SetPriorityGrouping+0x40>)
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	60d3      	str	r3, [r2, #12]
}
 8000c70:	bf00      	nop
 8000c72:	3714      	adds	r7, #20
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	e000ed00 	.word	0xe000ed00
 8000c80:	05fa0000 	.word	0x05fa0000

08000c84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c88:	4b04      	ldr	r3, [pc, #16]	; (8000c9c <__NVIC_GetPriorityGrouping+0x18>)
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	0a1b      	lsrs	r3, r3, #8
 8000c8e:	f003 0307 	and.w	r3, r3, #7
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	db0b      	blt.n	8000cca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	f003 021f 	and.w	r2, r3, #31
 8000cb8:	4907      	ldr	r1, [pc, #28]	; (8000cd8 <__NVIC_EnableIRQ+0x38>)
 8000cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbe:	095b      	lsrs	r3, r3, #5
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cca:	bf00      	nop
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	e000e100 	.word	0xe000e100

08000cdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	6039      	str	r1, [r7, #0]
 8000ce6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	db0a      	blt.n	8000d06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	b2da      	uxtb	r2, r3
 8000cf4:	490c      	ldr	r1, [pc, #48]	; (8000d28 <__NVIC_SetPriority+0x4c>)
 8000cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfa:	0112      	lsls	r2, r2, #4
 8000cfc:	b2d2      	uxtb	r2, r2
 8000cfe:	440b      	add	r3, r1
 8000d00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d04:	e00a      	b.n	8000d1c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	b2da      	uxtb	r2, r3
 8000d0a:	4908      	ldr	r1, [pc, #32]	; (8000d2c <__NVIC_SetPriority+0x50>)
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	f003 030f 	and.w	r3, r3, #15
 8000d12:	3b04      	subs	r3, #4
 8000d14:	0112      	lsls	r2, r2, #4
 8000d16:	b2d2      	uxtb	r2, r2
 8000d18:	440b      	add	r3, r1
 8000d1a:	761a      	strb	r2, [r3, #24]
}
 8000d1c:	bf00      	nop
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	e000e100 	.word	0xe000e100
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b089      	sub	sp, #36	; 0x24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	f003 0307 	and.w	r3, r3, #7
 8000d42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	f1c3 0307 	rsb	r3, r3, #7
 8000d4a:	2b04      	cmp	r3, #4
 8000d4c:	bf28      	it	cs
 8000d4e:	2304      	movcs	r3, #4
 8000d50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	3304      	adds	r3, #4
 8000d56:	2b06      	cmp	r3, #6
 8000d58:	d902      	bls.n	8000d60 <NVIC_EncodePriority+0x30>
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	3b03      	subs	r3, #3
 8000d5e:	e000      	b.n	8000d62 <NVIC_EncodePriority+0x32>
 8000d60:	2300      	movs	r3, #0
 8000d62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d64:	f04f 32ff 	mov.w	r2, #4294967295
 8000d68:	69bb      	ldr	r3, [r7, #24]
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	43da      	mvns	r2, r3
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	401a      	ands	r2, r3
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d78:	f04f 31ff 	mov.w	r1, #4294967295
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d82:	43d9      	mvns	r1, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d88:	4313      	orrs	r3, r2
         );
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3724      	adds	r7, #36	; 0x24
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b082      	sub	sp, #8
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	f7ff ff4c 	bl	8000c3c <__NVIC_SetPriorityGrouping>
}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
 8000db8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dbe:	f7ff ff61 	bl	8000c84 <__NVIC_GetPriorityGrouping>
 8000dc2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dc4:	687a      	ldr	r2, [r7, #4]
 8000dc6:	68b9      	ldr	r1, [r7, #8]
 8000dc8:	6978      	ldr	r0, [r7, #20]
 8000dca:	f7ff ffb1 	bl	8000d30 <NVIC_EncodePriority>
 8000dce:	4602      	mov	r2, r0
 8000dd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dd4:	4611      	mov	r1, r2
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff ff80 	bl	8000cdc <__NVIC_SetPriority>
}
 8000ddc:	bf00      	nop
 8000dde:	3718      	adds	r7, #24
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff ff54 	bl	8000ca0 <__NVIC_EnableIRQ>
}
 8000df8:	bf00      	nop
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e0c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000e0e:	f7ff ff09 	bl	8000c24 <HAL_GetTick>
 8000e12:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d008      	beq.n	8000e32 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2280      	movs	r2, #128	; 0x80
 8000e24:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e052      	b.n	8000ed8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f022 0216 	bic.w	r2, r2, #22
 8000e40:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	695a      	ldr	r2, [r3, #20]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e50:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d103      	bne.n	8000e62 <HAL_DMA_Abort+0x62>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d007      	beq.n	8000e72 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f022 0208 	bic.w	r2, r2, #8
 8000e70:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f022 0201 	bic.w	r2, r2, #1
 8000e80:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e82:	e013      	b.n	8000eac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e84:	f7ff fece 	bl	8000c24 <HAL_GetTick>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	2b05      	cmp	r3, #5
 8000e90:	d90c      	bls.n	8000eac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2220      	movs	r2, #32
 8000e96:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2203      	movs	r2, #3
 8000ea4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	e015      	b.n	8000ed8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d1e4      	bne.n	8000e84 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ebe:	223f      	movs	r2, #63	; 0x3f
 8000ec0:	409a      	lsls	r2, r3
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8000ed6:	2300      	movs	r3, #0
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d004      	beq.n	8000efe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2280      	movs	r2, #128	; 0x80
 8000ef8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e00c      	b.n	8000f18 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2205      	movs	r2, #5
 8000f02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f022 0201 	bic.w	r2, r2, #1
 8000f14:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f16:	2300      	movs	r3, #0
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b089      	sub	sp, #36	; 0x24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000f36:	2300      	movs	r3, #0
 8000f38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61fb      	str	r3, [r7, #28]
 8000f42:	e169      	b.n	8001218 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000f44:	2201      	movs	r2, #1
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	697a      	ldr	r2, [r7, #20]
 8000f54:	4013      	ands	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	f040 8158 	bne.w	8001212 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d00b      	beq.n	8000f82 <HAL_GPIO_Init+0x5e>
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	d007      	beq.n	8000f82 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f76:	2b11      	cmp	r3, #17
 8000f78:	d003      	beq.n	8000f82 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	2b12      	cmp	r3, #18
 8000f80:	d130      	bne.n	8000fe4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	2203      	movs	r2, #3
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43db      	mvns	r3, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4013      	ands	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	68da      	ldr	r2, [r3, #12]
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fb8:	2201      	movs	r2, #1
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	091b      	lsrs	r3, r3, #4
 8000fce:	f003 0201 	and.w	r2, r3, #1
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	2203      	movs	r2, #3
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	689a      	ldr	r2, [r3, #8]
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4313      	orrs	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	2b02      	cmp	r3, #2
 800101a:	d003      	beq.n	8001024 <HAL_GPIO_Init+0x100>
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	2b12      	cmp	r3, #18
 8001022:	d123      	bne.n	800106c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	08da      	lsrs	r2, r3, #3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3208      	adds	r2, #8
 800102c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001030:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	f003 0307 	and.w	r3, r3, #7
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	220f      	movs	r2, #15
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	43db      	mvns	r3, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4013      	ands	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	691a      	ldr	r2, [r3, #16]
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4313      	orrs	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	08da      	lsrs	r2, r3, #3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	3208      	adds	r2, #8
 8001066:	69b9      	ldr	r1, [r7, #24]
 8001068:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	2203      	movs	r2, #3
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4013      	ands	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f003 0203 	and.w	r2, r3, #3
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4313      	orrs	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	f000 80b2 	beq.w	8001212 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ae:	4b60      	ldr	r3, [pc, #384]	; (8001230 <HAL_GPIO_Init+0x30c>)
 80010b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b2:	4a5f      	ldr	r2, [pc, #380]	; (8001230 <HAL_GPIO_Init+0x30c>)
 80010b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010b8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ba:	4b5d      	ldr	r3, [pc, #372]	; (8001230 <HAL_GPIO_Init+0x30c>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80010c6:	4a5b      	ldr	r2, [pc, #364]	; (8001234 <HAL_GPIO_Init+0x310>)
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	089b      	lsrs	r3, r3, #2
 80010cc:	3302      	adds	r3, #2
 80010ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	f003 0303 	and.w	r3, r3, #3
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	220f      	movs	r2, #15
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4013      	ands	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a52      	ldr	r2, [pc, #328]	; (8001238 <HAL_GPIO_Init+0x314>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d02b      	beq.n	800114a <HAL_GPIO_Init+0x226>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a51      	ldr	r2, [pc, #324]	; (800123c <HAL_GPIO_Init+0x318>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d025      	beq.n	8001146 <HAL_GPIO_Init+0x222>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a50      	ldr	r2, [pc, #320]	; (8001240 <HAL_GPIO_Init+0x31c>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d01f      	beq.n	8001142 <HAL_GPIO_Init+0x21e>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a4f      	ldr	r2, [pc, #316]	; (8001244 <HAL_GPIO_Init+0x320>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d019      	beq.n	800113e <HAL_GPIO_Init+0x21a>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a4e      	ldr	r2, [pc, #312]	; (8001248 <HAL_GPIO_Init+0x324>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d013      	beq.n	800113a <HAL_GPIO_Init+0x216>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a4d      	ldr	r2, [pc, #308]	; (800124c <HAL_GPIO_Init+0x328>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d00d      	beq.n	8001136 <HAL_GPIO_Init+0x212>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a4c      	ldr	r2, [pc, #304]	; (8001250 <HAL_GPIO_Init+0x32c>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d007      	beq.n	8001132 <HAL_GPIO_Init+0x20e>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a4b      	ldr	r2, [pc, #300]	; (8001254 <HAL_GPIO_Init+0x330>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d101      	bne.n	800112e <HAL_GPIO_Init+0x20a>
 800112a:	2307      	movs	r3, #7
 800112c:	e00e      	b.n	800114c <HAL_GPIO_Init+0x228>
 800112e:	2308      	movs	r3, #8
 8001130:	e00c      	b.n	800114c <HAL_GPIO_Init+0x228>
 8001132:	2306      	movs	r3, #6
 8001134:	e00a      	b.n	800114c <HAL_GPIO_Init+0x228>
 8001136:	2305      	movs	r3, #5
 8001138:	e008      	b.n	800114c <HAL_GPIO_Init+0x228>
 800113a:	2304      	movs	r3, #4
 800113c:	e006      	b.n	800114c <HAL_GPIO_Init+0x228>
 800113e:	2303      	movs	r3, #3
 8001140:	e004      	b.n	800114c <HAL_GPIO_Init+0x228>
 8001142:	2302      	movs	r3, #2
 8001144:	e002      	b.n	800114c <HAL_GPIO_Init+0x228>
 8001146:	2301      	movs	r3, #1
 8001148:	e000      	b.n	800114c <HAL_GPIO_Init+0x228>
 800114a:	2300      	movs	r3, #0
 800114c:	69fa      	ldr	r2, [r7, #28]
 800114e:	f002 0203 	and.w	r2, r2, #3
 8001152:	0092      	lsls	r2, r2, #2
 8001154:	4093      	lsls	r3, r2
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4313      	orrs	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800115c:	4935      	ldr	r1, [pc, #212]	; (8001234 <HAL_GPIO_Init+0x310>)
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	089b      	lsrs	r3, r3, #2
 8001162:	3302      	adds	r3, #2
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800116a:	4b3b      	ldr	r3, [pc, #236]	; (8001258 <HAL_GPIO_Init+0x334>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	43db      	mvns	r3, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4013      	ands	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d003      	beq.n	800118e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	4313      	orrs	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800118e:	4a32      	ldr	r2, [pc, #200]	; (8001258 <HAL_GPIO_Init+0x334>)
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001194:	4b30      	ldr	r3, [pc, #192]	; (8001258 <HAL_GPIO_Init+0x334>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	43db      	mvns	r3, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4013      	ands	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d003      	beq.n	80011b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011b8:	4a27      	ldr	r2, [pc, #156]	; (8001258 <HAL_GPIO_Init+0x334>)
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011be:	4b26      	ldr	r3, [pc, #152]	; (8001258 <HAL_GPIO_Init+0x334>)
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	43db      	mvns	r3, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4013      	ands	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d003      	beq.n	80011e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	4313      	orrs	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011e2:	4a1d      	ldr	r2, [pc, #116]	; (8001258 <HAL_GPIO_Init+0x334>)
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011e8:	4b1b      	ldr	r3, [pc, #108]	; (8001258 <HAL_GPIO_Init+0x334>)
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	43db      	mvns	r3, r3
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	4013      	ands	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d003      	beq.n	800120c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	4313      	orrs	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800120c:	4a12      	ldr	r2, [pc, #72]	; (8001258 <HAL_GPIO_Init+0x334>)
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	3301      	adds	r3, #1
 8001216:	61fb      	str	r3, [r7, #28]
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	2b0f      	cmp	r3, #15
 800121c:	f67f ae92 	bls.w	8000f44 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001220:	bf00      	nop
 8001222:	bf00      	nop
 8001224:	3724      	adds	r7, #36	; 0x24
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	40023800 	.word	0x40023800
 8001234:	40013800 	.word	0x40013800
 8001238:	40020000 	.word	0x40020000
 800123c:	40020400 	.word	0x40020400
 8001240:	40020800 	.word	0x40020800
 8001244:	40020c00 	.word	0x40020c00
 8001248:	40021000 	.word	0x40021000
 800124c:	40021400 	.word	0x40021400
 8001250:	40021800 	.word	0x40021800
 8001254:	40021c00 	.word	0x40021c00
 8001258:	40013c00 	.word	0x40013c00

0800125c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	460b      	mov	r3, r1
 8001266:	807b      	strh	r3, [r7, #2]
 8001268:	4613      	mov	r3, r2
 800126a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800126c:	787b      	ldrb	r3, [r7, #1]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001272:	887a      	ldrh	r2, [r7, #2]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001278:	e003      	b.n	8001282 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800127a:	887b      	ldrh	r3, [r7, #2]
 800127c:	041a      	lsls	r2, r3, #16
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	619a      	str	r2, [r3, #24]
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
	...

08001290 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001294:	4b05      	ldr	r3, [pc, #20]	; (80012ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a04      	ldr	r2, [pc, #16]	; (80012ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 800129a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800129e:	6013      	str	r3, [r2, #0]
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	40007000 	.word	0x40007000

080012b0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80012ba:	4b23      	ldr	r3, [pc, #140]	; (8001348 <HAL_PWREx_EnableOverDrive+0x98>)
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	4a22      	ldr	r2, [pc, #136]	; (8001348 <HAL_PWREx_EnableOverDrive+0x98>)
 80012c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c4:	6413      	str	r3, [r2, #64]	; 0x40
 80012c6:	4b20      	ldr	r3, [pc, #128]	; (8001348 <HAL_PWREx_EnableOverDrive+0x98>)
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ce:	603b      	str	r3, [r7, #0]
 80012d0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80012d2:	4b1e      	ldr	r3, [pc, #120]	; (800134c <HAL_PWREx_EnableOverDrive+0x9c>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a1d      	ldr	r2, [pc, #116]	; (800134c <HAL_PWREx_EnableOverDrive+0x9c>)
 80012d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012dc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012de:	f7ff fca1 	bl	8000c24 <HAL_GetTick>
 80012e2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80012e4:	e009      	b.n	80012fa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80012e6:	f7ff fc9d 	bl	8000c24 <HAL_GetTick>
 80012ea:	4602      	mov	r2, r0
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012f4:	d901      	bls.n	80012fa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e022      	b.n	8001340 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80012fa:	4b14      	ldr	r3, [pc, #80]	; (800134c <HAL_PWREx_EnableOverDrive+0x9c>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001302:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001306:	d1ee      	bne.n	80012e6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001308:	4b10      	ldr	r3, [pc, #64]	; (800134c <HAL_PWREx_EnableOverDrive+0x9c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a0f      	ldr	r2, [pc, #60]	; (800134c <HAL_PWREx_EnableOverDrive+0x9c>)
 800130e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001312:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001314:	f7ff fc86 	bl	8000c24 <HAL_GetTick>
 8001318:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800131a:	e009      	b.n	8001330 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800131c:	f7ff fc82 	bl	8000c24 <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800132a:	d901      	bls.n	8001330 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e007      	b.n	8001340 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001330:	4b06      	ldr	r3, [pc, #24]	; (800134c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001338:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800133c:	d1ee      	bne.n	800131c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800133e:	2300      	movs	r3, #0
}
 8001340:	4618      	mov	r0, r3
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40023800 	.word	0x40023800
 800134c:	40007000 	.word	0x40007000

08001350 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001358:	2300      	movs	r3, #0
 800135a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d101      	bne.n	8001366 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e291      	b.n	800188a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	2b00      	cmp	r3, #0
 8001370:	f000 8087 	beq.w	8001482 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001374:	4b96      	ldr	r3, [pc, #600]	; (80015d0 <HAL_RCC_OscConfig+0x280>)
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	f003 030c 	and.w	r3, r3, #12
 800137c:	2b04      	cmp	r3, #4
 800137e:	d00c      	beq.n	800139a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001380:	4b93      	ldr	r3, [pc, #588]	; (80015d0 <HAL_RCC_OscConfig+0x280>)
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	f003 030c 	and.w	r3, r3, #12
 8001388:	2b08      	cmp	r3, #8
 800138a:	d112      	bne.n	80013b2 <HAL_RCC_OscConfig+0x62>
 800138c:	4b90      	ldr	r3, [pc, #576]	; (80015d0 <HAL_RCC_OscConfig+0x280>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001394:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001398:	d10b      	bne.n	80013b2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800139a:	4b8d      	ldr	r3, [pc, #564]	; (80015d0 <HAL_RCC_OscConfig+0x280>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d06c      	beq.n	8001480 <HAL_RCC_OscConfig+0x130>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d168      	bne.n	8001480 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e26b      	b.n	800188a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013ba:	d106      	bne.n	80013ca <HAL_RCC_OscConfig+0x7a>
 80013bc:	4b84      	ldr	r3, [pc, #528]	; (80015d0 <HAL_RCC_OscConfig+0x280>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a83      	ldr	r2, [pc, #524]	; (80015d0 <HAL_RCC_OscConfig+0x280>)
 80013c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013c6:	6013      	str	r3, [r2, #0]
 80013c8:	e02e      	b.n	8001428 <HAL_RCC_OscConfig+0xd8>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d10c      	bne.n	80013ec <HAL_RCC_OscConfig+0x9c>
 80013d2:	4b7f      	ldr	r3, [pc, #508]	; (80015d0 <HAL_RCC_OscConfig+0x280>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a7e      	ldr	r2, [pc, #504]	; (80015d0 <HAL_RCC_OscConfig+0x280>)
 80013d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013dc:	6013      	str	r3, [r2, #0]
 80013de:	4b7c      	ldr	r3, [pc, #496]	; (80015d0 <HAL_RCC_OscConfig+0x280>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a7b      	ldr	r2, [pc, #492]	; (80015d0 <HAL_RCC_OscConfig+0x280>)
 80013e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013e8:	6013      	str	r3, [r2, #0]
 80013ea:	e01d      	b.n	8001428 <HAL_RCC_OscConfig+0xd8>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013f4:	d10c      	bne.n	8001410 <HAL_RCC_OscConfig+0xc0>
 80013f6:	4b76      	ldr	r3, [pc, #472]	; (80015d0 <HAL_RCC_OscConfig+0x280>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a75      	ldr	r2, [pc, #468]	; (80015d0 <HAL_RCC_OscConfig+0x280>)
 80013fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001400:	6013      	str	r3, [r2, #0]
 8001402:	4b73      	ldr	r3, [pc, #460]	; (80015d0 <HAL_RCC_OscConfig+0x280>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a72      	ldr	r2, [pc, #456]	; (80015d0 <HAL_RCC_OscConfig+0x280>)
 8001408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800140c:	6013      	str	r3, [r2, #0]
 800140e:	e00b      	b.n	8001428 <HAL_RCC_OscConfig+0xd8>
 8001410:	4b6f      	ldr	r3, [pc, #444]	; (80015d0 <HAL_RCC_OscConfig+0x280>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a6e      	ldr	r2, [pc, #440]	; (80015d0 <HAL_RCC_OscConfig+0x280>)
 8001416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800141a:	6013      	str	r3, [r2, #0]
 800141c:	4b6c      	ldr	r3, [pc, #432]	; (80015d0 <HAL_RCC_OscConfig+0x280>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a6b      	ldr	r2, [pc, #428]	; (80015d0 <HAL_RCC_OscConfig+0x280>)
 8001422:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001426:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d013      	beq.n	8001458 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001430:	f7ff fbf8 	bl	8000c24 <HAL_GetTick>
 8001434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001436:	e008      	b.n	800144a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001438:	f7ff fbf4 	bl	8000c24 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b64      	cmp	r3, #100	; 0x64
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e21f      	b.n	800188a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800144a:	4b61      	ldr	r3, [pc, #388]	; (80015d0 <HAL_RCC_OscConfig+0x280>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d0f0      	beq.n	8001438 <HAL_RCC_OscConfig+0xe8>
 8001456:	e014      	b.n	8001482 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001458:	f7ff fbe4 	bl	8000c24 <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001460:	f7ff fbe0 	bl	8000c24 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b64      	cmp	r3, #100	; 0x64
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e20b      	b.n	800188a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001472:	4b57      	ldr	r3, [pc, #348]	; (80015d0 <HAL_RCC_OscConfig+0x280>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1f0      	bne.n	8001460 <HAL_RCC_OscConfig+0x110>
 800147e:	e000      	b.n	8001482 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001480:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d069      	beq.n	8001562 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800148e:	4b50      	ldr	r3, [pc, #320]	; (80015d0 <HAL_RCC_OscConfig+0x280>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f003 030c 	and.w	r3, r3, #12
 8001496:	2b00      	cmp	r3, #0
 8001498:	d00b      	beq.n	80014b2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800149a:	4b4d      	ldr	r3, [pc, #308]	; (80015d0 <HAL_RCC_OscConfig+0x280>)
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	f003 030c 	and.w	r3, r3, #12
 80014a2:	2b08      	cmp	r3, #8
 80014a4:	d11c      	bne.n	80014e0 <HAL_RCC_OscConfig+0x190>
 80014a6:	4b4a      	ldr	r3, [pc, #296]	; (80015d0 <HAL_RCC_OscConfig+0x280>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d116      	bne.n	80014e0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014b2:	4b47      	ldr	r3, [pc, #284]	; (80015d0 <HAL_RCC_OscConfig+0x280>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d005      	beq.n	80014ca <HAL_RCC_OscConfig+0x17a>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d001      	beq.n	80014ca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e1df      	b.n	800188a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ca:	4b41      	ldr	r3, [pc, #260]	; (80015d0 <HAL_RCC_OscConfig+0x280>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	691b      	ldr	r3, [r3, #16]
 80014d6:	00db      	lsls	r3, r3, #3
 80014d8:	493d      	ldr	r1, [pc, #244]	; (80015d0 <HAL_RCC_OscConfig+0x280>)
 80014da:	4313      	orrs	r3, r2
 80014dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014de:	e040      	b.n	8001562 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d023      	beq.n	8001530 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014e8:	4b39      	ldr	r3, [pc, #228]	; (80015d0 <HAL_RCC_OscConfig+0x280>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a38      	ldr	r2, [pc, #224]	; (80015d0 <HAL_RCC_OscConfig+0x280>)
 80014ee:	f043 0301 	orr.w	r3, r3, #1
 80014f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f4:	f7ff fb96 	bl	8000c24 <HAL_GetTick>
 80014f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014fc:	f7ff fb92 	bl	8000c24 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b02      	cmp	r3, #2
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e1bd      	b.n	800188a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800150e:	4b30      	ldr	r3, [pc, #192]	; (80015d0 <HAL_RCC_OscConfig+0x280>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d0f0      	beq.n	80014fc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800151a:	4b2d      	ldr	r3, [pc, #180]	; (80015d0 <HAL_RCC_OscConfig+0x280>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	691b      	ldr	r3, [r3, #16]
 8001526:	00db      	lsls	r3, r3, #3
 8001528:	4929      	ldr	r1, [pc, #164]	; (80015d0 <HAL_RCC_OscConfig+0x280>)
 800152a:	4313      	orrs	r3, r2
 800152c:	600b      	str	r3, [r1, #0]
 800152e:	e018      	b.n	8001562 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001530:	4b27      	ldr	r3, [pc, #156]	; (80015d0 <HAL_RCC_OscConfig+0x280>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a26      	ldr	r2, [pc, #152]	; (80015d0 <HAL_RCC_OscConfig+0x280>)
 8001536:	f023 0301 	bic.w	r3, r3, #1
 800153a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800153c:	f7ff fb72 	bl	8000c24 <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001544:	f7ff fb6e 	bl	8000c24 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e199      	b.n	800188a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001556:	4b1e      	ldr	r3, [pc, #120]	; (80015d0 <HAL_RCC_OscConfig+0x280>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1f0      	bne.n	8001544 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0308 	and.w	r3, r3, #8
 800156a:	2b00      	cmp	r3, #0
 800156c:	d038      	beq.n	80015e0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d019      	beq.n	80015aa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001576:	4b16      	ldr	r3, [pc, #88]	; (80015d0 <HAL_RCC_OscConfig+0x280>)
 8001578:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800157a:	4a15      	ldr	r2, [pc, #84]	; (80015d0 <HAL_RCC_OscConfig+0x280>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001582:	f7ff fb4f 	bl	8000c24 <HAL_GetTick>
 8001586:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001588:	e008      	b.n	800159c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800158a:	f7ff fb4b 	bl	8000c24 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e176      	b.n	800188a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800159c:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <HAL_RCC_OscConfig+0x280>)
 800159e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d0f0      	beq.n	800158a <HAL_RCC_OscConfig+0x23a>
 80015a8:	e01a      	b.n	80015e0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015aa:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <HAL_RCC_OscConfig+0x280>)
 80015ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015ae:	4a08      	ldr	r2, [pc, #32]	; (80015d0 <HAL_RCC_OscConfig+0x280>)
 80015b0:	f023 0301 	bic.w	r3, r3, #1
 80015b4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b6:	f7ff fb35 	bl	8000c24 <HAL_GetTick>
 80015ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015bc:	e00a      	b.n	80015d4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015be:	f7ff fb31 	bl	8000c24 <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d903      	bls.n	80015d4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e15c      	b.n	800188a <HAL_RCC_OscConfig+0x53a>
 80015d0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015d4:	4b91      	ldr	r3, [pc, #580]	; (800181c <HAL_RCC_OscConfig+0x4cc>)
 80015d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015d8:	f003 0302 	and.w	r3, r3, #2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d1ee      	bne.n	80015be <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0304 	and.w	r3, r3, #4
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	f000 80a4 	beq.w	8001736 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ee:	4b8b      	ldr	r3, [pc, #556]	; (800181c <HAL_RCC_OscConfig+0x4cc>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d10d      	bne.n	8001616 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80015fa:	4b88      	ldr	r3, [pc, #544]	; (800181c <HAL_RCC_OscConfig+0x4cc>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	4a87      	ldr	r2, [pc, #540]	; (800181c <HAL_RCC_OscConfig+0x4cc>)
 8001600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001604:	6413      	str	r3, [r2, #64]	; 0x40
 8001606:	4b85      	ldr	r3, [pc, #532]	; (800181c <HAL_RCC_OscConfig+0x4cc>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001612:	2301      	movs	r3, #1
 8001614:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001616:	4b82      	ldr	r3, [pc, #520]	; (8001820 <HAL_RCC_OscConfig+0x4d0>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800161e:	2b00      	cmp	r3, #0
 8001620:	d118      	bne.n	8001654 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001622:	4b7f      	ldr	r3, [pc, #508]	; (8001820 <HAL_RCC_OscConfig+0x4d0>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a7e      	ldr	r2, [pc, #504]	; (8001820 <HAL_RCC_OscConfig+0x4d0>)
 8001628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800162c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800162e:	f7ff faf9 	bl	8000c24 <HAL_GetTick>
 8001632:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001634:	e008      	b.n	8001648 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001636:	f7ff faf5 	bl	8000c24 <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	2b64      	cmp	r3, #100	; 0x64
 8001642:	d901      	bls.n	8001648 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e120      	b.n	800188a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001648:	4b75      	ldr	r3, [pc, #468]	; (8001820 <HAL_RCC_OscConfig+0x4d0>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001650:	2b00      	cmp	r3, #0
 8001652:	d0f0      	beq.n	8001636 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d106      	bne.n	800166a <HAL_RCC_OscConfig+0x31a>
 800165c:	4b6f      	ldr	r3, [pc, #444]	; (800181c <HAL_RCC_OscConfig+0x4cc>)
 800165e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001660:	4a6e      	ldr	r2, [pc, #440]	; (800181c <HAL_RCC_OscConfig+0x4cc>)
 8001662:	f043 0301 	orr.w	r3, r3, #1
 8001666:	6713      	str	r3, [r2, #112]	; 0x70
 8001668:	e02d      	b.n	80016c6 <HAL_RCC_OscConfig+0x376>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d10c      	bne.n	800168c <HAL_RCC_OscConfig+0x33c>
 8001672:	4b6a      	ldr	r3, [pc, #424]	; (800181c <HAL_RCC_OscConfig+0x4cc>)
 8001674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001676:	4a69      	ldr	r2, [pc, #420]	; (800181c <HAL_RCC_OscConfig+0x4cc>)
 8001678:	f023 0301 	bic.w	r3, r3, #1
 800167c:	6713      	str	r3, [r2, #112]	; 0x70
 800167e:	4b67      	ldr	r3, [pc, #412]	; (800181c <HAL_RCC_OscConfig+0x4cc>)
 8001680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001682:	4a66      	ldr	r2, [pc, #408]	; (800181c <HAL_RCC_OscConfig+0x4cc>)
 8001684:	f023 0304 	bic.w	r3, r3, #4
 8001688:	6713      	str	r3, [r2, #112]	; 0x70
 800168a:	e01c      	b.n	80016c6 <HAL_RCC_OscConfig+0x376>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	2b05      	cmp	r3, #5
 8001692:	d10c      	bne.n	80016ae <HAL_RCC_OscConfig+0x35e>
 8001694:	4b61      	ldr	r3, [pc, #388]	; (800181c <HAL_RCC_OscConfig+0x4cc>)
 8001696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001698:	4a60      	ldr	r2, [pc, #384]	; (800181c <HAL_RCC_OscConfig+0x4cc>)
 800169a:	f043 0304 	orr.w	r3, r3, #4
 800169e:	6713      	str	r3, [r2, #112]	; 0x70
 80016a0:	4b5e      	ldr	r3, [pc, #376]	; (800181c <HAL_RCC_OscConfig+0x4cc>)
 80016a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a4:	4a5d      	ldr	r2, [pc, #372]	; (800181c <HAL_RCC_OscConfig+0x4cc>)
 80016a6:	f043 0301 	orr.w	r3, r3, #1
 80016aa:	6713      	str	r3, [r2, #112]	; 0x70
 80016ac:	e00b      	b.n	80016c6 <HAL_RCC_OscConfig+0x376>
 80016ae:	4b5b      	ldr	r3, [pc, #364]	; (800181c <HAL_RCC_OscConfig+0x4cc>)
 80016b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b2:	4a5a      	ldr	r2, [pc, #360]	; (800181c <HAL_RCC_OscConfig+0x4cc>)
 80016b4:	f023 0301 	bic.w	r3, r3, #1
 80016b8:	6713      	str	r3, [r2, #112]	; 0x70
 80016ba:	4b58      	ldr	r3, [pc, #352]	; (800181c <HAL_RCC_OscConfig+0x4cc>)
 80016bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016be:	4a57      	ldr	r2, [pc, #348]	; (800181c <HAL_RCC_OscConfig+0x4cc>)
 80016c0:	f023 0304 	bic.w	r3, r3, #4
 80016c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d015      	beq.n	80016fa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ce:	f7ff faa9 	bl	8000c24 <HAL_GetTick>
 80016d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d4:	e00a      	b.n	80016ec <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016d6:	f7ff faa5 	bl	8000c24 <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e0ce      	b.n	800188a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ec:	4b4b      	ldr	r3, [pc, #300]	; (800181c <HAL_RCC_OscConfig+0x4cc>)
 80016ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0ee      	beq.n	80016d6 <HAL_RCC_OscConfig+0x386>
 80016f8:	e014      	b.n	8001724 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016fa:	f7ff fa93 	bl	8000c24 <HAL_GetTick>
 80016fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001700:	e00a      	b.n	8001718 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001702:	f7ff fa8f 	bl	8000c24 <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001710:	4293      	cmp	r3, r2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e0b8      	b.n	800188a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001718:	4b40      	ldr	r3, [pc, #256]	; (800181c <HAL_RCC_OscConfig+0x4cc>)
 800171a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800171c:	f003 0302 	and.w	r3, r3, #2
 8001720:	2b00      	cmp	r3, #0
 8001722:	d1ee      	bne.n	8001702 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001724:	7dfb      	ldrb	r3, [r7, #23]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d105      	bne.n	8001736 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800172a:	4b3c      	ldr	r3, [pc, #240]	; (800181c <HAL_RCC_OscConfig+0x4cc>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	4a3b      	ldr	r2, [pc, #236]	; (800181c <HAL_RCC_OscConfig+0x4cc>)
 8001730:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001734:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	2b00      	cmp	r3, #0
 800173c:	f000 80a4 	beq.w	8001888 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001740:	4b36      	ldr	r3, [pc, #216]	; (800181c <HAL_RCC_OscConfig+0x4cc>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f003 030c 	and.w	r3, r3, #12
 8001748:	2b08      	cmp	r3, #8
 800174a:	d06b      	beq.n	8001824 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	2b02      	cmp	r3, #2
 8001752:	d149      	bne.n	80017e8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001754:	4b31      	ldr	r3, [pc, #196]	; (800181c <HAL_RCC_OscConfig+0x4cc>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a30      	ldr	r2, [pc, #192]	; (800181c <HAL_RCC_OscConfig+0x4cc>)
 800175a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800175e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001760:	f7ff fa60 	bl	8000c24 <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001768:	f7ff fa5c 	bl	8000c24 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b02      	cmp	r3, #2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e087      	b.n	800188a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800177a:	4b28      	ldr	r3, [pc, #160]	; (800181c <HAL_RCC_OscConfig+0x4cc>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1f0      	bne.n	8001768 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	69da      	ldr	r2, [r3, #28]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a1b      	ldr	r3, [r3, #32]
 800178e:	431a      	orrs	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001794:	019b      	lsls	r3, r3, #6
 8001796:	431a      	orrs	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179c:	085b      	lsrs	r3, r3, #1
 800179e:	3b01      	subs	r3, #1
 80017a0:	041b      	lsls	r3, r3, #16
 80017a2:	431a      	orrs	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a8:	061b      	lsls	r3, r3, #24
 80017aa:	4313      	orrs	r3, r2
 80017ac:	4a1b      	ldr	r2, [pc, #108]	; (800181c <HAL_RCC_OscConfig+0x4cc>)
 80017ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80017b2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017b4:	4b19      	ldr	r3, [pc, #100]	; (800181c <HAL_RCC_OscConfig+0x4cc>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a18      	ldr	r2, [pc, #96]	; (800181c <HAL_RCC_OscConfig+0x4cc>)
 80017ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c0:	f7ff fa30 	bl	8000c24 <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017c8:	f7ff fa2c 	bl	8000c24 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e057      	b.n	800188a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017da:	4b10      	ldr	r3, [pc, #64]	; (800181c <HAL_RCC_OscConfig+0x4cc>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d0f0      	beq.n	80017c8 <HAL_RCC_OscConfig+0x478>
 80017e6:	e04f      	b.n	8001888 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e8:	4b0c      	ldr	r3, [pc, #48]	; (800181c <HAL_RCC_OscConfig+0x4cc>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a0b      	ldr	r2, [pc, #44]	; (800181c <HAL_RCC_OscConfig+0x4cc>)
 80017ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f4:	f7ff fa16 	bl	8000c24 <HAL_GetTick>
 80017f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017fc:	f7ff fa12 	bl	8000c24 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e03d      	b.n	800188a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800180e:	4b03      	ldr	r3, [pc, #12]	; (800181c <HAL_RCC_OscConfig+0x4cc>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1f0      	bne.n	80017fc <HAL_RCC_OscConfig+0x4ac>
 800181a:	e035      	b.n	8001888 <HAL_RCC_OscConfig+0x538>
 800181c:	40023800 	.word	0x40023800
 8001820:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001824:	4b1b      	ldr	r3, [pc, #108]	; (8001894 <HAL_RCC_OscConfig+0x544>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d028      	beq.n	8001884 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800183c:	429a      	cmp	r2, r3
 800183e:	d121      	bne.n	8001884 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800184a:	429a      	cmp	r2, r3
 800184c:	d11a      	bne.n	8001884 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001854:	4013      	ands	r3, r2
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800185a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800185c:	4293      	cmp	r3, r2
 800185e:	d111      	bne.n	8001884 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800186a:	085b      	lsrs	r3, r3, #1
 800186c:	3b01      	subs	r3, #1
 800186e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001870:	429a      	cmp	r2, r3
 8001872:	d107      	bne.n	8001884 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001880:	429a      	cmp	r2, r3
 8001882:	d001      	beq.n	8001888 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e000      	b.n	800188a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3718      	adds	r7, #24
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40023800 	.word	0x40023800

08001898 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80018a2:	2300      	movs	r3, #0
 80018a4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d101      	bne.n	80018b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e0d0      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018b0:	4b6a      	ldr	r3, [pc, #424]	; (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 030f 	and.w	r3, r3, #15
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d910      	bls.n	80018e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018be:	4b67      	ldr	r3, [pc, #412]	; (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f023 020f 	bic.w	r2, r3, #15
 80018c6:	4965      	ldr	r1, [pc, #404]	; (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ce:	4b63      	ldr	r3, [pc, #396]	; (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 030f 	and.w	r3, r3, #15
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d001      	beq.n	80018e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e0b8      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d020      	beq.n	800192e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0304 	and.w	r3, r3, #4
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d005      	beq.n	8001904 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018f8:	4b59      	ldr	r3, [pc, #356]	; (8001a60 <HAL_RCC_ClockConfig+0x1c8>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	4a58      	ldr	r2, [pc, #352]	; (8001a60 <HAL_RCC_ClockConfig+0x1c8>)
 80018fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001902:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0308 	and.w	r3, r3, #8
 800190c:	2b00      	cmp	r3, #0
 800190e:	d005      	beq.n	800191c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001910:	4b53      	ldr	r3, [pc, #332]	; (8001a60 <HAL_RCC_ClockConfig+0x1c8>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	4a52      	ldr	r2, [pc, #328]	; (8001a60 <HAL_RCC_ClockConfig+0x1c8>)
 8001916:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800191a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800191c:	4b50      	ldr	r3, [pc, #320]	; (8001a60 <HAL_RCC_ClockConfig+0x1c8>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	494d      	ldr	r1, [pc, #308]	; (8001a60 <HAL_RCC_ClockConfig+0x1c8>)
 800192a:	4313      	orrs	r3, r2
 800192c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	2b00      	cmp	r3, #0
 8001938:	d040      	beq.n	80019bc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d107      	bne.n	8001952 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001942:	4b47      	ldr	r3, [pc, #284]	; (8001a60 <HAL_RCC_ClockConfig+0x1c8>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d115      	bne.n	800197a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e07f      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	2b02      	cmp	r3, #2
 8001958:	d107      	bne.n	800196a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800195a:	4b41      	ldr	r3, [pc, #260]	; (8001a60 <HAL_RCC_ClockConfig+0x1c8>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d109      	bne.n	800197a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e073      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800196a:	4b3d      	ldr	r3, [pc, #244]	; (8001a60 <HAL_RCC_ClockConfig+0x1c8>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e06b      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800197a:	4b39      	ldr	r3, [pc, #228]	; (8001a60 <HAL_RCC_ClockConfig+0x1c8>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f023 0203 	bic.w	r2, r3, #3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	4936      	ldr	r1, [pc, #216]	; (8001a60 <HAL_RCC_ClockConfig+0x1c8>)
 8001988:	4313      	orrs	r3, r2
 800198a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800198c:	f7ff f94a 	bl	8000c24 <HAL_GetTick>
 8001990:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001992:	e00a      	b.n	80019aa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001994:	f7ff f946 	bl	8000c24 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e053      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019aa:	4b2d      	ldr	r3, [pc, #180]	; (8001a60 <HAL_RCC_ClockConfig+0x1c8>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 020c 	and.w	r2, r3, #12
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d1eb      	bne.n	8001994 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019bc:	4b27      	ldr	r3, [pc, #156]	; (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 030f 	and.w	r3, r3, #15
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d210      	bcs.n	80019ec <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ca:	4b24      	ldr	r3, [pc, #144]	; (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f023 020f 	bic.w	r2, r3, #15
 80019d2:	4922      	ldr	r1, [pc, #136]	; (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019da:	4b20      	ldr	r3, [pc, #128]	; (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 030f 	and.w	r3, r3, #15
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d001      	beq.n	80019ec <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e032      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d008      	beq.n	8001a0a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019f8:	4b19      	ldr	r3, [pc, #100]	; (8001a60 <HAL_RCC_ClockConfig+0x1c8>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	4916      	ldr	r1, [pc, #88]	; (8001a60 <HAL_RCC_ClockConfig+0x1c8>)
 8001a06:	4313      	orrs	r3, r2
 8001a08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0308 	and.w	r3, r3, #8
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d009      	beq.n	8001a2a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a16:	4b12      	ldr	r3, [pc, #72]	; (8001a60 <HAL_RCC_ClockConfig+0x1c8>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	490e      	ldr	r1, [pc, #56]	; (8001a60 <HAL_RCC_ClockConfig+0x1c8>)
 8001a26:	4313      	orrs	r3, r2
 8001a28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a2a:	f000 f821 	bl	8001a70 <HAL_RCC_GetSysClockFreq>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	4b0b      	ldr	r3, [pc, #44]	; (8001a60 <HAL_RCC_ClockConfig+0x1c8>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	091b      	lsrs	r3, r3, #4
 8001a36:	f003 030f 	and.w	r3, r3, #15
 8001a3a:	490a      	ldr	r1, [pc, #40]	; (8001a64 <HAL_RCC_ClockConfig+0x1cc>)
 8001a3c:	5ccb      	ldrb	r3, [r1, r3]
 8001a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a42:	4a09      	ldr	r2, [pc, #36]	; (8001a68 <HAL_RCC_ClockConfig+0x1d0>)
 8001a44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a46:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <HAL_RCC_ClockConfig+0x1d4>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff f80c 	bl	8000a68 <HAL_InitTick>

  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40023c00 	.word	0x40023c00
 8001a60:	40023800 	.word	0x40023800
 8001a64:	08006780 	.word	0x08006780
 8001a68:	20000000 	.word	0x20000000
 8001a6c:	20000004 	.word	0x20000004

08001a70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a74:	b094      	sub	sp, #80	; 0x50
 8001a76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	647b      	str	r3, [r7, #68]	; 0x44
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a80:	2300      	movs	r3, #0
 8001a82:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a88:	4b79      	ldr	r3, [pc, #484]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f003 030c 	and.w	r3, r3, #12
 8001a90:	2b08      	cmp	r3, #8
 8001a92:	d00d      	beq.n	8001ab0 <HAL_RCC_GetSysClockFreq+0x40>
 8001a94:	2b08      	cmp	r3, #8
 8001a96:	f200 80e1 	bhi.w	8001c5c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d002      	beq.n	8001aa4 <HAL_RCC_GetSysClockFreq+0x34>
 8001a9e:	2b04      	cmp	r3, #4
 8001aa0:	d003      	beq.n	8001aaa <HAL_RCC_GetSysClockFreq+0x3a>
 8001aa2:	e0db      	b.n	8001c5c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001aa4:	4b73      	ldr	r3, [pc, #460]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x204>)
 8001aa6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001aa8:	e0db      	b.n	8001c62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001aaa:	4b73      	ldr	r3, [pc, #460]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x208>)
 8001aac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001aae:	e0d8      	b.n	8001c62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ab0:	4b6f      	ldr	r3, [pc, #444]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ab8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001aba:	4b6d      	ldr	r3, [pc, #436]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d063      	beq.n	8001b8e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ac6:	4b6a      	ldr	r3, [pc, #424]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	099b      	lsrs	r3, r3, #6
 8001acc:	2200      	movs	r2, #0
 8001ace:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ad0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ad4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ad8:	633b      	str	r3, [r7, #48]	; 0x30
 8001ada:	2300      	movs	r3, #0
 8001adc:	637b      	str	r3, [r7, #52]	; 0x34
 8001ade:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001ae2:	4622      	mov	r2, r4
 8001ae4:	462b      	mov	r3, r5
 8001ae6:	f04f 0000 	mov.w	r0, #0
 8001aea:	f04f 0100 	mov.w	r1, #0
 8001aee:	0159      	lsls	r1, r3, #5
 8001af0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001af4:	0150      	lsls	r0, r2, #5
 8001af6:	4602      	mov	r2, r0
 8001af8:	460b      	mov	r3, r1
 8001afa:	4621      	mov	r1, r4
 8001afc:	1a51      	subs	r1, r2, r1
 8001afe:	6139      	str	r1, [r7, #16]
 8001b00:	4629      	mov	r1, r5
 8001b02:	eb63 0301 	sbc.w	r3, r3, r1
 8001b06:	617b      	str	r3, [r7, #20]
 8001b08:	f04f 0200 	mov.w	r2, #0
 8001b0c:	f04f 0300 	mov.w	r3, #0
 8001b10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b14:	4659      	mov	r1, fp
 8001b16:	018b      	lsls	r3, r1, #6
 8001b18:	4651      	mov	r1, sl
 8001b1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b1e:	4651      	mov	r1, sl
 8001b20:	018a      	lsls	r2, r1, #6
 8001b22:	4651      	mov	r1, sl
 8001b24:	ebb2 0801 	subs.w	r8, r2, r1
 8001b28:	4659      	mov	r1, fp
 8001b2a:	eb63 0901 	sbc.w	r9, r3, r1
 8001b2e:	f04f 0200 	mov.w	r2, #0
 8001b32:	f04f 0300 	mov.w	r3, #0
 8001b36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b42:	4690      	mov	r8, r2
 8001b44:	4699      	mov	r9, r3
 8001b46:	4623      	mov	r3, r4
 8001b48:	eb18 0303 	adds.w	r3, r8, r3
 8001b4c:	60bb      	str	r3, [r7, #8]
 8001b4e:	462b      	mov	r3, r5
 8001b50:	eb49 0303 	adc.w	r3, r9, r3
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	f04f 0200 	mov.w	r2, #0
 8001b5a:	f04f 0300 	mov.w	r3, #0
 8001b5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b62:	4629      	mov	r1, r5
 8001b64:	024b      	lsls	r3, r1, #9
 8001b66:	4621      	mov	r1, r4
 8001b68:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b6c:	4621      	mov	r1, r4
 8001b6e:	024a      	lsls	r2, r1, #9
 8001b70:	4610      	mov	r0, r2
 8001b72:	4619      	mov	r1, r3
 8001b74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b76:	2200      	movs	r2, #0
 8001b78:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b80:	f7fe fb98 	bl	80002b4 <__aeabi_uldivmod>
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	4613      	mov	r3, r2
 8001b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b8c:	e058      	b.n	8001c40 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b8e:	4b38      	ldr	r3, [pc, #224]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	099b      	lsrs	r3, r3, #6
 8001b94:	2200      	movs	r2, #0
 8001b96:	4618      	mov	r0, r3
 8001b98:	4611      	mov	r1, r2
 8001b9a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b9e:	623b      	str	r3, [r7, #32]
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ba4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ba8:	4642      	mov	r2, r8
 8001baa:	464b      	mov	r3, r9
 8001bac:	f04f 0000 	mov.w	r0, #0
 8001bb0:	f04f 0100 	mov.w	r1, #0
 8001bb4:	0159      	lsls	r1, r3, #5
 8001bb6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bba:	0150      	lsls	r0, r2, #5
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	4641      	mov	r1, r8
 8001bc2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001bc6:	4649      	mov	r1, r9
 8001bc8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	f04f 0300 	mov.w	r3, #0
 8001bd4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001bd8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001bdc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001be0:	ebb2 040a 	subs.w	r4, r2, sl
 8001be4:	eb63 050b 	sbc.w	r5, r3, fp
 8001be8:	f04f 0200 	mov.w	r2, #0
 8001bec:	f04f 0300 	mov.w	r3, #0
 8001bf0:	00eb      	lsls	r3, r5, #3
 8001bf2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bf6:	00e2      	lsls	r2, r4, #3
 8001bf8:	4614      	mov	r4, r2
 8001bfa:	461d      	mov	r5, r3
 8001bfc:	4643      	mov	r3, r8
 8001bfe:	18e3      	adds	r3, r4, r3
 8001c00:	603b      	str	r3, [r7, #0]
 8001c02:	464b      	mov	r3, r9
 8001c04:	eb45 0303 	adc.w	r3, r5, r3
 8001c08:	607b      	str	r3, [r7, #4]
 8001c0a:	f04f 0200 	mov.w	r2, #0
 8001c0e:	f04f 0300 	mov.w	r3, #0
 8001c12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c16:	4629      	mov	r1, r5
 8001c18:	028b      	lsls	r3, r1, #10
 8001c1a:	4621      	mov	r1, r4
 8001c1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c20:	4621      	mov	r1, r4
 8001c22:	028a      	lsls	r2, r1, #10
 8001c24:	4610      	mov	r0, r2
 8001c26:	4619      	mov	r1, r3
 8001c28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	61bb      	str	r3, [r7, #24]
 8001c2e:	61fa      	str	r2, [r7, #28]
 8001c30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c34:	f7fe fb3e 	bl	80002b4 <__aeabi_uldivmod>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001c40:	4b0b      	ldr	r3, [pc, #44]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	0c1b      	lsrs	r3, r3, #16
 8001c46:	f003 0303 	and.w	r3, r3, #3
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001c50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c5a:	e002      	b.n	8001c62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c5c:	4b05      	ldr	r3, [pc, #20]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c5e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3750      	adds	r7, #80	; 0x50
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c6e:	bf00      	nop
 8001c70:	40023800 	.word	0x40023800
 8001c74:	00f42400 	.word	0x00f42400
 8001c78:	007a1200 	.word	0x007a1200

08001c7c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c80:	4b03      	ldr	r3, [pc, #12]	; (8001c90 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c82:	681b      	ldr	r3, [r3, #0]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	20000000 	.word	0x20000000

08001c94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c98:	f7ff fff0 	bl	8001c7c <HAL_RCC_GetHCLKFreq>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	0a9b      	lsrs	r3, r3, #10
 8001ca4:	f003 0307 	and.w	r3, r3, #7
 8001ca8:	4903      	ldr	r1, [pc, #12]	; (8001cb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001caa:	5ccb      	ldrb	r3, [r1, r3]
 8001cac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	08006790 	.word	0x08006790

08001cbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cc0:	f7ff ffdc 	bl	8001c7c <HAL_RCC_GetHCLKFreq>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	4b05      	ldr	r3, [pc, #20]	; (8001cdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	0b5b      	lsrs	r3, r3, #13
 8001ccc:	f003 0307 	and.w	r3, r3, #7
 8001cd0:	4903      	ldr	r1, [pc, #12]	; (8001ce0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cd2:	5ccb      	ldrb	r3, [r1, r3]
 8001cd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	08006790 	.word	0x08006790

08001ce4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	220f      	movs	r2, #15
 8001cf2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001cf4:	4b12      	ldr	r3, [pc, #72]	; (8001d40 <HAL_RCC_GetClockConfig+0x5c>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f003 0203 	and.w	r2, r3, #3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d00:	4b0f      	ldr	r3, [pc, #60]	; (8001d40 <HAL_RCC_GetClockConfig+0x5c>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d0c:	4b0c      	ldr	r3, [pc, #48]	; (8001d40 <HAL_RCC_GetClockConfig+0x5c>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001d18:	4b09      	ldr	r3, [pc, #36]	; (8001d40 <HAL_RCC_GetClockConfig+0x5c>)
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	08db      	lsrs	r3, r3, #3
 8001d1e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d26:	4b07      	ldr	r3, [pc, #28]	; (8001d44 <HAL_RCC_GetClockConfig+0x60>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 020f 	and.w	r2, r3, #15
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	601a      	str	r2, [r3, #0]
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	40023800 	.word	0x40023800
 8001d44:	40023c00 	.word	0x40023c00

08001d48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b088      	sub	sp, #32
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001d54:	2300      	movs	r3, #0
 8001d56:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d012      	beq.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001d6c:	4b65      	ldr	r3, [pc, #404]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	4a64      	ldr	r2, [pc, #400]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001d72:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001d76:	6093      	str	r3, [r2, #8]
 8001d78:	4b62      	ldr	r3, [pc, #392]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001d7a:	689a      	ldr	r2, [r3, #8]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d80:	4960      	ldr	r1, [pc, #384]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001d82:	4313      	orrs	r3, r2
 8001d84:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d101      	bne.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d017      	beq.n	8001dce <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d9e:	4b59      	ldr	r3, [pc, #356]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001da0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001da4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dac:	4955      	ldr	r1, [pc, #340]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001db8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001dbc:	d101      	bne.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d017      	beq.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001dda:	4b4a      	ldr	r3, [pc, #296]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001ddc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001de0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001de8:	4946      	ldr	r1, [pc, #280]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001dea:	4313      	orrs	r3, r2
 8001dec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001df4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001df8:	d101      	bne.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8001e06:	2301      	movs	r3, #1
 8001e08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0320 	and.w	r3, r3, #32
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f000 808b 	beq.w	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e18:	4b3a      	ldr	r3, [pc, #232]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1c:	4a39      	ldr	r2, [pc, #228]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001e1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e22:	6413      	str	r3, [r2, #64]	; 0x40
 8001e24:	4b37      	ldr	r3, [pc, #220]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2c:	60fb      	str	r3, [r7, #12]
 8001e2e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001e30:	4b35      	ldr	r3, [pc, #212]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a34      	ldr	r2, [pc, #208]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001e36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e3c:	f7fe fef2 	bl	8000c24 <HAL_GetTick>
 8001e40:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001e42:	e008      	b.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e44:	f7fe feee 	bl	8000c24 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b64      	cmp	r3, #100	; 0x64
 8001e50:	d901      	bls.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e2bc      	b.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001e56:	4b2c      	ldr	r3, [pc, #176]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d0f0      	beq.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e62:	4b28      	ldr	r3, [pc, #160]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e6a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d035      	beq.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x196>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d02e      	beq.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e80:	4b20      	ldr	r3, [pc, #128]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e88:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e8a:	4b1e      	ldr	r3, [pc, #120]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e8e:	4a1d      	ldr	r2, [pc, #116]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e94:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e96:	4b1b      	ldr	r3, [pc, #108]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e9a:	4a1a      	ldr	r2, [pc, #104]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001e9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ea0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001ea2:	4a18      	ldr	r2, [pc, #96]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001ea8:	4b16      	ldr	r3, [pc, #88]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d114      	bne.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb4:	f7fe feb6 	bl	8000c24 <HAL_GetTick>
 8001eb8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eba:	e00a      	b.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ebc:	f7fe feb2 	bl	8000c24 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e27e      	b.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed2:	4b0c      	ldr	r3, [pc, #48]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d0ee      	beq.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ee6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001eea:	d111      	bne.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8001eec:	4b05      	ldr	r3, [pc, #20]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001ef8:	4b04      	ldr	r3, [pc, #16]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001efa:	400b      	ands	r3, r1
 8001efc:	4901      	ldr	r1, [pc, #4]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	608b      	str	r3, [r1, #8]
 8001f02:	e00b      	b.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8001f04:	40023800 	.word	0x40023800
 8001f08:	40007000 	.word	0x40007000
 8001f0c:	0ffffcff 	.word	0x0ffffcff
 8001f10:	4ba4      	ldr	r3, [pc, #656]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	4aa3      	ldr	r2, [pc, #652]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001f16:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001f1a:	6093      	str	r3, [r2, #8]
 8001f1c:	4ba1      	ldr	r3, [pc, #644]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001f1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f28:	499e      	ldr	r1, [pc, #632]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0310 	and.w	r3, r3, #16
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d010      	beq.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001f3a:	4b9a      	ldr	r3, [pc, #616]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001f3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f40:	4a98      	ldr	r2, [pc, #608]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001f42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f46:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001f4a:	4b96      	ldr	r3, [pc, #600]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001f4c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f54:	4993      	ldr	r1, [pc, #588]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d00a      	beq.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f68:	4b8e      	ldr	r3, [pc, #568]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f6e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f76:	498b      	ldr	r1, [pc, #556]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d00a      	beq.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001f8a:	4b86      	ldr	r3, [pc, #536]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f90:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f98:	4982      	ldr	r1, [pc, #520]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d00a      	beq.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001fac:	4b7d      	ldr	r3, [pc, #500]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fba:	497a      	ldr	r1, [pc, #488]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d00a      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fce:	4b75      	ldr	r3, [pc, #468]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd4:	f023 0203 	bic.w	r2, r3, #3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fdc:	4971      	ldr	r1, [pc, #452]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d00a      	beq.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ff0:	4b6c      	ldr	r3, [pc, #432]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff6:	f023 020c 	bic.w	r2, r3, #12
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	4969      	ldr	r1, [pc, #420]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002000:	4313      	orrs	r3, r2
 8002002:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800200e:	2b00      	cmp	r3, #0
 8002010:	d00a      	beq.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002012:	4b64      	ldr	r3, [pc, #400]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002018:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002020:	4960      	ldr	r1, [pc, #384]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002022:	4313      	orrs	r3, r2
 8002024:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002030:	2b00      	cmp	r3, #0
 8002032:	d00a      	beq.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002034:	4b5b      	ldr	r3, [pc, #364]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800203a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002042:	4958      	ldr	r1, [pc, #352]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002044:	4313      	orrs	r3, r2
 8002046:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002052:	2b00      	cmp	r3, #0
 8002054:	d00a      	beq.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002056:	4b53      	ldr	r3, [pc, #332]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800205c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002064:	494f      	ldr	r1, [pc, #316]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002066:	4313      	orrs	r3, r2
 8002068:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002074:	2b00      	cmp	r3, #0
 8002076:	d00a      	beq.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002078:	4b4a      	ldr	r3, [pc, #296]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800207a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800207e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002086:	4947      	ldr	r1, [pc, #284]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002088:	4313      	orrs	r3, r2
 800208a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00a      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800209a:	4b42      	ldr	r3, [pc, #264]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800209c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a8:	493e      	ldr	r1, [pc, #248]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00a      	beq.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80020bc:	4b39      	ldr	r3, [pc, #228]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80020be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ca:	4936      	ldr	r1, [pc, #216]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d011      	beq.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80020de:	4b31      	ldr	r3, [pc, #196]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80020e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020ec:	492d      	ldr	r1, [pc, #180]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80020fc:	d101      	bne.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 80020fe:	2301      	movs	r3, #1
 8002100:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d00a      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800210e:	4b25      	ldr	r3, [pc, #148]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002114:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800211c:	4921      	ldr	r1, [pc, #132]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800211e:	4313      	orrs	r3, r2
 8002120:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d00a      	beq.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002130:	4b1c      	ldr	r3, [pc, #112]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002136:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800213e:	4919      	ldr	r1, [pc, #100]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002140:	4313      	orrs	r3, r2
 8002142:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00a      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002152:	4b14      	ldr	r3, [pc, #80]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002158:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002160:	4910      	ldr	r1, [pc, #64]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002162:	4313      	orrs	r3, r2
 8002164:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d006      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x434>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002176:	2b00      	cmp	r3, #0
 8002178:	f000 809d 	beq.w	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800217c:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a08      	ldr	r2, [pc, #32]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002182:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002186:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002188:	f7fe fd4c 	bl	8000c24 <HAL_GetTick>
 800218c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800218e:	e00b      	b.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002190:	f7fe fd48 	bl	8000c24 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b64      	cmp	r3, #100	; 0x64
 800219c:	d904      	bls.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e116      	b.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x688>
 80021a2:	bf00      	nop
 80021a4:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80021a8:	4b8b      	ldr	r3, [pc, #556]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1ed      	bne.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d017      	beq.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d113      	bne.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80021c8:	4b83      	ldr	r3, [pc, #524]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80021ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021ce:	0e1b      	lsrs	r3, r3, #24
 80021d0:	f003 030f 	and.w	r3, r3, #15
 80021d4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	019a      	lsls	r2, r3, #6
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	061b      	lsls	r3, r3, #24
 80021e0:	431a      	orrs	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	071b      	lsls	r3, r3, #28
 80021e8:	497b      	ldr	r1, [pc, #492]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d004      	beq.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002200:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002204:	d00a      	beq.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800220e:	2b00      	cmp	r3, #0
 8002210:	d024      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002216:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800221a:	d11f      	bne.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800221c:	4b6e      	ldr	r3, [pc, #440]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800221e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002222:	0f1b      	lsrs	r3, r3, #28
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	019a      	lsls	r2, r3, #6
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	061b      	lsls	r3, r3, #24
 8002236:	431a      	orrs	r2, r3
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	071b      	lsls	r3, r3, #28
 800223c:	4966      	ldr	r1, [pc, #408]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800223e:	4313      	orrs	r3, r2
 8002240:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002244:	4b64      	ldr	r3, [pc, #400]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002246:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800224a:	f023 021f 	bic.w	r2, r3, #31
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	69db      	ldr	r3, [r3, #28]
 8002252:	3b01      	subs	r3, #1
 8002254:	4960      	ldr	r1, [pc, #384]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002256:	4313      	orrs	r3, r2
 8002258:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d00d      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	019a      	lsls	r2, r3, #6
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	061b      	lsls	r3, r3, #24
 8002274:	431a      	orrs	r2, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	071b      	lsls	r3, r3, #28
 800227c:	4956      	ldr	r1, [pc, #344]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800227e:	4313      	orrs	r3, r2
 8002280:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002284:	4b54      	ldr	r3, [pc, #336]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a53      	ldr	r2, [pc, #332]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800228a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800228e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002290:	f7fe fcc8 	bl	8000c24 <HAL_GetTick>
 8002294:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002296:	e008      	b.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002298:	f7fe fcc4 	bl	8000c24 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b64      	cmp	r3, #100	; 0x64
 80022a4:	d901      	bls.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e092      	b.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80022aa:	4b4b      	ldr	r3, [pc, #300]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d0f0      	beq.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	f040 8088 	bne.w	80023ce <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80022be:	4b46      	ldr	r3, [pc, #280]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a45      	ldr	r2, [pc, #276]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80022c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022ca:	f7fe fcab 	bl	8000c24 <HAL_GetTick>
 80022ce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80022d0:	e008      	b.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80022d2:	f7fe fca7 	bl	8000c24 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b64      	cmp	r3, #100	; 0x64
 80022de:	d901      	bls.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e075      	b.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80022e4:	4b3c      	ldr	r3, [pc, #240]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022f0:	d0ef      	beq.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d003      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x5be>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002302:	2b00      	cmp	r3, #0
 8002304:	d009      	beq.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800230e:	2b00      	cmp	r3, #0
 8002310:	d024      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002316:	2b00      	cmp	r3, #0
 8002318:	d120      	bne.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800231a:	4b2f      	ldr	r3, [pc, #188]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800231c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002320:	0c1b      	lsrs	r3, r3, #16
 8002322:	f003 0303 	and.w	r3, r3, #3
 8002326:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	019a      	lsls	r2, r3, #6
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	041b      	lsls	r3, r3, #16
 8002332:	431a      	orrs	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	695b      	ldr	r3, [r3, #20]
 8002338:	061b      	lsls	r3, r3, #24
 800233a:	4927      	ldr	r1, [pc, #156]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800233c:	4313      	orrs	r3, r2
 800233e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002342:	4b25      	ldr	r3, [pc, #148]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002344:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002348:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a1b      	ldr	r3, [r3, #32]
 8002350:	3b01      	subs	r3, #1
 8002352:	021b      	lsls	r3, r3, #8
 8002354:	4920      	ldr	r1, [pc, #128]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002356:	4313      	orrs	r3, r2
 8002358:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d018      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x652>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800236c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002370:	d113      	bne.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002372:	4b19      	ldr	r3, [pc, #100]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002378:	0e1b      	lsrs	r3, r3, #24
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	019a      	lsls	r2, r3, #6
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	041b      	lsls	r3, r3, #16
 800238c:	431a      	orrs	r2, r3
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	061b      	lsls	r3, r3, #24
 8002392:	4911      	ldr	r1, [pc, #68]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002394:	4313      	orrs	r3, r2
 8002396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800239a:	4b0f      	ldr	r3, [pc, #60]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a0e      	ldr	r2, [pc, #56]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80023a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023a6:	f7fe fc3d 	bl	8000c24 <HAL_GetTick>
 80023aa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80023ac:	e008      	b.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80023ae:	f7fe fc39 	bl	8000c24 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b64      	cmp	r3, #100	; 0x64
 80023ba:	d901      	bls.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e007      	b.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80023c0:	4b05      	ldr	r3, [pc, #20]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80023c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023cc:	d1ef      	bne.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3720      	adds	r7, #32
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40023800 	.word	0x40023800

080023dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e049      	b.n	8002482 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d106      	bne.n	8002408 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 f841 	bl	800248a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2202      	movs	r2, #2
 800240c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3304      	adds	r3, #4
 8002418:	4619      	mov	r1, r3
 800241a:	4610      	mov	r0, r2
 800241c:	f000 fa00 	bl	8002820 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800248a:	b480      	push	{r7}
 800248c:	b083      	sub	sp, #12
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
	...

080024a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d001      	beq.n	80024b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e054      	b.n	8002562 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2202      	movs	r2, #2
 80024bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68da      	ldr	r2, [r3, #12]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f042 0201 	orr.w	r2, r2, #1
 80024ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a26      	ldr	r2, [pc, #152]	; (8002570 <HAL_TIM_Base_Start_IT+0xd0>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d022      	beq.n	8002520 <HAL_TIM_Base_Start_IT+0x80>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024e2:	d01d      	beq.n	8002520 <HAL_TIM_Base_Start_IT+0x80>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a22      	ldr	r2, [pc, #136]	; (8002574 <HAL_TIM_Base_Start_IT+0xd4>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d018      	beq.n	8002520 <HAL_TIM_Base_Start_IT+0x80>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a21      	ldr	r2, [pc, #132]	; (8002578 <HAL_TIM_Base_Start_IT+0xd8>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d013      	beq.n	8002520 <HAL_TIM_Base_Start_IT+0x80>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a1f      	ldr	r2, [pc, #124]	; (800257c <HAL_TIM_Base_Start_IT+0xdc>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d00e      	beq.n	8002520 <HAL_TIM_Base_Start_IT+0x80>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a1e      	ldr	r2, [pc, #120]	; (8002580 <HAL_TIM_Base_Start_IT+0xe0>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d009      	beq.n	8002520 <HAL_TIM_Base_Start_IT+0x80>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a1c      	ldr	r2, [pc, #112]	; (8002584 <HAL_TIM_Base_Start_IT+0xe4>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d004      	beq.n	8002520 <HAL_TIM_Base_Start_IT+0x80>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a1b      	ldr	r2, [pc, #108]	; (8002588 <HAL_TIM_Base_Start_IT+0xe8>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d115      	bne.n	800254c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	689a      	ldr	r2, [r3, #8]
 8002526:	4b19      	ldr	r3, [pc, #100]	; (800258c <HAL_TIM_Base_Start_IT+0xec>)
 8002528:	4013      	ands	r3, r2
 800252a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2b06      	cmp	r3, #6
 8002530:	d015      	beq.n	800255e <HAL_TIM_Base_Start_IT+0xbe>
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002538:	d011      	beq.n	800255e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f042 0201 	orr.w	r2, r2, #1
 8002548:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800254a:	e008      	b.n	800255e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f042 0201 	orr.w	r2, r2, #1
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	e000      	b.n	8002560 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800255e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3714      	adds	r7, #20
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	40010000 	.word	0x40010000
 8002574:	40000400 	.word	0x40000400
 8002578:	40000800 	.word	0x40000800
 800257c:	40000c00 	.word	0x40000c00
 8002580:	40010400 	.word	0x40010400
 8002584:	40014000 	.word	0x40014000
 8002588:	40001800 	.word	0x40001800
 800258c:	00010007 	.word	0x00010007

08002590 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d122      	bne.n	80025ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d11b      	bne.n	80025ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f06f 0202 	mvn.w	r2, #2
 80025bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2201      	movs	r2, #1
 80025c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	f003 0303 	and.w	r3, r3, #3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d003      	beq.n	80025da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f905 	bl	80027e2 <HAL_TIM_IC_CaptureCallback>
 80025d8:	e005      	b.n	80025e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 f8f7 	bl	80027ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f000 f908 	bl	80027f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	f003 0304 	and.w	r3, r3, #4
 80025f6:	2b04      	cmp	r3, #4
 80025f8:	d122      	bne.n	8002640 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	f003 0304 	and.w	r3, r3, #4
 8002604:	2b04      	cmp	r3, #4
 8002606:	d11b      	bne.n	8002640 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f06f 0204 	mvn.w	r2, #4
 8002610:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2202      	movs	r2, #2
 8002616:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 f8db 	bl	80027e2 <HAL_TIM_IC_CaptureCallback>
 800262c:	e005      	b.n	800263a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 f8cd 	bl	80027ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f000 f8de 	bl	80027f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	f003 0308 	and.w	r3, r3, #8
 800264a:	2b08      	cmp	r3, #8
 800264c:	d122      	bne.n	8002694 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	f003 0308 	and.w	r3, r3, #8
 8002658:	2b08      	cmp	r3, #8
 800265a:	d11b      	bne.n	8002694 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f06f 0208 	mvn.w	r2, #8
 8002664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2204      	movs	r2, #4
 800266a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	f003 0303 	and.w	r3, r3, #3
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 f8b1 	bl	80027e2 <HAL_TIM_IC_CaptureCallback>
 8002680:	e005      	b.n	800268e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 f8a3 	bl	80027ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f000 f8b4 	bl	80027f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	f003 0310 	and.w	r3, r3, #16
 800269e:	2b10      	cmp	r3, #16
 80026a0:	d122      	bne.n	80026e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	f003 0310 	and.w	r3, r3, #16
 80026ac:	2b10      	cmp	r3, #16
 80026ae:	d11b      	bne.n	80026e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f06f 0210 	mvn.w	r2, #16
 80026b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2208      	movs	r2, #8
 80026be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	69db      	ldr	r3, [r3, #28]
 80026c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d003      	beq.n	80026d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 f887 	bl	80027e2 <HAL_TIM_IC_CaptureCallback>
 80026d4:	e005      	b.n	80026e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 f879 	bl	80027ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f000 f88a 	bl	80027f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d10e      	bne.n	8002714 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	2b01      	cmp	r3, #1
 8002702:	d107      	bne.n	8002714 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f06f 0201 	mvn.w	r2, #1
 800270c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f7fe f902 	bl	8000918 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800271e:	2b80      	cmp	r3, #128	; 0x80
 8002720:	d10e      	bne.n	8002740 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800272c:	2b80      	cmp	r3, #128	; 0x80
 800272e:	d107      	bne.n	8002740 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 f91a 	bl	8002974 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800274e:	d10e      	bne.n	800276e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800275a:	2b80      	cmp	r3, #128	; 0x80
 800275c:	d107      	bne.n	800276e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002766:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 f90d 	bl	8002988 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002778:	2b40      	cmp	r3, #64	; 0x40
 800277a:	d10e      	bne.n	800279a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002786:	2b40      	cmp	r3, #64	; 0x40
 8002788:	d107      	bne.n	800279a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002792:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f000 f838 	bl	800280a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	f003 0320 	and.w	r3, r3, #32
 80027a4:	2b20      	cmp	r3, #32
 80027a6:	d10e      	bne.n	80027c6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	f003 0320 	and.w	r3, r3, #32
 80027b2:	2b20      	cmp	r3, #32
 80027b4:	d107      	bne.n	80027c6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f06f 0220 	mvn.w	r2, #32
 80027be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f000 f8cd 	bl	8002960 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027c6:	bf00      	nop
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027ce:	b480      	push	{r7}
 80027d0:	b083      	sub	sp, #12
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027d6:	bf00      	nop
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b083      	sub	sp, #12
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr

080027f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b083      	sub	sp, #12
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027fe:	bf00      	nop
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr

0800280a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800280a:	b480      	push	{r7}
 800280c:	b083      	sub	sp, #12
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002812:	bf00      	nop
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
	...

08002820 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a40      	ldr	r2, [pc, #256]	; (8002934 <TIM_Base_SetConfig+0x114>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d013      	beq.n	8002860 <TIM_Base_SetConfig+0x40>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800283e:	d00f      	beq.n	8002860 <TIM_Base_SetConfig+0x40>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a3d      	ldr	r2, [pc, #244]	; (8002938 <TIM_Base_SetConfig+0x118>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d00b      	beq.n	8002860 <TIM_Base_SetConfig+0x40>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a3c      	ldr	r2, [pc, #240]	; (800293c <TIM_Base_SetConfig+0x11c>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d007      	beq.n	8002860 <TIM_Base_SetConfig+0x40>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a3b      	ldr	r2, [pc, #236]	; (8002940 <TIM_Base_SetConfig+0x120>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d003      	beq.n	8002860 <TIM_Base_SetConfig+0x40>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4a3a      	ldr	r2, [pc, #232]	; (8002944 <TIM_Base_SetConfig+0x124>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d108      	bne.n	8002872 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002866:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	4313      	orrs	r3, r2
 8002870:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a2f      	ldr	r2, [pc, #188]	; (8002934 <TIM_Base_SetConfig+0x114>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d02b      	beq.n	80028d2 <TIM_Base_SetConfig+0xb2>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002880:	d027      	beq.n	80028d2 <TIM_Base_SetConfig+0xb2>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a2c      	ldr	r2, [pc, #176]	; (8002938 <TIM_Base_SetConfig+0x118>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d023      	beq.n	80028d2 <TIM_Base_SetConfig+0xb2>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a2b      	ldr	r2, [pc, #172]	; (800293c <TIM_Base_SetConfig+0x11c>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d01f      	beq.n	80028d2 <TIM_Base_SetConfig+0xb2>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a2a      	ldr	r2, [pc, #168]	; (8002940 <TIM_Base_SetConfig+0x120>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d01b      	beq.n	80028d2 <TIM_Base_SetConfig+0xb2>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a29      	ldr	r2, [pc, #164]	; (8002944 <TIM_Base_SetConfig+0x124>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d017      	beq.n	80028d2 <TIM_Base_SetConfig+0xb2>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a28      	ldr	r2, [pc, #160]	; (8002948 <TIM_Base_SetConfig+0x128>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d013      	beq.n	80028d2 <TIM_Base_SetConfig+0xb2>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a27      	ldr	r2, [pc, #156]	; (800294c <TIM_Base_SetConfig+0x12c>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d00f      	beq.n	80028d2 <TIM_Base_SetConfig+0xb2>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a26      	ldr	r2, [pc, #152]	; (8002950 <TIM_Base_SetConfig+0x130>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d00b      	beq.n	80028d2 <TIM_Base_SetConfig+0xb2>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a25      	ldr	r2, [pc, #148]	; (8002954 <TIM_Base_SetConfig+0x134>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d007      	beq.n	80028d2 <TIM_Base_SetConfig+0xb2>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a24      	ldr	r2, [pc, #144]	; (8002958 <TIM_Base_SetConfig+0x138>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d003      	beq.n	80028d2 <TIM_Base_SetConfig+0xb2>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a23      	ldr	r2, [pc, #140]	; (800295c <TIM_Base_SetConfig+0x13c>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d108      	bne.n	80028e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a0a      	ldr	r2, [pc, #40]	; (8002934 <TIM_Base_SetConfig+0x114>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d003      	beq.n	8002918 <TIM_Base_SetConfig+0xf8>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a0c      	ldr	r2, [pc, #48]	; (8002944 <TIM_Base_SetConfig+0x124>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d103      	bne.n	8002920 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	691a      	ldr	r2, [r3, #16]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	615a      	str	r2, [r3, #20]
}
 8002926:	bf00      	nop
 8002928:	3714      	adds	r7, #20
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	40010000 	.word	0x40010000
 8002938:	40000400 	.word	0x40000400
 800293c:	40000800 	.word	0x40000800
 8002940:	40000c00 	.word	0x40000c00
 8002944:	40010400 	.word	0x40010400
 8002948:	40014000 	.word	0x40014000
 800294c:	40014400 	.word	0x40014400
 8002950:	40014800 	.word	0x40014800
 8002954:	40001800 	.word	0x40001800
 8002958:	40001c00 	.word	0x40001c00
 800295c:	40002000 	.word	0x40002000

08002960 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e040      	b.n	8002a30 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d106      	bne.n	80029c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f7fd ffea 	bl	8000998 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2224      	movs	r2, #36	; 0x24
 80029c8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 0201 	bic.w	r2, r2, #1
 80029d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 fa3a 	bl	8002e54 <UART_SetConfig>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d101      	bne.n	80029ea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e022      	b.n	8002a30 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d002      	beq.n	80029f8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 fc92 	bl	800331c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	685a      	ldr	r2, [r3, #4]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689a      	ldr	r2, [r3, #8]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f042 0201 	orr.w	r2, r2, #1
 8002a26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 fd19 	bl	8003460 <UART_CheckIdleState>
 8002a2e:	4603      	mov	r3, r0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b088      	sub	sp, #32
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	69db      	ldr	r3, [r3, #28]
 8002a46:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002a58:	69fa      	ldr	r2, [r7, #28]
 8002a5a:	f640 030f 	movw	r3, #2063	; 0x80f
 8002a5e:	4013      	ands	r3, r2
 8002a60:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d113      	bne.n	8002a90 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	f003 0320 	and.w	r3, r3, #32
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00e      	beq.n	8002a90 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	f003 0320 	and.w	r3, r3, #32
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d009      	beq.n	8002a90 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f000 81ba 	beq.w	8002dfa <HAL_UART_IRQHandler+0x3c2>
      {
        huart->RxISR(huart);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	4798      	blx	r3
      }
      return;
 8002a8e:	e1b4      	b.n	8002dfa <HAL_UART_IRQHandler+0x3c2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f000 80e8 	beq.w	8002c68 <HAL_UART_IRQHandler+0x230>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d105      	bne.n	8002aae <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	4b6e      	ldr	r3, [pc, #440]	; (8002c60 <HAL_UART_IRQHandler+0x228>)
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f000 80dd 	beq.w	8002c68 <HAL_UART_IRQHandler+0x230>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	f003 0301 	and.w	r3, r3, #1
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d010      	beq.n	8002ada <HAL_UART_IRQHandler+0xa2>
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00b      	beq.n	8002ada <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ad0:	f043 0201 	orr.w	r2, r3, #1
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d010      	beq.n	8002b06 <HAL_UART_IRQHandler+0xce>
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00b      	beq.n	8002b06 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2202      	movs	r2, #2
 8002af4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002afc:	f043 0204 	orr.w	r2, r3, #4
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	f003 0304 	and.w	r3, r3, #4
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d010      	beq.n	8002b32 <HAL_UART_IRQHandler+0xfa>
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00b      	beq.n	8002b32 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2204      	movs	r2, #4
 8002b20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b28:	f043 0202 	orr.w	r2, r3, #2
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	f003 0308 	and.w	r3, r3, #8
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d015      	beq.n	8002b68 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	f003 0320 	and.w	r3, r3, #32
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d104      	bne.n	8002b50 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00b      	beq.n	8002b68 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2208      	movs	r2, #8
 8002b56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b5e:	f043 0208 	orr.w	r2, r3, #8
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d011      	beq.n	8002b96 <HAL_UART_IRQHandler+0x15e>
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00c      	beq.n	8002b96 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b8c:	f043 0220 	orr.w	r2, r3, #32
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 812e 	beq.w	8002dfe <HAL_UART_IRQHandler+0x3c6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	f003 0320 	and.w	r3, r3, #32
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00c      	beq.n	8002bc6 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	f003 0320 	and.w	r3, r3, #32
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d007      	beq.n	8002bc6 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d003      	beq.n	8002bc6 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bcc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd8:	2b40      	cmp	r3, #64	; 0x40
 8002bda:	d004      	beq.n	8002be6 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d031      	beq.n	8002c4a <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 fce9 	bl	80035be <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf6:	2b40      	cmp	r3, #64	; 0x40
 8002bf8:	d123      	bne.n	8002c42 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	689a      	ldr	r2, [r3, #8]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c08:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d013      	beq.n	8002c3a <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c16:	4a13      	ldr	r2, [pc, #76]	; (8002c64 <HAL_UART_IRQHandler+0x22c>)
 8002c18:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7fe f95e 	bl	8000ee0 <HAL_DMA_Abort_IT>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d017      	beq.n	8002c5a <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002c34:	4610      	mov	r0, r2
 8002c36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c38:	e00f      	b.n	8002c5a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 f8f4 	bl	8002e28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c40:	e00b      	b.n	8002c5a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f8f0 	bl	8002e28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c48:	e007      	b.n	8002c5a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 f8ec 	bl	8002e28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002c58:	e0d1      	b.n	8002dfe <HAL_UART_IRQHandler+0x3c6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c5a:	bf00      	nop
    return;
 8002c5c:	e0cf      	b.n	8002dfe <HAL_UART_IRQHandler+0x3c6>
 8002c5e:	bf00      	nop
 8002c60:	04000120 	.word	0x04000120
 8002c64:	0800361d 	.word	0x0800361d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	f040 80a3 	bne.w	8002db8 <HAL_UART_IRQHandler+0x380>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	f003 0310 	and.w	r3, r3, #16
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f000 809d 	beq.w	8002db8 <HAL_UART_IRQHandler+0x380>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	f003 0310 	and.w	r3, r3, #16
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f000 8097 	beq.w	8002db8 <HAL_UART_IRQHandler+0x380>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2210      	movs	r2, #16
 8002c90:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c9c:	2b40      	cmp	r3, #64	; 0x40
 8002c9e:	d152      	bne.n	8002d46 <HAL_UART_IRQHandler+0x30e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8002caa:	893b      	ldrh	r3, [r7, #8]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f000 80a8 	beq.w	8002e02 <HAL_UART_IRQHandler+0x3ca>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002cb8:	893a      	ldrh	r2, [r7, #8]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	f080 80a1 	bcs.w	8002e02 <HAL_UART_IRQHandler+0x3ca>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	893a      	ldrh	r2, [r7, #8]
 8002cc4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ccc:	69db      	ldr	r3, [r3, #28]
 8002cce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cd2:	d02a      	beq.n	8002d2a <HAL_UART_IRQHandler+0x2f2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ce2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689a      	ldr	r2, [r3, #8]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0201 	bic.w	r2, r2, #1
 8002cf2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689a      	ldr	r2, [r3, #8]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d02:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2220      	movs	r2, #32
 8002d08:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 0210 	bic.w	r2, r2, #16
 8002d1e:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7fe f86b 	bl	8000e00 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 f87c 	bl	8002e3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002d44:	e05d      	b.n	8002e02 <HAL_UART_IRQHandler+0x3ca>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d050      	beq.n	8002e06 <HAL_UART_IRQHandler+0x3ce>
          && (nb_rx_data > 0U))
 8002d64:	897b      	ldrh	r3, [r7, #10]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d04d      	beq.n	8002e06 <HAL_UART_IRQHandler+0x3ce>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002d78:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 0201 	bic.w	r2, r2, #1
 8002d88:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2220      	movs	r2, #32
 8002d8e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f022 0210 	bic.w	r2, r2, #16
 8002daa:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002dac:	897b      	ldrh	r3, [r7, #10]
 8002dae:	4619      	mov	r1, r3
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 f843 	bl	8002e3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002db6:	e026      	b.n	8002e06 <HAL_UART_IRQHandler+0x3ce>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00d      	beq.n	8002dde <HAL_UART_IRQHandler+0x3a6>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d008      	beq.n	8002dde <HAL_UART_IRQHandler+0x3a6>
  {
    if (huart->TxISR != NULL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d01a      	beq.n	8002e0a <HAL_UART_IRQHandler+0x3d2>
    {
      huart->TxISR(huart);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	4798      	blx	r3
    }
    return;
 8002ddc:	e015      	b.n	8002e0a <HAL_UART_IRQHandler+0x3d2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d011      	beq.n	8002e0c <HAL_UART_IRQHandler+0x3d4>
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00c      	beq.n	8002e0c <HAL_UART_IRQHandler+0x3d4>
  {
    UART_EndTransmit_IT(huart);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 fc28 	bl	8003648 <UART_EndTransmit_IT>
    return;
 8002df8:	e008      	b.n	8002e0c <HAL_UART_IRQHandler+0x3d4>
      return;
 8002dfa:	bf00      	nop
 8002dfc:	e006      	b.n	8002e0c <HAL_UART_IRQHandler+0x3d4>
    return;
 8002dfe:	bf00      	nop
 8002e00:	e004      	b.n	8002e0c <HAL_UART_IRQHandler+0x3d4>
      return;
 8002e02:	bf00      	nop
 8002e04:	e002      	b.n	8002e0c <HAL_UART_IRQHandler+0x3d4>
      return;
 8002e06:	bf00      	nop
 8002e08:	e000      	b.n	8002e0c <HAL_UART_IRQHandler+0x3d4>
    return;
 8002e0a:	bf00      	nop
  }

}
 8002e0c:	3720      	adds	r7, #32
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop

08002e14 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	460b      	mov	r3, r1
 8002e46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b088      	sub	sp, #32
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689a      	ldr	r2, [r3, #8]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	431a      	orrs	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	69db      	ldr	r3, [r3, #28]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	4ba6      	ldr	r3, [pc, #664]	; (8003118 <UART_SetConfig+0x2c4>)
 8002e80:	4013      	ands	r3, r2
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	6812      	ldr	r2, [r2, #0]
 8002e86:	6979      	ldr	r1, [r7, #20]
 8002e88:	430b      	orrs	r3, r1
 8002e8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68da      	ldr	r2, [r3, #12]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	697a      	ldr	r2, [r7, #20]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a94      	ldr	r2, [pc, #592]	; (800311c <UART_SetConfig+0x2c8>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d120      	bne.n	8002f12 <UART_SetConfig+0xbe>
 8002ed0:	4b93      	ldr	r3, [pc, #588]	; (8003120 <UART_SetConfig+0x2cc>)
 8002ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed6:	f003 0303 	and.w	r3, r3, #3
 8002eda:	2b03      	cmp	r3, #3
 8002edc:	d816      	bhi.n	8002f0c <UART_SetConfig+0xb8>
 8002ede:	a201      	add	r2, pc, #4	; (adr r2, 8002ee4 <UART_SetConfig+0x90>)
 8002ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee4:	08002ef5 	.word	0x08002ef5
 8002ee8:	08002f01 	.word	0x08002f01
 8002eec:	08002efb 	.word	0x08002efb
 8002ef0:	08002f07 	.word	0x08002f07
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	77fb      	strb	r3, [r7, #31]
 8002ef8:	e150      	b.n	800319c <UART_SetConfig+0x348>
 8002efa:	2302      	movs	r3, #2
 8002efc:	77fb      	strb	r3, [r7, #31]
 8002efe:	e14d      	b.n	800319c <UART_SetConfig+0x348>
 8002f00:	2304      	movs	r3, #4
 8002f02:	77fb      	strb	r3, [r7, #31]
 8002f04:	e14a      	b.n	800319c <UART_SetConfig+0x348>
 8002f06:	2308      	movs	r3, #8
 8002f08:	77fb      	strb	r3, [r7, #31]
 8002f0a:	e147      	b.n	800319c <UART_SetConfig+0x348>
 8002f0c:	2310      	movs	r3, #16
 8002f0e:	77fb      	strb	r3, [r7, #31]
 8002f10:	e144      	b.n	800319c <UART_SetConfig+0x348>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a83      	ldr	r2, [pc, #524]	; (8003124 <UART_SetConfig+0x2d0>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d132      	bne.n	8002f82 <UART_SetConfig+0x12e>
 8002f1c:	4b80      	ldr	r3, [pc, #512]	; (8003120 <UART_SetConfig+0x2cc>)
 8002f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f22:	f003 030c 	and.w	r3, r3, #12
 8002f26:	2b0c      	cmp	r3, #12
 8002f28:	d828      	bhi.n	8002f7c <UART_SetConfig+0x128>
 8002f2a:	a201      	add	r2, pc, #4	; (adr r2, 8002f30 <UART_SetConfig+0xdc>)
 8002f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f30:	08002f65 	.word	0x08002f65
 8002f34:	08002f7d 	.word	0x08002f7d
 8002f38:	08002f7d 	.word	0x08002f7d
 8002f3c:	08002f7d 	.word	0x08002f7d
 8002f40:	08002f71 	.word	0x08002f71
 8002f44:	08002f7d 	.word	0x08002f7d
 8002f48:	08002f7d 	.word	0x08002f7d
 8002f4c:	08002f7d 	.word	0x08002f7d
 8002f50:	08002f6b 	.word	0x08002f6b
 8002f54:	08002f7d 	.word	0x08002f7d
 8002f58:	08002f7d 	.word	0x08002f7d
 8002f5c:	08002f7d 	.word	0x08002f7d
 8002f60:	08002f77 	.word	0x08002f77
 8002f64:	2300      	movs	r3, #0
 8002f66:	77fb      	strb	r3, [r7, #31]
 8002f68:	e118      	b.n	800319c <UART_SetConfig+0x348>
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	77fb      	strb	r3, [r7, #31]
 8002f6e:	e115      	b.n	800319c <UART_SetConfig+0x348>
 8002f70:	2304      	movs	r3, #4
 8002f72:	77fb      	strb	r3, [r7, #31]
 8002f74:	e112      	b.n	800319c <UART_SetConfig+0x348>
 8002f76:	2308      	movs	r3, #8
 8002f78:	77fb      	strb	r3, [r7, #31]
 8002f7a:	e10f      	b.n	800319c <UART_SetConfig+0x348>
 8002f7c:	2310      	movs	r3, #16
 8002f7e:	77fb      	strb	r3, [r7, #31]
 8002f80:	e10c      	b.n	800319c <UART_SetConfig+0x348>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a68      	ldr	r2, [pc, #416]	; (8003128 <UART_SetConfig+0x2d4>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d120      	bne.n	8002fce <UART_SetConfig+0x17a>
 8002f8c:	4b64      	ldr	r3, [pc, #400]	; (8003120 <UART_SetConfig+0x2cc>)
 8002f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f92:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002f96:	2b30      	cmp	r3, #48	; 0x30
 8002f98:	d013      	beq.n	8002fc2 <UART_SetConfig+0x16e>
 8002f9a:	2b30      	cmp	r3, #48	; 0x30
 8002f9c:	d814      	bhi.n	8002fc8 <UART_SetConfig+0x174>
 8002f9e:	2b20      	cmp	r3, #32
 8002fa0:	d009      	beq.n	8002fb6 <UART_SetConfig+0x162>
 8002fa2:	2b20      	cmp	r3, #32
 8002fa4:	d810      	bhi.n	8002fc8 <UART_SetConfig+0x174>
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d002      	beq.n	8002fb0 <UART_SetConfig+0x15c>
 8002faa:	2b10      	cmp	r3, #16
 8002fac:	d006      	beq.n	8002fbc <UART_SetConfig+0x168>
 8002fae:	e00b      	b.n	8002fc8 <UART_SetConfig+0x174>
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	77fb      	strb	r3, [r7, #31]
 8002fb4:	e0f2      	b.n	800319c <UART_SetConfig+0x348>
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	77fb      	strb	r3, [r7, #31]
 8002fba:	e0ef      	b.n	800319c <UART_SetConfig+0x348>
 8002fbc:	2304      	movs	r3, #4
 8002fbe:	77fb      	strb	r3, [r7, #31]
 8002fc0:	e0ec      	b.n	800319c <UART_SetConfig+0x348>
 8002fc2:	2308      	movs	r3, #8
 8002fc4:	77fb      	strb	r3, [r7, #31]
 8002fc6:	e0e9      	b.n	800319c <UART_SetConfig+0x348>
 8002fc8:	2310      	movs	r3, #16
 8002fca:	77fb      	strb	r3, [r7, #31]
 8002fcc:	e0e6      	b.n	800319c <UART_SetConfig+0x348>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a56      	ldr	r2, [pc, #344]	; (800312c <UART_SetConfig+0x2d8>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d120      	bne.n	800301a <UART_SetConfig+0x1c6>
 8002fd8:	4b51      	ldr	r3, [pc, #324]	; (8003120 <UART_SetConfig+0x2cc>)
 8002fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fde:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002fe2:	2bc0      	cmp	r3, #192	; 0xc0
 8002fe4:	d013      	beq.n	800300e <UART_SetConfig+0x1ba>
 8002fe6:	2bc0      	cmp	r3, #192	; 0xc0
 8002fe8:	d814      	bhi.n	8003014 <UART_SetConfig+0x1c0>
 8002fea:	2b80      	cmp	r3, #128	; 0x80
 8002fec:	d009      	beq.n	8003002 <UART_SetConfig+0x1ae>
 8002fee:	2b80      	cmp	r3, #128	; 0x80
 8002ff0:	d810      	bhi.n	8003014 <UART_SetConfig+0x1c0>
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d002      	beq.n	8002ffc <UART_SetConfig+0x1a8>
 8002ff6:	2b40      	cmp	r3, #64	; 0x40
 8002ff8:	d006      	beq.n	8003008 <UART_SetConfig+0x1b4>
 8002ffa:	e00b      	b.n	8003014 <UART_SetConfig+0x1c0>
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	77fb      	strb	r3, [r7, #31]
 8003000:	e0cc      	b.n	800319c <UART_SetConfig+0x348>
 8003002:	2302      	movs	r3, #2
 8003004:	77fb      	strb	r3, [r7, #31]
 8003006:	e0c9      	b.n	800319c <UART_SetConfig+0x348>
 8003008:	2304      	movs	r3, #4
 800300a:	77fb      	strb	r3, [r7, #31]
 800300c:	e0c6      	b.n	800319c <UART_SetConfig+0x348>
 800300e:	2308      	movs	r3, #8
 8003010:	77fb      	strb	r3, [r7, #31]
 8003012:	e0c3      	b.n	800319c <UART_SetConfig+0x348>
 8003014:	2310      	movs	r3, #16
 8003016:	77fb      	strb	r3, [r7, #31]
 8003018:	e0c0      	b.n	800319c <UART_SetConfig+0x348>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a44      	ldr	r2, [pc, #272]	; (8003130 <UART_SetConfig+0x2dc>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d125      	bne.n	8003070 <UART_SetConfig+0x21c>
 8003024:	4b3e      	ldr	r3, [pc, #248]	; (8003120 <UART_SetConfig+0x2cc>)
 8003026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800302a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800302e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003032:	d017      	beq.n	8003064 <UART_SetConfig+0x210>
 8003034:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003038:	d817      	bhi.n	800306a <UART_SetConfig+0x216>
 800303a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800303e:	d00b      	beq.n	8003058 <UART_SetConfig+0x204>
 8003040:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003044:	d811      	bhi.n	800306a <UART_SetConfig+0x216>
 8003046:	2b00      	cmp	r3, #0
 8003048:	d003      	beq.n	8003052 <UART_SetConfig+0x1fe>
 800304a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800304e:	d006      	beq.n	800305e <UART_SetConfig+0x20a>
 8003050:	e00b      	b.n	800306a <UART_SetConfig+0x216>
 8003052:	2300      	movs	r3, #0
 8003054:	77fb      	strb	r3, [r7, #31]
 8003056:	e0a1      	b.n	800319c <UART_SetConfig+0x348>
 8003058:	2302      	movs	r3, #2
 800305a:	77fb      	strb	r3, [r7, #31]
 800305c:	e09e      	b.n	800319c <UART_SetConfig+0x348>
 800305e:	2304      	movs	r3, #4
 8003060:	77fb      	strb	r3, [r7, #31]
 8003062:	e09b      	b.n	800319c <UART_SetConfig+0x348>
 8003064:	2308      	movs	r3, #8
 8003066:	77fb      	strb	r3, [r7, #31]
 8003068:	e098      	b.n	800319c <UART_SetConfig+0x348>
 800306a:	2310      	movs	r3, #16
 800306c:	77fb      	strb	r3, [r7, #31]
 800306e:	e095      	b.n	800319c <UART_SetConfig+0x348>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a2f      	ldr	r2, [pc, #188]	; (8003134 <UART_SetConfig+0x2e0>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d125      	bne.n	80030c6 <UART_SetConfig+0x272>
 800307a:	4b29      	ldr	r3, [pc, #164]	; (8003120 <UART_SetConfig+0x2cc>)
 800307c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003080:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003084:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003088:	d017      	beq.n	80030ba <UART_SetConfig+0x266>
 800308a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800308e:	d817      	bhi.n	80030c0 <UART_SetConfig+0x26c>
 8003090:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003094:	d00b      	beq.n	80030ae <UART_SetConfig+0x25a>
 8003096:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800309a:	d811      	bhi.n	80030c0 <UART_SetConfig+0x26c>
 800309c:	2b00      	cmp	r3, #0
 800309e:	d003      	beq.n	80030a8 <UART_SetConfig+0x254>
 80030a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030a4:	d006      	beq.n	80030b4 <UART_SetConfig+0x260>
 80030a6:	e00b      	b.n	80030c0 <UART_SetConfig+0x26c>
 80030a8:	2301      	movs	r3, #1
 80030aa:	77fb      	strb	r3, [r7, #31]
 80030ac:	e076      	b.n	800319c <UART_SetConfig+0x348>
 80030ae:	2302      	movs	r3, #2
 80030b0:	77fb      	strb	r3, [r7, #31]
 80030b2:	e073      	b.n	800319c <UART_SetConfig+0x348>
 80030b4:	2304      	movs	r3, #4
 80030b6:	77fb      	strb	r3, [r7, #31]
 80030b8:	e070      	b.n	800319c <UART_SetConfig+0x348>
 80030ba:	2308      	movs	r3, #8
 80030bc:	77fb      	strb	r3, [r7, #31]
 80030be:	e06d      	b.n	800319c <UART_SetConfig+0x348>
 80030c0:	2310      	movs	r3, #16
 80030c2:	77fb      	strb	r3, [r7, #31]
 80030c4:	e06a      	b.n	800319c <UART_SetConfig+0x348>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a1b      	ldr	r2, [pc, #108]	; (8003138 <UART_SetConfig+0x2e4>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d138      	bne.n	8003142 <UART_SetConfig+0x2ee>
 80030d0:	4b13      	ldr	r3, [pc, #76]	; (8003120 <UART_SetConfig+0x2cc>)
 80030d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80030da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80030de:	d017      	beq.n	8003110 <UART_SetConfig+0x2bc>
 80030e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80030e4:	d82a      	bhi.n	800313c <UART_SetConfig+0x2e8>
 80030e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030ea:	d00b      	beq.n	8003104 <UART_SetConfig+0x2b0>
 80030ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030f0:	d824      	bhi.n	800313c <UART_SetConfig+0x2e8>
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <UART_SetConfig+0x2aa>
 80030f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030fa:	d006      	beq.n	800310a <UART_SetConfig+0x2b6>
 80030fc:	e01e      	b.n	800313c <UART_SetConfig+0x2e8>
 80030fe:	2300      	movs	r3, #0
 8003100:	77fb      	strb	r3, [r7, #31]
 8003102:	e04b      	b.n	800319c <UART_SetConfig+0x348>
 8003104:	2302      	movs	r3, #2
 8003106:	77fb      	strb	r3, [r7, #31]
 8003108:	e048      	b.n	800319c <UART_SetConfig+0x348>
 800310a:	2304      	movs	r3, #4
 800310c:	77fb      	strb	r3, [r7, #31]
 800310e:	e045      	b.n	800319c <UART_SetConfig+0x348>
 8003110:	2308      	movs	r3, #8
 8003112:	77fb      	strb	r3, [r7, #31]
 8003114:	e042      	b.n	800319c <UART_SetConfig+0x348>
 8003116:	bf00      	nop
 8003118:	efff69f3 	.word	0xefff69f3
 800311c:	40011000 	.word	0x40011000
 8003120:	40023800 	.word	0x40023800
 8003124:	40004400 	.word	0x40004400
 8003128:	40004800 	.word	0x40004800
 800312c:	40004c00 	.word	0x40004c00
 8003130:	40005000 	.word	0x40005000
 8003134:	40011400 	.word	0x40011400
 8003138:	40007800 	.word	0x40007800
 800313c:	2310      	movs	r3, #16
 800313e:	77fb      	strb	r3, [r7, #31]
 8003140:	e02c      	b.n	800319c <UART_SetConfig+0x348>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a72      	ldr	r2, [pc, #456]	; (8003310 <UART_SetConfig+0x4bc>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d125      	bne.n	8003198 <UART_SetConfig+0x344>
 800314c:	4b71      	ldr	r3, [pc, #452]	; (8003314 <UART_SetConfig+0x4c0>)
 800314e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003152:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003156:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800315a:	d017      	beq.n	800318c <UART_SetConfig+0x338>
 800315c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003160:	d817      	bhi.n	8003192 <UART_SetConfig+0x33e>
 8003162:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003166:	d00b      	beq.n	8003180 <UART_SetConfig+0x32c>
 8003168:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800316c:	d811      	bhi.n	8003192 <UART_SetConfig+0x33e>
 800316e:	2b00      	cmp	r3, #0
 8003170:	d003      	beq.n	800317a <UART_SetConfig+0x326>
 8003172:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003176:	d006      	beq.n	8003186 <UART_SetConfig+0x332>
 8003178:	e00b      	b.n	8003192 <UART_SetConfig+0x33e>
 800317a:	2300      	movs	r3, #0
 800317c:	77fb      	strb	r3, [r7, #31]
 800317e:	e00d      	b.n	800319c <UART_SetConfig+0x348>
 8003180:	2302      	movs	r3, #2
 8003182:	77fb      	strb	r3, [r7, #31]
 8003184:	e00a      	b.n	800319c <UART_SetConfig+0x348>
 8003186:	2304      	movs	r3, #4
 8003188:	77fb      	strb	r3, [r7, #31]
 800318a:	e007      	b.n	800319c <UART_SetConfig+0x348>
 800318c:	2308      	movs	r3, #8
 800318e:	77fb      	strb	r3, [r7, #31]
 8003190:	e004      	b.n	800319c <UART_SetConfig+0x348>
 8003192:	2310      	movs	r3, #16
 8003194:	77fb      	strb	r3, [r7, #31]
 8003196:	e001      	b.n	800319c <UART_SetConfig+0x348>
 8003198:	2310      	movs	r3, #16
 800319a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	69db      	ldr	r3, [r3, #28]
 80031a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031a4:	d15c      	bne.n	8003260 <UART_SetConfig+0x40c>
  {
    switch (clocksource)
 80031a6:	7ffb      	ldrb	r3, [r7, #31]
 80031a8:	2b08      	cmp	r3, #8
 80031aa:	d828      	bhi.n	80031fe <UART_SetConfig+0x3aa>
 80031ac:	a201      	add	r2, pc, #4	; (adr r2, 80031b4 <UART_SetConfig+0x360>)
 80031ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b2:	bf00      	nop
 80031b4:	080031d9 	.word	0x080031d9
 80031b8:	080031e1 	.word	0x080031e1
 80031bc:	080031e9 	.word	0x080031e9
 80031c0:	080031ff 	.word	0x080031ff
 80031c4:	080031ef 	.word	0x080031ef
 80031c8:	080031ff 	.word	0x080031ff
 80031cc:	080031ff 	.word	0x080031ff
 80031d0:	080031ff 	.word	0x080031ff
 80031d4:	080031f7 	.word	0x080031f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031d8:	f7fe fd5c 	bl	8001c94 <HAL_RCC_GetPCLK1Freq>
 80031dc:	61b8      	str	r0, [r7, #24]
        break;
 80031de:	e013      	b.n	8003208 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031e0:	f7fe fd6c 	bl	8001cbc <HAL_RCC_GetPCLK2Freq>
 80031e4:	61b8      	str	r0, [r7, #24]
        break;
 80031e6:	e00f      	b.n	8003208 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031e8:	4b4b      	ldr	r3, [pc, #300]	; (8003318 <UART_SetConfig+0x4c4>)
 80031ea:	61bb      	str	r3, [r7, #24]
        break;
 80031ec:	e00c      	b.n	8003208 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031ee:	f7fe fc3f 	bl	8001a70 <HAL_RCC_GetSysClockFreq>
 80031f2:	61b8      	str	r0, [r7, #24]
        break;
 80031f4:	e008      	b.n	8003208 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031fa:	61bb      	str	r3, [r7, #24]
        break;
 80031fc:	e004      	b.n	8003208 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80031fe:	2300      	movs	r3, #0
 8003200:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	77bb      	strb	r3, [r7, #30]
        break;
 8003206:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d074      	beq.n	80032f8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	005a      	lsls	r2, r3, #1
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	085b      	lsrs	r3, r3, #1
 8003218:	441a      	add	r2, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003222:	b29b      	uxth	r3, r3
 8003224:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	2b0f      	cmp	r3, #15
 800322a:	d916      	bls.n	800325a <UART_SetConfig+0x406>
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003232:	d212      	bcs.n	800325a <UART_SetConfig+0x406>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	b29b      	uxth	r3, r3
 8003238:	f023 030f 	bic.w	r3, r3, #15
 800323c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	085b      	lsrs	r3, r3, #1
 8003242:	b29b      	uxth	r3, r3
 8003244:	f003 0307 	and.w	r3, r3, #7
 8003248:	b29a      	uxth	r2, r3
 800324a:	89fb      	ldrh	r3, [r7, #14]
 800324c:	4313      	orrs	r3, r2
 800324e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	89fa      	ldrh	r2, [r7, #14]
 8003256:	60da      	str	r2, [r3, #12]
 8003258:	e04e      	b.n	80032f8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	77bb      	strb	r3, [r7, #30]
 800325e:	e04b      	b.n	80032f8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003260:	7ffb      	ldrb	r3, [r7, #31]
 8003262:	2b08      	cmp	r3, #8
 8003264:	d827      	bhi.n	80032b6 <UART_SetConfig+0x462>
 8003266:	a201      	add	r2, pc, #4	; (adr r2, 800326c <UART_SetConfig+0x418>)
 8003268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800326c:	08003291 	.word	0x08003291
 8003270:	08003299 	.word	0x08003299
 8003274:	080032a1 	.word	0x080032a1
 8003278:	080032b7 	.word	0x080032b7
 800327c:	080032a7 	.word	0x080032a7
 8003280:	080032b7 	.word	0x080032b7
 8003284:	080032b7 	.word	0x080032b7
 8003288:	080032b7 	.word	0x080032b7
 800328c:	080032af 	.word	0x080032af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003290:	f7fe fd00 	bl	8001c94 <HAL_RCC_GetPCLK1Freq>
 8003294:	61b8      	str	r0, [r7, #24]
        break;
 8003296:	e013      	b.n	80032c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003298:	f7fe fd10 	bl	8001cbc <HAL_RCC_GetPCLK2Freq>
 800329c:	61b8      	str	r0, [r7, #24]
        break;
 800329e:	e00f      	b.n	80032c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032a0:	4b1d      	ldr	r3, [pc, #116]	; (8003318 <UART_SetConfig+0x4c4>)
 80032a2:	61bb      	str	r3, [r7, #24]
        break;
 80032a4:	e00c      	b.n	80032c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032a6:	f7fe fbe3 	bl	8001a70 <HAL_RCC_GetSysClockFreq>
 80032aa:	61b8      	str	r0, [r7, #24]
        break;
 80032ac:	e008      	b.n	80032c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032b2:	61bb      	str	r3, [r7, #24]
        break;
 80032b4:	e004      	b.n	80032c0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80032b6:	2300      	movs	r3, #0
 80032b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	77bb      	strb	r3, [r7, #30]
        break;
 80032be:	bf00      	nop
    }

    if (pclk != 0U)
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d018      	beq.n	80032f8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	085a      	lsrs	r2, r3, #1
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	441a      	add	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d8:	b29b      	uxth	r3, r3
 80032da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	2b0f      	cmp	r3, #15
 80032e0:	d908      	bls.n	80032f4 <UART_SetConfig+0x4a0>
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e8:	d204      	bcs.n	80032f4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = usartdiv;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	60da      	str	r2, [r3, #12]
 80032f2:	e001      	b.n	80032f8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003304:	7fbb      	ldrb	r3, [r7, #30]
}
 8003306:	4618      	mov	r0, r3
 8003308:	3720      	adds	r7, #32
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	40007c00 	.word	0x40007c00
 8003314:	40023800 	.word	0x40023800
 8003318:	00f42400 	.word	0x00f42400

0800331c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00a      	beq.n	8003346 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	430a      	orrs	r2, r1
 8003344:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00a      	beq.n	8003368 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	430a      	orrs	r2, r1
 8003366:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336c:	f003 0304 	and.w	r3, r3, #4
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00a      	beq.n	800338a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	430a      	orrs	r2, r1
 8003388:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338e:	f003 0308 	and.w	r3, r3, #8
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00a      	beq.n	80033ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	430a      	orrs	r2, r1
 80033aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b0:	f003 0310 	and.w	r3, r3, #16
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00a      	beq.n	80033ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	430a      	orrs	r2, r1
 80033cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d2:	f003 0320 	and.w	r3, r3, #32
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00a      	beq.n	80033f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	430a      	orrs	r2, r1
 80033ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d01a      	beq.n	8003432 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	430a      	orrs	r2, r1
 8003410:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003416:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800341a:	d10a      	bne.n	8003432 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	430a      	orrs	r2, r1
 8003430:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00a      	beq.n	8003454 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	430a      	orrs	r2, r1
 8003452:	605a      	str	r2, [r3, #4]
  }
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b086      	sub	sp, #24
 8003464:	af02      	add	r7, sp, #8
 8003466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003470:	f7fd fbd8 	bl	8000c24 <HAL_GetTick>
 8003474:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0308 	and.w	r3, r3, #8
 8003480:	2b08      	cmp	r3, #8
 8003482:	d10e      	bne.n	80034a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003484:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2200      	movs	r2, #0
 800348e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 f817 	bl	80034c6 <UART_WaitOnFlagUntilTimeout>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e00d      	b.n	80034be <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2220      	movs	r2, #32
 80034a6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2220      	movs	r2, #32
 80034ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b084      	sub	sp, #16
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	60f8      	str	r0, [r7, #12]
 80034ce:	60b9      	str	r1, [r7, #8]
 80034d0:	603b      	str	r3, [r7, #0]
 80034d2:	4613      	mov	r3, r2
 80034d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034d6:	e05e      	b.n	8003596 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034de:	d05a      	beq.n	8003596 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034e0:	f7fd fba0 	bl	8000c24 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	69ba      	ldr	r2, [r7, #24]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d302      	bcc.n	80034f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d11b      	bne.n	800352e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003504:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	689a      	ldr	r2, [r3, #8]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f022 0201 	bic.w	r2, r2, #1
 8003514:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2220      	movs	r2, #32
 800351a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2220      	movs	r2, #32
 8003520:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e043      	b.n	80035b6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0304 	and.w	r3, r3, #4
 8003538:	2b00      	cmp	r3, #0
 800353a:	d02c      	beq.n	8003596 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	69db      	ldr	r3, [r3, #28]
 8003542:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003546:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800354a:	d124      	bne.n	8003596 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003554:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003564:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689a      	ldr	r2, [r3, #8]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f022 0201 	bic.w	r2, r2, #1
 8003574:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2220      	movs	r2, #32
 800357a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2220      	movs	r2, #32
 8003580:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2220      	movs	r2, #32
 8003586:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e00f      	b.n	80035b6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	69da      	ldr	r2, [r3, #28]
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	4013      	ands	r3, r2
 80035a0:	68ba      	ldr	r2, [r7, #8]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	bf0c      	ite	eq
 80035a6:	2301      	moveq	r3, #1
 80035a8:	2300      	movne	r3, #0
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	461a      	mov	r2, r3
 80035ae:	79fb      	ldrb	r3, [r7, #7]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d091      	beq.n	80034d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035be:	b480      	push	{r7}
 80035c0:	b083      	sub	sp, #12
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80035d4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 0201 	bic.w	r2, r2, #1
 80035e4:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d107      	bne.n	80035fe <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 0210 	bic.w	r2, r2, #16
 80035fc:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2220      	movs	r2, #32
 8003602:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003628:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f7ff fbf4 	bl	8002e28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003640:	bf00      	nop
 8003642:	3710      	adds	r7, #16
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800365e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2220      	movs	r2, #32
 8003664:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f7ff fbd1 	bl	8002e14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003672:	bf00      	nop
 8003674:	3708      	adds	r7, #8
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800367a:	b480      	push	{r7}
 800367c:	b085      	sub	sp, #20
 800367e:	af00      	add	r7, sp, #0
 8003680:	4603      	mov	r3, r0
 8003682:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003684:	2300      	movs	r3, #0
 8003686:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003688:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800368c:	2b84      	cmp	r3, #132	; 0x84
 800368e:	d005      	beq.n	800369c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003690:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	4413      	add	r3, r2
 8003698:	3303      	adds	r3, #3
 800369a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800369c:	68fb      	ldr	r3, [r7, #12]
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3714      	adds	r7, #20
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80036ae:	f000 fb21 	bl	8003cf4 <vTaskStartScheduler>
  
  return osOK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80036b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036ba:	b089      	sub	sp, #36	; 0x24
 80036bc:	af04      	add	r7, sp, #16
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d020      	beq.n	800370c <osThreadCreate+0x54>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d01c      	beq.n	800370c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685c      	ldr	r4, [r3, #4]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681d      	ldr	r5, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	691e      	ldr	r6, [r3, #16]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7ff ffc8 	bl	800367a <makeFreeRtosPriority>
 80036ea:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	695b      	ldr	r3, [r3, #20]
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80036f4:	9202      	str	r2, [sp, #8]
 80036f6:	9301      	str	r3, [sp, #4]
 80036f8:	9100      	str	r1, [sp, #0]
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	4632      	mov	r2, r6
 80036fe:	4629      	mov	r1, r5
 8003700:	4620      	mov	r0, r4
 8003702:	f000 f8ed 	bl	80038e0 <xTaskCreateStatic>
 8003706:	4603      	mov	r3, r0
 8003708:	60fb      	str	r3, [r7, #12]
 800370a:	e01c      	b.n	8003746 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685c      	ldr	r4, [r3, #4]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003718:	b29e      	uxth	r6, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003720:	4618      	mov	r0, r3
 8003722:	f7ff ffaa 	bl	800367a <makeFreeRtosPriority>
 8003726:	4602      	mov	r2, r0
 8003728:	f107 030c 	add.w	r3, r7, #12
 800372c:	9301      	str	r3, [sp, #4]
 800372e:	9200      	str	r2, [sp, #0]
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	4632      	mov	r2, r6
 8003734:	4629      	mov	r1, r5
 8003736:	4620      	mov	r0, r4
 8003738:	f000 f935 	bl	80039a6 <xTaskCreate>
 800373c:	4603      	mov	r3, r0
 800373e:	2b01      	cmp	r3, #1
 8003740:	d001      	beq.n	8003746 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003742:	2300      	movs	r3, #0
 8003744:	e000      	b.n	8003748 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003746:	68fb      	ldr	r3, [r7, #12]
}
 8003748:	4618      	mov	r0, r3
 800374a:	3714      	adds	r7, #20
 800374c:	46bd      	mov	sp, r7
 800374e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003750 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <osDelay+0x16>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	e000      	b.n	8003768 <osDelay+0x18>
 8003766:	2301      	movs	r3, #1
 8003768:	4618      	mov	r0, r3
 800376a:	f000 fa89 	bl	8003c80 <vTaskDelay>
  
  return osOK;
 800376e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003770:	4618      	mov	r0, r3
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f103 0208 	add.w	r2, r3, #8
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f04f 32ff 	mov.w	r2, #4294967295
 8003790:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f103 0208 	add.w	r2, r3, #8
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f103 0208 	add.w	r2, r3, #8
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80037c6:	bf00      	nop
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr

080037d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80037d2:	b480      	push	{r7}
 80037d4:	b085      	sub	sp, #20
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
 80037da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	689a      	ldr	r2, [r3, #8]
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	683a      	ldr	r2, [r7, #0]
 80037f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	683a      	ldr	r2, [r7, #0]
 80037fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	1c5a      	adds	r2, r3, #1
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	601a      	str	r2, [r3, #0]
}
 800380e:	bf00      	nop
 8003810:	3714      	adds	r7, #20
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr

0800381a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800381a:	b480      	push	{r7}
 800381c:	b085      	sub	sp, #20
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
 8003822:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003830:	d103      	bne.n	800383a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	60fb      	str	r3, [r7, #12]
 8003838:	e00c      	b.n	8003854 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	3308      	adds	r3, #8
 800383e:	60fb      	str	r3, [r7, #12]
 8003840:	e002      	b.n	8003848 <vListInsert+0x2e>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	60fb      	str	r3, [r7, #12]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68ba      	ldr	r2, [r7, #8]
 8003850:	429a      	cmp	r2, r3
 8003852:	d2f6      	bcs.n	8003842 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	685a      	ldr	r2, [r3, #4]
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	683a      	ldr	r2, [r7, #0]
 8003862:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	683a      	ldr	r2, [r7, #0]
 800386e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	1c5a      	adds	r2, r3, #1
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	601a      	str	r2, [r3, #0]
}
 8003880:	bf00      	nop
 8003882:	3714      	adds	r7, #20
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800388c:	b480      	push	{r7}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	6892      	ldr	r2, [r2, #8]
 80038a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	6852      	ldr	r2, [r2, #4]
 80038ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d103      	bne.n	80038c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689a      	ldr	r2, [r3, #8]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	1e5a      	subs	r2, r3, #1
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3714      	adds	r7, #20
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b08e      	sub	sp, #56	; 0x38
 80038e4:	af04      	add	r7, sp, #16
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
 80038ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80038ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d10c      	bne.n	800390e <xTaskCreateStatic+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80038f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f8:	b672      	cpsid	i
 80038fa:	f383 8811 	msr	BASEPRI, r3
 80038fe:	f3bf 8f6f 	isb	sy
 8003902:	f3bf 8f4f 	dsb	sy
 8003906:	b662      	cpsie	i
 8003908:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800390a:	bf00      	nop
 800390c:	e7fe      	b.n	800390c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800390e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003910:	2b00      	cmp	r3, #0
 8003912:	d10c      	bne.n	800392e <xTaskCreateStatic+0x4e>
	__asm volatile
 8003914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003918:	b672      	cpsid	i
 800391a:	f383 8811 	msr	BASEPRI, r3
 800391e:	f3bf 8f6f 	isb	sy
 8003922:	f3bf 8f4f 	dsb	sy
 8003926:	b662      	cpsie	i
 8003928:	61fb      	str	r3, [r7, #28]
}
 800392a:	bf00      	nop
 800392c:	e7fe      	b.n	800392c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800392e:	23b4      	movs	r3, #180	; 0xb4
 8003930:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	2bb4      	cmp	r3, #180	; 0xb4
 8003936:	d00c      	beq.n	8003952 <xTaskCreateStatic+0x72>
	__asm volatile
 8003938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800393c:	b672      	cpsid	i
 800393e:	f383 8811 	msr	BASEPRI, r3
 8003942:	f3bf 8f6f 	isb	sy
 8003946:	f3bf 8f4f 	dsb	sy
 800394a:	b662      	cpsie	i
 800394c:	61bb      	str	r3, [r7, #24]
}
 800394e:	bf00      	nop
 8003950:	e7fe      	b.n	8003950 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003952:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003956:	2b00      	cmp	r3, #0
 8003958:	d01e      	beq.n	8003998 <xTaskCreateStatic+0xb8>
 800395a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800395c:	2b00      	cmp	r3, #0
 800395e:	d01b      	beq.n	8003998 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003962:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003966:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003968:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800396a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396c:	2202      	movs	r2, #2
 800396e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003972:	2300      	movs	r3, #0
 8003974:	9303      	str	r3, [sp, #12]
 8003976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003978:	9302      	str	r3, [sp, #8]
 800397a:	f107 0314 	add.w	r3, r7, #20
 800397e:	9301      	str	r3, [sp, #4]
 8003980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003982:	9300      	str	r3, [sp, #0]
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	68b9      	ldr	r1, [r7, #8]
 800398a:	68f8      	ldr	r0, [r7, #12]
 800398c:	f000 f850 	bl	8003a30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003990:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003992:	f000 f8ed 	bl	8003b70 <prvAddNewTaskToReadyList>
 8003996:	e001      	b.n	800399c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8003998:	2300      	movs	r3, #0
 800399a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800399c:	697b      	ldr	r3, [r7, #20]
	}
 800399e:	4618      	mov	r0, r3
 80039a0:	3728      	adds	r7, #40	; 0x28
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b08c      	sub	sp, #48	; 0x30
 80039aa:	af04      	add	r7, sp, #16
 80039ac:	60f8      	str	r0, [r7, #12]
 80039ae:	60b9      	str	r1, [r7, #8]
 80039b0:	603b      	str	r3, [r7, #0]
 80039b2:	4613      	mov	r3, r2
 80039b4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80039b6:	88fb      	ldrh	r3, [r7, #6]
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	4618      	mov	r0, r3
 80039bc:	f000 ff9a 	bl	80048f4 <pvPortMalloc>
 80039c0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00e      	beq.n	80039e6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80039c8:	20b4      	movs	r0, #180	; 0xb4
 80039ca:	f000 ff93 	bl	80048f4 <pvPortMalloc>
 80039ce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d003      	beq.n	80039de <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	631a      	str	r2, [r3, #48]	; 0x30
 80039dc:	e005      	b.n	80039ea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80039de:	6978      	ldr	r0, [r7, #20]
 80039e0:	f001 f852 	bl	8004a88 <vPortFree>
 80039e4:	e001      	b.n	80039ea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80039e6:	2300      	movs	r3, #0
 80039e8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d017      	beq.n	8003a20 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80039f8:	88fa      	ldrh	r2, [r7, #6]
 80039fa:	2300      	movs	r3, #0
 80039fc:	9303      	str	r3, [sp, #12]
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	9302      	str	r3, [sp, #8]
 8003a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a04:	9301      	str	r3, [sp, #4]
 8003a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a08:	9300      	str	r3, [sp, #0]
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	68b9      	ldr	r1, [r7, #8]
 8003a0e:	68f8      	ldr	r0, [r7, #12]
 8003a10:	f000 f80e 	bl	8003a30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a14:	69f8      	ldr	r0, [r7, #28]
 8003a16:	f000 f8ab 	bl	8003b70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	61bb      	str	r3, [r7, #24]
 8003a1e:	e002      	b.n	8003a26 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a20:	f04f 33ff 	mov.w	r3, #4294967295
 8003a24:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003a26:	69bb      	ldr	r3, [r7, #24]
	}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3720      	adds	r7, #32
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b088      	sub	sp, #32
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
 8003a3c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a42:	6879      	ldr	r1, [r7, #4]
 8003a44:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8003a48:	440b      	add	r3, r1
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	4413      	add	r3, r2
 8003a4e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	f023 0307 	bic.w	r3, r3, #7
 8003a56:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	f003 0307 	and.w	r3, r3, #7
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00c      	beq.n	8003a7c <prvInitialiseNewTask+0x4c>
	__asm volatile
 8003a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a66:	b672      	cpsid	i
 8003a68:	f383 8811 	msr	BASEPRI, r3
 8003a6c:	f3bf 8f6f 	isb	sy
 8003a70:	f3bf 8f4f 	dsb	sy
 8003a74:	b662      	cpsie	i
 8003a76:	617b      	str	r3, [r7, #20]
}
 8003a78:	bf00      	nop
 8003a7a:	e7fe      	b.n	8003a7a <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d01f      	beq.n	8003ac2 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a82:	2300      	movs	r3, #0
 8003a84:	61fb      	str	r3, [r7, #28]
 8003a86:	e012      	b.n	8003aae <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003a88:	68ba      	ldr	r2, [r7, #8]
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	7819      	ldrb	r1, [r3, #0]
 8003a90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	4413      	add	r3, r2
 8003a96:	3334      	adds	r3, #52	; 0x34
 8003a98:	460a      	mov	r2, r1
 8003a9a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003a9c:	68ba      	ldr	r2, [r7, #8]
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d006      	beq.n	8003ab6 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	61fb      	str	r3, [r7, #28]
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	2b0f      	cmp	r3, #15
 8003ab2:	d9e9      	bls.n	8003a88 <prvInitialiseNewTask+0x58>
 8003ab4:	e000      	b.n	8003ab8 <prvInitialiseNewTask+0x88>
			{
				break;
 8003ab6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ac0:	e003      	b.n	8003aca <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003acc:	2b06      	cmp	r3, #6
 8003ace:	d901      	bls.n	8003ad4 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003ad0:	2306      	movs	r3, #6
 8003ad2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ad8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003adc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ade:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae8:	3304      	adds	r3, #4
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7ff fe64 	bl	80037b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af2:	3318      	adds	r3, #24
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7ff fe5f 	bl	80037b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003afc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003afe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b02:	f1c3 0207 	rsb	r2, r3, #7
 8003b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b08:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b0e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b12:	2200      	movs	r2, #0
 8003b14:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b22:	334c      	adds	r3, #76	; 0x4c
 8003b24:	2260      	movs	r2, #96	; 0x60
 8003b26:	2100      	movs	r1, #0
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f002 fcdd 	bl	80064e8 <memset>
 8003b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b30:	4a0c      	ldr	r2, [pc, #48]	; (8003b64 <prvInitialiseNewTask+0x134>)
 8003b32:	651a      	str	r2, [r3, #80]	; 0x50
 8003b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b36:	4a0c      	ldr	r2, [pc, #48]	; (8003b68 <prvInitialiseNewTask+0x138>)
 8003b38:	655a      	str	r2, [r3, #84]	; 0x54
 8003b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3c:	4a0b      	ldr	r2, [pc, #44]	; (8003b6c <prvInitialiseNewTask+0x13c>)
 8003b3e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b40:	683a      	ldr	r2, [r7, #0]
 8003b42:	68f9      	ldr	r1, [r7, #12]
 8003b44:	69b8      	ldr	r0, [r7, #24]
 8003b46:	f000 fc97 	bl	8004478 <pxPortInitialiseStack>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d002      	beq.n	8003b5c <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b5a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b5c:	bf00      	nop
 8003b5e:	3720      	adds	r7, #32
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	080067cc 	.word	0x080067cc
 8003b68:	080067ec 	.word	0x080067ec
 8003b6c:	080067ac 	.word	0x080067ac

08003b70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003b70:	b5b0      	push	{r4, r5, r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af02      	add	r7, sp, #8
 8003b76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003b78:	f000 fd88 	bl	800468c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003b7c:	4b39      	ldr	r3, [pc, #228]	; (8003c64 <prvAddNewTaskToReadyList+0xf4>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	3301      	adds	r3, #1
 8003b82:	4a38      	ldr	r2, [pc, #224]	; (8003c64 <prvAddNewTaskToReadyList+0xf4>)
 8003b84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003b86:	4b38      	ldr	r3, [pc, #224]	; (8003c68 <prvAddNewTaskToReadyList+0xf8>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d109      	bne.n	8003ba2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003b8e:	4a36      	ldr	r2, [pc, #216]	; (8003c68 <prvAddNewTaskToReadyList+0xf8>)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003b94:	4b33      	ldr	r3, [pc, #204]	; (8003c64 <prvAddNewTaskToReadyList+0xf4>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d110      	bne.n	8003bbe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003b9c:	f000 fb30 	bl	8004200 <prvInitialiseTaskLists>
 8003ba0:	e00d      	b.n	8003bbe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003ba2:	4b32      	ldr	r3, [pc, #200]	; (8003c6c <prvAddNewTaskToReadyList+0xfc>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d109      	bne.n	8003bbe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003baa:	4b2f      	ldr	r3, [pc, #188]	; (8003c68 <prvAddNewTaskToReadyList+0xf8>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d802      	bhi.n	8003bbe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003bb8:	4a2b      	ldr	r2, [pc, #172]	; (8003c68 <prvAddNewTaskToReadyList+0xf8>)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003bbe:	4b2c      	ldr	r3, [pc, #176]	; (8003c70 <prvAddNewTaskToReadyList+0x100>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	4a2a      	ldr	r2, [pc, #168]	; (8003c70 <prvAddNewTaskToReadyList+0x100>)
 8003bc6:	6013      	str	r3, [r2, #0]
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d016      	beq.n	8003bfc <prvAddNewTaskToReadyList+0x8c>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f002 f9e7 	bl	8005fa4 <SEGGER_SYSVIEW_OnTaskCreate>
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be6:	461d      	mov	r5, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	461c      	mov	r4, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf2:	1ae3      	subs	r3, r4, r3
 8003bf4:	9300      	str	r3, [sp, #0]
 8003bf6:	462b      	mov	r3, r5
 8003bf8:	f001 f910 	bl	8004e1c <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f002 fa54 	bl	80060ac <SEGGER_SYSVIEW_OnTaskStartReady>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c08:	2201      	movs	r2, #1
 8003c0a:	409a      	lsls	r2, r3
 8003c0c:	4b19      	ldr	r3, [pc, #100]	; (8003c74 <prvAddNewTaskToReadyList+0x104>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	4a18      	ldr	r2, [pc, #96]	; (8003c74 <prvAddNewTaskToReadyList+0x104>)
 8003c14:	6013      	str	r3, [r2, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	4413      	add	r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	4a15      	ldr	r2, [pc, #84]	; (8003c78 <prvAddNewTaskToReadyList+0x108>)
 8003c24:	441a      	add	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	3304      	adds	r3, #4
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	4610      	mov	r0, r2
 8003c2e:	f7ff fdd0 	bl	80037d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003c32:	f000 fd5f 	bl	80046f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003c36:	4b0d      	ldr	r3, [pc, #52]	; (8003c6c <prvAddNewTaskToReadyList+0xfc>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00e      	beq.n	8003c5c <prvAddNewTaskToReadyList+0xec>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c3e:	4b0a      	ldr	r3, [pc, #40]	; (8003c68 <prvAddNewTaskToReadyList+0xf8>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d207      	bcs.n	8003c5c <prvAddNewTaskToReadyList+0xec>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c4c:	4b0b      	ldr	r3, [pc, #44]	; (8003c7c <prvAddNewTaskToReadyList+0x10c>)
 8003c4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c52:	601a      	str	r2, [r3, #0]
 8003c54:	f3bf 8f4f 	dsb	sy
 8003c58:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c5c:	bf00      	nop
 8003c5e:	3708      	adds	r7, #8
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bdb0      	pop	{r4, r5, r7, pc}
 8003c64:	2000051c 	.word	0x2000051c
 8003c68:	2000041c 	.word	0x2000041c
 8003c6c:	20000528 	.word	0x20000528
 8003c70:	20000538 	.word	0x20000538
 8003c74:	20000524 	.word	0x20000524
 8003c78:	20000420 	.word	0x20000420
 8003c7c:	e000ed04 	.word	0xe000ed04

08003c80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d01d      	beq.n	8003cce <vTaskDelay+0x4e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003c92:	4b16      	ldr	r3, [pc, #88]	; (8003cec <vTaskDelay+0x6c>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00c      	beq.n	8003cb4 <vTaskDelay+0x34>
	__asm volatile
 8003c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c9e:	b672      	cpsid	i
 8003ca0:	f383 8811 	msr	BASEPRI, r3
 8003ca4:	f3bf 8f6f 	isb	sy
 8003ca8:	f3bf 8f4f 	dsb	sy
 8003cac:	b662      	cpsie	i
 8003cae:	60bb      	str	r3, [r7, #8]
}
 8003cb0:	bf00      	nop
 8003cb2:	e7fe      	b.n	8003cb2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8003cb4:	f000 f89a 	bl	8003dec <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 8003cb8:	6879      	ldr	r1, [r7, #4]
 8003cba:	2023      	movs	r0, #35	; 0x23
 8003cbc:	f001 fd7e 	bl	80057bc <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 fb60 	bl	8004388 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003cc8:	f000 f89e 	bl	8003e08 <xTaskResumeAll>
 8003ccc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d107      	bne.n	8003ce4 <vTaskDelay+0x64>
		{
			portYIELD_WITHIN_API();
 8003cd4:	4b06      	ldr	r3, [pc, #24]	; (8003cf0 <vTaskDelay+0x70>)
 8003cd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cda:	601a      	str	r2, [r3, #0]
 8003cdc:	f3bf 8f4f 	dsb	sy
 8003ce0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003ce4:	bf00      	nop
 8003ce6:	3710      	adds	r7, #16
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	20000544 	.word	0x20000544
 8003cf0:	e000ed04 	.word	0xe000ed04

08003cf4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b08a      	sub	sp, #40	; 0x28
 8003cf8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003d02:	463a      	mov	r2, r7
 8003d04:	1d39      	adds	r1, r7, #4
 8003d06:	f107 0308 	add.w	r3, r7, #8
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7fc fc54 	bl	80005b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003d10:	6839      	ldr	r1, [r7, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	68ba      	ldr	r2, [r7, #8]
 8003d16:	9202      	str	r2, [sp, #8]
 8003d18:	9301      	str	r3, [sp, #4]
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	2300      	movs	r3, #0
 8003d20:	460a      	mov	r2, r1
 8003d22:	492a      	ldr	r1, [pc, #168]	; (8003dcc <vTaskStartScheduler+0xd8>)
 8003d24:	482a      	ldr	r0, [pc, #168]	; (8003dd0 <vTaskStartScheduler+0xdc>)
 8003d26:	f7ff fddb 	bl	80038e0 <xTaskCreateStatic>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	4a29      	ldr	r2, [pc, #164]	; (8003dd4 <vTaskStartScheduler+0xe0>)
 8003d2e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003d30:	4b28      	ldr	r3, [pc, #160]	; (8003dd4 <vTaskStartScheduler+0xe0>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d002      	beq.n	8003d3e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	617b      	str	r3, [r7, #20]
 8003d3c:	e001      	b.n	8003d42 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d12b      	bne.n	8003da0 <vTaskStartScheduler+0xac>
	__asm volatile
 8003d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d4c:	b672      	cpsid	i
 8003d4e:	f383 8811 	msr	BASEPRI, r3
 8003d52:	f3bf 8f6f 	isb	sy
 8003d56:	f3bf 8f4f 	dsb	sy
 8003d5a:	b662      	cpsie	i
 8003d5c:	613b      	str	r3, [r7, #16]
}
 8003d5e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003d60:	4b1d      	ldr	r3, [pc, #116]	; (8003dd8 <vTaskStartScheduler+0xe4>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	334c      	adds	r3, #76	; 0x4c
 8003d66:	4a1d      	ldr	r2, [pc, #116]	; (8003ddc <vTaskStartScheduler+0xe8>)
 8003d68:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003d6a:	4b1d      	ldr	r3, [pc, #116]	; (8003de0 <vTaskStartScheduler+0xec>)
 8003d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d70:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d72:	4b1c      	ldr	r3, [pc, #112]	; (8003de4 <vTaskStartScheduler+0xf0>)
 8003d74:	2201      	movs	r2, #1
 8003d76:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003d78:	4b1b      	ldr	r3, [pc, #108]	; (8003de8 <vTaskStartScheduler+0xf4>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8003d7e:	4b16      	ldr	r3, [pc, #88]	; (8003dd8 <vTaskStartScheduler+0xe4>)
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	4b14      	ldr	r3, [pc, #80]	; (8003dd4 <vTaskStartScheduler+0xe0>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d102      	bne.n	8003d90 <vTaskStartScheduler+0x9c>
 8003d8a:	f002 f8ef 	bl	8005f6c <SEGGER_SYSVIEW_OnIdle>
 8003d8e:	e004      	b.n	8003d9a <vTaskStartScheduler+0xa6>
 8003d90:	4b11      	ldr	r3, [pc, #68]	; (8003dd8 <vTaskStartScheduler+0xe4>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f002 f947 	bl	8006028 <SEGGER_SYSVIEW_OnTaskStartExec>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003d9a:	f000 fbf9 	bl	8004590 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003d9e:	e010      	b.n	8003dc2 <vTaskStartScheduler+0xce>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da6:	d10c      	bne.n	8003dc2 <vTaskStartScheduler+0xce>
	__asm volatile
 8003da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dac:	b672      	cpsid	i
 8003dae:	f383 8811 	msr	BASEPRI, r3
 8003db2:	f3bf 8f6f 	isb	sy
 8003db6:	f3bf 8f4f 	dsb	sy
 8003dba:	b662      	cpsie	i
 8003dbc:	60fb      	str	r3, [r7, #12]
}
 8003dbe:	bf00      	nop
 8003dc0:	e7fe      	b.n	8003dc0 <vTaskStartScheduler+0xcc>
}
 8003dc2:	bf00      	nop
 8003dc4:	3718      	adds	r7, #24
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	080066bc 	.word	0x080066bc
 8003dd0:	080041d1 	.word	0x080041d1
 8003dd4:	20000540 	.word	0x20000540
 8003dd8:	2000041c 	.word	0x2000041c
 8003ddc:	20000010 	.word	0x20000010
 8003de0:	2000053c 	.word	0x2000053c
 8003de4:	20000528 	.word	0x20000528
 8003de8:	20000520 	.word	0x20000520

08003dec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003dec:	b480      	push	{r7}
 8003dee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003df0:	4b04      	ldr	r3, [pc, #16]	; (8003e04 <vTaskSuspendAll+0x18>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	3301      	adds	r3, #1
 8003df6:	4a03      	ldr	r2, [pc, #12]	; (8003e04 <vTaskSuspendAll+0x18>)
 8003df8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003dfa:	bf00      	nop
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr
 8003e04:	20000544 	.word	0x20000544

08003e08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003e12:	2300      	movs	r3, #0
 8003e14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003e16:	4b44      	ldr	r3, [pc, #272]	; (8003f28 <xTaskResumeAll+0x120>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10c      	bne.n	8003e38 <xTaskResumeAll+0x30>
	__asm volatile
 8003e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e22:	b672      	cpsid	i
 8003e24:	f383 8811 	msr	BASEPRI, r3
 8003e28:	f3bf 8f6f 	isb	sy
 8003e2c:	f3bf 8f4f 	dsb	sy
 8003e30:	b662      	cpsie	i
 8003e32:	603b      	str	r3, [r7, #0]
}
 8003e34:	bf00      	nop
 8003e36:	e7fe      	b.n	8003e36 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003e38:	f000 fc28 	bl	800468c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003e3c:	4b3a      	ldr	r3, [pc, #232]	; (8003f28 <xTaskResumeAll+0x120>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	3b01      	subs	r3, #1
 8003e42:	4a39      	ldr	r2, [pc, #228]	; (8003f28 <xTaskResumeAll+0x120>)
 8003e44:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e46:	4b38      	ldr	r3, [pc, #224]	; (8003f28 <xTaskResumeAll+0x120>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d165      	bne.n	8003f1a <xTaskResumeAll+0x112>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003e4e:	4b37      	ldr	r3, [pc, #220]	; (8003f2c <xTaskResumeAll+0x124>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d061      	beq.n	8003f1a <xTaskResumeAll+0x112>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e56:	e032      	b.n	8003ebe <xTaskResumeAll+0xb6>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e58:	4b35      	ldr	r3, [pc, #212]	; (8003f30 <xTaskResumeAll+0x128>)
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	3318      	adds	r3, #24
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7ff fd11 	bl	800388c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	3304      	adds	r3, #4
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7ff fd0c 	bl	800388c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f002 f918 	bl	80060ac <SEGGER_SYSVIEW_OnTaskStartReady>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e80:	2201      	movs	r2, #1
 8003e82:	409a      	lsls	r2, r3
 8003e84:	4b2b      	ldr	r3, [pc, #172]	; (8003f34 <xTaskResumeAll+0x12c>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	4a2a      	ldr	r2, [pc, #168]	; (8003f34 <xTaskResumeAll+0x12c>)
 8003e8c:	6013      	str	r3, [r2, #0]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e92:	4613      	mov	r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	4413      	add	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	4a27      	ldr	r2, [pc, #156]	; (8003f38 <xTaskResumeAll+0x130>)
 8003e9c:	441a      	add	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	3304      	adds	r3, #4
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	4610      	mov	r0, r2
 8003ea6:	f7ff fc94 	bl	80037d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eae:	4b23      	ldr	r3, [pc, #140]	; (8003f3c <xTaskResumeAll+0x134>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d302      	bcc.n	8003ebe <xTaskResumeAll+0xb6>
					{
						xYieldPending = pdTRUE;
 8003eb8:	4b21      	ldr	r3, [pc, #132]	; (8003f40 <xTaskResumeAll+0x138>)
 8003eba:	2201      	movs	r2, #1
 8003ebc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ebe:	4b1c      	ldr	r3, [pc, #112]	; (8003f30 <xTaskResumeAll+0x128>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1c8      	bne.n	8003e58 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d001      	beq.n	8003ed0 <xTaskResumeAll+0xc8>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003ecc:	f000 fa3c 	bl	8004348 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003ed0:	4b1c      	ldr	r3, [pc, #112]	; (8003f44 <xTaskResumeAll+0x13c>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d010      	beq.n	8003efe <xTaskResumeAll+0xf6>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003edc:	f000 f848 	bl	8003f70 <xTaskIncrementTick>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d002      	beq.n	8003eec <xTaskResumeAll+0xe4>
							{
								xYieldPending = pdTRUE;
 8003ee6:	4b16      	ldr	r3, [pc, #88]	; (8003f40 <xTaskResumeAll+0x138>)
 8003ee8:	2201      	movs	r2, #1
 8003eea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1f1      	bne.n	8003edc <xTaskResumeAll+0xd4>

						uxPendedTicks = 0;
 8003ef8:	4b12      	ldr	r3, [pc, #72]	; (8003f44 <xTaskResumeAll+0x13c>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003efe:	4b10      	ldr	r3, [pc, #64]	; (8003f40 <xTaskResumeAll+0x138>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d009      	beq.n	8003f1a <xTaskResumeAll+0x112>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003f06:	2301      	movs	r3, #1
 8003f08:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003f0a:	4b0f      	ldr	r3, [pc, #60]	; (8003f48 <xTaskResumeAll+0x140>)
 8003f0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f10:	601a      	str	r2, [r3, #0]
 8003f12:	f3bf 8f4f 	dsb	sy
 8003f16:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003f1a:	f000 fbeb 	bl	80046f4 <vPortExitCritical>

	return xAlreadyYielded;
 8003f1e:	68bb      	ldr	r3, [r7, #8]
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3710      	adds	r7, #16
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	20000544 	.word	0x20000544
 8003f2c:	2000051c 	.word	0x2000051c
 8003f30:	200004dc 	.word	0x200004dc
 8003f34:	20000524 	.word	0x20000524
 8003f38:	20000420 	.word	0x20000420
 8003f3c:	2000041c 	.word	0x2000041c
 8003f40:	20000530 	.word	0x20000530
 8003f44:	2000052c 	.word	0x2000052c
 8003f48:	e000ed04 	.word	0xe000ed04

08003f4c <xTaskGetTickCountFromISR>:
	return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003f52:	f000 fc8b 	bl	800486c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003f56:	2300      	movs	r3, #0
 8003f58:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8003f5a:	4b04      	ldr	r3, [pc, #16]	; (8003f6c <xTaskGetTickCountFromISR+0x20>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003f60:	683b      	ldr	r3, [r7, #0]
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3708      	adds	r7, #8
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	20000520 	.word	0x20000520

08003f70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b086      	sub	sp, #24
 8003f74:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003f76:	2300      	movs	r3, #0
 8003f78:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f7a:	4b51      	ldr	r3, [pc, #324]	; (80040c0 <xTaskIncrementTick+0x150>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f040 808e 	bne.w	80040a0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f84:	4b4f      	ldr	r3, [pc, #316]	; (80040c4 <xTaskIncrementTick+0x154>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	3301      	adds	r3, #1
 8003f8a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003f8c:	4a4d      	ldr	r2, [pc, #308]	; (80040c4 <xTaskIncrementTick+0x154>)
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d122      	bne.n	8003fde <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8003f98:	4b4b      	ldr	r3, [pc, #300]	; (80040c8 <xTaskIncrementTick+0x158>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00c      	beq.n	8003fbc <xTaskIncrementTick+0x4c>
	__asm volatile
 8003fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa6:	b672      	cpsid	i
 8003fa8:	f383 8811 	msr	BASEPRI, r3
 8003fac:	f3bf 8f6f 	isb	sy
 8003fb0:	f3bf 8f4f 	dsb	sy
 8003fb4:	b662      	cpsie	i
 8003fb6:	603b      	str	r3, [r7, #0]
}
 8003fb8:	bf00      	nop
 8003fba:	e7fe      	b.n	8003fba <xTaskIncrementTick+0x4a>
 8003fbc:	4b42      	ldr	r3, [pc, #264]	; (80040c8 <xTaskIncrementTick+0x158>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	60fb      	str	r3, [r7, #12]
 8003fc2:	4b42      	ldr	r3, [pc, #264]	; (80040cc <xTaskIncrementTick+0x15c>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a40      	ldr	r2, [pc, #256]	; (80040c8 <xTaskIncrementTick+0x158>)
 8003fc8:	6013      	str	r3, [r2, #0]
 8003fca:	4a40      	ldr	r2, [pc, #256]	; (80040cc <xTaskIncrementTick+0x15c>)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6013      	str	r3, [r2, #0]
 8003fd0:	4b3f      	ldr	r3, [pc, #252]	; (80040d0 <xTaskIncrementTick+0x160>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	4a3e      	ldr	r2, [pc, #248]	; (80040d0 <xTaskIncrementTick+0x160>)
 8003fd8:	6013      	str	r3, [r2, #0]
 8003fda:	f000 f9b5 	bl	8004348 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003fde:	4b3d      	ldr	r3, [pc, #244]	; (80040d4 <xTaskIncrementTick+0x164>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d34c      	bcc.n	8004082 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fe8:	4b37      	ldr	r3, [pc, #220]	; (80040c8 <xTaskIncrementTick+0x158>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d104      	bne.n	8003ffc <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ff2:	4b38      	ldr	r3, [pc, #224]	; (80040d4 <xTaskIncrementTick+0x164>)
 8003ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ff8:	601a      	str	r2, [r3, #0]
					break;
 8003ffa:	e042      	b.n	8004082 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ffc:	4b32      	ldr	r3, [pc, #200]	; (80040c8 <xTaskIncrementTick+0x158>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800400c:	693a      	ldr	r2, [r7, #16]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	429a      	cmp	r2, r3
 8004012:	d203      	bcs.n	800401c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004014:	4a2f      	ldr	r2, [pc, #188]	; (80040d4 <xTaskIncrementTick+0x164>)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800401a:	e032      	b.n	8004082 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	3304      	adds	r3, #4
 8004020:	4618      	mov	r0, r3
 8004022:	f7ff fc33 	bl	800388c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800402a:	2b00      	cmp	r3, #0
 800402c:	d004      	beq.n	8004038 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	3318      	adds	r3, #24
 8004032:	4618      	mov	r0, r3
 8004034:	f7ff fc2a 	bl	800388c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	4618      	mov	r0, r3
 800403c:	f002 f836 	bl	80060ac <SEGGER_SYSVIEW_OnTaskStartReady>
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004044:	2201      	movs	r2, #1
 8004046:	409a      	lsls	r2, r3
 8004048:	4b23      	ldr	r3, [pc, #140]	; (80040d8 <xTaskIncrementTick+0x168>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4313      	orrs	r3, r2
 800404e:	4a22      	ldr	r2, [pc, #136]	; (80040d8 <xTaskIncrementTick+0x168>)
 8004050:	6013      	str	r3, [r2, #0]
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004056:	4613      	mov	r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	4413      	add	r3, r2
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	4a1f      	ldr	r2, [pc, #124]	; (80040dc <xTaskIncrementTick+0x16c>)
 8004060:	441a      	add	r2, r3
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	3304      	adds	r3, #4
 8004066:	4619      	mov	r1, r3
 8004068:	4610      	mov	r0, r2
 800406a:	f7ff fbb2 	bl	80037d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004072:	4b1b      	ldr	r3, [pc, #108]	; (80040e0 <xTaskIncrementTick+0x170>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004078:	429a      	cmp	r2, r3
 800407a:	d3b5      	bcc.n	8003fe8 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800407c:	2301      	movs	r3, #1
 800407e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004080:	e7b2      	b.n	8003fe8 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004082:	4b17      	ldr	r3, [pc, #92]	; (80040e0 <xTaskIncrementTick+0x170>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004088:	4914      	ldr	r1, [pc, #80]	; (80040dc <xTaskIncrementTick+0x16c>)
 800408a:	4613      	mov	r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	4413      	add	r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	440b      	add	r3, r1
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d907      	bls.n	80040aa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800409a:	2301      	movs	r3, #1
 800409c:	617b      	str	r3, [r7, #20]
 800409e:	e004      	b.n	80040aa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80040a0:	4b10      	ldr	r3, [pc, #64]	; (80040e4 <xTaskIncrementTick+0x174>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	3301      	adds	r3, #1
 80040a6:	4a0f      	ldr	r2, [pc, #60]	; (80040e4 <xTaskIncrementTick+0x174>)
 80040a8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80040aa:	4b0f      	ldr	r3, [pc, #60]	; (80040e8 <xTaskIncrementTick+0x178>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80040b2:	2301      	movs	r3, #1
 80040b4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80040b6:	697b      	ldr	r3, [r7, #20]
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3718      	adds	r7, #24
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	20000544 	.word	0x20000544
 80040c4:	20000520 	.word	0x20000520
 80040c8:	200004d4 	.word	0x200004d4
 80040cc:	200004d8 	.word	0x200004d8
 80040d0:	20000534 	.word	0x20000534
 80040d4:	2000053c 	.word	0x2000053c
 80040d8:	20000524 	.word	0x20000524
 80040dc:	20000420 	.word	0x20000420
 80040e0:	2000041c 	.word	0x2000041c
 80040e4:	2000052c 	.word	0x2000052c
 80040e8:	20000530 	.word	0x20000530

080040ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b086      	sub	sp, #24
 80040f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80040f2:	4b30      	ldr	r3, [pc, #192]	; (80041b4 <vTaskSwitchContext+0xc8>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d003      	beq.n	8004102 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80040fa:	4b2f      	ldr	r3, [pc, #188]	; (80041b8 <vTaskSwitchContext+0xcc>)
 80040fc:	2201      	movs	r2, #1
 80040fe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004100:	e054      	b.n	80041ac <vTaskSwitchContext+0xc0>
		xYieldPending = pdFALSE;
 8004102:	4b2d      	ldr	r3, [pc, #180]	; (80041b8 <vTaskSwitchContext+0xcc>)
 8004104:	2200      	movs	r2, #0
 8004106:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004108:	4b2c      	ldr	r3, [pc, #176]	; (80041bc <vTaskSwitchContext+0xd0>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	fab3 f383 	clz	r3, r3
 8004114:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004116:	7afb      	ldrb	r3, [r7, #11]
 8004118:	f1c3 031f 	rsb	r3, r3, #31
 800411c:	617b      	str	r3, [r7, #20]
 800411e:	4928      	ldr	r1, [pc, #160]	; (80041c0 <vTaskSwitchContext+0xd4>)
 8004120:	697a      	ldr	r2, [r7, #20]
 8004122:	4613      	mov	r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	4413      	add	r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	440b      	add	r3, r1
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10c      	bne.n	800414c <vTaskSwitchContext+0x60>
	__asm volatile
 8004132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004136:	b672      	cpsid	i
 8004138:	f383 8811 	msr	BASEPRI, r3
 800413c:	f3bf 8f6f 	isb	sy
 8004140:	f3bf 8f4f 	dsb	sy
 8004144:	b662      	cpsie	i
 8004146:	607b      	str	r3, [r7, #4]
}
 8004148:	bf00      	nop
 800414a:	e7fe      	b.n	800414a <vTaskSwitchContext+0x5e>
 800414c:	697a      	ldr	r2, [r7, #20]
 800414e:	4613      	mov	r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	4413      	add	r3, r2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	4a1a      	ldr	r2, [pc, #104]	; (80041c0 <vTaskSwitchContext+0xd4>)
 8004158:	4413      	add	r3, r2
 800415a:	613b      	str	r3, [r7, #16]
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	685a      	ldr	r2, [r3, #4]
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	605a      	str	r2, [r3, #4]
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	685a      	ldr	r2, [r3, #4]
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	3308      	adds	r3, #8
 800416e:	429a      	cmp	r2, r3
 8004170:	d104      	bne.n	800417c <vTaskSwitchContext+0x90>
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	685a      	ldr	r2, [r3, #4]
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	605a      	str	r2, [r3, #4]
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	4a10      	ldr	r2, [pc, #64]	; (80041c4 <vTaskSwitchContext+0xd8>)
 8004184:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8004186:	4b0f      	ldr	r3, [pc, #60]	; (80041c4 <vTaskSwitchContext+0xd8>)
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	4b0f      	ldr	r3, [pc, #60]	; (80041c8 <vTaskSwitchContext+0xdc>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	429a      	cmp	r2, r3
 8004190:	d102      	bne.n	8004198 <vTaskSwitchContext+0xac>
 8004192:	f001 feeb 	bl	8005f6c <SEGGER_SYSVIEW_OnIdle>
 8004196:	e004      	b.n	80041a2 <vTaskSwitchContext+0xb6>
 8004198:	4b0a      	ldr	r3, [pc, #40]	; (80041c4 <vTaskSwitchContext+0xd8>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4618      	mov	r0, r3
 800419e:	f001 ff43 	bl	8006028 <SEGGER_SYSVIEW_OnTaskStartExec>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80041a2:	4b08      	ldr	r3, [pc, #32]	; (80041c4 <vTaskSwitchContext+0xd8>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	334c      	adds	r3, #76	; 0x4c
 80041a8:	4a08      	ldr	r2, [pc, #32]	; (80041cc <vTaskSwitchContext+0xe0>)
 80041aa:	6013      	str	r3, [r2, #0]
}
 80041ac:	bf00      	nop
 80041ae:	3718      	adds	r7, #24
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	20000544 	.word	0x20000544
 80041b8:	20000530 	.word	0x20000530
 80041bc:	20000524 	.word	0x20000524
 80041c0:	20000420 	.word	0x20000420
 80041c4:	2000041c 	.word	0x2000041c
 80041c8:	20000540 	.word	0x20000540
 80041cc:	20000010 	.word	0x20000010

080041d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80041d8:	f000 f852 	bl	8004280 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80041dc:	4b06      	ldr	r3, [pc, #24]	; (80041f8 <prvIdleTask+0x28>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d9f9      	bls.n	80041d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80041e4:	4b05      	ldr	r3, [pc, #20]	; (80041fc <prvIdleTask+0x2c>)
 80041e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041ea:	601a      	str	r2, [r3, #0]
 80041ec:	f3bf 8f4f 	dsb	sy
 80041f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80041f4:	e7f0      	b.n	80041d8 <prvIdleTask+0x8>
 80041f6:	bf00      	nop
 80041f8:	20000420 	.word	0x20000420
 80041fc:	e000ed04 	.word	0xe000ed04

08004200 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004206:	2300      	movs	r3, #0
 8004208:	607b      	str	r3, [r7, #4]
 800420a:	e00c      	b.n	8004226 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	4613      	mov	r3, r2
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	4413      	add	r3, r2
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	4a12      	ldr	r2, [pc, #72]	; (8004260 <prvInitialiseTaskLists+0x60>)
 8004218:	4413      	add	r3, r2
 800421a:	4618      	mov	r0, r3
 800421c:	f7ff faac 	bl	8003778 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	3301      	adds	r3, #1
 8004224:	607b      	str	r3, [r7, #4]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2b06      	cmp	r3, #6
 800422a:	d9ef      	bls.n	800420c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800422c:	480d      	ldr	r0, [pc, #52]	; (8004264 <prvInitialiseTaskLists+0x64>)
 800422e:	f7ff faa3 	bl	8003778 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004232:	480d      	ldr	r0, [pc, #52]	; (8004268 <prvInitialiseTaskLists+0x68>)
 8004234:	f7ff faa0 	bl	8003778 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004238:	480c      	ldr	r0, [pc, #48]	; (800426c <prvInitialiseTaskLists+0x6c>)
 800423a:	f7ff fa9d 	bl	8003778 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800423e:	480c      	ldr	r0, [pc, #48]	; (8004270 <prvInitialiseTaskLists+0x70>)
 8004240:	f7ff fa9a 	bl	8003778 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004244:	480b      	ldr	r0, [pc, #44]	; (8004274 <prvInitialiseTaskLists+0x74>)
 8004246:	f7ff fa97 	bl	8003778 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800424a:	4b0b      	ldr	r3, [pc, #44]	; (8004278 <prvInitialiseTaskLists+0x78>)
 800424c:	4a05      	ldr	r2, [pc, #20]	; (8004264 <prvInitialiseTaskLists+0x64>)
 800424e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004250:	4b0a      	ldr	r3, [pc, #40]	; (800427c <prvInitialiseTaskLists+0x7c>)
 8004252:	4a05      	ldr	r2, [pc, #20]	; (8004268 <prvInitialiseTaskLists+0x68>)
 8004254:	601a      	str	r2, [r3, #0]
}
 8004256:	bf00      	nop
 8004258:	3708      	adds	r7, #8
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	20000420 	.word	0x20000420
 8004264:	200004ac 	.word	0x200004ac
 8004268:	200004c0 	.word	0x200004c0
 800426c:	200004dc 	.word	0x200004dc
 8004270:	200004f0 	.word	0x200004f0
 8004274:	20000508 	.word	0x20000508
 8004278:	200004d4 	.word	0x200004d4
 800427c:	200004d8 	.word	0x200004d8

08004280 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004286:	e019      	b.n	80042bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004288:	f000 fa00 	bl	800468c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800428c:	4b10      	ldr	r3, [pc, #64]	; (80042d0 <prvCheckTasksWaitingTermination+0x50>)
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	3304      	adds	r3, #4
 8004298:	4618      	mov	r0, r3
 800429a:	f7ff faf7 	bl	800388c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800429e:	4b0d      	ldr	r3, [pc, #52]	; (80042d4 <prvCheckTasksWaitingTermination+0x54>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	3b01      	subs	r3, #1
 80042a4:	4a0b      	ldr	r2, [pc, #44]	; (80042d4 <prvCheckTasksWaitingTermination+0x54>)
 80042a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80042a8:	4b0b      	ldr	r3, [pc, #44]	; (80042d8 <prvCheckTasksWaitingTermination+0x58>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	3b01      	subs	r3, #1
 80042ae:	4a0a      	ldr	r2, [pc, #40]	; (80042d8 <prvCheckTasksWaitingTermination+0x58>)
 80042b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80042b2:	f000 fa1f 	bl	80046f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 f810 	bl	80042dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042bc:	4b06      	ldr	r3, [pc, #24]	; (80042d8 <prvCheckTasksWaitingTermination+0x58>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1e1      	bne.n	8004288 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80042c4:	bf00      	nop
 80042c6:	bf00      	nop
 80042c8:	3708      	adds	r7, #8
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	200004f0 	.word	0x200004f0
 80042d4:	2000051c 	.word	0x2000051c
 80042d8:	20000504 	.word	0x20000504

080042dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	334c      	adds	r3, #76	; 0x4c
 80042e8:	4618      	mov	r0, r3
 80042ea:	f002 f913 	bl	8006514 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d108      	bne.n	800430a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fc:	4618      	mov	r0, r3
 80042fe:	f000 fbc3 	bl	8004a88 <vPortFree>
				vPortFree( pxTCB );
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 fbc0 	bl	8004a88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004308:	e01a      	b.n	8004340 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004310:	2b01      	cmp	r3, #1
 8004312:	d103      	bne.n	800431c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f000 fbb7 	bl	8004a88 <vPortFree>
	}
 800431a:	e011      	b.n	8004340 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004322:	2b02      	cmp	r3, #2
 8004324:	d00c      	beq.n	8004340 <prvDeleteTCB+0x64>
	__asm volatile
 8004326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432a:	b672      	cpsid	i
 800432c:	f383 8811 	msr	BASEPRI, r3
 8004330:	f3bf 8f6f 	isb	sy
 8004334:	f3bf 8f4f 	dsb	sy
 8004338:	b662      	cpsie	i
 800433a:	60fb      	str	r3, [r7, #12]
}
 800433c:	bf00      	nop
 800433e:	e7fe      	b.n	800433e <prvDeleteTCB+0x62>
	}
 8004340:	bf00      	nop
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800434e:	4b0c      	ldr	r3, [pc, #48]	; (8004380 <prvResetNextTaskUnblockTime+0x38>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d104      	bne.n	8004362 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004358:	4b0a      	ldr	r3, [pc, #40]	; (8004384 <prvResetNextTaskUnblockTime+0x3c>)
 800435a:	f04f 32ff 	mov.w	r2, #4294967295
 800435e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004360:	e008      	b.n	8004374 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004362:	4b07      	ldr	r3, [pc, #28]	; (8004380 <prvResetNextTaskUnblockTime+0x38>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	4a04      	ldr	r2, [pc, #16]	; (8004384 <prvResetNextTaskUnblockTime+0x3c>)
 8004372:	6013      	str	r3, [r2, #0]
}
 8004374:	bf00      	nop
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr
 8004380:	200004d4 	.word	0x200004d4
 8004384:	2000053c 	.word	0x2000053c

08004388 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004392:	4b32      	ldr	r3, [pc, #200]	; (800445c <prvAddCurrentTaskToDelayedList+0xd4>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004398:	4b31      	ldr	r3, [pc, #196]	; (8004460 <prvAddCurrentTaskToDelayedList+0xd8>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	3304      	adds	r3, #4
 800439e:	4618      	mov	r0, r3
 80043a0:	f7ff fa74 	bl	800388c <uxListRemove>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d10b      	bne.n	80043c2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80043aa:	4b2d      	ldr	r3, [pc, #180]	; (8004460 <prvAddCurrentTaskToDelayedList+0xd8>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b0:	2201      	movs	r2, #1
 80043b2:	fa02 f303 	lsl.w	r3, r2, r3
 80043b6:	43da      	mvns	r2, r3
 80043b8:	4b2a      	ldr	r3, [pc, #168]	; (8004464 <prvAddCurrentTaskToDelayedList+0xdc>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4013      	ands	r3, r2
 80043be:	4a29      	ldr	r2, [pc, #164]	; (8004464 <prvAddCurrentTaskToDelayedList+0xdc>)
 80043c0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c8:	d110      	bne.n	80043ec <prvAddCurrentTaskToDelayedList+0x64>
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d00d      	beq.n	80043ec <prvAddCurrentTaskToDelayedList+0x64>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
      traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80043d0:	4b23      	ldr	r3, [pc, #140]	; (8004460 <prvAddCurrentTaskToDelayedList+0xd8>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	211b      	movs	r1, #27
 80043d6:	4618      	mov	r0, r3
 80043d8:	f001 feaa 	bl	8006130 <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043dc:	4b20      	ldr	r3, [pc, #128]	; (8004460 <prvAddCurrentTaskToDelayedList+0xd8>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	3304      	adds	r3, #4
 80043e2:	4619      	mov	r1, r3
 80043e4:	4820      	ldr	r0, [pc, #128]	; (8004468 <prvAddCurrentTaskToDelayedList+0xe0>)
 80043e6:	f7ff f9f4 	bl	80037d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80043ea:	e032      	b.n	8004452 <prvAddCurrentTaskToDelayedList+0xca>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4413      	add	r3, r2
 80043f2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80043f4:	4b1a      	ldr	r3, [pc, #104]	; (8004460 <prvAddCurrentTaskToDelayedList+0xd8>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68ba      	ldr	r2, [r7, #8]
 80043fa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80043fc:	68ba      	ldr	r2, [r7, #8]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	429a      	cmp	r2, r3
 8004402:	d20f      	bcs.n	8004424 <prvAddCurrentTaskToDelayedList+0x9c>
        traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8004404:	4b16      	ldr	r3, [pc, #88]	; (8004460 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2104      	movs	r1, #4
 800440a:	4618      	mov	r0, r3
 800440c:	f001 fe90 	bl	8006130 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004410:	4b16      	ldr	r3, [pc, #88]	; (800446c <prvAddCurrentTaskToDelayedList+0xe4>)
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	4b12      	ldr	r3, [pc, #72]	; (8004460 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	3304      	adds	r3, #4
 800441a:	4619      	mov	r1, r3
 800441c:	4610      	mov	r0, r2
 800441e:	f7ff f9fc 	bl	800381a <vListInsert>
}
 8004422:	e016      	b.n	8004452 <prvAddCurrentTaskToDelayedList+0xca>
        traceMOVED_TASK_TO_DELAYED_LIST();
 8004424:	4b0e      	ldr	r3, [pc, #56]	; (8004460 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2104      	movs	r1, #4
 800442a:	4618      	mov	r0, r3
 800442c:	f001 fe80 	bl	8006130 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004430:	4b0f      	ldr	r3, [pc, #60]	; (8004470 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	4b0a      	ldr	r3, [pc, #40]	; (8004460 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	3304      	adds	r3, #4
 800443a:	4619      	mov	r1, r3
 800443c:	4610      	mov	r0, r2
 800443e:	f7ff f9ec 	bl	800381a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004442:	4b0c      	ldr	r3, [pc, #48]	; (8004474 <prvAddCurrentTaskToDelayedList+0xec>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68ba      	ldr	r2, [r7, #8]
 8004448:	429a      	cmp	r2, r3
 800444a:	d202      	bcs.n	8004452 <prvAddCurrentTaskToDelayedList+0xca>
					xNextTaskUnblockTime = xTimeToWake;
 800444c:	4a09      	ldr	r2, [pc, #36]	; (8004474 <prvAddCurrentTaskToDelayedList+0xec>)
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	6013      	str	r3, [r2, #0]
}
 8004452:	bf00      	nop
 8004454:	3710      	adds	r7, #16
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	20000520 	.word	0x20000520
 8004460:	2000041c 	.word	0x2000041c
 8004464:	20000524 	.word	0x20000524
 8004468:	20000508 	.word	0x20000508
 800446c:	200004d8 	.word	0x200004d8
 8004470:	200004d4 	.word	0x200004d4
 8004474:	2000053c 	.word	0x2000053c

08004478 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004478:	b480      	push	{r7}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	3b04      	subs	r3, #4
 8004488:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004490:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	3b04      	subs	r3, #4
 8004496:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	f023 0201 	bic.w	r2, r3, #1
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	3b04      	subs	r3, #4
 80044a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80044a8:	4a0c      	ldr	r2, [pc, #48]	; (80044dc <pxPortInitialiseStack+0x64>)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	3b14      	subs	r3, #20
 80044b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	3b04      	subs	r3, #4
 80044be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f06f 0202 	mvn.w	r2, #2
 80044c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	3b20      	subs	r3, #32
 80044cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80044ce:	68fb      	ldr	r3, [r7, #12]
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3714      	adds	r7, #20
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr
 80044dc:	080044e1 	.word	0x080044e1

080044e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80044e6:	2300      	movs	r3, #0
 80044e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80044ea:	4b14      	ldr	r3, [pc, #80]	; (800453c <prvTaskExitError+0x5c>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f2:	d00c      	beq.n	800450e <prvTaskExitError+0x2e>
	__asm volatile
 80044f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f8:	b672      	cpsid	i
 80044fa:	f383 8811 	msr	BASEPRI, r3
 80044fe:	f3bf 8f6f 	isb	sy
 8004502:	f3bf 8f4f 	dsb	sy
 8004506:	b662      	cpsie	i
 8004508:	60fb      	str	r3, [r7, #12]
}
 800450a:	bf00      	nop
 800450c:	e7fe      	b.n	800450c <prvTaskExitError+0x2c>
	__asm volatile
 800450e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004512:	b672      	cpsid	i
 8004514:	f383 8811 	msr	BASEPRI, r3
 8004518:	f3bf 8f6f 	isb	sy
 800451c:	f3bf 8f4f 	dsb	sy
 8004520:	b662      	cpsie	i
 8004522:	60bb      	str	r3, [r7, #8]
}
 8004524:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004526:	bf00      	nop
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d0fc      	beq.n	8004528 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800452e:	bf00      	nop
 8004530:	bf00      	nop
 8004532:	3714      	adds	r7, #20
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr
 800453c:	2000000c 	.word	0x2000000c

08004540 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004540:	4b07      	ldr	r3, [pc, #28]	; (8004560 <pxCurrentTCBConst2>)
 8004542:	6819      	ldr	r1, [r3, #0]
 8004544:	6808      	ldr	r0, [r1, #0]
 8004546:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800454a:	f380 8809 	msr	PSP, r0
 800454e:	f3bf 8f6f 	isb	sy
 8004552:	f04f 0000 	mov.w	r0, #0
 8004556:	f380 8811 	msr	BASEPRI, r0
 800455a:	4770      	bx	lr
 800455c:	f3af 8000 	nop.w

08004560 <pxCurrentTCBConst2>:
 8004560:	2000041c 	.word	0x2000041c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004564:	bf00      	nop
 8004566:	bf00      	nop

08004568 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004568:	4808      	ldr	r0, [pc, #32]	; (800458c <prvPortStartFirstTask+0x24>)
 800456a:	6800      	ldr	r0, [r0, #0]
 800456c:	6800      	ldr	r0, [r0, #0]
 800456e:	f380 8808 	msr	MSP, r0
 8004572:	f04f 0000 	mov.w	r0, #0
 8004576:	f380 8814 	msr	CONTROL, r0
 800457a:	b662      	cpsie	i
 800457c:	b661      	cpsie	f
 800457e:	f3bf 8f4f 	dsb	sy
 8004582:	f3bf 8f6f 	isb	sy
 8004586:	df00      	svc	0
 8004588:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800458a:	bf00      	nop
 800458c:	e000ed08 	.word	0xe000ed08

08004590 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004596:	4b37      	ldr	r3, [pc, #220]	; (8004674 <xPortStartScheduler+0xe4>)
 8004598:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	22ff      	movs	r2, #255	; 0xff
 80045a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80045b0:	78fb      	ldrb	r3, [r7, #3]
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80045b8:	b2da      	uxtb	r2, r3
 80045ba:	4b2f      	ldr	r3, [pc, #188]	; (8004678 <xPortStartScheduler+0xe8>)
 80045bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80045be:	4b2f      	ldr	r3, [pc, #188]	; (800467c <xPortStartScheduler+0xec>)
 80045c0:	2207      	movs	r2, #7
 80045c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045c4:	e009      	b.n	80045da <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80045c6:	4b2d      	ldr	r3, [pc, #180]	; (800467c <xPortStartScheduler+0xec>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	3b01      	subs	r3, #1
 80045cc:	4a2b      	ldr	r2, [pc, #172]	; (800467c <xPortStartScheduler+0xec>)
 80045ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80045d0:	78fb      	ldrb	r3, [r7, #3]
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	005b      	lsls	r3, r3, #1
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045da:	78fb      	ldrb	r3, [r7, #3]
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045e2:	2b80      	cmp	r3, #128	; 0x80
 80045e4:	d0ef      	beq.n	80045c6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80045e6:	4b25      	ldr	r3, [pc, #148]	; (800467c <xPortStartScheduler+0xec>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f1c3 0307 	rsb	r3, r3, #7
 80045ee:	2b04      	cmp	r3, #4
 80045f0:	d00c      	beq.n	800460c <xPortStartScheduler+0x7c>
	__asm volatile
 80045f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f6:	b672      	cpsid	i
 80045f8:	f383 8811 	msr	BASEPRI, r3
 80045fc:	f3bf 8f6f 	isb	sy
 8004600:	f3bf 8f4f 	dsb	sy
 8004604:	b662      	cpsie	i
 8004606:	60bb      	str	r3, [r7, #8]
}
 8004608:	bf00      	nop
 800460a:	e7fe      	b.n	800460a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800460c:	4b1b      	ldr	r3, [pc, #108]	; (800467c <xPortStartScheduler+0xec>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	021b      	lsls	r3, r3, #8
 8004612:	4a1a      	ldr	r2, [pc, #104]	; (800467c <xPortStartScheduler+0xec>)
 8004614:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004616:	4b19      	ldr	r3, [pc, #100]	; (800467c <xPortStartScheduler+0xec>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800461e:	4a17      	ldr	r2, [pc, #92]	; (800467c <xPortStartScheduler+0xec>)
 8004620:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	b2da      	uxtb	r2, r3
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800462a:	4b15      	ldr	r3, [pc, #84]	; (8004680 <xPortStartScheduler+0xf0>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a14      	ldr	r2, [pc, #80]	; (8004680 <xPortStartScheduler+0xf0>)
 8004630:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004634:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004636:	4b12      	ldr	r3, [pc, #72]	; (8004680 <xPortStartScheduler+0xf0>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a11      	ldr	r2, [pc, #68]	; (8004680 <xPortStartScheduler+0xf0>)
 800463c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004640:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004642:	f000 f8e5 	bl	8004810 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004646:	4b0f      	ldr	r3, [pc, #60]	; (8004684 <xPortStartScheduler+0xf4>)
 8004648:	2200      	movs	r2, #0
 800464a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800464c:	f000 f904 	bl	8004858 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004650:	4b0d      	ldr	r3, [pc, #52]	; (8004688 <xPortStartScheduler+0xf8>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a0c      	ldr	r2, [pc, #48]	; (8004688 <xPortStartScheduler+0xf8>)
 8004656:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800465a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800465c:	f7ff ff84 	bl	8004568 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004660:	f7ff fd44 	bl	80040ec <vTaskSwitchContext>
	prvTaskExitError();
 8004664:	f7ff ff3c 	bl	80044e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3710      	adds	r7, #16
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	e000e400 	.word	0xe000e400
 8004678:	20000548 	.word	0x20000548
 800467c:	2000054c 	.word	0x2000054c
 8004680:	e000ed20 	.word	0xe000ed20
 8004684:	2000000c 	.word	0x2000000c
 8004688:	e000ef34 	.word	0xe000ef34

0800468c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
	__asm volatile
 8004692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004696:	b672      	cpsid	i
 8004698:	f383 8811 	msr	BASEPRI, r3
 800469c:	f3bf 8f6f 	isb	sy
 80046a0:	f3bf 8f4f 	dsb	sy
 80046a4:	b662      	cpsie	i
 80046a6:	607b      	str	r3, [r7, #4]
}
 80046a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80046aa:	4b10      	ldr	r3, [pc, #64]	; (80046ec <vPortEnterCritical+0x60>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	3301      	adds	r3, #1
 80046b0:	4a0e      	ldr	r2, [pc, #56]	; (80046ec <vPortEnterCritical+0x60>)
 80046b2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80046b4:	4b0d      	ldr	r3, [pc, #52]	; (80046ec <vPortEnterCritical+0x60>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d111      	bne.n	80046e0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80046bc:	4b0c      	ldr	r3, [pc, #48]	; (80046f0 <vPortEnterCritical+0x64>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00c      	beq.n	80046e0 <vPortEnterCritical+0x54>
	__asm volatile
 80046c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ca:	b672      	cpsid	i
 80046cc:	f383 8811 	msr	BASEPRI, r3
 80046d0:	f3bf 8f6f 	isb	sy
 80046d4:	f3bf 8f4f 	dsb	sy
 80046d8:	b662      	cpsie	i
 80046da:	603b      	str	r3, [r7, #0]
}
 80046dc:	bf00      	nop
 80046de:	e7fe      	b.n	80046de <vPortEnterCritical+0x52>
	}
}
 80046e0:	bf00      	nop
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr
 80046ec:	2000000c 	.word	0x2000000c
 80046f0:	e000ed04 	.word	0xe000ed04

080046f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80046fa:	4b13      	ldr	r3, [pc, #76]	; (8004748 <vPortExitCritical+0x54>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10c      	bne.n	800471c <vPortExitCritical+0x28>
	__asm volatile
 8004702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004706:	b672      	cpsid	i
 8004708:	f383 8811 	msr	BASEPRI, r3
 800470c:	f3bf 8f6f 	isb	sy
 8004710:	f3bf 8f4f 	dsb	sy
 8004714:	b662      	cpsie	i
 8004716:	607b      	str	r3, [r7, #4]
}
 8004718:	bf00      	nop
 800471a:	e7fe      	b.n	800471a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800471c:	4b0a      	ldr	r3, [pc, #40]	; (8004748 <vPortExitCritical+0x54>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	3b01      	subs	r3, #1
 8004722:	4a09      	ldr	r2, [pc, #36]	; (8004748 <vPortExitCritical+0x54>)
 8004724:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004726:	4b08      	ldr	r3, [pc, #32]	; (8004748 <vPortExitCritical+0x54>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d105      	bne.n	800473a <vPortExitCritical+0x46>
 800472e:	2300      	movs	r3, #0
 8004730:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004738:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800473a:	bf00      	nop
 800473c:	370c      	adds	r7, #12
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	2000000c 	.word	0x2000000c
 800474c:	00000000 	.word	0x00000000

08004750 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004750:	f3ef 8009 	mrs	r0, PSP
 8004754:	f3bf 8f6f 	isb	sy
 8004758:	4b15      	ldr	r3, [pc, #84]	; (80047b0 <pxCurrentTCBConst>)
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	f01e 0f10 	tst.w	lr, #16
 8004760:	bf08      	it	eq
 8004762:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004766:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800476a:	6010      	str	r0, [r2, #0]
 800476c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004770:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004774:	b672      	cpsid	i
 8004776:	f380 8811 	msr	BASEPRI, r0
 800477a:	f3bf 8f4f 	dsb	sy
 800477e:	f3bf 8f6f 	isb	sy
 8004782:	b662      	cpsie	i
 8004784:	f7ff fcb2 	bl	80040ec <vTaskSwitchContext>
 8004788:	f04f 0000 	mov.w	r0, #0
 800478c:	f380 8811 	msr	BASEPRI, r0
 8004790:	bc09      	pop	{r0, r3}
 8004792:	6819      	ldr	r1, [r3, #0]
 8004794:	6808      	ldr	r0, [r1, #0]
 8004796:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800479a:	f01e 0f10 	tst.w	lr, #16
 800479e:	bf08      	it	eq
 80047a0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80047a4:	f380 8809 	msr	PSP, r0
 80047a8:	f3bf 8f6f 	isb	sy
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop

080047b0 <pxCurrentTCBConst>:
 80047b0:	2000041c 	.word	0x2000041c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80047b4:	bf00      	nop
 80047b6:	bf00      	nop

080047b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
	__asm volatile
 80047be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c2:	b672      	cpsid	i
 80047c4:	f383 8811 	msr	BASEPRI, r3
 80047c8:	f3bf 8f6f 	isb	sy
 80047cc:	f3bf 8f4f 	dsb	sy
 80047d0:	b662      	cpsie	i
 80047d2:	607b      	str	r3, [r7, #4]
}
 80047d4:	bf00      	nop
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
 80047d6:	f001 fb4f 	bl	8005e78 <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80047da:	f7ff fbc9 	bl	8003f70 <xTaskIncrementTick>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d006      	beq.n	80047f2 <SysTick_Handler+0x3a>
		{
			traceISR_EXIT_TO_SCHEDULER();
 80047e4:	f001 fba6 	bl	8005f34 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80047e8:	4b08      	ldr	r3, [pc, #32]	; (800480c <SysTick_Handler+0x54>)
 80047ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047ee:	601a      	str	r2, [r3, #0]
 80047f0:	e001      	b.n	80047f6 <SysTick_Handler+0x3e>
		}
		else
		{
			traceISR_EXIT();
 80047f2:	f001 fb83 	bl	8005efc <SEGGER_SYSVIEW_RecordExitISR>
 80047f6:	2300      	movs	r3, #0
 80047f8:	603b      	str	r3, [r7, #0]
	__asm volatile
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	f383 8811 	msr	BASEPRI, r3
}
 8004800:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004802:	bf00      	nop
 8004804:	3708      	adds	r7, #8
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	e000ed04 	.word	0xe000ed04

08004810 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004810:	b480      	push	{r7}
 8004812:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004814:	4b0b      	ldr	r3, [pc, #44]	; (8004844 <vPortSetupTimerInterrupt+0x34>)
 8004816:	2200      	movs	r2, #0
 8004818:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800481a:	4b0b      	ldr	r3, [pc, #44]	; (8004848 <vPortSetupTimerInterrupt+0x38>)
 800481c:	2200      	movs	r2, #0
 800481e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004820:	4b0a      	ldr	r3, [pc, #40]	; (800484c <vPortSetupTimerInterrupt+0x3c>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a0a      	ldr	r2, [pc, #40]	; (8004850 <vPortSetupTimerInterrupt+0x40>)
 8004826:	fba2 2303 	umull	r2, r3, r2, r3
 800482a:	099b      	lsrs	r3, r3, #6
 800482c:	4a09      	ldr	r2, [pc, #36]	; (8004854 <vPortSetupTimerInterrupt+0x44>)
 800482e:	3b01      	subs	r3, #1
 8004830:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004832:	4b04      	ldr	r3, [pc, #16]	; (8004844 <vPortSetupTimerInterrupt+0x34>)
 8004834:	2207      	movs	r2, #7
 8004836:	601a      	str	r2, [r3, #0]
}
 8004838:	bf00      	nop
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	e000e010 	.word	0xe000e010
 8004848:	e000e018 	.word	0xe000e018
 800484c:	20000000 	.word	0x20000000
 8004850:	10624dd3 	.word	0x10624dd3
 8004854:	e000e014 	.word	0xe000e014

08004858 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004858:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004868 <vPortEnableVFP+0x10>
 800485c:	6801      	ldr	r1, [r0, #0]
 800485e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004862:	6001      	str	r1, [r0, #0]
 8004864:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004866:	bf00      	nop
 8004868:	e000ed88 	.word	0xe000ed88

0800486c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800486c:	b480      	push	{r7}
 800486e:	b085      	sub	sp, #20
 8004870:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004872:	f3ef 8305 	mrs	r3, IPSR
 8004876:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2b0f      	cmp	r3, #15
 800487c:	d916      	bls.n	80048ac <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800487e:	4a19      	ldr	r2, [pc, #100]	; (80048e4 <vPortValidateInterruptPriority+0x78>)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	4413      	add	r3, r2
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004888:	4b17      	ldr	r3, [pc, #92]	; (80048e8 <vPortValidateInterruptPriority+0x7c>)
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	7afa      	ldrb	r2, [r7, #11]
 800488e:	429a      	cmp	r2, r3
 8004890:	d20c      	bcs.n	80048ac <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8004892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004896:	b672      	cpsid	i
 8004898:	f383 8811 	msr	BASEPRI, r3
 800489c:	f3bf 8f6f 	isb	sy
 80048a0:	f3bf 8f4f 	dsb	sy
 80048a4:	b662      	cpsie	i
 80048a6:	607b      	str	r3, [r7, #4]
}
 80048a8:	bf00      	nop
 80048aa:	e7fe      	b.n	80048aa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80048ac:	4b0f      	ldr	r3, [pc, #60]	; (80048ec <vPortValidateInterruptPriority+0x80>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80048b4:	4b0e      	ldr	r3, [pc, #56]	; (80048f0 <vPortValidateInterruptPriority+0x84>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d90c      	bls.n	80048d6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80048bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c0:	b672      	cpsid	i
 80048c2:	f383 8811 	msr	BASEPRI, r3
 80048c6:	f3bf 8f6f 	isb	sy
 80048ca:	f3bf 8f4f 	dsb	sy
 80048ce:	b662      	cpsie	i
 80048d0:	603b      	str	r3, [r7, #0]
}
 80048d2:	bf00      	nop
 80048d4:	e7fe      	b.n	80048d4 <vPortValidateInterruptPriority+0x68>
	}
 80048d6:	bf00      	nop
 80048d8:	3714      	adds	r7, #20
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	e000e3f0 	.word	0xe000e3f0
 80048e8:	20000548 	.word	0x20000548
 80048ec:	e000ed0c 	.word	0xe000ed0c
 80048f0:	2000054c 	.word	0x2000054c

080048f4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b08a      	sub	sp, #40	; 0x28
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80048fc:	2300      	movs	r3, #0
 80048fe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004900:	f7ff fa74 	bl	8003dec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004904:	4b5b      	ldr	r3, [pc, #364]	; (8004a74 <pvPortMalloc+0x180>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d101      	bne.n	8004910 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800490c:	f000 f91a 	bl	8004b44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004910:	4b59      	ldr	r3, [pc, #356]	; (8004a78 <pvPortMalloc+0x184>)
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4013      	ands	r3, r2
 8004918:	2b00      	cmp	r3, #0
 800491a:	f040 8092 	bne.w	8004a42 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d01f      	beq.n	8004964 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8004924:	2208      	movs	r2, #8
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4413      	add	r3, r2
 800492a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f003 0307 	and.w	r3, r3, #7
 8004932:	2b00      	cmp	r3, #0
 8004934:	d016      	beq.n	8004964 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f023 0307 	bic.w	r3, r3, #7
 800493c:	3308      	adds	r3, #8
 800493e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f003 0307 	and.w	r3, r3, #7
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00c      	beq.n	8004964 <pvPortMalloc+0x70>
	__asm volatile
 800494a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494e:	b672      	cpsid	i
 8004950:	f383 8811 	msr	BASEPRI, r3
 8004954:	f3bf 8f6f 	isb	sy
 8004958:	f3bf 8f4f 	dsb	sy
 800495c:	b662      	cpsie	i
 800495e:	617b      	str	r3, [r7, #20]
}
 8004960:	bf00      	nop
 8004962:	e7fe      	b.n	8004962 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d06b      	beq.n	8004a42 <pvPortMalloc+0x14e>
 800496a:	4b44      	ldr	r3, [pc, #272]	; (8004a7c <pvPortMalloc+0x188>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	429a      	cmp	r2, r3
 8004972:	d866      	bhi.n	8004a42 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004974:	4b42      	ldr	r3, [pc, #264]	; (8004a80 <pvPortMalloc+0x18c>)
 8004976:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004978:	4b41      	ldr	r3, [pc, #260]	; (8004a80 <pvPortMalloc+0x18c>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800497e:	e004      	b.n	800498a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8004980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004982:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800498a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	429a      	cmp	r2, r3
 8004992:	d903      	bls.n	800499c <pvPortMalloc+0xa8>
 8004994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d1f1      	bne.n	8004980 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800499c:	4b35      	ldr	r3, [pc, #212]	; (8004a74 <pvPortMalloc+0x180>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d04d      	beq.n	8004a42 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80049a6:	6a3b      	ldr	r3, [r7, #32]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2208      	movs	r2, #8
 80049ac:	4413      	add	r3, r2
 80049ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80049b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	6a3b      	ldr	r3, [r7, #32]
 80049b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80049b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ba:	685a      	ldr	r2, [r3, #4]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	1ad2      	subs	r2, r2, r3
 80049c0:	2308      	movs	r3, #8
 80049c2:	005b      	lsls	r3, r3, #1
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d921      	bls.n	8004a0c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80049c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4413      	add	r3, r2
 80049ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	f003 0307 	and.w	r3, r3, #7
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00c      	beq.n	80049f4 <pvPortMalloc+0x100>
	__asm volatile
 80049da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049de:	b672      	cpsid	i
 80049e0:	f383 8811 	msr	BASEPRI, r3
 80049e4:	f3bf 8f6f 	isb	sy
 80049e8:	f3bf 8f4f 	dsb	sy
 80049ec:	b662      	cpsie	i
 80049ee:	613b      	str	r3, [r7, #16]
}
 80049f0:	bf00      	nop
 80049f2:	e7fe      	b.n	80049f2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80049f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f6:	685a      	ldr	r2, [r3, #4]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	1ad2      	subs	r2, r2, r3
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004a06:	69b8      	ldr	r0, [r7, #24]
 8004a08:	f000 f8fe 	bl	8004c08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004a0c:	4b1b      	ldr	r3, [pc, #108]	; (8004a7c <pvPortMalloc+0x188>)
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	4a19      	ldr	r2, [pc, #100]	; (8004a7c <pvPortMalloc+0x188>)
 8004a18:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004a1a:	4b18      	ldr	r3, [pc, #96]	; (8004a7c <pvPortMalloc+0x188>)
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	4b19      	ldr	r3, [pc, #100]	; (8004a84 <pvPortMalloc+0x190>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d203      	bcs.n	8004a2e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004a26:	4b15      	ldr	r3, [pc, #84]	; (8004a7c <pvPortMalloc+0x188>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a16      	ldr	r2, [pc, #88]	; (8004a84 <pvPortMalloc+0x190>)
 8004a2c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a30:	685a      	ldr	r2, [r3, #4]
 8004a32:	4b11      	ldr	r3, [pc, #68]	; (8004a78 <pvPortMalloc+0x184>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	431a      	orrs	r2, r3
 8004a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3e:	2200      	movs	r2, #0
 8004a40:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004a42:	f7ff f9e1 	bl	8003e08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	f003 0307 	and.w	r3, r3, #7
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00c      	beq.n	8004a6a <pvPortMalloc+0x176>
	__asm volatile
 8004a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a54:	b672      	cpsid	i
 8004a56:	f383 8811 	msr	BASEPRI, r3
 8004a5a:	f3bf 8f6f 	isb	sy
 8004a5e:	f3bf 8f4f 	dsb	sy
 8004a62:	b662      	cpsie	i
 8004a64:	60fb      	str	r3, [r7, #12]
}
 8004a66:	bf00      	nop
 8004a68:	e7fe      	b.n	8004a68 <pvPortMalloc+0x174>
	return pvReturn;
 8004a6a:	69fb      	ldr	r3, [r7, #28]
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3728      	adds	r7, #40	; 0x28
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	20004158 	.word	0x20004158
 8004a78:	20004164 	.word	0x20004164
 8004a7c:	2000415c 	.word	0x2000415c
 8004a80:	20004150 	.word	0x20004150
 8004a84:	20004160 	.word	0x20004160

08004a88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b086      	sub	sp, #24
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d04c      	beq.n	8004b34 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004a9a:	2308      	movs	r3, #8
 8004a9c:	425b      	negs	r3, r3
 8004a9e:	697a      	ldr	r2, [r7, #20]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	685a      	ldr	r2, [r3, #4]
 8004aac:	4b23      	ldr	r3, [pc, #140]	; (8004b3c <vPortFree+0xb4>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d10c      	bne.n	8004ad0 <vPortFree+0x48>
	__asm volatile
 8004ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aba:	b672      	cpsid	i
 8004abc:	f383 8811 	msr	BASEPRI, r3
 8004ac0:	f3bf 8f6f 	isb	sy
 8004ac4:	f3bf 8f4f 	dsb	sy
 8004ac8:	b662      	cpsie	i
 8004aca:	60fb      	str	r3, [r7, #12]
}
 8004acc:	bf00      	nop
 8004ace:	e7fe      	b.n	8004ace <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d00c      	beq.n	8004af2 <vPortFree+0x6a>
	__asm volatile
 8004ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004adc:	b672      	cpsid	i
 8004ade:	f383 8811 	msr	BASEPRI, r3
 8004ae2:	f3bf 8f6f 	isb	sy
 8004ae6:	f3bf 8f4f 	dsb	sy
 8004aea:	b662      	cpsie	i
 8004aec:	60bb      	str	r3, [r7, #8]
}
 8004aee:	bf00      	nop
 8004af0:	e7fe      	b.n	8004af0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	685a      	ldr	r2, [r3, #4]
 8004af6:	4b11      	ldr	r3, [pc, #68]	; (8004b3c <vPortFree+0xb4>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4013      	ands	r3, r2
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d019      	beq.n	8004b34 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d115      	bne.n	8004b34 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	685a      	ldr	r2, [r3, #4]
 8004b0c:	4b0b      	ldr	r3, [pc, #44]	; (8004b3c <vPortFree+0xb4>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	43db      	mvns	r3, r3
 8004b12:	401a      	ands	r2, r3
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004b18:	f7ff f968 	bl	8003dec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	685a      	ldr	r2, [r3, #4]
 8004b20:	4b07      	ldr	r3, [pc, #28]	; (8004b40 <vPortFree+0xb8>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4413      	add	r3, r2
 8004b26:	4a06      	ldr	r2, [pc, #24]	; (8004b40 <vPortFree+0xb8>)
 8004b28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004b2a:	6938      	ldr	r0, [r7, #16]
 8004b2c:	f000 f86c 	bl	8004c08 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004b30:	f7ff f96a 	bl	8003e08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004b34:	bf00      	nop
 8004b36:	3718      	adds	r7, #24
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	20004164 	.word	0x20004164
 8004b40:	2000415c 	.word	0x2000415c

08004b44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004b4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004b4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004b50:	4b27      	ldr	r3, [pc, #156]	; (8004bf0 <prvHeapInit+0xac>)
 8004b52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f003 0307 	and.w	r3, r3, #7
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00c      	beq.n	8004b78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	3307      	adds	r3, #7
 8004b62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f023 0307 	bic.w	r3, r3, #7
 8004b6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004b6c:	68ba      	ldr	r2, [r7, #8]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	4a1f      	ldr	r2, [pc, #124]	; (8004bf0 <prvHeapInit+0xac>)
 8004b74:	4413      	add	r3, r2
 8004b76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004b7c:	4a1d      	ldr	r2, [pc, #116]	; (8004bf4 <prvHeapInit+0xb0>)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004b82:	4b1c      	ldr	r3, [pc, #112]	; (8004bf4 <prvHeapInit+0xb0>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	68ba      	ldr	r2, [r7, #8]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004b90:	2208      	movs	r2, #8
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	1a9b      	subs	r3, r3, r2
 8004b96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f023 0307 	bic.w	r3, r3, #7
 8004b9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	4a15      	ldr	r2, [pc, #84]	; (8004bf8 <prvHeapInit+0xb4>)
 8004ba4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004ba6:	4b14      	ldr	r3, [pc, #80]	; (8004bf8 <prvHeapInit+0xb4>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2200      	movs	r2, #0
 8004bac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004bae:	4b12      	ldr	r3, [pc, #72]	; (8004bf8 <prvHeapInit+0xb4>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	1ad2      	subs	r2, r2, r3
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004bc4:	4b0c      	ldr	r3, [pc, #48]	; (8004bf8 <prvHeapInit+0xb4>)
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	4a0a      	ldr	r2, [pc, #40]	; (8004bfc <prvHeapInit+0xb8>)
 8004bd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	4a09      	ldr	r2, [pc, #36]	; (8004c00 <prvHeapInit+0xbc>)
 8004bda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004bdc:	4b09      	ldr	r3, [pc, #36]	; (8004c04 <prvHeapInit+0xc0>)
 8004bde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004be2:	601a      	str	r2, [r3, #0]
}
 8004be4:	bf00      	nop
 8004be6:	3714      	adds	r7, #20
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr
 8004bf0:	20000550 	.word	0x20000550
 8004bf4:	20004150 	.word	0x20004150
 8004bf8:	20004158 	.word	0x20004158
 8004bfc:	20004160 	.word	0x20004160
 8004c00:	2000415c 	.word	0x2000415c
 8004c04:	20004164 	.word	0x20004164

08004c08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004c10:	4b28      	ldr	r3, [pc, #160]	; (8004cb4 <prvInsertBlockIntoFreeList+0xac>)
 8004c12:	60fb      	str	r3, [r7, #12]
 8004c14:	e002      	b.n	8004c1c <prvInsertBlockIntoFreeList+0x14>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	60fb      	str	r3, [r7, #12]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d8f7      	bhi.n	8004c16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	68ba      	ldr	r2, [r7, #8]
 8004c30:	4413      	add	r3, r2
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d108      	bne.n	8004c4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	685a      	ldr	r2, [r3, #4]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	441a      	add	r2, r3
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	68ba      	ldr	r2, [r7, #8]
 8004c54:	441a      	add	r2, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d118      	bne.n	8004c90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	4b15      	ldr	r3, [pc, #84]	; (8004cb8 <prvInsertBlockIntoFreeList+0xb0>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d00d      	beq.n	8004c86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685a      	ldr	r2, [r3, #4]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	441a      	add	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	601a      	str	r2, [r3, #0]
 8004c84:	e008      	b.n	8004c98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004c86:	4b0c      	ldr	r3, [pc, #48]	; (8004cb8 <prvInsertBlockIntoFreeList+0xb0>)
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	601a      	str	r2, [r3, #0]
 8004c8e:	e003      	b.n	8004c98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d002      	beq.n	8004ca6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ca6:	bf00      	nop
 8004ca8:	3714      	adds	r7, #20
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	20004150 	.word	0x20004150
 8004cb8:	20004158 	.word	0x20004158

08004cbc <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004cc0:	4803      	ldr	r0, [pc, #12]	; (8004cd0 <_cbSendSystemDesc+0x14>)
 8004cc2:	f001 f883 	bl	8005dcc <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004cc6:	4803      	ldr	r0, [pc, #12]	; (8004cd4 <_cbSendSystemDesc+0x18>)
 8004cc8:	f001 f880 	bl	8005dcc <SEGGER_SYSVIEW_SendSysDesc>
}
 8004ccc:	bf00      	nop
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	080066c4 	.word	0x080066c4
 8004cd4:	080066f8 	.word	0x080066f8

08004cd8 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004cdc:	4b06      	ldr	r3, [pc, #24]	; (8004cf8 <SEGGER_SYSVIEW_Conf+0x20>)
 8004cde:	6818      	ldr	r0, [r3, #0]
 8004ce0:	4b05      	ldr	r3, [pc, #20]	; (8004cf8 <SEGGER_SYSVIEW_Conf+0x20>)
 8004ce2:	6819      	ldr	r1, [r3, #0]
 8004ce4:	4b05      	ldr	r3, [pc, #20]	; (8004cfc <SEGGER_SYSVIEW_Conf+0x24>)
 8004ce6:	4a06      	ldr	r2, [pc, #24]	; (8004d00 <SEGGER_SYSVIEW_Conf+0x28>)
 8004ce8:	f000 fcf6 	bl	80056d8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004cec:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004cf0:	f000 fd36 	bl	8005760 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004cf4:	bf00      	nop
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	20000000 	.word	0x20000000
 8004cfc:	08004cbd 	.word	0x08004cbd
 8004d00:	08006798 	.word	0x08006798

08004d04 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	607b      	str	r3, [r7, #4]
 8004d0e:	e033      	b.n	8004d78 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004d10:	491e      	ldr	r1, [pc, #120]	; (8004d8c <_cbSendTaskList+0x88>)
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	4613      	mov	r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	4413      	add	r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	440b      	add	r3, r1
 8004d1e:	6818      	ldr	r0, [r3, #0]
 8004d20:	491a      	ldr	r1, [pc, #104]	; (8004d8c <_cbSendTaskList+0x88>)
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	4613      	mov	r3, r2
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	4413      	add	r3, r2
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	440b      	add	r3, r1
 8004d2e:	3304      	adds	r3, #4
 8004d30:	6819      	ldr	r1, [r3, #0]
 8004d32:	4c16      	ldr	r4, [pc, #88]	; (8004d8c <_cbSendTaskList+0x88>)
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	4613      	mov	r3, r2
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	4413      	add	r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	4423      	add	r3, r4
 8004d40:	3308      	adds	r3, #8
 8004d42:	681c      	ldr	r4, [r3, #0]
 8004d44:	4d11      	ldr	r5, [pc, #68]	; (8004d8c <_cbSendTaskList+0x88>)
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	4613      	mov	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	4413      	add	r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	442b      	add	r3, r5
 8004d52:	330c      	adds	r3, #12
 8004d54:	681d      	ldr	r5, [r3, #0]
 8004d56:	4e0d      	ldr	r6, [pc, #52]	; (8004d8c <_cbSendTaskList+0x88>)
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	4413      	add	r3, r2
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	4433      	add	r3, r6
 8004d64:	3310      	adds	r3, #16
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	9300      	str	r3, [sp, #0]
 8004d6a:	462b      	mov	r3, r5
 8004d6c:	4622      	mov	r2, r4
 8004d6e:	f000 f8bd 	bl	8004eec <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	3301      	adds	r3, #1
 8004d76:	607b      	str	r3, [r7, #4]
 8004d78:	4b05      	ldr	r3, [pc, #20]	; (8004d90 <_cbSendTaskList+0x8c>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d3c6      	bcc.n	8004d10 <_cbSendTaskList+0xc>
  }
}
 8004d82:	bf00      	nop
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d8c:	20004168 	.word	0x20004168
 8004d90:	20004208 	.word	0x20004208

08004d94 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004d94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d98:	b082      	sub	sp, #8
 8004d9a:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004d9c:	f7ff f8d6 	bl	8003f4c <xTaskGetTickCountFromISR>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2200      	movs	r2, #0
 8004da4:	469a      	mov	sl, r3
 8004da6:	4693      	mov	fp, r2
 8004da8:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004dac:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004db0:	4602      	mov	r2, r0
 8004db2:	460b      	mov	r3, r1
 8004db4:	f04f 0a00 	mov.w	sl, #0
 8004db8:	f04f 0b00 	mov.w	fp, #0
 8004dbc:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004dc0:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004dc4:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004dc8:	4652      	mov	r2, sl
 8004dca:	465b      	mov	r3, fp
 8004dcc:	1a14      	subs	r4, r2, r0
 8004dce:	eb63 0501 	sbc.w	r5, r3, r1
 8004dd2:	f04f 0200 	mov.w	r2, #0
 8004dd6:	f04f 0300 	mov.w	r3, #0
 8004dda:	00ab      	lsls	r3, r5, #2
 8004ddc:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004de0:	00a2      	lsls	r2, r4, #2
 8004de2:	4614      	mov	r4, r2
 8004de4:	461d      	mov	r5, r3
 8004de6:	eb14 0800 	adds.w	r8, r4, r0
 8004dea:	eb45 0901 	adc.w	r9, r5, r1
 8004dee:	f04f 0200 	mov.w	r2, #0
 8004df2:	f04f 0300 	mov.w	r3, #0
 8004df6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004dfa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dfe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e02:	4690      	mov	r8, r2
 8004e04:	4699      	mov	r9, r3
 8004e06:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004e0a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004e0e:	4610      	mov	r0, r2
 8004e10:	4619      	mov	r1, r3
 8004e12:	3708      	adds	r7, #8
 8004e14:	46bd      	mov	sp, r7
 8004e16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004e1c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b086      	sub	sp, #24
 8004e20:	af02      	add	r7, sp, #8
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
 8004e28:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004e2a:	2205      	movs	r2, #5
 8004e2c:	492b      	ldr	r1, [pc, #172]	; (8004edc <SYSVIEW_AddTask+0xc0>)
 8004e2e:	68b8      	ldr	r0, [r7, #8]
 8004e30:	f001 fb3c 	bl	80064ac <memcmp>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d04b      	beq.n	8004ed2 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004e3a:	4b29      	ldr	r3, [pc, #164]	; (8004ee0 <SYSVIEW_AddTask+0xc4>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2b07      	cmp	r3, #7
 8004e40:	d903      	bls.n	8004e4a <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004e42:	4828      	ldr	r0, [pc, #160]	; (8004ee4 <SYSVIEW_AddTask+0xc8>)
 8004e44:	f001 fab0 	bl	80063a8 <SEGGER_SYSVIEW_Warn>
    return;
 8004e48:	e044      	b.n	8004ed4 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004e4a:	4b25      	ldr	r3, [pc, #148]	; (8004ee0 <SYSVIEW_AddTask+0xc4>)
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	4926      	ldr	r1, [pc, #152]	; (8004ee8 <SYSVIEW_AddTask+0xcc>)
 8004e50:	4613      	mov	r3, r2
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	4413      	add	r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	440b      	add	r3, r1
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004e5e:	4b20      	ldr	r3, [pc, #128]	; (8004ee0 <SYSVIEW_AddTask+0xc4>)
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	4921      	ldr	r1, [pc, #132]	; (8004ee8 <SYSVIEW_AddTask+0xcc>)
 8004e64:	4613      	mov	r3, r2
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	4413      	add	r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	440b      	add	r3, r1
 8004e6e:	3304      	adds	r3, #4
 8004e70:	68ba      	ldr	r2, [r7, #8]
 8004e72:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004e74:	4b1a      	ldr	r3, [pc, #104]	; (8004ee0 <SYSVIEW_AddTask+0xc4>)
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	491b      	ldr	r1, [pc, #108]	; (8004ee8 <SYSVIEW_AddTask+0xcc>)
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	4413      	add	r3, r2
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	440b      	add	r3, r1
 8004e84:	3308      	adds	r3, #8
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004e8a:	4b15      	ldr	r3, [pc, #84]	; (8004ee0 <SYSVIEW_AddTask+0xc4>)
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	4916      	ldr	r1, [pc, #88]	; (8004ee8 <SYSVIEW_AddTask+0xcc>)
 8004e90:	4613      	mov	r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	4413      	add	r3, r2
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	440b      	add	r3, r1
 8004e9a:	330c      	adds	r3, #12
 8004e9c:	683a      	ldr	r2, [r7, #0]
 8004e9e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004ea0:	4b0f      	ldr	r3, [pc, #60]	; (8004ee0 <SYSVIEW_AddTask+0xc4>)
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	4910      	ldr	r1, [pc, #64]	; (8004ee8 <SYSVIEW_AddTask+0xcc>)
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	4413      	add	r3, r2
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	440b      	add	r3, r1
 8004eb0:	3310      	adds	r3, #16
 8004eb2:	69ba      	ldr	r2, [r7, #24]
 8004eb4:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004eb6:	4b0a      	ldr	r3, [pc, #40]	; (8004ee0 <SYSVIEW_AddTask+0xc4>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	3301      	adds	r3, #1
 8004ebc:	4a08      	ldr	r2, [pc, #32]	; (8004ee0 <SYSVIEW_AddTask+0xc4>)
 8004ebe:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	9300      	str	r3, [sp, #0]
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	68b9      	ldr	r1, [r7, #8]
 8004eca:	68f8      	ldr	r0, [r7, #12]
 8004ecc:	f000 f80e 	bl	8004eec <SYSVIEW_SendTaskInfo>
 8004ed0:	e000      	b.n	8004ed4 <SYSVIEW_AddTask+0xb8>
    return;
 8004ed2:	bf00      	nop

}
 8004ed4:	3710      	adds	r7, #16
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	08006708 	.word	0x08006708
 8004ee0:	20004208 	.word	0x20004208
 8004ee4:	08006710 	.word	0x08006710
 8004ee8:	20004168 	.word	0x20004168

08004eec <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b08a      	sub	sp, #40	; 0x28
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]
 8004ef8:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004efa:	f107 0314 	add.w	r3, r7, #20
 8004efe:	2214      	movs	r2, #20
 8004f00:	2100      	movs	r1, #0
 8004f02:	4618      	mov	r0, r3
 8004f04:	f001 faf0 	bl	80064e8 <memset>
  TaskInfo.TaskID     = TaskID;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1a:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004f1c:	f107 0314 	add.w	r3, r7, #20
 8004f20:	4618      	mov	r0, r3
 8004f22:	f000 fe5b 	bl	8005bdc <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004f26:	bf00      	nop
 8004f28:	3728      	adds	r7, #40	; 0x28
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
	...

08004f30 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004f36:	4b24      	ldr	r3, [pc, #144]	; (8004fc8 <_DoInit+0x98>)
 8004f38:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2203      	movs	r2, #3
 8004f3e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2203      	movs	r2, #3
 8004f44:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a20      	ldr	r2, [pc, #128]	; (8004fcc <_DoInit+0x9c>)
 8004f4a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a20      	ldr	r2, [pc, #128]	; (8004fd0 <_DoInit+0xa0>)
 8004f50:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f58:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a17      	ldr	r2, [pc, #92]	; (8004fcc <_DoInit+0x9c>)
 8004f70:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a17      	ldr	r2, [pc, #92]	; (8004fd4 <_DoInit+0xa4>)
 8004f76:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2210      	movs	r2, #16
 8004f7c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	3307      	adds	r3, #7
 8004f94:	4a10      	ldr	r2, [pc, #64]	; (8004fd8 <_DoInit+0xa8>)
 8004f96:	6810      	ldr	r0, [r2, #0]
 8004f98:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004f9a:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a0e      	ldr	r2, [pc, #56]	; (8004fdc <_DoInit+0xac>)
 8004fa2:	6810      	ldr	r0, [r2, #0]
 8004fa4:	6018      	str	r0, [r3, #0]
 8004fa6:	8891      	ldrh	r1, [r2, #4]
 8004fa8:	7992      	ldrb	r2, [r2, #6]
 8004faa:	8099      	strh	r1, [r3, #4]
 8004fac:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004fae:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2220      	movs	r2, #32
 8004fb6:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004fb8:	f3bf 8f5f 	dmb	sy
}
 8004fbc:	bf00      	nop
 8004fbe:	370c      	adds	r7, #12
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr
 8004fc8:	2000420c 	.word	0x2000420c
 8004fcc:	08006760 	.word	0x08006760
 8004fd0:	200042b4 	.word	0x200042b4
 8004fd4:	200046b4 	.word	0x200046b4
 8004fd8:	0800676c 	.word	0x0800676c
 8004fdc:	08006770 	.word	0x08006770

08004fe0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b08c      	sub	sp, #48	; 0x30
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004fec:	4b3e      	ldr	r3, [pc, #248]	; (80050e8 <SEGGER_RTT_ReadNoLock+0x108>)
 8004fee:	623b      	str	r3, [r7, #32]
 8004ff0:	6a3b      	ldr	r3, [r7, #32]
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d101      	bne.n	8004ffe <SEGGER_RTT_ReadNoLock+0x1e>
 8004ffa:	f7ff ff99 	bl	8004f30 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	4613      	mov	r3, r2
 8005002:	005b      	lsls	r3, r3, #1
 8005004:	4413      	add	r3, r2
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	3360      	adds	r3, #96	; 0x60
 800500a:	4a37      	ldr	r2, [pc, #220]	; (80050e8 <SEGGER_RTT_ReadNoLock+0x108>)
 800500c:	4413      	add	r3, r2
 800500e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005020:	2300      	movs	r3, #0
 8005022:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005024:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	429a      	cmp	r2, r3
 800502a:	d92b      	bls.n	8005084 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	689a      	ldr	r2, [r3, #8]
 8005030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4293      	cmp	r3, r2
 800503c:	bf28      	it	cs
 800503e:	4613      	movcs	r3, r2
 8005040:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	685a      	ldr	r2, [r3, #4]
 8005046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005048:	4413      	add	r3, r2
 800504a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800504c:	697a      	ldr	r2, [r7, #20]
 800504e:	6939      	ldr	r1, [r7, #16]
 8005050:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005052:	f001 fa3b 	bl	80064cc <memcpy>
    NumBytesRead += NumBytesRem;
 8005056:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	4413      	add	r3, r2
 800505c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800505e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	4413      	add	r3, r2
 8005064:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800506e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	4413      	add	r3, r2
 8005074:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800507c:	429a      	cmp	r2, r3
 800507e:	d101      	bne.n	8005084 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005080:	2300      	movs	r3, #0
 8005082:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005084:	69ba      	ldr	r2, [r7, #24]
 8005086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800508c:	697a      	ldr	r2, [r7, #20]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4293      	cmp	r3, r2
 8005092:	bf28      	it	cs
 8005094:	4613      	movcs	r3, r2
 8005096:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d019      	beq.n	80050d2 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	685a      	ldr	r2, [r3, #4]
 80050a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a4:	4413      	add	r3, r2
 80050a6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80050a8:	697a      	ldr	r2, [r7, #20]
 80050aa:	6939      	ldr	r1, [r7, #16]
 80050ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050ae:	f001 fa0d 	bl	80064cc <memcpy>
    NumBytesRead += NumBytesRem;
 80050b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	4413      	add	r3, r2
 80050b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80050ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	4413      	add	r3, r2
 80050c0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80050ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	4413      	add	r3, r2
 80050d0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80050d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d002      	beq.n	80050de <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050dc:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80050de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3730      	adds	r7, #48	; 0x30
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	2000420c 	.word	0x2000420c

080050ec <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b088      	sub	sp, #32
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	607a      	str	r2, [r7, #4]
 80050f8:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80050fa:	4b3d      	ldr	r3, [pc, #244]	; (80051f0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80050fc:	61bb      	str	r3, [r7, #24]
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	b2db      	uxtb	r3, r3
 8005104:	2b00      	cmp	r3, #0
 8005106:	d101      	bne.n	800510c <SEGGER_RTT_AllocUpBuffer+0x20>
 8005108:	f7ff ff12 	bl	8004f30 <_DoInit>
  SEGGER_RTT_LOCK();
 800510c:	f3ef 8311 	mrs	r3, BASEPRI
 8005110:	f04f 0120 	mov.w	r1, #32
 8005114:	f381 8811 	msr	BASEPRI, r1
 8005118:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800511a:	4b35      	ldr	r3, [pc, #212]	; (80051f0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800511c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800511e:	2300      	movs	r3, #0
 8005120:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005122:	6939      	ldr	r1, [r7, #16]
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	1c5a      	adds	r2, r3, #1
 8005128:	4613      	mov	r3, r2
 800512a:	005b      	lsls	r3, r3, #1
 800512c:	4413      	add	r3, r2
 800512e:	00db      	lsls	r3, r3, #3
 8005130:	440b      	add	r3, r1
 8005132:	3304      	adds	r3, #4
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d008      	beq.n	800514c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	3301      	adds	r3, #1
 800513e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	69fa      	ldr	r2, [r7, #28]
 8005146:	429a      	cmp	r2, r3
 8005148:	dbeb      	blt.n	8005122 <SEGGER_RTT_AllocUpBuffer+0x36>
 800514a:	e000      	b.n	800514e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800514c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	69fa      	ldr	r2, [r7, #28]
 8005154:	429a      	cmp	r2, r3
 8005156:	da3f      	bge.n	80051d8 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005158:	6939      	ldr	r1, [r7, #16]
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	1c5a      	adds	r2, r3, #1
 800515e:	4613      	mov	r3, r2
 8005160:	005b      	lsls	r3, r3, #1
 8005162:	4413      	add	r3, r2
 8005164:	00db      	lsls	r3, r3, #3
 8005166:	440b      	add	r3, r1
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800516c:	6939      	ldr	r1, [r7, #16]
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	1c5a      	adds	r2, r3, #1
 8005172:	4613      	mov	r3, r2
 8005174:	005b      	lsls	r3, r3, #1
 8005176:	4413      	add	r3, r2
 8005178:	00db      	lsls	r3, r3, #3
 800517a:	440b      	add	r3, r1
 800517c:	3304      	adds	r3, #4
 800517e:	68ba      	ldr	r2, [r7, #8]
 8005180:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005182:	6939      	ldr	r1, [r7, #16]
 8005184:	69fa      	ldr	r2, [r7, #28]
 8005186:	4613      	mov	r3, r2
 8005188:	005b      	lsls	r3, r3, #1
 800518a:	4413      	add	r3, r2
 800518c:	00db      	lsls	r3, r3, #3
 800518e:	440b      	add	r3, r1
 8005190:	3320      	adds	r3, #32
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005196:	6939      	ldr	r1, [r7, #16]
 8005198:	69fa      	ldr	r2, [r7, #28]
 800519a:	4613      	mov	r3, r2
 800519c:	005b      	lsls	r3, r3, #1
 800519e:	4413      	add	r3, r2
 80051a0:	00db      	lsls	r3, r3, #3
 80051a2:	440b      	add	r3, r1
 80051a4:	3328      	adds	r3, #40	; 0x28
 80051a6:	2200      	movs	r2, #0
 80051a8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80051aa:	6939      	ldr	r1, [r7, #16]
 80051ac:	69fa      	ldr	r2, [r7, #28]
 80051ae:	4613      	mov	r3, r2
 80051b0:	005b      	lsls	r3, r3, #1
 80051b2:	4413      	add	r3, r2
 80051b4:	00db      	lsls	r3, r3, #3
 80051b6:	440b      	add	r3, r1
 80051b8:	3324      	adds	r3, #36	; 0x24
 80051ba:	2200      	movs	r2, #0
 80051bc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80051be:	6939      	ldr	r1, [r7, #16]
 80051c0:	69fa      	ldr	r2, [r7, #28]
 80051c2:	4613      	mov	r3, r2
 80051c4:	005b      	lsls	r3, r3, #1
 80051c6:	4413      	add	r3, r2
 80051c8:	00db      	lsls	r3, r3, #3
 80051ca:	440b      	add	r3, r1
 80051cc:	332c      	adds	r3, #44	; 0x2c
 80051ce:	683a      	ldr	r2, [r7, #0]
 80051d0:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80051d2:	f3bf 8f5f 	dmb	sy
 80051d6:	e002      	b.n	80051de <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80051d8:	f04f 33ff 	mov.w	r3, #4294967295
 80051dc:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80051e4:	69fb      	ldr	r3, [r7, #28]
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3720      	adds	r7, #32
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	2000420c 	.word	0x2000420c

080051f4 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b08a      	sub	sp, #40	; 0x28
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
 8005200:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8005202:	4b21      	ldr	r3, [pc, #132]	; (8005288 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005204:	623b      	str	r3, [r7, #32]
 8005206:	6a3b      	ldr	r3, [r7, #32]
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	b2db      	uxtb	r3, r3
 800520c:	2b00      	cmp	r3, #0
 800520e:	d101      	bne.n	8005214 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005210:	f7ff fe8e 	bl	8004f30 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005214:	4b1c      	ldr	r3, [pc, #112]	; (8005288 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005216:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2b02      	cmp	r3, #2
 800521c:	d82c      	bhi.n	8005278 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800521e:	f3ef 8311 	mrs	r3, BASEPRI
 8005222:	f04f 0120 	mov.w	r1, #32
 8005226:	f381 8811 	msr	BASEPRI, r1
 800522a:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	4613      	mov	r3, r2
 8005230:	005b      	lsls	r3, r3, #1
 8005232:	4413      	add	r3, r2
 8005234:	00db      	lsls	r3, r3, #3
 8005236:	3360      	adds	r3, #96	; 0x60
 8005238:	69fa      	ldr	r2, [r7, #28]
 800523a:	4413      	add	r3, r2
 800523c:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00e      	beq.n	8005262 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	68ba      	ldr	r2, [r7, #8]
 8005248:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	683a      	ldr	r2, [r7, #0]
 8005254:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	2200      	movs	r2, #0
 800525a:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	2200      	movs	r2, #0
 8005260:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005266:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005268:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005272:	2300      	movs	r3, #0
 8005274:	627b      	str	r3, [r7, #36]	; 0x24
 8005276:	e002      	b.n	800527e <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005278:	f04f 33ff 	mov.w	r3, #4294967295
 800527c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800527e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005280:	4618      	mov	r0, r3
 8005282:	3728      	adds	r7, #40	; 0x28
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	2000420c 	.word	0x2000420c

0800528c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800528c:	b480      	push	{r7}
 800528e:	b087      	sub	sp, #28
 8005290:	af00      	add	r7, sp, #0
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005298:	2300      	movs	r3, #0
 800529a:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d00f      	beq.n	80052c2 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 80052a2:	e002      	b.n	80052aa <_EncodeStr+0x1e>
      Len++;
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	3301      	adds	r3, #1
 80052a8:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 80052aa:	68ba      	ldr	r2, [r7, #8]
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	4413      	add	r3, r2
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d1f6      	bne.n	80052a4 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 80052b6:	693a      	ldr	r2, [r7, #16]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d901      	bls.n	80052c2 <_EncodeStr+0x36>
      Len = Limit;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	2bfe      	cmp	r3, #254	; 0xfe
 80052c6:	d806      	bhi.n	80052d6 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	1c5a      	adds	r2, r3, #1
 80052cc:	60fa      	str	r2, [r7, #12]
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	b2d2      	uxtb	r2, r2
 80052d2:	701a      	strb	r2, [r3, #0]
 80052d4:	e011      	b.n	80052fa <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	1c5a      	adds	r2, r3, #1
 80052da:	60fa      	str	r2, [r7, #12]
 80052dc:	22ff      	movs	r2, #255	; 0xff
 80052de:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	1c5a      	adds	r2, r3, #1
 80052e4:	60fa      	str	r2, [r7, #12]
 80052e6:	693a      	ldr	r2, [r7, #16]
 80052e8:	b2d2      	uxtb	r2, r2
 80052ea:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	0a19      	lsrs	r1, r3, #8
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	1c5a      	adds	r2, r3, #1
 80052f4:	60fa      	str	r2, [r7, #12]
 80052f6:	b2ca      	uxtb	r2, r1
 80052f8:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80052fa:	2300      	movs	r3, #0
 80052fc:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80052fe:	e00a      	b.n	8005316 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8005300:	68ba      	ldr	r2, [r7, #8]
 8005302:	1c53      	adds	r3, r2, #1
 8005304:	60bb      	str	r3, [r7, #8]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	1c59      	adds	r1, r3, #1
 800530a:	60f9      	str	r1, [r7, #12]
 800530c:	7812      	ldrb	r2, [r2, #0]
 800530e:	701a      	strb	r2, [r3, #0]
    n++;
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	3301      	adds	r3, #1
 8005314:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	429a      	cmp	r2, r3
 800531c:	d3f0      	bcc.n	8005300 <_EncodeStr+0x74>
  }
  return pPayload;
 800531e:	68fb      	ldr	r3, [r7, #12]
}
 8005320:	4618      	mov	r0, r3
 8005322:	371c      	adds	r7, #28
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	3304      	adds	r3, #4
}
 8005338:	4618      	mov	r0, r3
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800534a:	4b36      	ldr	r3, [pc, #216]	; (8005424 <_HandleIncomingPacket+0xe0>)
 800534c:	7e1b      	ldrb	r3, [r3, #24]
 800534e:	4618      	mov	r0, r3
 8005350:	1cfb      	adds	r3, r7, #3
 8005352:	2201      	movs	r2, #1
 8005354:	4619      	mov	r1, r3
 8005356:	f7ff fe43 	bl	8004fe0 <SEGGER_RTT_ReadNoLock>
 800535a:	4603      	mov	r3, r0
 800535c:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2b00      	cmp	r3, #0
 8005362:	dd54      	ble.n	800540e <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8005364:	78fb      	ldrb	r3, [r7, #3]
 8005366:	2b80      	cmp	r3, #128	; 0x80
 8005368:	d032      	beq.n	80053d0 <_HandleIncomingPacket+0x8c>
 800536a:	2b80      	cmp	r3, #128	; 0x80
 800536c:	dc42      	bgt.n	80053f4 <_HandleIncomingPacket+0xb0>
 800536e:	2b07      	cmp	r3, #7
 8005370:	dc16      	bgt.n	80053a0 <_HandleIncomingPacket+0x5c>
 8005372:	2b00      	cmp	r3, #0
 8005374:	dd3e      	ble.n	80053f4 <_HandleIncomingPacket+0xb0>
 8005376:	3b01      	subs	r3, #1
 8005378:	2b06      	cmp	r3, #6
 800537a:	d83b      	bhi.n	80053f4 <_HandleIncomingPacket+0xb0>
 800537c:	a201      	add	r2, pc, #4	; (adr r2, 8005384 <_HandleIncomingPacket+0x40>)
 800537e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005382:	bf00      	nop
 8005384:	080053a7 	.word	0x080053a7
 8005388:	080053ad 	.word	0x080053ad
 800538c:	080053b3 	.word	0x080053b3
 8005390:	080053b9 	.word	0x080053b9
 8005394:	080053bf 	.word	0x080053bf
 8005398:	080053c5 	.word	0x080053c5
 800539c:	080053cb 	.word	0x080053cb
 80053a0:	2b7f      	cmp	r3, #127	; 0x7f
 80053a2:	d036      	beq.n	8005412 <_HandleIncomingPacket+0xce>
 80053a4:	e026      	b.n	80053f4 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80053a6:	f000 fa9f 	bl	80058e8 <SEGGER_SYSVIEW_Start>
      break;
 80053aa:	e037      	b.n	800541c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80053ac:	f000 fb56 	bl	8005a5c <SEGGER_SYSVIEW_Stop>
      break;
 80053b0:	e034      	b.n	800541c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80053b2:	f000 fd2f 	bl	8005e14 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80053b6:	e031      	b.n	800541c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80053b8:	f000 fcf4 	bl	8005da4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80053bc:	e02e      	b.n	800541c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80053be:	f000 fb73 	bl	8005aa8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80053c2:	e02b      	b.n	800541c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80053c4:	f000 ffb2 	bl	800632c <SEGGER_SYSVIEW_SendNumModules>
      break;
 80053c8:	e028      	b.n	800541c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80053ca:	f000 ff91 	bl	80062f0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80053ce:	e025      	b.n	800541c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80053d0:	4b14      	ldr	r3, [pc, #80]	; (8005424 <_HandleIncomingPacket+0xe0>)
 80053d2:	7e1b      	ldrb	r3, [r3, #24]
 80053d4:	4618      	mov	r0, r3
 80053d6:	1cfb      	adds	r3, r7, #3
 80053d8:	2201      	movs	r2, #1
 80053da:	4619      	mov	r1, r3
 80053dc:	f7ff fe00 	bl	8004fe0 <SEGGER_RTT_ReadNoLock>
 80053e0:	4603      	mov	r3, r0
 80053e2:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	dd15      	ble.n	8005416 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80053ea:	78fb      	ldrb	r3, [r7, #3]
 80053ec:	4618      	mov	r0, r3
 80053ee:	f000 feff 	bl	80061f0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80053f2:	e010      	b.n	8005416 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80053f4:	78fb      	ldrb	r3, [r7, #3]
 80053f6:	b25b      	sxtb	r3, r3
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	da0e      	bge.n	800541a <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80053fc:	4b09      	ldr	r3, [pc, #36]	; (8005424 <_HandleIncomingPacket+0xe0>)
 80053fe:	7e1b      	ldrb	r3, [r3, #24]
 8005400:	4618      	mov	r0, r3
 8005402:	1cfb      	adds	r3, r7, #3
 8005404:	2201      	movs	r2, #1
 8005406:	4619      	mov	r1, r3
 8005408:	f7ff fdea 	bl	8004fe0 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800540c:	e005      	b.n	800541a <_HandleIncomingPacket+0xd6>
    }
  }
 800540e:	bf00      	nop
 8005410:	e004      	b.n	800541c <_HandleIncomingPacket+0xd8>
      break;
 8005412:	bf00      	nop
 8005414:	e002      	b.n	800541c <_HandleIncomingPacket+0xd8>
      break;
 8005416:	bf00      	nop
 8005418:	e000      	b.n	800541c <_HandleIncomingPacket+0xd8>
      break;
 800541a:	bf00      	nop
}
 800541c:	bf00      	nop
 800541e:	3708      	adds	r7, #8
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}
 8005424:	20004acc 	.word	0x20004acc

08005428 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005428:	b580      	push	{r7, lr}
 800542a:	b08c      	sub	sp, #48	; 0x30
 800542c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800542e:	2301      	movs	r3, #1
 8005430:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005432:	1d3b      	adds	r3, r7, #4
 8005434:	3301      	adds	r3, #1
 8005436:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800543c:	4b31      	ldr	r3, [pc, #196]	; (8005504 <_TrySendOverflowPacket+0xdc>)
 800543e:	695b      	ldr	r3, [r3, #20]
 8005440:	62bb      	str	r3, [r7, #40]	; 0x28
 8005442:	e00b      	b.n	800545c <_TrySendOverflowPacket+0x34>
 8005444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005446:	b2da      	uxtb	r2, r3
 8005448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800544a:	1c59      	adds	r1, r3, #1
 800544c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800544e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005452:	b2d2      	uxtb	r2, r2
 8005454:	701a      	strb	r2, [r3, #0]
 8005456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005458:	09db      	lsrs	r3, r3, #7
 800545a:	62bb      	str	r3, [r7, #40]	; 0x28
 800545c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545e:	2b7f      	cmp	r3, #127	; 0x7f
 8005460:	d8f0      	bhi.n	8005444 <_TrySendOverflowPacket+0x1c>
 8005462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005464:	1c5a      	adds	r2, r3, #1
 8005466:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005468:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800546a:	b2d2      	uxtb	r2, r2
 800546c:	701a      	strb	r2, [r3, #0]
 800546e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005470:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005472:	4b25      	ldr	r3, [pc, #148]	; (8005508 <_TrySendOverflowPacket+0xe0>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005478:	4b22      	ldr	r3, [pc, #136]	; (8005504 <_TrySendOverflowPacket+0xdc>)
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	69ba      	ldr	r2, [r7, #24]
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	627b      	str	r3, [r7, #36]	; 0x24
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	623b      	str	r3, [r7, #32]
 800548a:	e00b      	b.n	80054a4 <_TrySendOverflowPacket+0x7c>
 800548c:	6a3b      	ldr	r3, [r7, #32]
 800548e:	b2da      	uxtb	r2, r3
 8005490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005492:	1c59      	adds	r1, r3, #1
 8005494:	6279      	str	r1, [r7, #36]	; 0x24
 8005496:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800549a:	b2d2      	uxtb	r2, r2
 800549c:	701a      	strb	r2, [r3, #0]
 800549e:	6a3b      	ldr	r3, [r7, #32]
 80054a0:	09db      	lsrs	r3, r3, #7
 80054a2:	623b      	str	r3, [r7, #32]
 80054a4:	6a3b      	ldr	r3, [r7, #32]
 80054a6:	2b7f      	cmp	r3, #127	; 0x7f
 80054a8:	d8f0      	bhi.n	800548c <_TrySendOverflowPacket+0x64>
 80054aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ac:	1c5a      	adds	r2, r3, #1
 80054ae:	627a      	str	r2, [r7, #36]	; 0x24
 80054b0:	6a3a      	ldr	r2, [r7, #32]
 80054b2:	b2d2      	uxtb	r2, r2
 80054b4:	701a      	strb	r2, [r3, #0]
 80054b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80054ba:	4b12      	ldr	r3, [pc, #72]	; (8005504 <_TrySendOverflowPacket+0xdc>)
 80054bc:	785b      	ldrb	r3, [r3, #1]
 80054be:	4618      	mov	r0, r3
 80054c0:	1d3b      	adds	r3, r7, #4
 80054c2:	69fa      	ldr	r2, [r7, #28]
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	461a      	mov	r2, r3
 80054c8:	1d3b      	adds	r3, r7, #4
 80054ca:	4619      	mov	r1, r3
 80054cc:	f7fa fea8 	bl	8000220 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80054d0:	4603      	mov	r3, r0
 80054d2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d009      	beq.n	80054ee <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80054da:	4a0a      	ldr	r2, [pc, #40]	; (8005504 <_TrySendOverflowPacket+0xdc>)
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80054e0:	4b08      	ldr	r3, [pc, #32]	; (8005504 <_TrySendOverflowPacket+0xdc>)
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	3b01      	subs	r3, #1
 80054e6:	b2da      	uxtb	r2, r3
 80054e8:	4b06      	ldr	r3, [pc, #24]	; (8005504 <_TrySendOverflowPacket+0xdc>)
 80054ea:	701a      	strb	r2, [r3, #0]
 80054ec:	e004      	b.n	80054f8 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80054ee:	4b05      	ldr	r3, [pc, #20]	; (8005504 <_TrySendOverflowPacket+0xdc>)
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	3301      	adds	r3, #1
 80054f4:	4a03      	ldr	r2, [pc, #12]	; (8005504 <_TrySendOverflowPacket+0xdc>)
 80054f6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80054f8:	693b      	ldr	r3, [r7, #16]
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3730      	adds	r7, #48	; 0x30
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	20004acc 	.word	0x20004acc
 8005508:	e0001004 	.word	0xe0001004

0800550c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800550c:	b580      	push	{r7, lr}
 800550e:	b08a      	sub	sp, #40	; 0x28
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005518:	4b6c      	ldr	r3, [pc, #432]	; (80056cc <_SendPacket+0x1c0>)
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	2b01      	cmp	r3, #1
 800551e:	d010      	beq.n	8005542 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005520:	4b6a      	ldr	r3, [pc, #424]	; (80056cc <_SendPacket+0x1c0>)
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	f000 80a3 	beq.w	8005670 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800552a:	4b68      	ldr	r3, [pc, #416]	; (80056cc <_SendPacket+0x1c0>)
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	2b02      	cmp	r3, #2
 8005530:	d109      	bne.n	8005546 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005532:	f7ff ff79 	bl	8005428 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005536:	4b65      	ldr	r3, [pc, #404]	; (80056cc <_SendPacket+0x1c0>)
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	2b01      	cmp	r3, #1
 800553c:	f040 809a 	bne.w	8005674 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8005540:	e001      	b.n	8005546 <_SendPacket+0x3a>
    goto Send;
 8005542:	bf00      	nop
 8005544:	e000      	b.n	8005548 <_SendPacket+0x3c>
Send:
 8005546:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2b1f      	cmp	r3, #31
 800554c:	d809      	bhi.n	8005562 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800554e:	4b5f      	ldr	r3, [pc, #380]	; (80056cc <_SendPacket+0x1c0>)
 8005550:	69da      	ldr	r2, [r3, #28]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	fa22 f303 	lsr.w	r3, r2, r3
 8005558:	f003 0301 	and.w	r3, r3, #1
 800555c:	2b00      	cmp	r3, #0
 800555e:	f040 808b 	bne.w	8005678 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2b17      	cmp	r3, #23
 8005566:	d807      	bhi.n	8005578 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	3b01      	subs	r3, #1
 800556c:	60fb      	str	r3, [r7, #12]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	b2da      	uxtb	r2, r3
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	701a      	strb	r2, [r3, #0]
 8005576:	e03d      	b.n	80055f4 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005578:	68ba      	ldr	r2, [r7, #8]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	2b7f      	cmp	r3, #127	; 0x7f
 8005584:	d912      	bls.n	80055ac <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	09da      	lsrs	r2, r3, #7
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	3b01      	subs	r3, #1
 800558e:	60fb      	str	r3, [r7, #12]
 8005590:	b2d2      	uxtb	r2, r2
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	b2db      	uxtb	r3, r3
 800559a:	68fa      	ldr	r2, [r7, #12]
 800559c:	3a01      	subs	r2, #1
 800559e:	60fa      	str	r2, [r7, #12]
 80055a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80055a4:	b2da      	uxtb	r2, r3
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	701a      	strb	r2, [r3, #0]
 80055aa:	e006      	b.n	80055ba <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	3b01      	subs	r3, #1
 80055b0:	60fb      	str	r3, [r7, #12]
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	b2da      	uxtb	r2, r3
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2b7f      	cmp	r3, #127	; 0x7f
 80055be:	d912      	bls.n	80055e6 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	09da      	lsrs	r2, r3, #7
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	3b01      	subs	r3, #1
 80055c8:	60fb      	str	r3, [r7, #12]
 80055ca:	b2d2      	uxtb	r2, r2
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	3a01      	subs	r2, #1
 80055d8:	60fa      	str	r2, [r7, #12]
 80055da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80055de:	b2da      	uxtb	r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	701a      	strb	r2, [r3, #0]
 80055e4:	e006      	b.n	80055f4 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	3b01      	subs	r3, #1
 80055ea:	60fb      	str	r3, [r7, #12]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	b2da      	uxtb	r2, r3
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80055f4:	4b36      	ldr	r3, [pc, #216]	; (80056d0 <_SendPacket+0x1c4>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80055fa:	4b34      	ldr	r3, [pc, #208]	; (80056cc <_SendPacket+0x1c0>)
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	69ba      	ldr	r2, [r7, #24]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	627b      	str	r3, [r7, #36]	; 0x24
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	623b      	str	r3, [r7, #32]
 800560c:	e00b      	b.n	8005626 <_SendPacket+0x11a>
 800560e:	6a3b      	ldr	r3, [r7, #32]
 8005610:	b2da      	uxtb	r2, r3
 8005612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005614:	1c59      	adds	r1, r3, #1
 8005616:	6279      	str	r1, [r7, #36]	; 0x24
 8005618:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800561c:	b2d2      	uxtb	r2, r2
 800561e:	701a      	strb	r2, [r3, #0]
 8005620:	6a3b      	ldr	r3, [r7, #32]
 8005622:	09db      	lsrs	r3, r3, #7
 8005624:	623b      	str	r3, [r7, #32]
 8005626:	6a3b      	ldr	r3, [r7, #32]
 8005628:	2b7f      	cmp	r3, #127	; 0x7f
 800562a:	d8f0      	bhi.n	800560e <_SendPacket+0x102>
 800562c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562e:	1c5a      	adds	r2, r3, #1
 8005630:	627a      	str	r2, [r7, #36]	; 0x24
 8005632:	6a3a      	ldr	r2, [r7, #32]
 8005634:	b2d2      	uxtb	r2, r2
 8005636:	701a      	strb	r2, [r3, #0]
 8005638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563a:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800563c:	4b23      	ldr	r3, [pc, #140]	; (80056cc <_SendPacket+0x1c0>)
 800563e:	785b      	ldrb	r3, [r3, #1]
 8005640:	4618      	mov	r0, r3
 8005642:	68ba      	ldr	r2, [r7, #8]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	461a      	mov	r2, r3
 800564a:	68f9      	ldr	r1, [r7, #12]
 800564c:	f7fa fde8 	bl	8000220 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005650:	4603      	mov	r3, r0
 8005652:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d003      	beq.n	8005662 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800565a:	4a1c      	ldr	r2, [pc, #112]	; (80056cc <_SendPacket+0x1c0>)
 800565c:	69bb      	ldr	r3, [r7, #24]
 800565e:	60d3      	str	r3, [r2, #12]
 8005660:	e00b      	b.n	800567a <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005662:	4b1a      	ldr	r3, [pc, #104]	; (80056cc <_SendPacket+0x1c0>)
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	3301      	adds	r3, #1
 8005668:	b2da      	uxtb	r2, r3
 800566a:	4b18      	ldr	r3, [pc, #96]	; (80056cc <_SendPacket+0x1c0>)
 800566c:	701a      	strb	r2, [r3, #0]
 800566e:	e004      	b.n	800567a <_SendPacket+0x16e>
    goto SendDone;
 8005670:	bf00      	nop
 8005672:	e002      	b.n	800567a <_SendPacket+0x16e>
      goto SendDone;
 8005674:	bf00      	nop
 8005676:	e000      	b.n	800567a <_SendPacket+0x16e>
      goto SendDone;
 8005678:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800567a:	4b14      	ldr	r3, [pc, #80]	; (80056cc <_SendPacket+0x1c0>)
 800567c:	7e1b      	ldrb	r3, [r3, #24]
 800567e:	4619      	mov	r1, r3
 8005680:	4a14      	ldr	r2, [pc, #80]	; (80056d4 <_SendPacket+0x1c8>)
 8005682:	460b      	mov	r3, r1
 8005684:	005b      	lsls	r3, r3, #1
 8005686:	440b      	add	r3, r1
 8005688:	00db      	lsls	r3, r3, #3
 800568a:	4413      	add	r3, r2
 800568c:	336c      	adds	r3, #108	; 0x6c
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	4b0e      	ldr	r3, [pc, #56]	; (80056cc <_SendPacket+0x1c0>)
 8005692:	7e1b      	ldrb	r3, [r3, #24]
 8005694:	4618      	mov	r0, r3
 8005696:	490f      	ldr	r1, [pc, #60]	; (80056d4 <_SendPacket+0x1c8>)
 8005698:	4603      	mov	r3, r0
 800569a:	005b      	lsls	r3, r3, #1
 800569c:	4403      	add	r3, r0
 800569e:	00db      	lsls	r3, r3, #3
 80056a0:	440b      	add	r3, r1
 80056a2:	3370      	adds	r3, #112	; 0x70
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d00b      	beq.n	80056c2 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80056aa:	4b08      	ldr	r3, [pc, #32]	; (80056cc <_SendPacket+0x1c0>)
 80056ac:	789b      	ldrb	r3, [r3, #2]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d107      	bne.n	80056c2 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80056b2:	4b06      	ldr	r3, [pc, #24]	; (80056cc <_SendPacket+0x1c0>)
 80056b4:	2201      	movs	r2, #1
 80056b6:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80056b8:	f7ff fe44 	bl	8005344 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80056bc:	4b03      	ldr	r3, [pc, #12]	; (80056cc <_SendPacket+0x1c0>)
 80056be:	2200      	movs	r2, #0
 80056c0:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80056c2:	bf00      	nop
 80056c4:	3728      	adds	r7, #40	; 0x28
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	20004acc 	.word	0x20004acc
 80056d0:	e0001004 	.word	0xe0001004
 80056d4:	2000420c 	.word	0x2000420c

080056d8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80056d8:	b580      	push	{r7, lr}
 80056da:	b086      	sub	sp, #24
 80056dc:	af02      	add	r7, sp, #8
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	607a      	str	r2, [r7, #4]
 80056e4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80056e6:	2300      	movs	r3, #0
 80056e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056ec:	4917      	ldr	r1, [pc, #92]	; (800574c <SEGGER_SYSVIEW_Init+0x74>)
 80056ee:	4818      	ldr	r0, [pc, #96]	; (8005750 <SEGGER_SYSVIEW_Init+0x78>)
 80056f0:	f7ff fcfc 	bl	80050ec <SEGGER_RTT_AllocUpBuffer>
 80056f4:	4603      	mov	r3, r0
 80056f6:	b2da      	uxtb	r2, r3
 80056f8:	4b16      	ldr	r3, [pc, #88]	; (8005754 <SEGGER_SYSVIEW_Init+0x7c>)
 80056fa:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80056fc:	4b15      	ldr	r3, [pc, #84]	; (8005754 <SEGGER_SYSVIEW_Init+0x7c>)
 80056fe:	785a      	ldrb	r2, [r3, #1]
 8005700:	4b14      	ldr	r3, [pc, #80]	; (8005754 <SEGGER_SYSVIEW_Init+0x7c>)
 8005702:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005704:	4b13      	ldr	r3, [pc, #76]	; (8005754 <SEGGER_SYSVIEW_Init+0x7c>)
 8005706:	7e1b      	ldrb	r3, [r3, #24]
 8005708:	4618      	mov	r0, r3
 800570a:	2300      	movs	r3, #0
 800570c:	9300      	str	r3, [sp, #0]
 800570e:	2308      	movs	r3, #8
 8005710:	4a11      	ldr	r2, [pc, #68]	; (8005758 <SEGGER_SYSVIEW_Init+0x80>)
 8005712:	490f      	ldr	r1, [pc, #60]	; (8005750 <SEGGER_SYSVIEW_Init+0x78>)
 8005714:	f7ff fd6e 	bl	80051f4 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005718:	4b0e      	ldr	r3, [pc, #56]	; (8005754 <SEGGER_SYSVIEW_Init+0x7c>)
 800571a:	2200      	movs	r2, #0
 800571c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800571e:	4b0f      	ldr	r3, [pc, #60]	; (800575c <SEGGER_SYSVIEW_Init+0x84>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a0c      	ldr	r2, [pc, #48]	; (8005754 <SEGGER_SYSVIEW_Init+0x7c>)
 8005724:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005726:	4a0b      	ldr	r2, [pc, #44]	; (8005754 <SEGGER_SYSVIEW_Init+0x7c>)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800572c:	4a09      	ldr	r2, [pc, #36]	; (8005754 <SEGGER_SYSVIEW_Init+0x7c>)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005732:	4a08      	ldr	r2, [pc, #32]	; (8005754 <SEGGER_SYSVIEW_Init+0x7c>)
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005738:	4a06      	ldr	r2, [pc, #24]	; (8005754 <SEGGER_SYSVIEW_Init+0x7c>)
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800573e:	4b05      	ldr	r3, [pc, #20]	; (8005754 <SEGGER_SYSVIEW_Init+0x7c>)
 8005740:	2200      	movs	r2, #0
 8005742:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005744:	bf00      	nop
 8005746:	3710      	adds	r7, #16
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	200046c4 	.word	0x200046c4
 8005750:	08006778 	.word	0x08006778
 8005754:	20004acc 	.word	0x20004acc
 8005758:	20004ac4 	.word	0x20004ac4
 800575c:	e0001004 	.word	0xe0001004

08005760 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005768:	4a04      	ldr	r2, [pc, #16]	; (800577c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6113      	str	r3, [r2, #16]
}
 800576e:	bf00      	nop
 8005770:	370c      	adds	r7, #12
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr
 800577a:	bf00      	nop
 800577c:	20004acc 	.word	0x20004acc

08005780 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005788:	f3ef 8311 	mrs	r3, BASEPRI
 800578c:	f04f 0120 	mov.w	r1, #32
 8005790:	f381 8811 	msr	BASEPRI, r1
 8005794:	60fb      	str	r3, [r7, #12]
 8005796:	4808      	ldr	r0, [pc, #32]	; (80057b8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005798:	f7ff fdc8 	bl	800532c <_PreparePacket>
 800579c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	68b9      	ldr	r1, [r7, #8]
 80057a2:	68b8      	ldr	r0, [r7, #8]
 80057a4:	f7ff feb2 	bl	800550c <_SendPacket>
  RECORD_END();
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f383 8811 	msr	BASEPRI, r3
}
 80057ae:	bf00      	nop
 80057b0:	3710      	adds	r7, #16
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	20004afc 	.word	0x20004afc

080057bc <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80057bc:	b580      	push	{r7, lr}
 80057be:	b088      	sub	sp, #32
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80057c6:	f3ef 8311 	mrs	r3, BASEPRI
 80057ca:	f04f 0120 	mov.w	r1, #32
 80057ce:	f381 8811 	msr	BASEPRI, r1
 80057d2:	617b      	str	r3, [r7, #20]
 80057d4:	4816      	ldr	r0, [pc, #88]	; (8005830 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80057d6:	f7ff fda9 	bl	800532c <_PreparePacket>
 80057da:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	61fb      	str	r3, [r7, #28]
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	61bb      	str	r3, [r7, #24]
 80057e8:	e00b      	b.n	8005802 <SEGGER_SYSVIEW_RecordU32+0x46>
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	b2da      	uxtb	r2, r3
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	1c59      	adds	r1, r3, #1
 80057f2:	61f9      	str	r1, [r7, #28]
 80057f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057f8:	b2d2      	uxtb	r2, r2
 80057fa:	701a      	strb	r2, [r3, #0]
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	09db      	lsrs	r3, r3, #7
 8005800:	61bb      	str	r3, [r7, #24]
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	2b7f      	cmp	r3, #127	; 0x7f
 8005806:	d8f0      	bhi.n	80057ea <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	1c5a      	adds	r2, r3, #1
 800580c:	61fa      	str	r2, [r7, #28]
 800580e:	69ba      	ldr	r2, [r7, #24]
 8005810:	b2d2      	uxtb	r2, r2
 8005812:	701a      	strb	r2, [r3, #0]
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	68f9      	ldr	r1, [r7, #12]
 800581c:	6938      	ldr	r0, [r7, #16]
 800581e:	f7ff fe75 	bl	800550c <_SendPacket>
  RECORD_END();
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	f383 8811 	msr	BASEPRI, r3
}
 8005828:	bf00      	nop
 800582a:	3720      	adds	r7, #32
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}
 8005830:	20004afc 	.word	0x20004afc

08005834 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005834:	b580      	push	{r7, lr}
 8005836:	b08c      	sub	sp, #48	; 0x30
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005840:	f3ef 8311 	mrs	r3, BASEPRI
 8005844:	f04f 0120 	mov.w	r1, #32
 8005848:	f381 8811 	msr	BASEPRI, r1
 800584c:	61fb      	str	r3, [r7, #28]
 800584e:	4825      	ldr	r0, [pc, #148]	; (80058e4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005850:	f7ff fd6c 	bl	800532c <_PreparePacket>
 8005854:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	62bb      	str	r3, [r7, #40]	; 0x28
 8005862:	e00b      	b.n	800587c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005866:	b2da      	uxtb	r2, r3
 8005868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800586a:	1c59      	adds	r1, r3, #1
 800586c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800586e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005872:	b2d2      	uxtb	r2, r2
 8005874:	701a      	strb	r2, [r3, #0]
 8005876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005878:	09db      	lsrs	r3, r3, #7
 800587a:	62bb      	str	r3, [r7, #40]	; 0x28
 800587c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800587e:	2b7f      	cmp	r3, #127	; 0x7f
 8005880:	d8f0      	bhi.n	8005864 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005884:	1c5a      	adds	r2, r3, #1
 8005886:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005888:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800588a:	b2d2      	uxtb	r2, r2
 800588c:	701a      	strb	r2, [r3, #0]
 800588e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005890:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	627b      	str	r3, [r7, #36]	; 0x24
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	623b      	str	r3, [r7, #32]
 800589a:	e00b      	b.n	80058b4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800589c:	6a3b      	ldr	r3, [r7, #32]
 800589e:	b2da      	uxtb	r2, r3
 80058a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a2:	1c59      	adds	r1, r3, #1
 80058a4:	6279      	str	r1, [r7, #36]	; 0x24
 80058a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058aa:	b2d2      	uxtb	r2, r2
 80058ac:	701a      	strb	r2, [r3, #0]
 80058ae:	6a3b      	ldr	r3, [r7, #32]
 80058b0:	09db      	lsrs	r3, r3, #7
 80058b2:	623b      	str	r3, [r7, #32]
 80058b4:	6a3b      	ldr	r3, [r7, #32]
 80058b6:	2b7f      	cmp	r3, #127	; 0x7f
 80058b8:	d8f0      	bhi.n	800589c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80058ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058bc:	1c5a      	adds	r2, r3, #1
 80058be:	627a      	str	r2, [r7, #36]	; 0x24
 80058c0:	6a3a      	ldr	r2, [r7, #32]
 80058c2:	b2d2      	uxtb	r2, r2
 80058c4:	701a      	strb	r2, [r3, #0]
 80058c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	6979      	ldr	r1, [r7, #20]
 80058ce:	69b8      	ldr	r0, [r7, #24]
 80058d0:	f7ff fe1c 	bl	800550c <_SendPacket>
  RECORD_END();
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	f383 8811 	msr	BASEPRI, r3
}
 80058da:	bf00      	nop
 80058dc:	3730      	adds	r7, #48	; 0x30
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	20004afc 	.word	0x20004afc

080058e8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b08c      	sub	sp, #48	; 0x30
 80058ec:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80058ee:	4b58      	ldr	r3, [pc, #352]	; (8005a50 <SEGGER_SYSVIEW_Start+0x168>)
 80058f0:	2201      	movs	r2, #1
 80058f2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80058f4:	f3ef 8311 	mrs	r3, BASEPRI
 80058f8:	f04f 0120 	mov.w	r1, #32
 80058fc:	f381 8811 	msr	BASEPRI, r1
 8005900:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005902:	4b53      	ldr	r3, [pc, #332]	; (8005a50 <SEGGER_SYSVIEW_Start+0x168>)
 8005904:	785b      	ldrb	r3, [r3, #1]
 8005906:	220a      	movs	r2, #10
 8005908:	4952      	ldr	r1, [pc, #328]	; (8005a54 <SEGGER_SYSVIEW_Start+0x16c>)
 800590a:	4618      	mov	r0, r3
 800590c:	f7fa fc88 	bl	8000220 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005916:	200a      	movs	r0, #10
 8005918:	f7ff ff32 	bl	8005780 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800591c:	f3ef 8311 	mrs	r3, BASEPRI
 8005920:	f04f 0120 	mov.w	r1, #32
 8005924:	f381 8811 	msr	BASEPRI, r1
 8005928:	60bb      	str	r3, [r7, #8]
 800592a:	484b      	ldr	r0, [pc, #300]	; (8005a58 <SEGGER_SYSVIEW_Start+0x170>)
 800592c:	f7ff fcfe 	bl	800532c <_PreparePacket>
 8005930:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	62fb      	str	r3, [r7, #44]	; 0x2c
 800593a:	4b45      	ldr	r3, [pc, #276]	; (8005a50 <SEGGER_SYSVIEW_Start+0x168>)
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005940:	e00b      	b.n	800595a <SEGGER_SYSVIEW_Start+0x72>
 8005942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005944:	b2da      	uxtb	r2, r3
 8005946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005948:	1c59      	adds	r1, r3, #1
 800594a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800594c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005950:	b2d2      	uxtb	r2, r2
 8005952:	701a      	strb	r2, [r3, #0]
 8005954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005956:	09db      	lsrs	r3, r3, #7
 8005958:	62bb      	str	r3, [r7, #40]	; 0x28
 800595a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595c:	2b7f      	cmp	r3, #127	; 0x7f
 800595e:	d8f0      	bhi.n	8005942 <SEGGER_SYSVIEW_Start+0x5a>
 8005960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005962:	1c5a      	adds	r2, r3, #1
 8005964:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005966:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005968:	b2d2      	uxtb	r2, r2
 800596a:	701a      	strb	r2, [r3, #0]
 800596c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800596e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	627b      	str	r3, [r7, #36]	; 0x24
 8005974:	4b36      	ldr	r3, [pc, #216]	; (8005a50 <SEGGER_SYSVIEW_Start+0x168>)
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	623b      	str	r3, [r7, #32]
 800597a:	e00b      	b.n	8005994 <SEGGER_SYSVIEW_Start+0xac>
 800597c:	6a3b      	ldr	r3, [r7, #32]
 800597e:	b2da      	uxtb	r2, r3
 8005980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005982:	1c59      	adds	r1, r3, #1
 8005984:	6279      	str	r1, [r7, #36]	; 0x24
 8005986:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800598a:	b2d2      	uxtb	r2, r2
 800598c:	701a      	strb	r2, [r3, #0]
 800598e:	6a3b      	ldr	r3, [r7, #32]
 8005990:	09db      	lsrs	r3, r3, #7
 8005992:	623b      	str	r3, [r7, #32]
 8005994:	6a3b      	ldr	r3, [r7, #32]
 8005996:	2b7f      	cmp	r3, #127	; 0x7f
 8005998:	d8f0      	bhi.n	800597c <SEGGER_SYSVIEW_Start+0x94>
 800599a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599c:	1c5a      	adds	r2, r3, #1
 800599e:	627a      	str	r2, [r7, #36]	; 0x24
 80059a0:	6a3a      	ldr	r2, [r7, #32]
 80059a2:	b2d2      	uxtb	r2, r2
 80059a4:	701a      	strb	r2, [r3, #0]
 80059a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	61fb      	str	r3, [r7, #28]
 80059ae:	4b28      	ldr	r3, [pc, #160]	; (8005a50 <SEGGER_SYSVIEW_Start+0x168>)
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	61bb      	str	r3, [r7, #24]
 80059b4:	e00b      	b.n	80059ce <SEGGER_SYSVIEW_Start+0xe6>
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	b2da      	uxtb	r2, r3
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	1c59      	adds	r1, r3, #1
 80059be:	61f9      	str	r1, [r7, #28]
 80059c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059c4:	b2d2      	uxtb	r2, r2
 80059c6:	701a      	strb	r2, [r3, #0]
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	09db      	lsrs	r3, r3, #7
 80059cc:	61bb      	str	r3, [r7, #24]
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	2b7f      	cmp	r3, #127	; 0x7f
 80059d2:	d8f0      	bhi.n	80059b6 <SEGGER_SYSVIEW_Start+0xce>
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	1c5a      	adds	r2, r3, #1
 80059d8:	61fa      	str	r2, [r7, #28]
 80059da:	69ba      	ldr	r2, [r7, #24]
 80059dc:	b2d2      	uxtb	r2, r2
 80059de:	701a      	strb	r2, [r3, #0]
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	617b      	str	r3, [r7, #20]
 80059e8:	2300      	movs	r3, #0
 80059ea:	613b      	str	r3, [r7, #16]
 80059ec:	e00b      	b.n	8005a06 <SEGGER_SYSVIEW_Start+0x11e>
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	b2da      	uxtb	r2, r3
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	1c59      	adds	r1, r3, #1
 80059f6:	6179      	str	r1, [r7, #20]
 80059f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059fc:	b2d2      	uxtb	r2, r2
 80059fe:	701a      	strb	r2, [r3, #0]
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	09db      	lsrs	r3, r3, #7
 8005a04:	613b      	str	r3, [r7, #16]
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	2b7f      	cmp	r3, #127	; 0x7f
 8005a0a:	d8f0      	bhi.n	80059ee <SEGGER_SYSVIEW_Start+0x106>
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	1c5a      	adds	r2, r3, #1
 8005a10:	617a      	str	r2, [r7, #20]
 8005a12:	693a      	ldr	r2, [r7, #16]
 8005a14:	b2d2      	uxtb	r2, r2
 8005a16:	701a      	strb	r2, [r3, #0]
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005a1c:	2218      	movs	r2, #24
 8005a1e:	6839      	ldr	r1, [r7, #0]
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f7ff fd73 	bl	800550c <_SendPacket>
      RECORD_END();
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005a2c:	4b08      	ldr	r3, [pc, #32]	; (8005a50 <SEGGER_SYSVIEW_Start+0x168>)
 8005a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d002      	beq.n	8005a3a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005a34:	4b06      	ldr	r3, [pc, #24]	; (8005a50 <SEGGER_SYSVIEW_Start+0x168>)
 8005a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a38:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005a3a:	f000 f9eb 	bl	8005e14 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005a3e:	f000 f9b1 	bl	8005da4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005a42:	f000 fc73 	bl	800632c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005a46:	bf00      	nop
 8005a48:	3730      	adds	r7, #48	; 0x30
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	20004acc 	.word	0x20004acc
 8005a54:	080067a0 	.word	0x080067a0
 8005a58:	20004afc 	.word	0x20004afc

08005a5c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b082      	sub	sp, #8
 8005a60:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005a62:	f3ef 8311 	mrs	r3, BASEPRI
 8005a66:	f04f 0120 	mov.w	r1, #32
 8005a6a:	f381 8811 	msr	BASEPRI, r1
 8005a6e:	607b      	str	r3, [r7, #4]
 8005a70:	480b      	ldr	r0, [pc, #44]	; (8005aa0 <SEGGER_SYSVIEW_Stop+0x44>)
 8005a72:	f7ff fc5b 	bl	800532c <_PreparePacket>
 8005a76:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005a78:	4b0a      	ldr	r3, [pc, #40]	; (8005aa4 <SEGGER_SYSVIEW_Stop+0x48>)
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d007      	beq.n	8005a90 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005a80:	220b      	movs	r2, #11
 8005a82:	6839      	ldr	r1, [r7, #0]
 8005a84:	6838      	ldr	r0, [r7, #0]
 8005a86:	f7ff fd41 	bl	800550c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005a8a:	4b06      	ldr	r3, [pc, #24]	; (8005aa4 <SEGGER_SYSVIEW_Stop+0x48>)
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f383 8811 	msr	BASEPRI, r3
}
 8005a96:	bf00      	nop
 8005a98:	3708      	adds	r7, #8
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	20004afc 	.word	0x20004afc
 8005aa4:	20004acc 	.word	0x20004acc

08005aa8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b08c      	sub	sp, #48	; 0x30
 8005aac:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005aae:	f3ef 8311 	mrs	r3, BASEPRI
 8005ab2:	f04f 0120 	mov.w	r1, #32
 8005ab6:	f381 8811 	msr	BASEPRI, r1
 8005aba:	60fb      	str	r3, [r7, #12]
 8005abc:	4845      	ldr	r0, [pc, #276]	; (8005bd4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005abe:	f7ff fc35 	bl	800532c <_PreparePacket>
 8005ac2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005acc:	4b42      	ldr	r3, [pc, #264]	; (8005bd8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ad2:	e00b      	b.n	8005aec <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad6:	b2da      	uxtb	r2, r3
 8005ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ada:	1c59      	adds	r1, r3, #1
 8005adc:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005ade:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ae2:	b2d2      	uxtb	r2, r2
 8005ae4:	701a      	strb	r2, [r3, #0]
 8005ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae8:	09db      	lsrs	r3, r3, #7
 8005aea:	62bb      	str	r3, [r7, #40]	; 0x28
 8005aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aee:	2b7f      	cmp	r3, #127	; 0x7f
 8005af0:	d8f0      	bhi.n	8005ad4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af4:	1c5a      	adds	r2, r3, #1
 8005af6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005af8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005afa:	b2d2      	uxtb	r2, r2
 8005afc:	701a      	strb	r2, [r3, #0]
 8005afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b00:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	627b      	str	r3, [r7, #36]	; 0x24
 8005b06:	4b34      	ldr	r3, [pc, #208]	; (8005bd8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	623b      	str	r3, [r7, #32]
 8005b0c:	e00b      	b.n	8005b26 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005b0e:	6a3b      	ldr	r3, [r7, #32]
 8005b10:	b2da      	uxtb	r2, r3
 8005b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b14:	1c59      	adds	r1, r3, #1
 8005b16:	6279      	str	r1, [r7, #36]	; 0x24
 8005b18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b1c:	b2d2      	uxtb	r2, r2
 8005b1e:	701a      	strb	r2, [r3, #0]
 8005b20:	6a3b      	ldr	r3, [r7, #32]
 8005b22:	09db      	lsrs	r3, r3, #7
 8005b24:	623b      	str	r3, [r7, #32]
 8005b26:	6a3b      	ldr	r3, [r7, #32]
 8005b28:	2b7f      	cmp	r3, #127	; 0x7f
 8005b2a:	d8f0      	bhi.n	8005b0e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2e:	1c5a      	adds	r2, r3, #1
 8005b30:	627a      	str	r2, [r7, #36]	; 0x24
 8005b32:	6a3a      	ldr	r2, [r7, #32]
 8005b34:	b2d2      	uxtb	r2, r2
 8005b36:	701a      	strb	r2, [r3, #0]
 8005b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	61fb      	str	r3, [r7, #28]
 8005b40:	4b25      	ldr	r3, [pc, #148]	; (8005bd8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	61bb      	str	r3, [r7, #24]
 8005b46:	e00b      	b.n	8005b60 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	b2da      	uxtb	r2, r3
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	1c59      	adds	r1, r3, #1
 8005b50:	61f9      	str	r1, [r7, #28]
 8005b52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b56:	b2d2      	uxtb	r2, r2
 8005b58:	701a      	strb	r2, [r3, #0]
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	09db      	lsrs	r3, r3, #7
 8005b5e:	61bb      	str	r3, [r7, #24]
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	2b7f      	cmp	r3, #127	; 0x7f
 8005b64:	d8f0      	bhi.n	8005b48 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	1c5a      	adds	r2, r3, #1
 8005b6a:	61fa      	str	r2, [r7, #28]
 8005b6c:	69ba      	ldr	r2, [r7, #24]
 8005b6e:	b2d2      	uxtb	r2, r2
 8005b70:	701a      	strb	r2, [r3, #0]
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	617b      	str	r3, [r7, #20]
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	613b      	str	r3, [r7, #16]
 8005b7e:	e00b      	b.n	8005b98 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	b2da      	uxtb	r2, r3
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	1c59      	adds	r1, r3, #1
 8005b88:	6179      	str	r1, [r7, #20]
 8005b8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b8e:	b2d2      	uxtb	r2, r2
 8005b90:	701a      	strb	r2, [r3, #0]
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	09db      	lsrs	r3, r3, #7
 8005b96:	613b      	str	r3, [r7, #16]
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	2b7f      	cmp	r3, #127	; 0x7f
 8005b9c:	d8f0      	bhi.n	8005b80 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	1c5a      	adds	r2, r3, #1
 8005ba2:	617a      	str	r2, [r7, #20]
 8005ba4:	693a      	ldr	r2, [r7, #16]
 8005ba6:	b2d2      	uxtb	r2, r2
 8005ba8:	701a      	strb	r2, [r3, #0]
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005bae:	2218      	movs	r2, #24
 8005bb0:	6879      	ldr	r1, [r7, #4]
 8005bb2:	68b8      	ldr	r0, [r7, #8]
 8005bb4:	f7ff fcaa 	bl	800550c <_SendPacket>
  RECORD_END();
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005bbe:	4b06      	ldr	r3, [pc, #24]	; (8005bd8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d002      	beq.n	8005bcc <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005bc6:	4b04      	ldr	r3, [pc, #16]	; (8005bd8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bca:	4798      	blx	r3
  }
}
 8005bcc:	bf00      	nop
 8005bce:	3730      	adds	r7, #48	; 0x30
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	20004afc 	.word	0x20004afc
 8005bd8:	20004acc 	.word	0x20004acc

08005bdc <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b092      	sub	sp, #72	; 0x48
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005be4:	f3ef 8311 	mrs	r3, BASEPRI
 8005be8:	f04f 0120 	mov.w	r1, #32
 8005bec:	f381 8811 	msr	BASEPRI, r1
 8005bf0:	617b      	str	r3, [r7, #20]
 8005bf2:	486a      	ldr	r0, [pc, #424]	; (8005d9c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005bf4:	f7ff fb9a 	bl	800532c <_PreparePacket>
 8005bf8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	647b      	str	r3, [r7, #68]	; 0x44
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	4b66      	ldr	r3, [pc, #408]	; (8005da0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	1ad3      	subs	r3, r2, r3
 8005c0c:	643b      	str	r3, [r7, #64]	; 0x40
 8005c0e:	e00b      	b.n	8005c28 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005c10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c12:	b2da      	uxtb	r2, r3
 8005c14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c16:	1c59      	adds	r1, r3, #1
 8005c18:	6479      	str	r1, [r7, #68]	; 0x44
 8005c1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c1e:	b2d2      	uxtb	r2, r2
 8005c20:	701a      	strb	r2, [r3, #0]
 8005c22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c24:	09db      	lsrs	r3, r3, #7
 8005c26:	643b      	str	r3, [r7, #64]	; 0x40
 8005c28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c2a:	2b7f      	cmp	r3, #127	; 0x7f
 8005c2c:	d8f0      	bhi.n	8005c10 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005c2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c30:	1c5a      	adds	r2, r3, #1
 8005c32:	647a      	str	r2, [r7, #68]	; 0x44
 8005c34:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c36:	b2d2      	uxtb	r2, r2
 8005c38:	701a      	strb	r2, [r3, #0]
 8005c3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c3c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c48:	e00b      	b.n	8005c62 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c4c:	b2da      	uxtb	r2, r3
 8005c4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c50:	1c59      	adds	r1, r3, #1
 8005c52:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005c54:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c58:	b2d2      	uxtb	r2, r2
 8005c5a:	701a      	strb	r2, [r3, #0]
 8005c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c5e:	09db      	lsrs	r3, r3, #7
 8005c60:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c64:	2b7f      	cmp	r3, #127	; 0x7f
 8005c66:	d8f0      	bhi.n	8005c4a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c6a:	1c5a      	adds	r2, r3, #1
 8005c6c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005c6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c70:	b2d2      	uxtb	r2, r2
 8005c72:	701a      	strb	r2, [r3, #0]
 8005c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c76:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	2220      	movs	r2, #32
 8005c7e:	4619      	mov	r1, r3
 8005c80:	68f8      	ldr	r0, [r7, #12]
 8005c82:	f7ff fb03 	bl	800528c <_EncodeStr>
 8005c86:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005c88:	2209      	movs	r2, #9
 8005c8a:	68f9      	ldr	r1, [r7, #12]
 8005c8c:	6938      	ldr	r0, [r7, #16]
 8005c8e:	f7ff fc3d 	bl	800550c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	637b      	str	r3, [r7, #52]	; 0x34
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	4b40      	ldr	r3, [pc, #256]	; (8005da0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	633b      	str	r3, [r7, #48]	; 0x30
 8005ca6:	e00b      	b.n	8005cc0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005caa:	b2da      	uxtb	r2, r3
 8005cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cae:	1c59      	adds	r1, r3, #1
 8005cb0:	6379      	str	r1, [r7, #52]	; 0x34
 8005cb2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cb6:	b2d2      	uxtb	r2, r2
 8005cb8:	701a      	strb	r2, [r3, #0]
 8005cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cbc:	09db      	lsrs	r3, r3, #7
 8005cbe:	633b      	str	r3, [r7, #48]	; 0x30
 8005cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc2:	2b7f      	cmp	r3, #127	; 0x7f
 8005cc4:	d8f0      	bhi.n	8005ca8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cc8:	1c5a      	adds	r2, r3, #1
 8005cca:	637a      	str	r2, [r7, #52]	; 0x34
 8005ccc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cce:	b2d2      	uxtb	r2, r2
 8005cd0:	701a      	strb	r2, [r3, #0]
 8005cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cd4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ce0:	e00b      	b.n	8005cfa <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce4:	b2da      	uxtb	r2, r3
 8005ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce8:	1c59      	adds	r1, r3, #1
 8005cea:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005cec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cf0:	b2d2      	uxtb	r2, r2
 8005cf2:	701a      	strb	r2, [r3, #0]
 8005cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf6:	09db      	lsrs	r3, r3, #7
 8005cf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cfc:	2b7f      	cmp	r3, #127	; 0x7f
 8005cfe:	d8f0      	bhi.n	8005ce2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d02:	1c5a      	adds	r2, r3, #1
 8005d04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d08:	b2d2      	uxtb	r2, r2
 8005d0a:	701a      	strb	r2, [r3, #0]
 8005d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d0e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	627b      	str	r3, [r7, #36]	; 0x24
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	623b      	str	r3, [r7, #32]
 8005d1a:	e00b      	b.n	8005d34 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005d1c:	6a3b      	ldr	r3, [r7, #32]
 8005d1e:	b2da      	uxtb	r2, r3
 8005d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d22:	1c59      	adds	r1, r3, #1
 8005d24:	6279      	str	r1, [r7, #36]	; 0x24
 8005d26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d2a:	b2d2      	uxtb	r2, r2
 8005d2c:	701a      	strb	r2, [r3, #0]
 8005d2e:	6a3b      	ldr	r3, [r7, #32]
 8005d30:	09db      	lsrs	r3, r3, #7
 8005d32:	623b      	str	r3, [r7, #32]
 8005d34:	6a3b      	ldr	r3, [r7, #32]
 8005d36:	2b7f      	cmp	r3, #127	; 0x7f
 8005d38:	d8f0      	bhi.n	8005d1c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3c:	1c5a      	adds	r2, r3, #1
 8005d3e:	627a      	str	r2, [r7, #36]	; 0x24
 8005d40:	6a3a      	ldr	r2, [r7, #32]
 8005d42:	b2d2      	uxtb	r2, r2
 8005d44:	701a      	strb	r2, [r3, #0]
 8005d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d48:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	61fb      	str	r3, [r7, #28]
 8005d4e:	2300      	movs	r3, #0
 8005d50:	61bb      	str	r3, [r7, #24]
 8005d52:	e00b      	b.n	8005d6c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	b2da      	uxtb	r2, r3
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	1c59      	adds	r1, r3, #1
 8005d5c:	61f9      	str	r1, [r7, #28]
 8005d5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d62:	b2d2      	uxtb	r2, r2
 8005d64:	701a      	strb	r2, [r3, #0]
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	09db      	lsrs	r3, r3, #7
 8005d6a:	61bb      	str	r3, [r7, #24]
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	2b7f      	cmp	r3, #127	; 0x7f
 8005d70:	d8f0      	bhi.n	8005d54 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	1c5a      	adds	r2, r3, #1
 8005d76:	61fa      	str	r2, [r7, #28]
 8005d78:	69ba      	ldr	r2, [r7, #24]
 8005d7a:	b2d2      	uxtb	r2, r2
 8005d7c:	701a      	strb	r2, [r3, #0]
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005d82:	2215      	movs	r2, #21
 8005d84:	68f9      	ldr	r1, [r7, #12]
 8005d86:	6938      	ldr	r0, [r7, #16]
 8005d88:	f7ff fbc0 	bl	800550c <_SendPacket>
  RECORD_END();
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	f383 8811 	msr	BASEPRI, r3
}
 8005d92:	bf00      	nop
 8005d94:	3748      	adds	r7, #72	; 0x48
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	20004afc 	.word	0x20004afc
 8005da0:	20004acc 	.word	0x20004acc

08005da4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005da4:	b580      	push	{r7, lr}
 8005da6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005da8:	4b07      	ldr	r3, [pc, #28]	; (8005dc8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005daa:	6a1b      	ldr	r3, [r3, #32]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d008      	beq.n	8005dc2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005db0:	4b05      	ldr	r3, [pc, #20]	; (8005dc8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005db2:	6a1b      	ldr	r3, [r3, #32]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d003      	beq.n	8005dc2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005dba:	4b03      	ldr	r3, [pc, #12]	; (8005dc8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005dbc:	6a1b      	ldr	r3, [r3, #32]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	4798      	blx	r3
  }
}
 8005dc2:	bf00      	nop
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	20004acc 	.word	0x20004acc

08005dcc <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b086      	sub	sp, #24
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005dd4:	f3ef 8311 	mrs	r3, BASEPRI
 8005dd8:	f04f 0120 	mov.w	r1, #32
 8005ddc:	f381 8811 	msr	BASEPRI, r1
 8005de0:	617b      	str	r3, [r7, #20]
 8005de2:	480b      	ldr	r0, [pc, #44]	; (8005e10 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005de4:	f7ff faa2 	bl	800532c <_PreparePacket>
 8005de8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005dea:	2280      	movs	r2, #128	; 0x80
 8005dec:	6879      	ldr	r1, [r7, #4]
 8005dee:	6938      	ldr	r0, [r7, #16]
 8005df0:	f7ff fa4c 	bl	800528c <_EncodeStr>
 8005df4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005df6:	220e      	movs	r2, #14
 8005df8:	68f9      	ldr	r1, [r7, #12]
 8005dfa:	6938      	ldr	r0, [r7, #16]
 8005dfc:	f7ff fb86 	bl	800550c <_SendPacket>
  RECORD_END();
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	f383 8811 	msr	BASEPRI, r3
}
 8005e06:	bf00      	nop
 8005e08:	3718      	adds	r7, #24
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	20004afc 	.word	0x20004afc

08005e14 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005e14:	b590      	push	{r4, r7, lr}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005e1a:	4b15      	ldr	r3, [pc, #84]	; (8005e70 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005e1c:	6a1b      	ldr	r3, [r3, #32]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d01a      	beq.n	8005e58 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005e22:	4b13      	ldr	r3, [pc, #76]	; (8005e70 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005e24:	6a1b      	ldr	r3, [r3, #32]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d015      	beq.n	8005e58 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005e2c:	4b10      	ldr	r3, [pc, #64]	; (8005e70 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005e2e:	6a1b      	ldr	r3, [r3, #32]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4798      	blx	r3
 8005e34:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005e38:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005e3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e3e:	f04f 0200 	mov.w	r2, #0
 8005e42:	f04f 0300 	mov.w	r3, #0
 8005e46:	000a      	movs	r2, r1
 8005e48:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005e4a:	4613      	mov	r3, r2
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	4621      	mov	r1, r4
 8005e50:	200d      	movs	r0, #13
 8005e52:	f7ff fcef 	bl	8005834 <SEGGER_SYSVIEW_RecordU32x2>
 8005e56:	e006      	b.n	8005e66 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005e58:	4b06      	ldr	r3, [pc, #24]	; (8005e74 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	200c      	movs	r0, #12
 8005e60:	f7ff fcac 	bl	80057bc <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005e64:	bf00      	nop
 8005e66:	bf00      	nop
 8005e68:	370c      	adds	r7, #12
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd90      	pop	{r4, r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	20004acc 	.word	0x20004acc
 8005e74:	e0001004 	.word	0xe0001004

08005e78 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b086      	sub	sp, #24
 8005e7c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005e7e:	f3ef 8311 	mrs	r3, BASEPRI
 8005e82:	f04f 0120 	mov.w	r1, #32
 8005e86:	f381 8811 	msr	BASEPRI, r1
 8005e8a:	60fb      	str	r3, [r7, #12]
 8005e8c:	4819      	ldr	r0, [pc, #100]	; (8005ef4 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005e8e:	f7ff fa4d 	bl	800532c <_PreparePacket>
 8005e92:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005e98:	4b17      	ldr	r3, [pc, #92]	; (8005ef8 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ea0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	617b      	str	r3, [r7, #20]
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	613b      	str	r3, [r7, #16]
 8005eaa:	e00b      	b.n	8005ec4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	b2da      	uxtb	r2, r3
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	1c59      	adds	r1, r3, #1
 8005eb4:	6179      	str	r1, [r7, #20]
 8005eb6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005eba:	b2d2      	uxtb	r2, r2
 8005ebc:	701a      	strb	r2, [r3, #0]
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	09db      	lsrs	r3, r3, #7
 8005ec2:	613b      	str	r3, [r7, #16]
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	2b7f      	cmp	r3, #127	; 0x7f
 8005ec8:	d8f0      	bhi.n	8005eac <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	1c5a      	adds	r2, r3, #1
 8005ece:	617a      	str	r2, [r7, #20]
 8005ed0:	693a      	ldr	r2, [r7, #16]
 8005ed2:	b2d2      	uxtb	r2, r2
 8005ed4:	701a      	strb	r2, [r3, #0]
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005eda:	2202      	movs	r2, #2
 8005edc:	6879      	ldr	r1, [r7, #4]
 8005ede:	68b8      	ldr	r0, [r7, #8]
 8005ee0:	f7ff fb14 	bl	800550c <_SendPacket>
  RECORD_END();
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f383 8811 	msr	BASEPRI, r3
}
 8005eea:	bf00      	nop
 8005eec:	3718      	adds	r7, #24
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	20004afc 	.word	0x20004afc
 8005ef8:	e000ed04 	.word	0xe000ed04

08005efc <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005f02:	f3ef 8311 	mrs	r3, BASEPRI
 8005f06:	f04f 0120 	mov.w	r1, #32
 8005f0a:	f381 8811 	msr	BASEPRI, r1
 8005f0e:	607b      	str	r3, [r7, #4]
 8005f10:	4807      	ldr	r0, [pc, #28]	; (8005f30 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005f12:	f7ff fa0b 	bl	800532c <_PreparePacket>
 8005f16:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005f18:	2203      	movs	r2, #3
 8005f1a:	6839      	ldr	r1, [r7, #0]
 8005f1c:	6838      	ldr	r0, [r7, #0]
 8005f1e:	f7ff faf5 	bl	800550c <_SendPacket>
  RECORD_END();
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f383 8811 	msr	BASEPRI, r3
}
 8005f28:	bf00      	nop
 8005f2a:	3708      	adds	r7, #8
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}
 8005f30:	20004afc 	.word	0x20004afc

08005f34 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005f3a:	f3ef 8311 	mrs	r3, BASEPRI
 8005f3e:	f04f 0120 	mov.w	r1, #32
 8005f42:	f381 8811 	msr	BASEPRI, r1
 8005f46:	607b      	str	r3, [r7, #4]
 8005f48:	4807      	ldr	r0, [pc, #28]	; (8005f68 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005f4a:	f7ff f9ef 	bl	800532c <_PreparePacket>
 8005f4e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005f50:	2212      	movs	r2, #18
 8005f52:	6839      	ldr	r1, [r7, #0]
 8005f54:	6838      	ldr	r0, [r7, #0]
 8005f56:	f7ff fad9 	bl	800550c <_SendPacket>
  RECORD_END();
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f383 8811 	msr	BASEPRI, r3
}
 8005f60:	bf00      	nop
 8005f62:	3708      	adds	r7, #8
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	20004afc 	.word	0x20004afc

08005f6c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005f72:	f3ef 8311 	mrs	r3, BASEPRI
 8005f76:	f04f 0120 	mov.w	r1, #32
 8005f7a:	f381 8811 	msr	BASEPRI, r1
 8005f7e:	607b      	str	r3, [r7, #4]
 8005f80:	4807      	ldr	r0, [pc, #28]	; (8005fa0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005f82:	f7ff f9d3 	bl	800532c <_PreparePacket>
 8005f86:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005f88:	2211      	movs	r2, #17
 8005f8a:	6839      	ldr	r1, [r7, #0]
 8005f8c:	6838      	ldr	r0, [r7, #0]
 8005f8e:	f7ff fabd 	bl	800550c <_SendPacket>
  RECORD_END();
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f383 8811 	msr	BASEPRI, r3
}
 8005f98:	bf00      	nop
 8005f9a:	3708      	adds	r7, #8
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}
 8005fa0:	20004afc 	.word	0x20004afc

08005fa4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b088      	sub	sp, #32
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005fac:	f3ef 8311 	mrs	r3, BASEPRI
 8005fb0:	f04f 0120 	mov.w	r1, #32
 8005fb4:	f381 8811 	msr	BASEPRI, r1
 8005fb8:	617b      	str	r3, [r7, #20]
 8005fba:	4819      	ldr	r0, [pc, #100]	; (8006020 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005fbc:	f7ff f9b6 	bl	800532c <_PreparePacket>
 8005fc0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005fc6:	4b17      	ldr	r3, [pc, #92]	; (8006024 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	61fb      	str	r3, [r7, #28]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	61bb      	str	r3, [r7, #24]
 8005fd8:	e00b      	b.n	8005ff2 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	b2da      	uxtb	r2, r3
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	1c59      	adds	r1, r3, #1
 8005fe2:	61f9      	str	r1, [r7, #28]
 8005fe4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fe8:	b2d2      	uxtb	r2, r2
 8005fea:	701a      	strb	r2, [r3, #0]
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	09db      	lsrs	r3, r3, #7
 8005ff0:	61bb      	str	r3, [r7, #24]
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	2b7f      	cmp	r3, #127	; 0x7f
 8005ff6:	d8f0      	bhi.n	8005fda <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	1c5a      	adds	r2, r3, #1
 8005ffc:	61fa      	str	r2, [r7, #28]
 8005ffe:	69ba      	ldr	r2, [r7, #24]
 8006000:	b2d2      	uxtb	r2, r2
 8006002:	701a      	strb	r2, [r3, #0]
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006008:	2208      	movs	r2, #8
 800600a:	68f9      	ldr	r1, [r7, #12]
 800600c:	6938      	ldr	r0, [r7, #16]
 800600e:	f7ff fa7d 	bl	800550c <_SendPacket>
  RECORD_END();
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	f383 8811 	msr	BASEPRI, r3
}
 8006018:	bf00      	nop
 800601a:	3720      	adds	r7, #32
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}
 8006020:	20004afc 	.word	0x20004afc
 8006024:	20004acc 	.word	0x20004acc

08006028 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006028:	b580      	push	{r7, lr}
 800602a:	b088      	sub	sp, #32
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006030:	f3ef 8311 	mrs	r3, BASEPRI
 8006034:	f04f 0120 	mov.w	r1, #32
 8006038:	f381 8811 	msr	BASEPRI, r1
 800603c:	617b      	str	r3, [r7, #20]
 800603e:	4819      	ldr	r0, [pc, #100]	; (80060a4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006040:	f7ff f974 	bl	800532c <_PreparePacket>
 8006044:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800604a:	4b17      	ldr	r3, [pc, #92]	; (80060a8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	61fb      	str	r3, [r7, #28]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	61bb      	str	r3, [r7, #24]
 800605c:	e00b      	b.n	8006076 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	b2da      	uxtb	r2, r3
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	1c59      	adds	r1, r3, #1
 8006066:	61f9      	str	r1, [r7, #28]
 8006068:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800606c:	b2d2      	uxtb	r2, r2
 800606e:	701a      	strb	r2, [r3, #0]
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	09db      	lsrs	r3, r3, #7
 8006074:	61bb      	str	r3, [r7, #24]
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	2b7f      	cmp	r3, #127	; 0x7f
 800607a:	d8f0      	bhi.n	800605e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	1c5a      	adds	r2, r3, #1
 8006080:	61fa      	str	r2, [r7, #28]
 8006082:	69ba      	ldr	r2, [r7, #24]
 8006084:	b2d2      	uxtb	r2, r2
 8006086:	701a      	strb	r2, [r3, #0]
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800608c:	2204      	movs	r2, #4
 800608e:	68f9      	ldr	r1, [r7, #12]
 8006090:	6938      	ldr	r0, [r7, #16]
 8006092:	f7ff fa3b 	bl	800550c <_SendPacket>
  RECORD_END();
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	f383 8811 	msr	BASEPRI, r3
}
 800609c:	bf00      	nop
 800609e:	3720      	adds	r7, #32
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	20004afc 	.word	0x20004afc
 80060a8:	20004acc 	.word	0x20004acc

080060ac <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b088      	sub	sp, #32
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80060b4:	f3ef 8311 	mrs	r3, BASEPRI
 80060b8:	f04f 0120 	mov.w	r1, #32
 80060bc:	f381 8811 	msr	BASEPRI, r1
 80060c0:	617b      	str	r3, [r7, #20]
 80060c2:	4819      	ldr	r0, [pc, #100]	; (8006128 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80060c4:	f7ff f932 	bl	800532c <_PreparePacket>
 80060c8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80060ce:	4b17      	ldr	r3, [pc, #92]	; (800612c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	61fb      	str	r3, [r7, #28]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	61bb      	str	r3, [r7, #24]
 80060e0:	e00b      	b.n	80060fa <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	b2da      	uxtb	r2, r3
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	1c59      	adds	r1, r3, #1
 80060ea:	61f9      	str	r1, [r7, #28]
 80060ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060f0:	b2d2      	uxtb	r2, r2
 80060f2:	701a      	strb	r2, [r3, #0]
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	09db      	lsrs	r3, r3, #7
 80060f8:	61bb      	str	r3, [r7, #24]
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	2b7f      	cmp	r3, #127	; 0x7f
 80060fe:	d8f0      	bhi.n	80060e2 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	1c5a      	adds	r2, r3, #1
 8006104:	61fa      	str	r2, [r7, #28]
 8006106:	69ba      	ldr	r2, [r7, #24]
 8006108:	b2d2      	uxtb	r2, r2
 800610a:	701a      	strb	r2, [r3, #0]
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006110:	2206      	movs	r2, #6
 8006112:	68f9      	ldr	r1, [r7, #12]
 8006114:	6938      	ldr	r0, [r7, #16]
 8006116:	f7ff f9f9 	bl	800550c <_SendPacket>
  RECORD_END();
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	f383 8811 	msr	BASEPRI, r3
}
 8006120:	bf00      	nop
 8006122:	3720      	adds	r7, #32
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}
 8006128:	20004afc 	.word	0x20004afc
 800612c:	20004acc 	.word	0x20004acc

08006130 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006130:	b580      	push	{r7, lr}
 8006132:	b08a      	sub	sp, #40	; 0x28
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800613a:	f3ef 8311 	mrs	r3, BASEPRI
 800613e:	f04f 0120 	mov.w	r1, #32
 8006142:	f381 8811 	msr	BASEPRI, r1
 8006146:	617b      	str	r3, [r7, #20]
 8006148:	4827      	ldr	r0, [pc, #156]	; (80061e8 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800614a:	f7ff f8ef 	bl	800532c <_PreparePacket>
 800614e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006154:	4b25      	ldr	r3, [pc, #148]	; (80061ec <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	1ad3      	subs	r3, r2, r3
 800615c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	627b      	str	r3, [r7, #36]	; 0x24
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	623b      	str	r3, [r7, #32]
 8006166:	e00b      	b.n	8006180 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006168:	6a3b      	ldr	r3, [r7, #32]
 800616a:	b2da      	uxtb	r2, r3
 800616c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616e:	1c59      	adds	r1, r3, #1
 8006170:	6279      	str	r1, [r7, #36]	; 0x24
 8006172:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006176:	b2d2      	uxtb	r2, r2
 8006178:	701a      	strb	r2, [r3, #0]
 800617a:	6a3b      	ldr	r3, [r7, #32]
 800617c:	09db      	lsrs	r3, r3, #7
 800617e:	623b      	str	r3, [r7, #32]
 8006180:	6a3b      	ldr	r3, [r7, #32]
 8006182:	2b7f      	cmp	r3, #127	; 0x7f
 8006184:	d8f0      	bhi.n	8006168 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006188:	1c5a      	adds	r2, r3, #1
 800618a:	627a      	str	r2, [r7, #36]	; 0x24
 800618c:	6a3a      	ldr	r2, [r7, #32]
 800618e:	b2d2      	uxtb	r2, r2
 8006190:	701a      	strb	r2, [r3, #0]
 8006192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006194:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	61fb      	str	r3, [r7, #28]
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	61bb      	str	r3, [r7, #24]
 800619e:	e00b      	b.n	80061b8 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80061a0:	69bb      	ldr	r3, [r7, #24]
 80061a2:	b2da      	uxtb	r2, r3
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	1c59      	adds	r1, r3, #1
 80061a8:	61f9      	str	r1, [r7, #28]
 80061aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061ae:	b2d2      	uxtb	r2, r2
 80061b0:	701a      	strb	r2, [r3, #0]
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	09db      	lsrs	r3, r3, #7
 80061b6:	61bb      	str	r3, [r7, #24]
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	2b7f      	cmp	r3, #127	; 0x7f
 80061bc:	d8f0      	bhi.n	80061a0 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	1c5a      	adds	r2, r3, #1
 80061c2:	61fa      	str	r2, [r7, #28]
 80061c4:	69ba      	ldr	r2, [r7, #24]
 80061c6:	b2d2      	uxtb	r2, r2
 80061c8:	701a      	strb	r2, [r3, #0]
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80061ce:	2207      	movs	r2, #7
 80061d0:	68f9      	ldr	r1, [r7, #12]
 80061d2:	6938      	ldr	r0, [r7, #16]
 80061d4:	f7ff f99a 	bl	800550c <_SendPacket>
  RECORD_END();
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	f383 8811 	msr	BASEPRI, r3
}
 80061de:	bf00      	nop
 80061e0:	3728      	adds	r7, #40	; 0x28
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	20004afc 	.word	0x20004afc
 80061ec:	20004acc 	.word	0x20004acc

080061f0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b08c      	sub	sp, #48	; 0x30
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	4603      	mov	r3, r0
 80061f8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80061fa:	4b3b      	ldr	r3, [pc, #236]	; (80062e8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d06d      	beq.n	80062de <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006202:	4b39      	ldr	r3, [pc, #228]	; (80062e8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006208:	2300      	movs	r3, #0
 800620a:	62bb      	str	r3, [r7, #40]	; 0x28
 800620c:	e008      	b.n	8006220 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800620e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006210:	691b      	ldr	r3, [r3, #16]
 8006212:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006216:	2b00      	cmp	r3, #0
 8006218:	d007      	beq.n	800622a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800621a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621c:	3301      	adds	r3, #1
 800621e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006220:	79fb      	ldrb	r3, [r7, #7]
 8006222:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006224:	429a      	cmp	r2, r3
 8006226:	d3f2      	bcc.n	800620e <SEGGER_SYSVIEW_SendModule+0x1e>
 8006228:	e000      	b.n	800622c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800622a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800622c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800622e:	2b00      	cmp	r3, #0
 8006230:	d055      	beq.n	80062de <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006232:	f3ef 8311 	mrs	r3, BASEPRI
 8006236:	f04f 0120 	mov.w	r1, #32
 800623a:	f381 8811 	msr	BASEPRI, r1
 800623e:	617b      	str	r3, [r7, #20]
 8006240:	482a      	ldr	r0, [pc, #168]	; (80062ec <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006242:	f7ff f873 	bl	800532c <_PreparePacket>
 8006246:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	627b      	str	r3, [r7, #36]	; 0x24
 8006250:	79fb      	ldrb	r3, [r7, #7]
 8006252:	623b      	str	r3, [r7, #32]
 8006254:	e00b      	b.n	800626e <SEGGER_SYSVIEW_SendModule+0x7e>
 8006256:	6a3b      	ldr	r3, [r7, #32]
 8006258:	b2da      	uxtb	r2, r3
 800625a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625c:	1c59      	adds	r1, r3, #1
 800625e:	6279      	str	r1, [r7, #36]	; 0x24
 8006260:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006264:	b2d2      	uxtb	r2, r2
 8006266:	701a      	strb	r2, [r3, #0]
 8006268:	6a3b      	ldr	r3, [r7, #32]
 800626a:	09db      	lsrs	r3, r3, #7
 800626c:	623b      	str	r3, [r7, #32]
 800626e:	6a3b      	ldr	r3, [r7, #32]
 8006270:	2b7f      	cmp	r3, #127	; 0x7f
 8006272:	d8f0      	bhi.n	8006256 <SEGGER_SYSVIEW_SendModule+0x66>
 8006274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006276:	1c5a      	adds	r2, r3, #1
 8006278:	627a      	str	r2, [r7, #36]	; 0x24
 800627a:	6a3a      	ldr	r2, [r7, #32]
 800627c:	b2d2      	uxtb	r2, r2
 800627e:	701a      	strb	r2, [r3, #0]
 8006280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006282:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	61fb      	str	r3, [r7, #28]
 8006288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	61bb      	str	r3, [r7, #24]
 800628e:	e00b      	b.n	80062a8 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	b2da      	uxtb	r2, r3
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	1c59      	adds	r1, r3, #1
 8006298:	61f9      	str	r1, [r7, #28]
 800629a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800629e:	b2d2      	uxtb	r2, r2
 80062a0:	701a      	strb	r2, [r3, #0]
 80062a2:	69bb      	ldr	r3, [r7, #24]
 80062a4:	09db      	lsrs	r3, r3, #7
 80062a6:	61bb      	str	r3, [r7, #24]
 80062a8:	69bb      	ldr	r3, [r7, #24]
 80062aa:	2b7f      	cmp	r3, #127	; 0x7f
 80062ac:	d8f0      	bhi.n	8006290 <SEGGER_SYSVIEW_SendModule+0xa0>
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	1c5a      	adds	r2, r3, #1
 80062b2:	61fa      	str	r2, [r7, #28]
 80062b4:	69ba      	ldr	r2, [r7, #24]
 80062b6:	b2d2      	uxtb	r2, r2
 80062b8:	701a      	strb	r2, [r3, #0]
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80062be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2280      	movs	r2, #128	; 0x80
 80062c4:	4619      	mov	r1, r3
 80062c6:	68f8      	ldr	r0, [r7, #12]
 80062c8:	f7fe ffe0 	bl	800528c <_EncodeStr>
 80062cc:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80062ce:	2216      	movs	r2, #22
 80062d0:	68f9      	ldr	r1, [r7, #12]
 80062d2:	6938      	ldr	r0, [r7, #16]
 80062d4:	f7ff f91a 	bl	800550c <_SendPacket>
      RECORD_END();
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80062de:	bf00      	nop
 80062e0:	3730      	adds	r7, #48	; 0x30
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	20004af4 	.word	0x20004af4
 80062ec:	20004afc 	.word	0x20004afc

080062f0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b082      	sub	sp, #8
 80062f4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80062f6:	4b0c      	ldr	r3, [pc, #48]	; (8006328 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00f      	beq.n	800631e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80062fe:	4b0a      	ldr	r3, [pc, #40]	; (8006328 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d002      	beq.n	8006312 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d1f2      	bne.n	8006304 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800631e:	bf00      	nop
 8006320:	3708      	adds	r7, #8
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	20004af4 	.word	0x20004af4

0800632c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800632c:	b580      	push	{r7, lr}
 800632e:	b086      	sub	sp, #24
 8006330:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006332:	f3ef 8311 	mrs	r3, BASEPRI
 8006336:	f04f 0120 	mov.w	r1, #32
 800633a:	f381 8811 	msr	BASEPRI, r1
 800633e:	60fb      	str	r3, [r7, #12]
 8006340:	4817      	ldr	r0, [pc, #92]	; (80063a0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006342:	f7fe fff3 	bl	800532c <_PreparePacket>
 8006346:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	617b      	str	r3, [r7, #20]
 8006350:	4b14      	ldr	r3, [pc, #80]	; (80063a4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	613b      	str	r3, [r7, #16]
 8006356:	e00b      	b.n	8006370 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	b2da      	uxtb	r2, r3
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	1c59      	adds	r1, r3, #1
 8006360:	6179      	str	r1, [r7, #20]
 8006362:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006366:	b2d2      	uxtb	r2, r2
 8006368:	701a      	strb	r2, [r3, #0]
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	09db      	lsrs	r3, r3, #7
 800636e:	613b      	str	r3, [r7, #16]
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	2b7f      	cmp	r3, #127	; 0x7f
 8006374:	d8f0      	bhi.n	8006358 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	1c5a      	adds	r2, r3, #1
 800637a:	617a      	str	r2, [r7, #20]
 800637c:	693a      	ldr	r2, [r7, #16]
 800637e:	b2d2      	uxtb	r2, r2
 8006380:	701a      	strb	r2, [r3, #0]
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006386:	221b      	movs	r2, #27
 8006388:	6879      	ldr	r1, [r7, #4]
 800638a:	68b8      	ldr	r0, [r7, #8]
 800638c:	f7ff f8be 	bl	800550c <_SendPacket>
  RECORD_END();
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f383 8811 	msr	BASEPRI, r3
}
 8006396:	bf00      	nop
 8006398:	3718      	adds	r7, #24
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop
 80063a0:	20004afc 	.word	0x20004afc
 80063a4:	20004af8 	.word	0x20004af8

080063a8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b08a      	sub	sp, #40	; 0x28
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80063b0:	f3ef 8311 	mrs	r3, BASEPRI
 80063b4:	f04f 0120 	mov.w	r1, #32
 80063b8:	f381 8811 	msr	BASEPRI, r1
 80063bc:	617b      	str	r3, [r7, #20]
 80063be:	4827      	ldr	r0, [pc, #156]	; (800645c <SEGGER_SYSVIEW_Warn+0xb4>)
 80063c0:	f7fe ffb4 	bl	800532c <_PreparePacket>
 80063c4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80063c6:	2280      	movs	r2, #128	; 0x80
 80063c8:	6879      	ldr	r1, [r7, #4]
 80063ca:	6938      	ldr	r0, [r7, #16]
 80063cc:	f7fe ff5e 	bl	800528c <_EncodeStr>
 80063d0:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	627b      	str	r3, [r7, #36]	; 0x24
 80063d6:	2301      	movs	r3, #1
 80063d8:	623b      	str	r3, [r7, #32]
 80063da:	e00b      	b.n	80063f4 <SEGGER_SYSVIEW_Warn+0x4c>
 80063dc:	6a3b      	ldr	r3, [r7, #32]
 80063de:	b2da      	uxtb	r2, r3
 80063e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e2:	1c59      	adds	r1, r3, #1
 80063e4:	6279      	str	r1, [r7, #36]	; 0x24
 80063e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063ea:	b2d2      	uxtb	r2, r2
 80063ec:	701a      	strb	r2, [r3, #0]
 80063ee:	6a3b      	ldr	r3, [r7, #32]
 80063f0:	09db      	lsrs	r3, r3, #7
 80063f2:	623b      	str	r3, [r7, #32]
 80063f4:	6a3b      	ldr	r3, [r7, #32]
 80063f6:	2b7f      	cmp	r3, #127	; 0x7f
 80063f8:	d8f0      	bhi.n	80063dc <SEGGER_SYSVIEW_Warn+0x34>
 80063fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fc:	1c5a      	adds	r2, r3, #1
 80063fe:	627a      	str	r2, [r7, #36]	; 0x24
 8006400:	6a3a      	ldr	r2, [r7, #32]
 8006402:	b2d2      	uxtb	r2, r2
 8006404:	701a      	strb	r2, [r3, #0]
 8006406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006408:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	61fb      	str	r3, [r7, #28]
 800640e:	2300      	movs	r3, #0
 8006410:	61bb      	str	r3, [r7, #24]
 8006412:	e00b      	b.n	800642c <SEGGER_SYSVIEW_Warn+0x84>
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	b2da      	uxtb	r2, r3
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	1c59      	adds	r1, r3, #1
 800641c:	61f9      	str	r1, [r7, #28]
 800641e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006422:	b2d2      	uxtb	r2, r2
 8006424:	701a      	strb	r2, [r3, #0]
 8006426:	69bb      	ldr	r3, [r7, #24]
 8006428:	09db      	lsrs	r3, r3, #7
 800642a:	61bb      	str	r3, [r7, #24]
 800642c:	69bb      	ldr	r3, [r7, #24]
 800642e:	2b7f      	cmp	r3, #127	; 0x7f
 8006430:	d8f0      	bhi.n	8006414 <SEGGER_SYSVIEW_Warn+0x6c>
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	1c5a      	adds	r2, r3, #1
 8006436:	61fa      	str	r2, [r7, #28]
 8006438:	69ba      	ldr	r2, [r7, #24]
 800643a:	b2d2      	uxtb	r2, r2
 800643c:	701a      	strb	r2, [r3, #0]
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006442:	221a      	movs	r2, #26
 8006444:	68f9      	ldr	r1, [r7, #12]
 8006446:	6938      	ldr	r0, [r7, #16]
 8006448:	f7ff f860 	bl	800550c <_SendPacket>
  RECORD_END();
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	f383 8811 	msr	BASEPRI, r3
}
 8006452:	bf00      	nop
 8006454:	3728      	adds	r7, #40	; 0x28
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	20004afc 	.word	0x20004afc

08006460 <__libc_init_array>:
 8006460:	b570      	push	{r4, r5, r6, lr}
 8006462:	4d0d      	ldr	r5, [pc, #52]	; (8006498 <__libc_init_array+0x38>)
 8006464:	4c0d      	ldr	r4, [pc, #52]	; (800649c <__libc_init_array+0x3c>)
 8006466:	1b64      	subs	r4, r4, r5
 8006468:	10a4      	asrs	r4, r4, #2
 800646a:	2600      	movs	r6, #0
 800646c:	42a6      	cmp	r6, r4
 800646e:	d109      	bne.n	8006484 <__libc_init_array+0x24>
 8006470:	4d0b      	ldr	r5, [pc, #44]	; (80064a0 <__libc_init_array+0x40>)
 8006472:	4c0c      	ldr	r4, [pc, #48]	; (80064a4 <__libc_init_array+0x44>)
 8006474:	f000 f902 	bl	800667c <_init>
 8006478:	1b64      	subs	r4, r4, r5
 800647a:	10a4      	asrs	r4, r4, #2
 800647c:	2600      	movs	r6, #0
 800647e:	42a6      	cmp	r6, r4
 8006480:	d105      	bne.n	800648e <__libc_init_array+0x2e>
 8006482:	bd70      	pop	{r4, r5, r6, pc}
 8006484:	f855 3b04 	ldr.w	r3, [r5], #4
 8006488:	4798      	blx	r3
 800648a:	3601      	adds	r6, #1
 800648c:	e7ee      	b.n	800646c <__libc_init_array+0xc>
 800648e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006492:	4798      	blx	r3
 8006494:	3601      	adds	r6, #1
 8006496:	e7f2      	b.n	800647e <__libc_init_array+0x1e>
 8006498:	08006814 	.word	0x08006814
 800649c:	08006814 	.word	0x08006814
 80064a0:	08006814 	.word	0x08006814
 80064a4:	08006818 	.word	0x08006818

080064a8 <__retarget_lock_acquire_recursive>:
 80064a8:	4770      	bx	lr

080064aa <__retarget_lock_release_recursive>:
 80064aa:	4770      	bx	lr

080064ac <memcmp>:
 80064ac:	b510      	push	{r4, lr}
 80064ae:	3901      	subs	r1, #1
 80064b0:	4402      	add	r2, r0
 80064b2:	4290      	cmp	r0, r2
 80064b4:	d101      	bne.n	80064ba <memcmp+0xe>
 80064b6:	2000      	movs	r0, #0
 80064b8:	e005      	b.n	80064c6 <memcmp+0x1a>
 80064ba:	7803      	ldrb	r3, [r0, #0]
 80064bc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80064c0:	42a3      	cmp	r3, r4
 80064c2:	d001      	beq.n	80064c8 <memcmp+0x1c>
 80064c4:	1b18      	subs	r0, r3, r4
 80064c6:	bd10      	pop	{r4, pc}
 80064c8:	3001      	adds	r0, #1
 80064ca:	e7f2      	b.n	80064b2 <memcmp+0x6>

080064cc <memcpy>:
 80064cc:	440a      	add	r2, r1
 80064ce:	4291      	cmp	r1, r2
 80064d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80064d4:	d100      	bne.n	80064d8 <memcpy+0xc>
 80064d6:	4770      	bx	lr
 80064d8:	b510      	push	{r4, lr}
 80064da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064e2:	4291      	cmp	r1, r2
 80064e4:	d1f9      	bne.n	80064da <memcpy+0xe>
 80064e6:	bd10      	pop	{r4, pc}

080064e8 <memset>:
 80064e8:	4402      	add	r2, r0
 80064ea:	4603      	mov	r3, r0
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d100      	bne.n	80064f2 <memset+0xa>
 80064f0:	4770      	bx	lr
 80064f2:	f803 1b01 	strb.w	r1, [r3], #1
 80064f6:	e7f9      	b.n	80064ec <memset+0x4>

080064f8 <cleanup_glue>:
 80064f8:	b538      	push	{r3, r4, r5, lr}
 80064fa:	460c      	mov	r4, r1
 80064fc:	6809      	ldr	r1, [r1, #0]
 80064fe:	4605      	mov	r5, r0
 8006500:	b109      	cbz	r1, 8006506 <cleanup_glue+0xe>
 8006502:	f7ff fff9 	bl	80064f8 <cleanup_glue>
 8006506:	4621      	mov	r1, r4
 8006508:	4628      	mov	r0, r5
 800650a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800650e:	f000 b869 	b.w	80065e4 <_free_r>
	...

08006514 <_reclaim_reent>:
 8006514:	4b2c      	ldr	r3, [pc, #176]	; (80065c8 <_reclaim_reent+0xb4>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4283      	cmp	r3, r0
 800651a:	b570      	push	{r4, r5, r6, lr}
 800651c:	4604      	mov	r4, r0
 800651e:	d051      	beq.n	80065c4 <_reclaim_reent+0xb0>
 8006520:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006522:	b143      	cbz	r3, 8006536 <_reclaim_reent+0x22>
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d14a      	bne.n	80065c0 <_reclaim_reent+0xac>
 800652a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800652c:	6819      	ldr	r1, [r3, #0]
 800652e:	b111      	cbz	r1, 8006536 <_reclaim_reent+0x22>
 8006530:	4620      	mov	r0, r4
 8006532:	f000 f857 	bl	80065e4 <_free_r>
 8006536:	6961      	ldr	r1, [r4, #20]
 8006538:	b111      	cbz	r1, 8006540 <_reclaim_reent+0x2c>
 800653a:	4620      	mov	r0, r4
 800653c:	f000 f852 	bl	80065e4 <_free_r>
 8006540:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006542:	b111      	cbz	r1, 800654a <_reclaim_reent+0x36>
 8006544:	4620      	mov	r0, r4
 8006546:	f000 f84d 	bl	80065e4 <_free_r>
 800654a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800654c:	b111      	cbz	r1, 8006554 <_reclaim_reent+0x40>
 800654e:	4620      	mov	r0, r4
 8006550:	f000 f848 	bl	80065e4 <_free_r>
 8006554:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006556:	b111      	cbz	r1, 800655e <_reclaim_reent+0x4a>
 8006558:	4620      	mov	r0, r4
 800655a:	f000 f843 	bl	80065e4 <_free_r>
 800655e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006560:	b111      	cbz	r1, 8006568 <_reclaim_reent+0x54>
 8006562:	4620      	mov	r0, r4
 8006564:	f000 f83e 	bl	80065e4 <_free_r>
 8006568:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800656a:	b111      	cbz	r1, 8006572 <_reclaim_reent+0x5e>
 800656c:	4620      	mov	r0, r4
 800656e:	f000 f839 	bl	80065e4 <_free_r>
 8006572:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006574:	b111      	cbz	r1, 800657c <_reclaim_reent+0x68>
 8006576:	4620      	mov	r0, r4
 8006578:	f000 f834 	bl	80065e4 <_free_r>
 800657c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800657e:	b111      	cbz	r1, 8006586 <_reclaim_reent+0x72>
 8006580:	4620      	mov	r0, r4
 8006582:	f000 f82f 	bl	80065e4 <_free_r>
 8006586:	69a3      	ldr	r3, [r4, #24]
 8006588:	b1e3      	cbz	r3, 80065c4 <_reclaim_reent+0xb0>
 800658a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800658c:	4620      	mov	r0, r4
 800658e:	4798      	blx	r3
 8006590:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006592:	b1b9      	cbz	r1, 80065c4 <_reclaim_reent+0xb0>
 8006594:	4620      	mov	r0, r4
 8006596:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800659a:	f7ff bfad 	b.w	80064f8 <cleanup_glue>
 800659e:	5949      	ldr	r1, [r1, r5]
 80065a0:	b941      	cbnz	r1, 80065b4 <_reclaim_reent+0xa0>
 80065a2:	3504      	adds	r5, #4
 80065a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065a6:	2d80      	cmp	r5, #128	; 0x80
 80065a8:	68d9      	ldr	r1, [r3, #12]
 80065aa:	d1f8      	bne.n	800659e <_reclaim_reent+0x8a>
 80065ac:	4620      	mov	r0, r4
 80065ae:	f000 f819 	bl	80065e4 <_free_r>
 80065b2:	e7ba      	b.n	800652a <_reclaim_reent+0x16>
 80065b4:	680e      	ldr	r6, [r1, #0]
 80065b6:	4620      	mov	r0, r4
 80065b8:	f000 f814 	bl	80065e4 <_free_r>
 80065bc:	4631      	mov	r1, r6
 80065be:	e7ef      	b.n	80065a0 <_reclaim_reent+0x8c>
 80065c0:	2500      	movs	r5, #0
 80065c2:	e7ef      	b.n	80065a4 <_reclaim_reent+0x90>
 80065c4:	bd70      	pop	{r4, r5, r6, pc}
 80065c6:	bf00      	nop
 80065c8:	20000010 	.word	0x20000010

080065cc <__malloc_lock>:
 80065cc:	4801      	ldr	r0, [pc, #4]	; (80065d4 <__malloc_lock+0x8>)
 80065ce:	f7ff bf6b 	b.w	80064a8 <__retarget_lock_acquire_recursive>
 80065d2:	bf00      	nop
 80065d4:	20004bdf 	.word	0x20004bdf

080065d8 <__malloc_unlock>:
 80065d8:	4801      	ldr	r0, [pc, #4]	; (80065e0 <__malloc_unlock+0x8>)
 80065da:	f7ff bf66 	b.w	80064aa <__retarget_lock_release_recursive>
 80065de:	bf00      	nop
 80065e0:	20004bdf 	.word	0x20004bdf

080065e4 <_free_r>:
 80065e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80065e6:	2900      	cmp	r1, #0
 80065e8:	d044      	beq.n	8006674 <_free_r+0x90>
 80065ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065ee:	9001      	str	r0, [sp, #4]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	f1a1 0404 	sub.w	r4, r1, #4
 80065f6:	bfb8      	it	lt
 80065f8:	18e4      	addlt	r4, r4, r3
 80065fa:	f7ff ffe7 	bl	80065cc <__malloc_lock>
 80065fe:	4a1e      	ldr	r2, [pc, #120]	; (8006678 <_free_r+0x94>)
 8006600:	9801      	ldr	r0, [sp, #4]
 8006602:	6813      	ldr	r3, [r2, #0]
 8006604:	b933      	cbnz	r3, 8006614 <_free_r+0x30>
 8006606:	6063      	str	r3, [r4, #4]
 8006608:	6014      	str	r4, [r2, #0]
 800660a:	b003      	add	sp, #12
 800660c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006610:	f7ff bfe2 	b.w	80065d8 <__malloc_unlock>
 8006614:	42a3      	cmp	r3, r4
 8006616:	d908      	bls.n	800662a <_free_r+0x46>
 8006618:	6825      	ldr	r5, [r4, #0]
 800661a:	1961      	adds	r1, r4, r5
 800661c:	428b      	cmp	r3, r1
 800661e:	bf01      	itttt	eq
 8006620:	6819      	ldreq	r1, [r3, #0]
 8006622:	685b      	ldreq	r3, [r3, #4]
 8006624:	1949      	addeq	r1, r1, r5
 8006626:	6021      	streq	r1, [r4, #0]
 8006628:	e7ed      	b.n	8006606 <_free_r+0x22>
 800662a:	461a      	mov	r2, r3
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	b10b      	cbz	r3, 8006634 <_free_r+0x50>
 8006630:	42a3      	cmp	r3, r4
 8006632:	d9fa      	bls.n	800662a <_free_r+0x46>
 8006634:	6811      	ldr	r1, [r2, #0]
 8006636:	1855      	adds	r5, r2, r1
 8006638:	42a5      	cmp	r5, r4
 800663a:	d10b      	bne.n	8006654 <_free_r+0x70>
 800663c:	6824      	ldr	r4, [r4, #0]
 800663e:	4421      	add	r1, r4
 8006640:	1854      	adds	r4, r2, r1
 8006642:	42a3      	cmp	r3, r4
 8006644:	6011      	str	r1, [r2, #0]
 8006646:	d1e0      	bne.n	800660a <_free_r+0x26>
 8006648:	681c      	ldr	r4, [r3, #0]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	6053      	str	r3, [r2, #4]
 800664e:	4421      	add	r1, r4
 8006650:	6011      	str	r1, [r2, #0]
 8006652:	e7da      	b.n	800660a <_free_r+0x26>
 8006654:	d902      	bls.n	800665c <_free_r+0x78>
 8006656:	230c      	movs	r3, #12
 8006658:	6003      	str	r3, [r0, #0]
 800665a:	e7d6      	b.n	800660a <_free_r+0x26>
 800665c:	6825      	ldr	r5, [r4, #0]
 800665e:	1961      	adds	r1, r4, r5
 8006660:	428b      	cmp	r3, r1
 8006662:	bf04      	itt	eq
 8006664:	6819      	ldreq	r1, [r3, #0]
 8006666:	685b      	ldreq	r3, [r3, #4]
 8006668:	6063      	str	r3, [r4, #4]
 800666a:	bf04      	itt	eq
 800666c:	1949      	addeq	r1, r1, r5
 800666e:	6021      	streq	r1, [r4, #0]
 8006670:	6054      	str	r4, [r2, #4]
 8006672:	e7ca      	b.n	800660a <_free_r+0x26>
 8006674:	b003      	add	sp, #12
 8006676:	bd30      	pop	{r4, r5, pc}
 8006678:	20004be0 	.word	0x20004be0

0800667c <_init>:
 800667c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800667e:	bf00      	nop
 8006680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006682:	bc08      	pop	{r3}
 8006684:	469e      	mov	lr, r3
 8006686:	4770      	bx	lr

08006688 <_fini>:
 8006688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800668a:	bf00      	nop
 800668c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800668e:	bc08      	pop	{r3}
 8006690:	469e      	mov	lr, r3
 8006692:	4770      	bx	lr
