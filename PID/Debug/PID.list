
PID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000101fc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000061c  080103e0  080103e0  000203e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080109fc  080109fc  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  080109fc  080109fc  000209fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010a04  08010a04  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010a04  08010a04  00020a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010a08  08010a08  00020a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08010a0c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000765c  200001e4  08010bf0  000301e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20007840  08010bf0  00037840  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020fe3  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049f9  00000000  00000000  000511f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a90  00000000  00000000  00055bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001868  00000000  00000000  00057680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027d29  00000000  00000000  00058ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001eae5  00000000  00000000  00080c11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed713  00000000  00000000  0009f6f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018ce09  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000082d4  00000000  00000000  0018ce5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	00000000 	.word	0x00000000
 8000200:	080103c4 	.word	0x080103c4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e8 	.word	0x200001e8
 800021c:	080103c4 	.word	0x080103c4

08000220 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000220:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000222:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000226:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002b0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800022a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800022e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000232:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000234:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000236:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000238:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800023a:	d332      	bcc.n	80002a2 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800023c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800023e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000240:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000242:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000244:	d314      	bcc.n	8000270 <_CheckCase2>

08000246 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000246:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000248:	19d0      	adds	r0, r2, r7
 800024a:	bf00      	nop

0800024c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800024c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000250:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000254:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000256:	d005      	beq.n	8000264 <_CSDone>
        LDRB     R3,[R1], #+1
 8000258:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000260:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000262:	d1f3      	bne.n	800024c <_LoopCopyStraight>

08000264 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000264:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000268:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800026a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800026e:	4770      	bx	lr

08000270 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000270:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000272:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000274:	d319      	bcc.n	80002aa <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000276:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000278:	1b12      	subs	r2, r2, r4

0800027a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800027e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000282:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000286:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000288:	d005      	beq.n	8000296 <_No2ChunkNeeded>

0800028a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800028a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800028e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000292:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000294:	d1f9      	bne.n	800028a <_LoopCopyAfterWrapAround>

08000296 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000296:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800029a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800029c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800029e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002a0:	4770      	bx	lr

080002a2 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002a2:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002a4:	3801      	subs	r0, #1
        CMP      R0,R2
 80002a6:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002a8:	d2cd      	bcs.n	8000246 <_Case4>

080002aa <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002aa:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002ac:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002ae:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002b0:	20004a5c 	.word	0x20004a5c

080002b4 <strlen>:
 80002b4:	4603      	mov	r3, r0
 80002b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002ba:	2a00      	cmp	r2, #0
 80002bc:	d1fb      	bne.n	80002b6 <strlen+0x2>
 80002be:	1a18      	subs	r0, r3, r0
 80002c0:	3801      	subs	r0, #1
 80002c2:	4770      	bx	lr
	...

080002d0 <memchr>:
 80002d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002d4:	2a10      	cmp	r2, #16
 80002d6:	db2b      	blt.n	8000330 <memchr+0x60>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	d008      	beq.n	80002f0 <memchr+0x20>
 80002de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e2:	3a01      	subs	r2, #1
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d02d      	beq.n	8000344 <memchr+0x74>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	b342      	cbz	r2, 8000340 <memchr+0x70>
 80002ee:	d1f6      	bne.n	80002de <memchr+0xe>
 80002f0:	b4f0      	push	{r4, r5, r6, r7}
 80002f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002fa:	f022 0407 	bic.w	r4, r2, #7
 80002fe:	f07f 0700 	mvns.w	r7, #0
 8000302:	2300      	movs	r3, #0
 8000304:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000308:	3c08      	subs	r4, #8
 800030a:	ea85 0501 	eor.w	r5, r5, r1
 800030e:	ea86 0601 	eor.w	r6, r6, r1
 8000312:	fa85 f547 	uadd8	r5, r5, r7
 8000316:	faa3 f587 	sel	r5, r3, r7
 800031a:	fa86 f647 	uadd8	r6, r6, r7
 800031e:	faa5 f687 	sel	r6, r5, r7
 8000322:	b98e      	cbnz	r6, 8000348 <memchr+0x78>
 8000324:	d1ee      	bne.n	8000304 <memchr+0x34>
 8000326:	bcf0      	pop	{r4, r5, r6, r7}
 8000328:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800032c:	f002 0207 	and.w	r2, r2, #7
 8000330:	b132      	cbz	r2, 8000340 <memchr+0x70>
 8000332:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000336:	3a01      	subs	r2, #1
 8000338:	ea83 0301 	eor.w	r3, r3, r1
 800033c:	b113      	cbz	r3, 8000344 <memchr+0x74>
 800033e:	d1f8      	bne.n	8000332 <memchr+0x62>
 8000340:	2000      	movs	r0, #0
 8000342:	4770      	bx	lr
 8000344:	3801      	subs	r0, #1
 8000346:	4770      	bx	lr
 8000348:	2d00      	cmp	r5, #0
 800034a:	bf06      	itte	eq
 800034c:	4635      	moveq	r5, r6
 800034e:	3803      	subeq	r0, #3
 8000350:	3807      	subne	r0, #7
 8000352:	f015 0f01 	tst.w	r5, #1
 8000356:	d107      	bne.n	8000368 <memchr+0x98>
 8000358:	3001      	adds	r0, #1
 800035a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800035e:	bf02      	ittt	eq
 8000360:	3001      	addeq	r0, #1
 8000362:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000366:	3001      	addeq	r0, #1
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	3801      	subs	r0, #1
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop

08000370 <__aeabi_drsub>:
 8000370:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000374:	e002      	b.n	800037c <__adddf3>
 8000376:	bf00      	nop

08000378 <__aeabi_dsub>:
 8000378:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800037c <__adddf3>:
 800037c:	b530      	push	{r4, r5, lr}
 800037e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000382:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	bf1f      	itttt	ne
 8000392:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000396:	ea55 0c02 	orrsne.w	ip, r5, r2
 800039a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800039e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003a2:	f000 80e2 	beq.w	800056a <__adddf3+0x1ee>
 80003a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ae:	bfb8      	it	lt
 80003b0:	426d      	neglt	r5, r5
 80003b2:	dd0c      	ble.n	80003ce <__adddf3+0x52>
 80003b4:	442c      	add	r4, r5
 80003b6:	ea80 0202 	eor.w	r2, r0, r2
 80003ba:	ea81 0303 	eor.w	r3, r1, r3
 80003be:	ea82 0000 	eor.w	r0, r2, r0
 80003c2:	ea83 0101 	eor.w	r1, r3, r1
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	2d36      	cmp	r5, #54	; 0x36
 80003d0:	bf88      	it	hi
 80003d2:	bd30      	pophi	{r4, r5, pc}
 80003d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003e4:	d002      	beq.n	80003ec <__adddf3+0x70>
 80003e6:	4240      	negs	r0, r0
 80003e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003f8:	d002      	beq.n	8000400 <__adddf3+0x84>
 80003fa:	4252      	negs	r2, r2
 80003fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000400:	ea94 0f05 	teq	r4, r5
 8000404:	f000 80a7 	beq.w	8000556 <__adddf3+0x1da>
 8000408:	f1a4 0401 	sub.w	r4, r4, #1
 800040c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000410:	db0d      	blt.n	800042e <__adddf3+0xb2>
 8000412:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000416:	fa22 f205 	lsr.w	r2, r2, r5
 800041a:	1880      	adds	r0, r0, r2
 800041c:	f141 0100 	adc.w	r1, r1, #0
 8000420:	fa03 f20e 	lsl.w	r2, r3, lr
 8000424:	1880      	adds	r0, r0, r2
 8000426:	fa43 f305 	asr.w	r3, r3, r5
 800042a:	4159      	adcs	r1, r3
 800042c:	e00e      	b.n	800044c <__adddf3+0xd0>
 800042e:	f1a5 0520 	sub.w	r5, r5, #32
 8000432:	f10e 0e20 	add.w	lr, lr, #32
 8000436:	2a01      	cmp	r2, #1
 8000438:	fa03 fc0e 	lsl.w	ip, r3, lr
 800043c:	bf28      	it	cs
 800043e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000442:	fa43 f305 	asr.w	r3, r3, r5
 8000446:	18c0      	adds	r0, r0, r3
 8000448:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	d507      	bpl.n	8000462 <__adddf3+0xe6>
 8000452:	f04f 0e00 	mov.w	lr, #0
 8000456:	f1dc 0c00 	rsbs	ip, ip, #0
 800045a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800045e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000462:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000466:	d31b      	bcc.n	80004a0 <__adddf3+0x124>
 8000468:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800046c:	d30c      	bcc.n	8000488 <__adddf3+0x10c>
 800046e:	0849      	lsrs	r1, r1, #1
 8000470:	ea5f 0030 	movs.w	r0, r0, rrx
 8000474:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000478:	f104 0401 	add.w	r4, r4, #1
 800047c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000480:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000484:	f080 809a 	bcs.w	80005bc <__adddf3+0x240>
 8000488:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800048c:	bf08      	it	eq
 800048e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000492:	f150 0000 	adcs.w	r0, r0, #0
 8000496:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800049a:	ea41 0105 	orr.w	r1, r1, r5
 800049e:	bd30      	pop	{r4, r5, pc}
 80004a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004a4:	4140      	adcs	r0, r0
 80004a6:	eb41 0101 	adc.w	r1, r1, r1
 80004aa:	3c01      	subs	r4, #1
 80004ac:	bf28      	it	cs
 80004ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004b2:	d2e9      	bcs.n	8000488 <__adddf3+0x10c>
 80004b4:	f091 0f00 	teq	r1, #0
 80004b8:	bf04      	itt	eq
 80004ba:	4601      	moveq	r1, r0
 80004bc:	2000      	moveq	r0, #0
 80004be:	fab1 f381 	clz	r3, r1
 80004c2:	bf08      	it	eq
 80004c4:	3320      	addeq	r3, #32
 80004c6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ca:	f1b3 0220 	subs.w	r2, r3, #32
 80004ce:	da0c      	bge.n	80004ea <__adddf3+0x16e>
 80004d0:	320c      	adds	r2, #12
 80004d2:	dd08      	ble.n	80004e6 <__adddf3+0x16a>
 80004d4:	f102 0c14 	add.w	ip, r2, #20
 80004d8:	f1c2 020c 	rsb	r2, r2, #12
 80004dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80004e0:	fa21 f102 	lsr.w	r1, r1, r2
 80004e4:	e00c      	b.n	8000500 <__adddf3+0x184>
 80004e6:	f102 0214 	add.w	r2, r2, #20
 80004ea:	bfd8      	it	le
 80004ec:	f1c2 0c20 	rsble	ip, r2, #32
 80004f0:	fa01 f102 	lsl.w	r1, r1, r2
 80004f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004f8:	bfdc      	itt	le
 80004fa:	ea41 010c 	orrle.w	r1, r1, ip
 80004fe:	4090      	lslle	r0, r2
 8000500:	1ae4      	subs	r4, r4, r3
 8000502:	bfa2      	ittt	ge
 8000504:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000508:	4329      	orrge	r1, r5
 800050a:	bd30      	popge	{r4, r5, pc}
 800050c:	ea6f 0404 	mvn.w	r4, r4
 8000510:	3c1f      	subs	r4, #31
 8000512:	da1c      	bge.n	800054e <__adddf3+0x1d2>
 8000514:	340c      	adds	r4, #12
 8000516:	dc0e      	bgt.n	8000536 <__adddf3+0x1ba>
 8000518:	f104 0414 	add.w	r4, r4, #20
 800051c:	f1c4 0220 	rsb	r2, r4, #32
 8000520:	fa20 f004 	lsr.w	r0, r0, r4
 8000524:	fa01 f302 	lsl.w	r3, r1, r2
 8000528:	ea40 0003 	orr.w	r0, r0, r3
 800052c:	fa21 f304 	lsr.w	r3, r1, r4
 8000530:	ea45 0103 	orr.w	r1, r5, r3
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	f1c4 040c 	rsb	r4, r4, #12
 800053a:	f1c4 0220 	rsb	r2, r4, #32
 800053e:	fa20 f002 	lsr.w	r0, r0, r2
 8000542:	fa01 f304 	lsl.w	r3, r1, r4
 8000546:	ea40 0003 	orr.w	r0, r0, r3
 800054a:	4629      	mov	r1, r5
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	fa21 f004 	lsr.w	r0, r1, r4
 8000552:	4629      	mov	r1, r5
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f094 0f00 	teq	r4, #0
 800055a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800055e:	bf06      	itte	eq
 8000560:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000564:	3401      	addeq	r4, #1
 8000566:	3d01      	subne	r5, #1
 8000568:	e74e      	b.n	8000408 <__adddf3+0x8c>
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf18      	it	ne
 8000570:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000574:	d029      	beq.n	80005ca <__adddf3+0x24e>
 8000576:	ea94 0f05 	teq	r4, r5
 800057a:	bf08      	it	eq
 800057c:	ea90 0f02 	teqeq	r0, r2
 8000580:	d005      	beq.n	800058e <__adddf3+0x212>
 8000582:	ea54 0c00 	orrs.w	ip, r4, r0
 8000586:	bf04      	itt	eq
 8000588:	4619      	moveq	r1, r3
 800058a:	4610      	moveq	r0, r2
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	ea91 0f03 	teq	r1, r3
 8000592:	bf1e      	ittt	ne
 8000594:	2100      	movne	r1, #0
 8000596:	2000      	movne	r0, #0
 8000598:	bd30      	popne	{r4, r5, pc}
 800059a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800059e:	d105      	bne.n	80005ac <__adddf3+0x230>
 80005a0:	0040      	lsls	r0, r0, #1
 80005a2:	4149      	adcs	r1, r1
 80005a4:	bf28      	it	cs
 80005a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005aa:	bd30      	pop	{r4, r5, pc}
 80005ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005b0:	bf3c      	itt	cc
 80005b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005b6:	bd30      	popcc	{r4, r5, pc}
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005c4:	f04f 0000 	mov.w	r0, #0
 80005c8:	bd30      	pop	{r4, r5, pc}
 80005ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ce:	bf1a      	itte	ne
 80005d0:	4619      	movne	r1, r3
 80005d2:	4610      	movne	r0, r2
 80005d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005d8:	bf1c      	itt	ne
 80005da:	460b      	movne	r3, r1
 80005dc:	4602      	movne	r2, r0
 80005de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005e2:	bf06      	itte	eq
 80005e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005e8:	ea91 0f03 	teqeq	r1, r3
 80005ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	bf00      	nop

080005f4 <__aeabi_ui2d>:
 80005f4:	f090 0f00 	teq	r0, #0
 80005f8:	bf04      	itt	eq
 80005fa:	2100      	moveq	r1, #0
 80005fc:	4770      	bxeq	lr
 80005fe:	b530      	push	{r4, r5, lr}
 8000600:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000604:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000608:	f04f 0500 	mov.w	r5, #0
 800060c:	f04f 0100 	mov.w	r1, #0
 8000610:	e750      	b.n	80004b4 <__adddf3+0x138>
 8000612:	bf00      	nop

08000614 <__aeabi_i2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800062c:	bf48      	it	mi
 800062e:	4240      	negmi	r0, r0
 8000630:	f04f 0100 	mov.w	r1, #0
 8000634:	e73e      	b.n	80004b4 <__adddf3+0x138>
 8000636:	bf00      	nop

08000638 <__aeabi_f2d>:
 8000638:	0042      	lsls	r2, r0, #1
 800063a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800063e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000642:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000646:	bf1f      	itttt	ne
 8000648:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800064c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000650:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000654:	4770      	bxne	lr
 8000656:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800065a:	bf08      	it	eq
 800065c:	4770      	bxeq	lr
 800065e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000662:	bf04      	itt	eq
 8000664:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000668:	4770      	bxeq	lr
 800066a:	b530      	push	{r4, r5, lr}
 800066c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000670:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000674:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000678:	e71c      	b.n	80004b4 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_ul2d>:
 800067c:	ea50 0201 	orrs.w	r2, r0, r1
 8000680:	bf08      	it	eq
 8000682:	4770      	bxeq	lr
 8000684:	b530      	push	{r4, r5, lr}
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	e00a      	b.n	80006a2 <__aeabi_l2d+0x16>

0800068c <__aeabi_l2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800069a:	d502      	bpl.n	80006a2 <__aeabi_l2d+0x16>
 800069c:	4240      	negs	r0, r0
 800069e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ae:	f43f aed8 	beq.w	8000462 <__adddf3+0xe6>
 80006b2:	f04f 0203 	mov.w	r2, #3
 80006b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ba:	bf18      	it	ne
 80006bc:	3203      	addne	r2, #3
 80006be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006c2:	bf18      	it	ne
 80006c4:	3203      	addne	r2, #3
 80006c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ca:	f1c2 0320 	rsb	r3, r2, #32
 80006ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006da:	ea40 000e 	orr.w	r0, r0, lr
 80006de:	fa21 f102 	lsr.w	r1, r1, r2
 80006e2:	4414      	add	r4, r2
 80006e4:	e6bd      	b.n	8000462 <__adddf3+0xe6>
 80006e6:	bf00      	nop

080006e8 <__aeabi_dmul>:
 80006e8:	b570      	push	{r4, r5, r6, lr}
 80006ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006f6:	bf1d      	ittte	ne
 80006f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006fc:	ea94 0f0c 	teqne	r4, ip
 8000700:	ea95 0f0c 	teqne	r5, ip
 8000704:	f000 f8de 	bleq	80008c4 <__aeabi_dmul+0x1dc>
 8000708:	442c      	add	r4, r5
 800070a:	ea81 0603 	eor.w	r6, r1, r3
 800070e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000712:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000716:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800071a:	bf18      	it	ne
 800071c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000720:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000724:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000728:	d038      	beq.n	800079c <__aeabi_dmul+0xb4>
 800072a:	fba0 ce02 	umull	ip, lr, r0, r2
 800072e:	f04f 0500 	mov.w	r5, #0
 8000732:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000736:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800073a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800073e:	f04f 0600 	mov.w	r6, #0
 8000742:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000746:	f09c 0f00 	teq	ip, #0
 800074a:	bf18      	it	ne
 800074c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000750:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000754:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000758:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800075c:	d204      	bcs.n	8000768 <__aeabi_dmul+0x80>
 800075e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000762:	416d      	adcs	r5, r5
 8000764:	eb46 0606 	adc.w	r6, r6, r6
 8000768:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800076c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000770:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000774:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000778:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800077c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000780:	bf88      	it	hi
 8000782:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000786:	d81e      	bhi.n	80007c6 <__aeabi_dmul+0xde>
 8000788:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800078c:	bf08      	it	eq
 800078e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000792:	f150 0000 	adcs.w	r0, r0, #0
 8000796:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007a0:	ea46 0101 	orr.w	r1, r6, r1
 80007a4:	ea40 0002 	orr.w	r0, r0, r2
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007b0:	bfc2      	ittt	gt
 80007b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ba:	bd70      	popgt	{r4, r5, r6, pc}
 80007bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007c0:	f04f 0e00 	mov.w	lr, #0
 80007c4:	3c01      	subs	r4, #1
 80007c6:	f300 80ab 	bgt.w	8000920 <__aeabi_dmul+0x238>
 80007ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007ce:	bfde      	ittt	le
 80007d0:	2000      	movle	r0, #0
 80007d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007d6:	bd70      	pople	{r4, r5, r6, pc}
 80007d8:	f1c4 0400 	rsb	r4, r4, #0
 80007dc:	3c20      	subs	r4, #32
 80007de:	da35      	bge.n	800084c <__aeabi_dmul+0x164>
 80007e0:	340c      	adds	r4, #12
 80007e2:	dc1b      	bgt.n	800081c <__aeabi_dmul+0x134>
 80007e4:	f104 0414 	add.w	r4, r4, #20
 80007e8:	f1c4 0520 	rsb	r5, r4, #32
 80007ec:	fa00 f305 	lsl.w	r3, r0, r5
 80007f0:	fa20 f004 	lsr.w	r0, r0, r4
 80007f4:	fa01 f205 	lsl.w	r2, r1, r5
 80007f8:	ea40 0002 	orr.w	r0, r0, r2
 80007fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000800:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000804:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000808:	fa21 f604 	lsr.w	r6, r1, r4
 800080c:	eb42 0106 	adc.w	r1, r2, r6
 8000810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000814:	bf08      	it	eq
 8000816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	f1c4 040c 	rsb	r4, r4, #12
 8000820:	f1c4 0520 	rsb	r5, r4, #32
 8000824:	fa00 f304 	lsl.w	r3, r0, r4
 8000828:	fa20 f005 	lsr.w	r0, r0, r5
 800082c:	fa01 f204 	lsl.w	r2, r1, r4
 8000830:	ea40 0002 	orr.w	r0, r0, r2
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800083c:	f141 0100 	adc.w	r1, r1, #0
 8000840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000844:	bf08      	it	eq
 8000846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	f1c4 0520 	rsb	r5, r4, #32
 8000850:	fa00 f205 	lsl.w	r2, r0, r5
 8000854:	ea4e 0e02 	orr.w	lr, lr, r2
 8000858:	fa20 f304 	lsr.w	r3, r0, r4
 800085c:	fa01 f205 	lsl.w	r2, r1, r5
 8000860:	ea43 0302 	orr.w	r3, r3, r2
 8000864:	fa21 f004 	lsr.w	r0, r1, r4
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	fa21 f204 	lsr.w	r2, r1, r4
 8000870:	ea20 0002 	bic.w	r0, r0, r2
 8000874:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000878:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800087c:	bf08      	it	eq
 800087e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f094 0f00 	teq	r4, #0
 8000888:	d10f      	bne.n	80008aa <__aeabi_dmul+0x1c2>
 800088a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800088e:	0040      	lsls	r0, r0, #1
 8000890:	eb41 0101 	adc.w	r1, r1, r1
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	bf08      	it	eq
 800089a:	3c01      	subeq	r4, #1
 800089c:	d0f7      	beq.n	800088e <__aeabi_dmul+0x1a6>
 800089e:	ea41 0106 	orr.w	r1, r1, r6
 80008a2:	f095 0f00 	teq	r5, #0
 80008a6:	bf18      	it	ne
 80008a8:	4770      	bxne	lr
 80008aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008ae:	0052      	lsls	r2, r2, #1
 80008b0:	eb43 0303 	adc.w	r3, r3, r3
 80008b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008b8:	bf08      	it	eq
 80008ba:	3d01      	subeq	r5, #1
 80008bc:	d0f7      	beq.n	80008ae <__aeabi_dmul+0x1c6>
 80008be:	ea43 0306 	orr.w	r3, r3, r6
 80008c2:	4770      	bx	lr
 80008c4:	ea94 0f0c 	teq	r4, ip
 80008c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008cc:	bf18      	it	ne
 80008ce:	ea95 0f0c 	teqne	r5, ip
 80008d2:	d00c      	beq.n	80008ee <__aeabi_dmul+0x206>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	d1d1      	bne.n	8000884 <__aeabi_dmul+0x19c>
 80008e0:	ea81 0103 	eor.w	r1, r1, r3
 80008e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008e8:	f04f 0000 	mov.w	r0, #0
 80008ec:	bd70      	pop	{r4, r5, r6, pc}
 80008ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f2:	bf06      	itte	eq
 80008f4:	4610      	moveq	r0, r2
 80008f6:	4619      	moveq	r1, r3
 80008f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fc:	d019      	beq.n	8000932 <__aeabi_dmul+0x24a>
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	d102      	bne.n	800090a <__aeabi_dmul+0x222>
 8000904:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000908:	d113      	bne.n	8000932 <__aeabi_dmul+0x24a>
 800090a:	ea95 0f0c 	teq	r5, ip
 800090e:	d105      	bne.n	800091c <__aeabi_dmul+0x234>
 8000910:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000914:	bf1c      	itt	ne
 8000916:	4610      	movne	r0, r2
 8000918:	4619      	movne	r1, r3
 800091a:	d10a      	bne.n	8000932 <__aeabi_dmul+0x24a>
 800091c:	ea81 0103 	eor.w	r1, r1, r3
 8000920:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000924:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000928:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800092c:	f04f 0000 	mov.w	r0, #0
 8000930:	bd70      	pop	{r4, r5, r6, pc}
 8000932:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000936:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800093a:	bd70      	pop	{r4, r5, r6, pc}

0800093c <__aeabi_ddiv>:
 800093c:	b570      	push	{r4, r5, r6, lr}
 800093e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000942:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000946:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800094a:	bf1d      	ittte	ne
 800094c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000950:	ea94 0f0c 	teqne	r4, ip
 8000954:	ea95 0f0c 	teqne	r5, ip
 8000958:	f000 f8a7 	bleq	8000aaa <__aeabi_ddiv+0x16e>
 800095c:	eba4 0405 	sub.w	r4, r4, r5
 8000960:	ea81 0e03 	eor.w	lr, r1, r3
 8000964:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000968:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800096c:	f000 8088 	beq.w	8000a80 <__aeabi_ddiv+0x144>
 8000970:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000974:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000978:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800097c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000980:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000984:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000988:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800098c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000990:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000994:	429d      	cmp	r5, r3
 8000996:	bf08      	it	eq
 8000998:	4296      	cmpeq	r6, r2
 800099a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800099e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009a2:	d202      	bcs.n	80009aa <__aeabi_ddiv+0x6e>
 80009a4:	085b      	lsrs	r3, r3, #1
 80009a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009aa:	1ab6      	subs	r6, r6, r2
 80009ac:	eb65 0503 	sbc.w	r5, r5, r3
 80009b0:	085b      	lsrs	r3, r3, #1
 80009b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009be:	ebb6 0e02 	subs.w	lr, r6, r2
 80009c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009c6:	bf22      	ittt	cs
 80009c8:	1ab6      	subcs	r6, r6, r2
 80009ca:	4675      	movcs	r5, lr
 80009cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009de:	bf22      	ittt	cs
 80009e0:	1ab6      	subcs	r6, r6, r2
 80009e2:	4675      	movcs	r5, lr
 80009e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009e8:	085b      	lsrs	r3, r3, #1
 80009ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80009f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009f6:	bf22      	ittt	cs
 80009f8:	1ab6      	subcs	r6, r6, r2
 80009fa:	4675      	movcs	r5, lr
 80009fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a00:	085b      	lsrs	r3, r3, #1
 8000a02:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a06:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a0e:	bf22      	ittt	cs
 8000a10:	1ab6      	subcs	r6, r6, r2
 8000a12:	4675      	movcs	r5, lr
 8000a14:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a18:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a1c:	d018      	beq.n	8000a50 <__aeabi_ddiv+0x114>
 8000a1e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a22:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a26:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a2a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a2e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a32:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a36:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a3a:	d1c0      	bne.n	80009be <__aeabi_ddiv+0x82>
 8000a3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a40:	d10b      	bne.n	8000a5a <__aeabi_ddiv+0x11e>
 8000a42:	ea41 0100 	orr.w	r1, r1, r0
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a4e:	e7b6      	b.n	80009be <__aeabi_ddiv+0x82>
 8000a50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a54:	bf04      	itt	eq
 8000a56:	4301      	orreq	r1, r0
 8000a58:	2000      	moveq	r0, #0
 8000a5a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a5e:	bf88      	it	hi
 8000a60:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a64:	f63f aeaf 	bhi.w	80007c6 <__aeabi_dmul+0xde>
 8000a68:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a6c:	bf04      	itt	eq
 8000a6e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a72:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a76:	f150 0000 	adcs.w	r0, r0, #0
 8000a7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a7e:	bd70      	pop	{r4, r5, r6, pc}
 8000a80:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a84:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a88:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a8c:	bfc2      	ittt	gt
 8000a8e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a92:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a96:	bd70      	popgt	{r4, r5, r6, pc}
 8000a98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a9c:	f04f 0e00 	mov.w	lr, #0
 8000aa0:	3c01      	subs	r4, #1
 8000aa2:	e690      	b.n	80007c6 <__aeabi_dmul+0xde>
 8000aa4:	ea45 0e06 	orr.w	lr, r5, r6
 8000aa8:	e68d      	b.n	80007c6 <__aeabi_dmul+0xde>
 8000aaa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000aae:	ea94 0f0c 	teq	r4, ip
 8000ab2:	bf08      	it	eq
 8000ab4:	ea95 0f0c 	teqeq	r5, ip
 8000ab8:	f43f af3b 	beq.w	8000932 <__aeabi_dmul+0x24a>
 8000abc:	ea94 0f0c 	teq	r4, ip
 8000ac0:	d10a      	bne.n	8000ad8 <__aeabi_ddiv+0x19c>
 8000ac2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ac6:	f47f af34 	bne.w	8000932 <__aeabi_dmul+0x24a>
 8000aca:	ea95 0f0c 	teq	r5, ip
 8000ace:	f47f af25 	bne.w	800091c <__aeabi_dmul+0x234>
 8000ad2:	4610      	mov	r0, r2
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	e72c      	b.n	8000932 <__aeabi_dmul+0x24a>
 8000ad8:	ea95 0f0c 	teq	r5, ip
 8000adc:	d106      	bne.n	8000aec <__aeabi_ddiv+0x1b0>
 8000ade:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ae2:	f43f aefd 	beq.w	80008e0 <__aeabi_dmul+0x1f8>
 8000ae6:	4610      	mov	r0, r2
 8000ae8:	4619      	mov	r1, r3
 8000aea:	e722      	b.n	8000932 <__aeabi_dmul+0x24a>
 8000aec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000af0:	bf18      	it	ne
 8000af2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000af6:	f47f aec5 	bne.w	8000884 <__aeabi_dmul+0x19c>
 8000afa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000afe:	f47f af0d 	bne.w	800091c <__aeabi_dmul+0x234>
 8000b02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b06:	f47f aeeb 	bne.w	80008e0 <__aeabi_dmul+0x1f8>
 8000b0a:	e712      	b.n	8000932 <__aeabi_dmul+0x24a>

08000b0c <__gedf2>:
 8000b0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b10:	e006      	b.n	8000b20 <__cmpdf2+0x4>
 8000b12:	bf00      	nop

08000b14 <__ledf2>:
 8000b14:	f04f 0c01 	mov.w	ip, #1
 8000b18:	e002      	b.n	8000b20 <__cmpdf2+0x4>
 8000b1a:	bf00      	nop

08000b1c <__cmpdf2>:
 8000b1c:	f04f 0c01 	mov.w	ip, #1
 8000b20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	bf18      	it	ne
 8000b32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b36:	d01b      	beq.n	8000b70 <__cmpdf2+0x54>
 8000b38:	b001      	add	sp, #4
 8000b3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b3e:	bf0c      	ite	eq
 8000b40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b44:	ea91 0f03 	teqne	r1, r3
 8000b48:	bf02      	ittt	eq
 8000b4a:	ea90 0f02 	teqeq	r0, r2
 8000b4e:	2000      	moveq	r0, #0
 8000b50:	4770      	bxeq	lr
 8000b52:	f110 0f00 	cmn.w	r0, #0
 8000b56:	ea91 0f03 	teq	r1, r3
 8000b5a:	bf58      	it	pl
 8000b5c:	4299      	cmppl	r1, r3
 8000b5e:	bf08      	it	eq
 8000b60:	4290      	cmpeq	r0, r2
 8000b62:	bf2c      	ite	cs
 8000b64:	17d8      	asrcs	r0, r3, #31
 8000b66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b6a:	f040 0001 	orr.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b78:	d102      	bne.n	8000b80 <__cmpdf2+0x64>
 8000b7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7e:	d107      	bne.n	8000b90 <__cmpdf2+0x74>
 8000b80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d1d6      	bne.n	8000b38 <__cmpdf2+0x1c>
 8000b8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8e:	d0d3      	beq.n	8000b38 <__cmpdf2+0x1c>
 8000b90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_cdrcmple>:
 8000b98:	4684      	mov	ip, r0
 8000b9a:	4610      	mov	r0, r2
 8000b9c:	4662      	mov	r2, ip
 8000b9e:	468c      	mov	ip, r1
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4663      	mov	r3, ip
 8000ba4:	e000      	b.n	8000ba8 <__aeabi_cdcmpeq>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_cdcmpeq>:
 8000ba8:	b501      	push	{r0, lr}
 8000baa:	f7ff ffb7 	bl	8000b1c <__cmpdf2>
 8000bae:	2800      	cmp	r0, #0
 8000bb0:	bf48      	it	mi
 8000bb2:	f110 0f00 	cmnmi.w	r0, #0
 8000bb6:	bd01      	pop	{r0, pc}

08000bb8 <__aeabi_dcmpeq>:
 8000bb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bbc:	f7ff fff4 	bl	8000ba8 <__aeabi_cdcmpeq>
 8000bc0:	bf0c      	ite	eq
 8000bc2:	2001      	moveq	r0, #1
 8000bc4:	2000      	movne	r0, #0
 8000bc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bca:	bf00      	nop

08000bcc <__aeabi_dcmplt>:
 8000bcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd0:	f7ff ffea 	bl	8000ba8 <__aeabi_cdcmpeq>
 8000bd4:	bf34      	ite	cc
 8000bd6:	2001      	movcc	r0, #1
 8000bd8:	2000      	movcs	r0, #0
 8000bda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bde:	bf00      	nop

08000be0 <__aeabi_dcmple>:
 8000be0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be4:	f7ff ffe0 	bl	8000ba8 <__aeabi_cdcmpeq>
 8000be8:	bf94      	ite	ls
 8000bea:	2001      	movls	r0, #1
 8000bec:	2000      	movhi	r0, #0
 8000bee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_dcmpge>:
 8000bf4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf8:	f7ff ffce 	bl	8000b98 <__aeabi_cdrcmple>
 8000bfc:	bf94      	ite	ls
 8000bfe:	2001      	movls	r0, #1
 8000c00:	2000      	movhi	r0, #0
 8000c02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c06:	bf00      	nop

08000c08 <__aeabi_dcmpgt>:
 8000c08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c0c:	f7ff ffc4 	bl	8000b98 <__aeabi_cdrcmple>
 8000c10:	bf34      	ite	cc
 8000c12:	2001      	movcc	r0, #1
 8000c14:	2000      	movcs	r0, #0
 8000c16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c1a:	bf00      	nop

08000c1c <__aeabi_dcmpun>:
 8000c1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c24:	d102      	bne.n	8000c2c <__aeabi_dcmpun+0x10>
 8000c26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c2a:	d10a      	bne.n	8000c42 <__aeabi_dcmpun+0x26>
 8000c2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c34:	d102      	bne.n	8000c3c <__aeabi_dcmpun+0x20>
 8000c36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_dcmpun+0x26>
 8000c3c:	f04f 0000 	mov.w	r0, #0
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0001 	mov.w	r0, #1
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2iz>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c50:	d215      	bcs.n	8000c7e <__aeabi_d2iz+0x36>
 8000c52:	d511      	bpl.n	8000c78 <__aeabi_d2iz+0x30>
 8000c54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c5c:	d912      	bls.n	8000c84 <__aeabi_d2iz+0x3c>
 8000c5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c72:	bf18      	it	ne
 8000c74:	4240      	negne	r0, r0
 8000c76:	4770      	bx	lr
 8000c78:	f04f 0000 	mov.w	r0, #0
 8000c7c:	4770      	bx	lr
 8000c7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c82:	d105      	bne.n	8000c90 <__aeabi_d2iz+0x48>
 8000c84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	bf08      	it	eq
 8000c8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c8e:	4770      	bx	lr
 8000c90:	f04f 0000 	mov.w	r0, #0
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2uiz>:
 8000c98:	004a      	lsls	r2, r1, #1
 8000c9a:	d211      	bcs.n	8000cc0 <__aeabi_d2uiz+0x28>
 8000c9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ca0:	d211      	bcs.n	8000cc6 <__aeabi_d2uiz+0x2e>
 8000ca2:	d50d      	bpl.n	8000cc0 <__aeabi_d2uiz+0x28>
 8000ca4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ca8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000cac:	d40e      	bmi.n	8000ccc <__aeabi_d2uiz+0x34>
 8000cae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000cba:	fa23 f002 	lsr.w	r0, r3, r2
 8000cbe:	4770      	bx	lr
 8000cc0:	f04f 0000 	mov.w	r0, #0
 8000cc4:	4770      	bx	lr
 8000cc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cca:	d102      	bne.n	8000cd2 <__aeabi_d2uiz+0x3a>
 8000ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd0:	4770      	bx	lr
 8000cd2:	f04f 0000 	mov.w	r0, #0
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2f>:
 8000cd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000cdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ce0:	bf24      	itt	cs
 8000ce2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ce6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000cea:	d90d      	bls.n	8000d08 <__aeabi_d2f+0x30>
 8000cec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000cf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000cf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000cfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000d00:	bf08      	it	eq
 8000d02:	f020 0001 	biceq.w	r0, r0, #1
 8000d06:	4770      	bx	lr
 8000d08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000d0c:	d121      	bne.n	8000d52 <__aeabi_d2f+0x7a>
 8000d0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000d12:	bfbc      	itt	lt
 8000d14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000d18:	4770      	bxlt	lr
 8000d1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000d1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000d22:	f1c2 0218 	rsb	r2, r2, #24
 8000d26:	f1c2 0c20 	rsb	ip, r2, #32
 8000d2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000d2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000d32:	bf18      	it	ne
 8000d34:	f040 0001 	orrne.w	r0, r0, #1
 8000d38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d44:	ea40 000c 	orr.w	r0, r0, ip
 8000d48:	fa23 f302 	lsr.w	r3, r3, r2
 8000d4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d50:	e7cc      	b.n	8000cec <__aeabi_d2f+0x14>
 8000d52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d56:	d107      	bne.n	8000d68 <__aeabi_d2f+0x90>
 8000d58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d5c:	bf1e      	ittt	ne
 8000d5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d66:	4770      	bxne	lr
 8000d68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop

08000d78 <__aeabi_uldivmod>:
 8000d78:	b953      	cbnz	r3, 8000d90 <__aeabi_uldivmod+0x18>
 8000d7a:	b94a      	cbnz	r2, 8000d90 <__aeabi_uldivmod+0x18>
 8000d7c:	2900      	cmp	r1, #0
 8000d7e:	bf08      	it	eq
 8000d80:	2800      	cmpeq	r0, #0
 8000d82:	bf1c      	itt	ne
 8000d84:	f04f 31ff 	movne.w	r1, #4294967295
 8000d88:	f04f 30ff 	movne.w	r0, #4294967295
 8000d8c:	f000 b9aa 	b.w	80010e4 <__aeabi_idiv0>
 8000d90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d98:	f000 f83c 	bl	8000e14 <__udivmoddi4>
 8000d9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000da0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000da4:	b004      	add	sp, #16
 8000da6:	4770      	bx	lr

08000da8 <__aeabi_d2lz>:
 8000da8:	b538      	push	{r3, r4, r5, lr}
 8000daa:	2200      	movs	r2, #0
 8000dac:	2300      	movs	r3, #0
 8000dae:	4604      	mov	r4, r0
 8000db0:	460d      	mov	r5, r1
 8000db2:	f7ff ff0b 	bl	8000bcc <__aeabi_dcmplt>
 8000db6:	b928      	cbnz	r0, 8000dc4 <__aeabi_d2lz+0x1c>
 8000db8:	4620      	mov	r0, r4
 8000dba:	4629      	mov	r1, r5
 8000dbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000dc0:	f000 b80a 	b.w	8000dd8 <__aeabi_d2ulz>
 8000dc4:	4620      	mov	r0, r4
 8000dc6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000dca:	f000 f805 	bl	8000dd8 <__aeabi_d2ulz>
 8000dce:	4240      	negs	r0, r0
 8000dd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dd4:	bd38      	pop	{r3, r4, r5, pc}
 8000dd6:	bf00      	nop

08000dd8 <__aeabi_d2ulz>:
 8000dd8:	b5d0      	push	{r4, r6, r7, lr}
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <__aeabi_d2ulz+0x34>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	4606      	mov	r6, r0
 8000de0:	460f      	mov	r7, r1
 8000de2:	f7ff fc81 	bl	80006e8 <__aeabi_dmul>
 8000de6:	f7ff ff57 	bl	8000c98 <__aeabi_d2uiz>
 8000dea:	4604      	mov	r4, r0
 8000dec:	f7ff fc02 	bl	80005f4 <__aeabi_ui2d>
 8000df0:	4b07      	ldr	r3, [pc, #28]	; (8000e10 <__aeabi_d2ulz+0x38>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	f7ff fc78 	bl	80006e8 <__aeabi_dmul>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	460b      	mov	r3, r1
 8000dfc:	4630      	mov	r0, r6
 8000dfe:	4639      	mov	r1, r7
 8000e00:	f7ff faba 	bl	8000378 <__aeabi_dsub>
 8000e04:	f7ff ff48 	bl	8000c98 <__aeabi_d2uiz>
 8000e08:	4621      	mov	r1, r4
 8000e0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000e0c:	3df00000 	.word	0x3df00000
 8000e10:	41f00000 	.word	0x41f00000

08000e14 <__udivmoddi4>:
 8000e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e18:	9d08      	ldr	r5, [sp, #32]
 8000e1a:	4604      	mov	r4, r0
 8000e1c:	468e      	mov	lr, r1
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d14d      	bne.n	8000ebe <__udivmoddi4+0xaa>
 8000e22:	428a      	cmp	r2, r1
 8000e24:	4694      	mov	ip, r2
 8000e26:	d969      	bls.n	8000efc <__udivmoddi4+0xe8>
 8000e28:	fab2 f282 	clz	r2, r2
 8000e2c:	b152      	cbz	r2, 8000e44 <__udivmoddi4+0x30>
 8000e2e:	fa01 f302 	lsl.w	r3, r1, r2
 8000e32:	f1c2 0120 	rsb	r1, r2, #32
 8000e36:	fa20 f101 	lsr.w	r1, r0, r1
 8000e3a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3e:	ea41 0e03 	orr.w	lr, r1, r3
 8000e42:	4094      	lsls	r4, r2
 8000e44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e48:	0c21      	lsrs	r1, r4, #16
 8000e4a:	fbbe f6f8 	udiv	r6, lr, r8
 8000e4e:	fa1f f78c 	uxth.w	r7, ip
 8000e52:	fb08 e316 	mls	r3, r8, r6, lr
 8000e56:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e5a:	fb06 f107 	mul.w	r1, r6, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d90a      	bls.n	8000e78 <__udivmoddi4+0x64>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e6a:	f080 811f 	bcs.w	80010ac <__udivmoddi4+0x298>
 8000e6e:	4299      	cmp	r1, r3
 8000e70:	f240 811c 	bls.w	80010ac <__udivmoddi4+0x298>
 8000e74:	3e02      	subs	r6, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1a5b      	subs	r3, r3, r1
 8000e7a:	b2a4      	uxth	r4, r4
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e88:	fb00 f707 	mul.w	r7, r0, r7
 8000e8c:	42a7      	cmp	r7, r4
 8000e8e:	d90a      	bls.n	8000ea6 <__udivmoddi4+0x92>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e98:	f080 810a 	bcs.w	80010b0 <__udivmoddi4+0x29c>
 8000e9c:	42a7      	cmp	r7, r4
 8000e9e:	f240 8107 	bls.w	80010b0 <__udivmoddi4+0x29c>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eaa:	1be4      	subs	r4, r4, r7
 8000eac:	2600      	movs	r6, #0
 8000eae:	b11d      	cbz	r5, 8000eb8 <__udivmoddi4+0xa4>
 8000eb0:	40d4      	lsrs	r4, r2
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000eb8:	4631      	mov	r1, r6
 8000eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ebe:	428b      	cmp	r3, r1
 8000ec0:	d909      	bls.n	8000ed6 <__udivmoddi4+0xc2>
 8000ec2:	2d00      	cmp	r5, #0
 8000ec4:	f000 80ef 	beq.w	80010a6 <__udivmoddi4+0x292>
 8000ec8:	2600      	movs	r6, #0
 8000eca:	e9c5 0100 	strd	r0, r1, [r5]
 8000ece:	4630      	mov	r0, r6
 8000ed0:	4631      	mov	r1, r6
 8000ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed6:	fab3 f683 	clz	r6, r3
 8000eda:	2e00      	cmp	r6, #0
 8000edc:	d14a      	bne.n	8000f74 <__udivmoddi4+0x160>
 8000ede:	428b      	cmp	r3, r1
 8000ee0:	d302      	bcc.n	8000ee8 <__udivmoddi4+0xd4>
 8000ee2:	4282      	cmp	r2, r0
 8000ee4:	f200 80f9 	bhi.w	80010da <__udivmoddi4+0x2c6>
 8000ee8:	1a84      	subs	r4, r0, r2
 8000eea:	eb61 0303 	sbc.w	r3, r1, r3
 8000eee:	2001      	movs	r0, #1
 8000ef0:	469e      	mov	lr, r3
 8000ef2:	2d00      	cmp	r5, #0
 8000ef4:	d0e0      	beq.n	8000eb8 <__udivmoddi4+0xa4>
 8000ef6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000efa:	e7dd      	b.n	8000eb8 <__udivmoddi4+0xa4>
 8000efc:	b902      	cbnz	r2, 8000f00 <__udivmoddi4+0xec>
 8000efe:	deff      	udf	#255	; 0xff
 8000f00:	fab2 f282 	clz	r2, r2
 8000f04:	2a00      	cmp	r2, #0
 8000f06:	f040 8092 	bne.w	800102e <__udivmoddi4+0x21a>
 8000f0a:	eba1 010c 	sub.w	r1, r1, ip
 8000f0e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f12:	fa1f fe8c 	uxth.w	lr, ip
 8000f16:	2601      	movs	r6, #1
 8000f18:	0c20      	lsrs	r0, r4, #16
 8000f1a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000f1e:	fb07 1113 	mls	r1, r7, r3, r1
 8000f22:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f26:	fb0e f003 	mul.w	r0, lr, r3
 8000f2a:	4288      	cmp	r0, r1
 8000f2c:	d908      	bls.n	8000f40 <__udivmoddi4+0x12c>
 8000f2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f32:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f36:	d202      	bcs.n	8000f3e <__udivmoddi4+0x12a>
 8000f38:	4288      	cmp	r0, r1
 8000f3a:	f200 80cb 	bhi.w	80010d4 <__udivmoddi4+0x2c0>
 8000f3e:	4643      	mov	r3, r8
 8000f40:	1a09      	subs	r1, r1, r0
 8000f42:	b2a4      	uxth	r4, r4
 8000f44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f48:	fb07 1110 	mls	r1, r7, r0, r1
 8000f4c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f50:	fb0e fe00 	mul.w	lr, lr, r0
 8000f54:	45a6      	cmp	lr, r4
 8000f56:	d908      	bls.n	8000f6a <__udivmoddi4+0x156>
 8000f58:	eb1c 0404 	adds.w	r4, ip, r4
 8000f5c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f60:	d202      	bcs.n	8000f68 <__udivmoddi4+0x154>
 8000f62:	45a6      	cmp	lr, r4
 8000f64:	f200 80bb 	bhi.w	80010de <__udivmoddi4+0x2ca>
 8000f68:	4608      	mov	r0, r1
 8000f6a:	eba4 040e 	sub.w	r4, r4, lr
 8000f6e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f72:	e79c      	b.n	8000eae <__udivmoddi4+0x9a>
 8000f74:	f1c6 0720 	rsb	r7, r6, #32
 8000f78:	40b3      	lsls	r3, r6
 8000f7a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f7e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f82:	fa20 f407 	lsr.w	r4, r0, r7
 8000f86:	fa01 f306 	lsl.w	r3, r1, r6
 8000f8a:	431c      	orrs	r4, r3
 8000f8c:	40f9      	lsrs	r1, r7
 8000f8e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f92:	fa00 f306 	lsl.w	r3, r0, r6
 8000f96:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f9a:	0c20      	lsrs	r0, r4, #16
 8000f9c:	fa1f fe8c 	uxth.w	lr, ip
 8000fa0:	fb09 1118 	mls	r1, r9, r8, r1
 8000fa4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000fa8:	fb08 f00e 	mul.w	r0, r8, lr
 8000fac:	4288      	cmp	r0, r1
 8000fae:	fa02 f206 	lsl.w	r2, r2, r6
 8000fb2:	d90b      	bls.n	8000fcc <__udivmoddi4+0x1b8>
 8000fb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000fbc:	f080 8088 	bcs.w	80010d0 <__udivmoddi4+0x2bc>
 8000fc0:	4288      	cmp	r0, r1
 8000fc2:	f240 8085 	bls.w	80010d0 <__udivmoddi4+0x2bc>
 8000fc6:	f1a8 0802 	sub.w	r8, r8, #2
 8000fca:	4461      	add	r1, ip
 8000fcc:	1a09      	subs	r1, r1, r0
 8000fce:	b2a4      	uxth	r4, r4
 8000fd0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000fd4:	fb09 1110 	mls	r1, r9, r0, r1
 8000fd8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fdc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fe0:	458e      	cmp	lr, r1
 8000fe2:	d908      	bls.n	8000ff6 <__udivmoddi4+0x1e2>
 8000fe4:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fec:	d26c      	bcs.n	80010c8 <__udivmoddi4+0x2b4>
 8000fee:	458e      	cmp	lr, r1
 8000ff0:	d96a      	bls.n	80010c8 <__udivmoddi4+0x2b4>
 8000ff2:	3802      	subs	r0, #2
 8000ff4:	4461      	add	r1, ip
 8000ff6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ffa:	fba0 9402 	umull	r9, r4, r0, r2
 8000ffe:	eba1 010e 	sub.w	r1, r1, lr
 8001002:	42a1      	cmp	r1, r4
 8001004:	46c8      	mov	r8, r9
 8001006:	46a6      	mov	lr, r4
 8001008:	d356      	bcc.n	80010b8 <__udivmoddi4+0x2a4>
 800100a:	d053      	beq.n	80010b4 <__udivmoddi4+0x2a0>
 800100c:	b15d      	cbz	r5, 8001026 <__udivmoddi4+0x212>
 800100e:	ebb3 0208 	subs.w	r2, r3, r8
 8001012:	eb61 010e 	sbc.w	r1, r1, lr
 8001016:	fa01 f707 	lsl.w	r7, r1, r7
 800101a:	fa22 f306 	lsr.w	r3, r2, r6
 800101e:	40f1      	lsrs	r1, r6
 8001020:	431f      	orrs	r7, r3
 8001022:	e9c5 7100 	strd	r7, r1, [r5]
 8001026:	2600      	movs	r6, #0
 8001028:	4631      	mov	r1, r6
 800102a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800102e:	f1c2 0320 	rsb	r3, r2, #32
 8001032:	40d8      	lsrs	r0, r3
 8001034:	fa0c fc02 	lsl.w	ip, ip, r2
 8001038:	fa21 f303 	lsr.w	r3, r1, r3
 800103c:	4091      	lsls	r1, r2
 800103e:	4301      	orrs	r1, r0
 8001040:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001044:	fa1f fe8c 	uxth.w	lr, ip
 8001048:	fbb3 f0f7 	udiv	r0, r3, r7
 800104c:	fb07 3610 	mls	r6, r7, r0, r3
 8001050:	0c0b      	lsrs	r3, r1, #16
 8001052:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001056:	fb00 f60e 	mul.w	r6, r0, lr
 800105a:	429e      	cmp	r6, r3
 800105c:	fa04 f402 	lsl.w	r4, r4, r2
 8001060:	d908      	bls.n	8001074 <__udivmoddi4+0x260>
 8001062:	eb1c 0303 	adds.w	r3, ip, r3
 8001066:	f100 38ff 	add.w	r8, r0, #4294967295
 800106a:	d22f      	bcs.n	80010cc <__udivmoddi4+0x2b8>
 800106c:	429e      	cmp	r6, r3
 800106e:	d92d      	bls.n	80010cc <__udivmoddi4+0x2b8>
 8001070:	3802      	subs	r0, #2
 8001072:	4463      	add	r3, ip
 8001074:	1b9b      	subs	r3, r3, r6
 8001076:	b289      	uxth	r1, r1
 8001078:	fbb3 f6f7 	udiv	r6, r3, r7
 800107c:	fb07 3316 	mls	r3, r7, r6, r3
 8001080:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001084:	fb06 f30e 	mul.w	r3, r6, lr
 8001088:	428b      	cmp	r3, r1
 800108a:	d908      	bls.n	800109e <__udivmoddi4+0x28a>
 800108c:	eb1c 0101 	adds.w	r1, ip, r1
 8001090:	f106 38ff 	add.w	r8, r6, #4294967295
 8001094:	d216      	bcs.n	80010c4 <__udivmoddi4+0x2b0>
 8001096:	428b      	cmp	r3, r1
 8001098:	d914      	bls.n	80010c4 <__udivmoddi4+0x2b0>
 800109a:	3e02      	subs	r6, #2
 800109c:	4461      	add	r1, ip
 800109e:	1ac9      	subs	r1, r1, r3
 80010a0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80010a4:	e738      	b.n	8000f18 <__udivmoddi4+0x104>
 80010a6:	462e      	mov	r6, r5
 80010a8:	4628      	mov	r0, r5
 80010aa:	e705      	b.n	8000eb8 <__udivmoddi4+0xa4>
 80010ac:	4606      	mov	r6, r0
 80010ae:	e6e3      	b.n	8000e78 <__udivmoddi4+0x64>
 80010b0:	4618      	mov	r0, r3
 80010b2:	e6f8      	b.n	8000ea6 <__udivmoddi4+0x92>
 80010b4:	454b      	cmp	r3, r9
 80010b6:	d2a9      	bcs.n	800100c <__udivmoddi4+0x1f8>
 80010b8:	ebb9 0802 	subs.w	r8, r9, r2
 80010bc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80010c0:	3801      	subs	r0, #1
 80010c2:	e7a3      	b.n	800100c <__udivmoddi4+0x1f8>
 80010c4:	4646      	mov	r6, r8
 80010c6:	e7ea      	b.n	800109e <__udivmoddi4+0x28a>
 80010c8:	4620      	mov	r0, r4
 80010ca:	e794      	b.n	8000ff6 <__udivmoddi4+0x1e2>
 80010cc:	4640      	mov	r0, r8
 80010ce:	e7d1      	b.n	8001074 <__udivmoddi4+0x260>
 80010d0:	46d0      	mov	r8, sl
 80010d2:	e77b      	b.n	8000fcc <__udivmoddi4+0x1b8>
 80010d4:	3b02      	subs	r3, #2
 80010d6:	4461      	add	r1, ip
 80010d8:	e732      	b.n	8000f40 <__udivmoddi4+0x12c>
 80010da:	4630      	mov	r0, r6
 80010dc:	e709      	b.n	8000ef2 <__udivmoddi4+0xde>
 80010de:	4464      	add	r4, ip
 80010e0:	3802      	subs	r0, #2
 80010e2:	e742      	b.n	8000f6a <__udivmoddi4+0x156>

080010e4 <__aeabi_idiv0>:
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop

080010e8 <PID_Init>:
#include "PID.h"

/**
 * @brief PID init parameters
 */
void PID_Init(PID_Def_t *pidx,float Kp,float Ki,float Kd,float Ts,float Umin,float Umax){
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b088      	sub	sp, #32
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	61f8      	str	r0, [r7, #28]
 80010f0:	ed87 0a06 	vstr	s0, [r7, #24]
 80010f4:	edc7 0a05 	vstr	s1, [r7, #20]
 80010f8:	ed87 1a04 	vstr	s2, [r7, #16]
 80010fc:	edc7 1a03 	vstr	s3, [r7, #12]
 8001100:	ed87 2a02 	vstr	s4, [r7, #8]
 8001104:	edc7 2a01 	vstr	s5, [r7, #4]
	memset(pidx,0,sizeof(&pidx));
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	2204      	movs	r2, #4
 800110c:	2100      	movs	r1, #0
 800110e:	4618      	mov	r0, r3
 8001110:	f00a fd81 	bl	800bc16 <memset>
	pidx->Kp = Kp;
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	601a      	str	r2, [r3, #0]
	pidx->Ki = Ki;
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	697a      	ldr	r2, [r7, #20]
 800111e:	605a      	str	r2, [r3, #4]
	pidx->Kd = Kd;
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	609a      	str	r2, [r3, #8]
	pidx->Kaw = Ki/Kp;
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	edd7 6a05 	vldr	s13, [r7, #20]
 800112c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001130:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001134:	edc3 7a03 	vstr	s15, [r3, #12]
	pidx->Ts = Ts;
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	611a      	str	r2, [r3, #16]
	pidx->Umin = Umin;
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	68ba      	ldr	r2, [r7, #8]
 8001142:	62da      	str	r2, [r3, #44]	; 0x2c
	pidx->Umax = Umax;
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	631a      	str	r2, [r3, #48]	; 0x30
}
 800114a:	bf00      	nop
 800114c:	3720      	adds	r7, #32
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <PID_Compute>:

/**
 * @brief compute pid
 */
float PID_Compute(PID_Def_t *pidx, float Ref, float yk){
 8001152:	b480      	push	{r7}
 8001154:	b087      	sub	sp, #28
 8001156:	af00      	add	r7, sp, #0
 8001158:	60f8      	str	r0, [r7, #12]
 800115a:	ed87 0a02 	vstr	s0, [r7, #8]
 800115e:	edc7 0a01 	vstr	s1, [r7, #4]
	float e_1 = pidx->e;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	695b      	ldr	r3, [r3, #20]
 8001166:	613b      	str	r3, [r7, #16]
	float Uk;
	pidx->e = Ref - yk;
 8001168:	ed97 7a02 	vldr	s14, [r7, #8]
 800116c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001170:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	edc3 7a05 	vstr	s15, [r3, #20]
	/*parte proporcional*/
	pidx->Pk = pidx->e * pidx->Kp;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	edd3 7a00 	vldr	s15, [r3]
 8001186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	edc3 7a06 	vstr	s15, [r3, #24]
	/*parte integral*/
	pidx->Ik += pidx->Ts*pidx->Ki*pidx->e + pidx->Ts*pidx->Kaw*pidx->Wk;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	ed93 7a07 	vldr	s14, [r3, #28]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	edd3 6a04 	vldr	s13, [r3, #16]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	edd3 7a01 	vldr	s15, [r3, #4]
 80011a2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	edd3 7a05 	vldr	s15, [r3, #20]
 80011ac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	ed93 6a04 	vldr	s12, [r3, #16]
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	edd3 7a03 	vldr	s15, [r3, #12]
 80011bc:	ee26 6a27 	vmul.f32	s12, s12, s15
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80011c6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80011ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80011ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	edc3 7a07 	vstr	s15, [r3, #28]
	/*parte derivativa*/
	pidx->Dk = (pidx->Kd/pidx->Ts)*(pidx->e - e_1);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	edd3 6a02 	vldr	s13, [r3, #8]
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	edd3 7a04 	vldr	s15, [r3, #16]
 80011e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	edd3 6a05 	vldr	s13, [r3, #20]
 80011ee:	edd7 7a04 	vldr	s15, [r7, #16]
 80011f2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80011f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	edc3 7a08 	vstr	s15, [r3, #32]
	/*salida pid*/
	pidx->Vk = pidx->Pk + pidx->Ik + pidx->Dk;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	ed93 7a06 	vldr	s14, [r3, #24]
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	edd3 7a07 	vldr	s15, [r3, #28]
 800120c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	edd3 7a08 	vldr	s15, [r3, #32]
 8001216:	ee77 7a27 	vadd.f32	s15, s14, s15
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	/*saturador*/
	if(pidx->Vk > pidx->Umax)
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800122c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001234:	dd03      	ble.n	800123e <PID_Compute+0xec>
		Uk = pidx->Umax;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	617b      	str	r3, [r7, #20]
 800123c:	e011      	b.n	8001262 <PID_Compute+0x110>
	else if(pidx->Vk < pidx->Umin)
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800124a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800124e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001252:	d503      	bpl.n	800125c <PID_Compute+0x10a>
		Uk = pidx->Umin;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001258:	617b      	str	r3, [r7, #20]
 800125a:	e002      	b.n	8001262 <PID_Compute+0x110>
	else
		Uk = pidx->Vk;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001260:	617b      	str	r3, [r7, #20]
	/*error wind up*/
	pidx->Wk = Uk - pidx->Vk;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001268:	ed97 7a05 	vldr	s14, [r7, #20]
 800126c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	/*se retorna la salida el valor calculado*/
	return Uk;
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	ee07 3a90 	vmov	s15, r3
}
 800127c:	eeb0 0a67 	vmov.f32	s0, s15
 8001280:	371c      	adds	r7, #28
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
	...

0800128c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	4a07      	ldr	r2, [pc, #28]	; (80012b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800129c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	4a06      	ldr	r2, [pc, #24]	; (80012bc <vApplicationGetIdleTaskMemory+0x30>)
 80012a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2280      	movs	r2, #128	; 0x80
 80012a8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80012aa:	bf00      	nop
 80012ac:	3714      	adds	r7, #20
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	20000258 	.word	0x20000258
 80012bc:	2000030c 	.word	0x2000030c

080012c0 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	4a07      	ldr	r2, [pc, #28]	; (80012ec <vApplicationGetTimerTaskMemory+0x2c>)
 80012d0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	4a06      	ldr	r2, [pc, #24]	; (80012f0 <vApplicationGetTimerTaskMemory+0x30>)
 80012d6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012de:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80012e0:	bf00      	nop
 80012e2:	3714      	adds	r7, #20
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	2000050c 	.word	0x2000050c
 80012f0:	200005c0 	.word	0x200005c0

080012f4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80012f4:	b5b0      	push	{r4, r5, r7, lr}
 80012f6:	b09c      	sub	sp, #112	; 0x70
 80012f8:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of DataSem */
  osSemaphoreDef(DataSem);
 80012fa:	2300      	movs	r3, #0
 80012fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80012fe:	2300      	movs	r3, #0
 8001300:	663b      	str	r3, [r7, #96]	; 0x60
  DataSemHandle = osSemaphoreCreate(osSemaphore(DataSem), 1);
 8001302:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001306:	2101      	movs	r1, #1
 8001308:	4618      	mov	r0, r3
 800130a:	f005 f831 	bl	8006370 <osSemaphoreCreate>
 800130e:	4603      	mov	r3, r0
 8001310:	4a4d      	ldr	r2, [pc, #308]	; (8001448 <MX_FREERTOS_Init+0x154>)
 8001312:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of GetData */
  osTimerDef(GetData, GetDataMotorDC);
 8001314:	4b4d      	ldr	r3, [pc, #308]	; (800144c <MX_FREERTOS_Init+0x158>)
 8001316:	657b      	str	r3, [r7, #84]	; 0x54
 8001318:	2300      	movs	r3, #0
 800131a:	65bb      	str	r3, [r7, #88]	; 0x58
  GetDataHandle = osTimerCreate(osTimer(GetData), osTimerPeriodic, NULL);
 800131c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001320:	2200      	movs	r2, #0
 8001322:	2101      	movs	r1, #1
 8001324:	4618      	mov	r0, r3
 8001326:	f004 ff65 	bl	80061f4 <osTimerCreate>
 800132a:	4603      	mov	r3, r0
 800132c:	4a48      	ldr	r2, [pc, #288]	; (8001450 <MX_FREERTOS_Init+0x15c>)
 800132e:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  RxQueue = xQueueCreate(10,sizeof(uint8_t));				//queue rx data
 8001330:	2200      	movs	r2, #0
 8001332:	2101      	movs	r1, #1
 8001334:	200a      	movs	r0, #10
 8001336:	f005 faab 	bl	8006890 <xQueueGenericCreate>
 800133a:	4603      	mov	r3, r0
 800133c:	4a45      	ldr	r2, [pc, #276]	; (8001454 <MX_FREERTOS_Init+0x160>)
 800133e:	6013      	str	r3, [r2, #0]
  configASSERT(RxQueue != NULL);
 8001340:	4b44      	ldr	r3, [pc, #272]	; (8001454 <MX_FREERTOS_Init+0x160>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d10c      	bne.n	8001362 <MX_FREERTOS_Init+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800134c:	b672      	cpsid	i
 800134e:	f383 8811 	msr	BASEPRI, r3
 8001352:	f3bf 8f6f 	isb	sy
 8001356:	f3bf 8f4f 	dsb	sy
 800135a:	b662      	cpsie	i
 800135c:	66fb      	str	r3, [r7, #108]	; 0x6c
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800135e:	bf00      	nop
 8001360:	e7fe      	b.n	8001360 <MX_FREERTOS_Init+0x6c>

  radsQueue = xQueueCreate(2,sizeof(float32_t));			//rads calculados
 8001362:	2200      	movs	r2, #0
 8001364:	2104      	movs	r1, #4
 8001366:	2002      	movs	r0, #2
 8001368:	f005 fa92 	bl	8006890 <xQueueGenericCreate>
 800136c:	4603      	mov	r3, r0
 800136e:	4a3a      	ldr	r2, [pc, #232]	; (8001458 <MX_FREERTOS_Init+0x164>)
 8001370:	6013      	str	r3, [r2, #0]
  configASSERT(radsQueue != NULL);
 8001372:	4b39      	ldr	r3, [pc, #228]	; (8001458 <MX_FREERTOS_Init+0x164>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d10c      	bne.n	8001394 <MX_FREERTOS_Init+0xa0>
	__asm volatile
 800137a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800137e:	b672      	cpsid	i
 8001380:	f383 8811 	msr	BASEPRI, r3
 8001384:	f3bf 8f6f 	isb	sy
 8001388:	f3bf 8f4f 	dsb	sy
 800138c:	b662      	cpsie	i
 800138e:	66bb      	str	r3, [r7, #104]	; 0x68
}
 8001390:	bf00      	nop
 8001392:	e7fe      	b.n	8001392 <MX_FREERTOS_Init+0x9e>

  RefQueue = xQueueCreate(16,sizeof(float32_t));				//referencia leida
 8001394:	2200      	movs	r2, #0
 8001396:	2104      	movs	r1, #4
 8001398:	2010      	movs	r0, #16
 800139a:	f005 fa79 	bl	8006890 <xQueueGenericCreate>
 800139e:	4603      	mov	r3, r0
 80013a0:	4a2e      	ldr	r2, [pc, #184]	; (800145c <MX_FREERTOS_Init+0x168>)
 80013a2:	6013      	str	r3, [r2, #0]
  configASSERT(RefQueue != NULL);
 80013a4:	4b2d      	ldr	r3, [pc, #180]	; (800145c <MX_FREERTOS_Init+0x168>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d10c      	bne.n	80013c6 <MX_FREERTOS_Init+0xd2>
	__asm volatile
 80013ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013b0:	b672      	cpsid	i
 80013b2:	f383 8811 	msr	BASEPRI, r3
 80013b6:	f3bf 8f6f 	isb	sy
 80013ba:	f3bf 8f4f 	dsb	sy
 80013be:	b662      	cpsie	i
 80013c0:	667b      	str	r3, [r7, #100]	; 0x64
}
 80013c2:	bf00      	nop
 80013c4:	e7fe      	b.n	80013c4 <MX_FREERTOS_Init+0xd0>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Data */
  osThreadDef(Data, SensorTask, osPriorityAboveNormal, 0, 2048);
 80013c6:	4b26      	ldr	r3, [pc, #152]	; (8001460 <MX_FREERTOS_Init+0x16c>)
 80013c8:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80013cc:	461d      	mov	r5, r3
 80013ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DataHandle = osThreadCreate(osThread(Data), NULL);
 80013da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013de:	2100      	movs	r1, #0
 80013e0:	4618      	mov	r0, r3
 80013e2:	f004 feba 	bl	800615a <osThreadCreate>
 80013e6:	4603      	mov	r3, r0
 80013e8:	4a1e      	ldr	r2, [pc, #120]	; (8001464 <MX_FREERTOS_Init+0x170>)
 80013ea:	6013      	str	r3, [r2, #0]

  /* definition and creation of PID_Motor */
  osThreadDef(PID_Motor, PID_Task, osPriorityNormal, 0, 128);
 80013ec:	4b1e      	ldr	r3, [pc, #120]	; (8001468 <MX_FREERTOS_Init+0x174>)
 80013ee:	f107 041c 	add.w	r4, r7, #28
 80013f2:	461d      	mov	r5, r3
 80013f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PID_MotorHandle = osThreadCreate(osThread(PID_Motor), NULL);
 8001400:	f107 031c 	add.w	r3, r7, #28
 8001404:	2100      	movs	r1, #0
 8001406:	4618      	mov	r0, r3
 8001408:	f004 fea7 	bl	800615a <osThreadCreate>
 800140c:	4603      	mov	r3, r0
 800140e:	4a17      	ldr	r2, [pc, #92]	; (800146c <MX_FREERTOS_Init+0x178>)
 8001410:	6013      	str	r3, [r2, #0]

  /* definition and creation of LabViewRX */
  osThreadDef(LabViewRX, LabViewRX_Task, osPriorityAboveNormal, 0, 128);
 8001412:	4b17      	ldr	r3, [pc, #92]	; (8001470 <MX_FREERTOS_Init+0x17c>)
 8001414:	463c      	mov	r4, r7
 8001416:	461d      	mov	r5, r3
 8001418:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800141a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800141c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001420:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LabViewRXHandle = osThreadCreate(osThread(LabViewRX), NULL);
 8001424:	463b      	mov	r3, r7
 8001426:	2100      	movs	r1, #0
 8001428:	4618      	mov	r0, r3
 800142a:	f004 fe96 	bl	800615a <osThreadCreate>
 800142e:	4603      	mov	r3, r0
 8001430:	4a10      	ldr	r2, [pc, #64]	; (8001474 <MX_FREERTOS_Init+0x180>)
 8001432:	6013      	str	r3, [r2, #0]
  /* definition and creation of LabViewTX */


  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  HAL_UART_Receive_IT(&huart3, &byte, 1);
 8001434:	2201      	movs	r2, #1
 8001436:	4910      	ldr	r1, [pc, #64]	; (8001478 <MX_FREERTOS_Init+0x184>)
 8001438:	4810      	ldr	r0, [pc, #64]	; (800147c <MX_FREERTOS_Init+0x188>)
 800143a:	f003 fea2 	bl	8005182 <HAL_UART_Receive_IT>
  /* USER CODE END RTOS_THREADS */

}
 800143e:	bf00      	nop
 8001440:	3770      	adds	r7, #112	; 0x70
 8001442:	46bd      	mov	sp, r7
 8001444:	bdb0      	pop	{r4, r5, r7, pc}
 8001446:	bf00      	nop
 8001448:	20000254 	.word	0x20000254
 800144c:	080017f5 	.word	0x080017f5
 8001450:	20000250 	.word	0x20000250
 8001454:	20000238 	.word	0x20000238
 8001458:	2000023c 	.word	0x2000023c
 800145c:	20000240 	.word	0x20000240
 8001460:	08010400 	.word	0x08010400
 8001464:	20000244 	.word	0x20000244
 8001468:	0801041c 	.word	0x0801041c
 800146c:	20000248 	.word	0x20000248
 8001470:	08010438 	.word	0x08010438
 8001474:	2000024c 	.word	0x2000024c
 8001478:	20000200 	.word	0x20000200
 800147c:	20000aa8 	.word	0x20000aa8

08001480 <SensorTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_SensorTask */
void SensorTask(void const * argument)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08a      	sub	sp, #40	; 0x28
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	uint8_t buffer[20];
  /* Infinite loop */
  for(;;)
  {
	  /*wait semaphore */
	  osSemaphoreWait(DataSemHandle, osWaitForever);
 8001488:	4b2f      	ldr	r3, [pc, #188]	; (8001548 <SensorTask+0xc8>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f04f 31ff 	mov.w	r1, #4294967295
 8001490:	4618      	mov	r0, r3
 8001492:	f004 ff9f 	bl	80063d4 <osSemaphoreWait>
	  /* get data from motor dc */
	  taskENTER_CRITICAL();
 8001496:	f008 f929 	bl	80096ec <vPortEnterCritical>
	  pulses = __HAL_TIM_GET_COUNTER(&htim2);
 800149a:	4b2c      	ldr	r3, [pc, #176]	; (800154c <SensorTask+0xcc>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a0:	84fb      	strh	r3, [r7, #38]	; 0x26
	  __HAL_TIM_SET_COUNTER(&htim2,0);
 80014a2:	4b2a      	ldr	r3, [pc, #168]	; (800154c <SensorTask+0xcc>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2200      	movs	r2, #0
 80014a8:	625a      	str	r2, [r3, #36]	; 0x24
	  /* calc rpm and rads */
	  rpm = pulses * 60.0 /(Ts * S);
 80014aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff f8b1 	bl	8000614 <__aeabi_i2d>
 80014b2:	f04f 0200 	mov.w	r2, #0
 80014b6:	4b26      	ldr	r3, [pc, #152]	; (8001550 <SensorTask+0xd0>)
 80014b8:	f7ff f916 	bl	80006e8 <__aeabi_dmul>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	4610      	mov	r0, r2
 80014c2:	4619      	mov	r1, r3
 80014c4:	a31e      	add	r3, pc, #120	; (adr r3, 8001540 <SensorTask+0xc0>)
 80014c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ca:	f7ff fa37 	bl	800093c <__aeabi_ddiv>
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	4610      	mov	r0, r2
 80014d4:	4619      	mov	r1, r3
 80014d6:	f7ff fbff 	bl	8000cd8 <__aeabi_d2f>
 80014da:	4603      	mov	r3, r0
 80014dc:	623b      	str	r3, [r7, #32]
	  rads = rpm * (2 * PI ) / 60;
 80014de:	edd7 7a08 	vldr	s15, [r7, #32]
 80014e2:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001554 <SensorTask+0xd4>
 80014e6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014ea:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8001558 <SensorTask+0xd8>
 80014ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014f2:	edc7 7a07 	vstr	s15, [r7, #28]
	  /* send rads to pid task */
	  xQueueSend(radsQueue,&rads,100);
 80014f6:	4b19      	ldr	r3, [pc, #100]	; (800155c <SensorTask+0xdc>)
 80014f8:	6818      	ldr	r0, [r3, #0]
 80014fa:	f107 011c 	add.w	r1, r7, #28
 80014fe:	2300      	movs	r3, #0
 8001500:	2264      	movs	r2, #100	; 0x64
 8001502:	f005 fa2d 	bl	8006960 <xQueueGenericSend>

	  /*send data to labview*/
	  sprintf((char*)buffer, "%.2f\r\n",rads);
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff f895 	bl	8000638 <__aeabi_f2d>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	f107 0008 	add.w	r0, r7, #8
 8001516:	4912      	ldr	r1, [pc, #72]	; (8001560 <SensorTask+0xe0>)
 8001518:	f00b fb14 	bl	800cb44 <siprintf>
	  HAL_UART_Transmit(&huart3,buffer,strlen((char*)buffer),5);
 800151c:	f107 0308 	add.w	r3, r7, #8
 8001520:	4618      	mov	r0, r3
 8001522:	f7fe fec7 	bl	80002b4 <strlen>
 8001526:	4603      	mov	r3, r0
 8001528:	b29a      	uxth	r2, r3
 800152a:	f107 0108 	add.w	r1, r7, #8
 800152e:	2305      	movs	r3, #5
 8001530:	480c      	ldr	r0, [pc, #48]	; (8001564 <SensorTask+0xe4>)
 8001532:	f003 fd93 	bl	800505c <HAL_UART_Transmit>
	  taskEXIT_CRITICAL();
 8001536:	f008 f90d 	bl	8009754 <vPortExitCritical>
	  osSemaphoreWait(DataSemHandle, osWaitForever);
 800153a:	e7a5      	b.n	8001488 <SensorTask+0x8>
 800153c:	f3af 8000 	nop.w
 8001540:	33333333 	.word	0x33333333
 8001544:	40033333 	.word	0x40033333
 8001548:	20000254 	.word	0x20000254
 800154c:	20000a10 	.word	0x20000a10
 8001550:	404e0000 	.word	0x404e0000
 8001554:	40c90fdb 	.word	0x40c90fdb
 8001558:	42700000 	.word	0x42700000
 800155c:	2000023c 	.word	0x2000023c
 8001560:	08010454 	.word	0x08010454
 8001564:	20000aa8 	.word	0x20000aa8

08001568 <PID_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_PID_Task */
void PID_Task(void const * argument)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b088      	sub	sp, #32
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PID_Task */
	float32_t ref = 0;
 8001570:	f04f 0300 	mov.w	r3, #0
 8001574:	613b      	str	r3, [r7, #16]
	float32_t _ref = ref;
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	61fb      	str	r3, [r7, #28]

//	PID.Kp = PID_PARAM_KP;		/* Proporcional */
//	PID.Ki = PID_PARAM_KI;		/* Integral */
//	PID.Kd = PID_PARAM_KD;		/* Derivative */
	//arm_pid_init_f32(&PID, 1);
	PID_Init(&MotorDC, KP, KI, KD, Ts, UMIN, UMAX);
 800157a:	eddf 2a2d 	vldr	s5, [pc, #180]	; 8001630 <PID_Task+0xc8>
 800157e:	ed9f 2a2d 	vldr	s4, [pc, #180]	; 8001634 <PID_Task+0xcc>
 8001582:	eddf 1a2d 	vldr	s3, [pc, #180]	; 8001638 <PID_Task+0xd0>
 8001586:	ed9f 1a2d 	vldr	s2, [pc, #180]	; 800163c <PID_Task+0xd4>
 800158a:	eddf 0a2d 	vldr	s1, [pc, #180]	; 8001640 <PID_Task+0xd8>
 800158e:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8001644 <PID_Task+0xdc>
 8001592:	482d      	ldr	r0, [pc, #180]	; (8001648 <PID_Task+0xe0>)
 8001594:	f7ff fda8 	bl	80010e8 <PID_Init>
  /* Infinite loop */
  for(;;)
  {
	  if(xQueueReceive(RefQueue, &ref, 0) == pdPASS)		//se lee la referencia en caso se cambió
 8001598:	4b2c      	ldr	r3, [pc, #176]	; (800164c <PID_Task+0xe4>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f107 0110 	add.w	r1, r7, #16
 80015a0:	2200      	movs	r2, #0
 80015a2:	4618      	mov	r0, r3
 80015a4:	f005 fc68 	bl	8006e78 <xQueueReceive>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d101      	bne.n	80015b2 <PID_Task+0x4a>
		  _ref = ref;
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	61fb      	str	r3, [r7, #28]
	  xQueueReceive(radsQueue, &rads, portMAX_DELAY);
 80015b2:	4b27      	ldr	r3, [pc, #156]	; (8001650 <PID_Task+0xe8>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f107 010c 	add.w	r1, r7, #12
 80015ba:	f04f 32ff 	mov.w	r2, #4294967295
 80015be:	4618      	mov	r0, r3
 80015c0:	f005 fc5a 	bl	8006e78 <xQueueReceive>
	  /*pid calc*/
	  taskENTER_CRITICAL();
 80015c4:	f008 f892 	bl	80096ec <vPortEnterCritical>
	  /* calc error*/
	  //pid_error = ref - rads;
	  /* calc pid */
	  uc = PID_Compute(&MotorDC, _ref, rads);
 80015c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80015cc:	eef0 0a67 	vmov.f32	s1, s15
 80015d0:	ed97 0a07 	vldr	s0, [r7, #28]
 80015d4:	481c      	ldr	r0, [pc, #112]	; (8001648 <PID_Task+0xe0>)
 80015d6:	f7ff fdbc 	bl	8001152 <PID_Compute>
 80015da:	ed87 0a06 	vstr	s0, [r7, #24]
	  /* anti wind up */
	  /* calc duty */
	  duty = (uint16_t) ( uc * htim4.Instance->ARR / UC_MAX);
 80015de:	4b1d      	ldr	r3, [pc, #116]	; (8001654 <PID_Task+0xec>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e4:	ee07 3a90 	vmov	s15, r3
 80015e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015ec:	edd7 7a06 	vldr	s15, [r7, #24]
 80015f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015f4:	ee17 0a90 	vmov	r0, s15
 80015f8:	f7ff f81e 	bl	8000638 <__aeabi_f2d>
 80015fc:	a30a      	add	r3, pc, #40	; (adr r3, 8001628 <PID_Task+0xc0>)
 80015fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001602:	f7ff f99b 	bl	800093c <__aeabi_ddiv>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	4610      	mov	r0, r2
 800160c:	4619      	mov	r1, r3
 800160e:	f7ff fb43 	bl	8000c98 <__aeabi_d2uiz>
 8001612:	4603      	mov	r3, r0
 8001614:	82fb      	strh	r3, [r7, #22]
	  /* set duty*/
	  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4,duty);
 8001616:	4b0f      	ldr	r3, [pc, #60]	; (8001654 <PID_Task+0xec>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	8afa      	ldrh	r2, [r7, #22]
 800161c:	641a      	str	r2, [r3, #64]	; 0x40
	  taskEXIT_CRITICAL();
 800161e:	f008 f899 	bl	8009754 <vPortExitCritical>
	  if(xQueueReceive(RefQueue, &ref, 0) == pdPASS)		//se lee la referencia en caso se cambió
 8001622:	e7b9      	b.n	8001598 <PID_Task+0x30>
 8001624:	f3af 8000 	nop.w
 8001628:	cccccccd 	.word	0xcccccccd
 800162c:	4020cccc 	.word	0x4020cccc
 8001630:	4109999a 	.word	0x4109999a
 8001634:	00000000 	.word	0x00000000
 8001638:	3ca3d70a 	.word	0x3ca3d70a
 800163c:	39f12c28 	.word	0x39f12c28
 8001640:	3f8f62b7 	.word	0x3f8f62b7
 8001644:	3d3923a3 	.word	0x3d3923a3
 8001648:	20000204 	.word	0x20000204
 800164c:	20000240 	.word	0x20000240
 8001650:	2000023c 	.word	0x2000023c
 8001654:	20000a5c 	.word	0x20000a5c

08001658 <LabViewRX_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LabViewRX_Task */
void LabViewRX_Task(void const * argument)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b08a      	sub	sp, #40	; 0x28
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LabViewRX_Task */
	uint8_t data[20];
	uint8_t _byte;
	uint8_t i = 0;
 8001660:	2300      	movs	r3, #0
 8001662:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	float32_t ref;
  /* Infinite loop */

	osThreadSuspend(PID_MotorHandle);
 8001666:	4b5c      	ldr	r3, [pc, #368]	; (80017d8 <LabViewRX_Task+0x180>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4618      	mov	r0, r3
 800166c:	f004 ff40 	bl	80064f0 <osThreadSuspend>
	osThreadSuspend(DataHandle);
 8001670:	4b5a      	ldr	r3, [pc, #360]	; (80017dc <LabViewRX_Task+0x184>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4618      	mov	r0, r3
 8001676:	f004 ff3b 	bl	80064f0 <osThreadSuspend>
	osTimerStop(GetDataHandle);
 800167a:	4b59      	ldr	r3, [pc, #356]	; (80017e0 <LabViewRX_Task+0x188>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f004 fe36 	bl	80062f0 <osTimerStop>
  for(;;)
  {
    xQueueReceive(RxQueue, &_byte, portMAX_DELAY);
 8001684:	4b57      	ldr	r3, [pc, #348]	; (80017e4 <LabViewRX_Task+0x18c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f107 010f 	add.w	r1, r7, #15
 800168c:	f04f 32ff 	mov.w	r2, #4294967295
 8001690:	4618      	mov	r0, r3
 8001692:	f005 fbf1 	bl	8006e78 <xQueueReceive>

    taskENTER_CRITICAL();
 8001696:	f008 f829 	bl	80096ec <vPortEnterCritical>
    if((_byte != 'x') && (_byte != 'c')){
 800169a:	7bfb      	ldrb	r3, [r7, #15]
 800169c:	2b78      	cmp	r3, #120	; 0x78
 800169e:	d00f      	beq.n	80016c0 <LabViewRX_Task+0x68>
 80016a0:	7bfb      	ldrb	r3, [r7, #15]
 80016a2:	2b63      	cmp	r3, #99	; 0x63
 80016a4:	d00c      	beq.n	80016c0 <LabViewRX_Task+0x68>
    	data[i] = _byte;
 80016a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016aa:	7bfa      	ldrb	r2, [r7, #15]
 80016ac:	3328      	adds	r3, #40	; 0x28
 80016ae:	443b      	add	r3, r7
 80016b0:	f803 2c18 	strb.w	r2, [r3, #-24]
    	i++;
 80016b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016b8:	3301      	adds	r3, #1
 80016ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80016be:	e088      	b.n	80017d2 <LabViewRX_Task+0x17a>
    }
    else if(_byte == 'c'){
 80016c0:	7bfb      	ldrb	r3, [r7, #15]
 80016c2:	2b63      	cmp	r3, #99	; 0x63
 80016c4:	d14a      	bne.n	800175c <LabViewRX_Task+0x104>

    	if(data[0] == '1'){
 80016c6:	7c3b      	ldrb	r3, [r7, #16]
 80016c8:	2b31      	cmp	r3, #49	; 0x31
 80016ca:	d125      	bne.n	8001718 <LabViewRX_Task+0xc0>

    		xQueueReset(RxQueue);
 80016cc:	4b45      	ldr	r3, [pc, #276]	; (80017e4 <LabViewRX_Task+0x18c>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2100      	movs	r1, #0
 80016d2:	4618      	mov	r0, r3
 80016d4:	f004 fff0 	bl	80066b8 <xQueueGenericReset>
    		HAL_TIM_Base_Start(&htim2);						//Lecutura de pulsos del encoder
 80016d8:	4843      	ldr	r0, [pc, #268]	; (80017e8 <LabViewRX_Task+0x190>)
 80016da:	f002 fa17 	bl	8003b0c <HAL_TIM_Base_Start>
    		__HAL_TIM_SET_COUNTER(&htim2,0);
 80016de:	4b42      	ldr	r3, [pc, #264]	; (80017e8 <LabViewRX_Task+0x190>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2200      	movs	r2, #0
 80016e4:	625a      	str	r2, [r3, #36]	; 0x24
    		HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);		//se inicia el PWM
 80016e6:	210c      	movs	r1, #12
 80016e8:	4840      	ldr	r0, [pc, #256]	; (80017ec <LabViewRX_Task+0x194>)
 80016ea:	f002 fb77 	bl	8003ddc <HAL_TIM_PWM_Start>
    		__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4,0);
 80016ee:	4b3f      	ldr	r3, [pc, #252]	; (80017ec <LabViewRX_Task+0x194>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2200      	movs	r2, #0
 80016f4:	641a      	str	r2, [r3, #64]	; 0x40
    		/*start task and timer*/
    		osThreadResume(PID_MotorHandle);
 80016f6:	4b38      	ldr	r3, [pc, #224]	; (80017d8 <LabViewRX_Task+0x180>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f004 ff04 	bl	8006508 <osThreadResume>
    		osThreadResume(DataHandle);
 8001700:	4b36      	ldr	r3, [pc, #216]	; (80017dc <LabViewRX_Task+0x184>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f004 feff 	bl	8006508 <osThreadResume>
    		osTimerStart(GetDataHandle, 20);				//inicia el muestreo del dato
 800170a:	4b35      	ldr	r3, [pc, #212]	; (80017e0 <LabViewRX_Task+0x188>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2114      	movs	r1, #20
 8001710:	4618      	mov	r0, r3
 8001712:	f004 fda3 	bl	800625c <osTimerStart>
 8001716:	e015      	b.n	8001744 <LabViewRX_Task+0xec>

    	}else{
    		HAL_TIM_Base_Stop(&htim2);
 8001718:	4833      	ldr	r0, [pc, #204]	; (80017e8 <LabViewRX_Task+0x190>)
 800171a:	f002 fa67 	bl	8003bec <HAL_TIM_Base_Stop>
    		HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4);
 800171e:	210c      	movs	r1, #12
 8001720:	4832      	ldr	r0, [pc, #200]	; (80017ec <LabViewRX_Task+0x194>)
 8001722:	f002 fc55 	bl	8003fd0 <HAL_TIM_PWM_Stop>
    		/* suspend task and stop software timer */
    		osThreadSuspend(PID_MotorHandle);
 8001726:	4b2c      	ldr	r3, [pc, #176]	; (80017d8 <LabViewRX_Task+0x180>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4618      	mov	r0, r3
 800172c:	f004 fee0 	bl	80064f0 <osThreadSuspend>
    		osThreadSuspend(DataHandle);
 8001730:	4b2a      	ldr	r3, [pc, #168]	; (80017dc <LabViewRX_Task+0x184>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4618      	mov	r0, r3
 8001736:	f004 fedb 	bl	80064f0 <osThreadSuspend>
    		osTimerStop(GetDataHandle);
 800173a:	4b29      	ldr	r3, [pc, #164]	; (80017e0 <LabViewRX_Task+0x188>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4618      	mov	r0, r3
 8001740:	f004 fdd6 	bl	80062f0 <osTimerStop>
    	}
    	/*reset buffer*/
		memset(data,0,i);
 8001744:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001748:	f107 0310 	add.w	r3, r7, #16
 800174c:	2100      	movs	r1, #0
 800174e:	4618      	mov	r0, r3
 8001750:	f00a fa61 	bl	800bc16 <memset>
		i = 0;
 8001754:	2300      	movs	r3, #0
 8001756:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800175a:	e03a      	b.n	80017d2 <LabViewRX_Task+0x17a>
    }
    else{
    	xQueueReset(RxQueue);
 800175c:	4b21      	ldr	r3, [pc, #132]	; (80017e4 <LabViewRX_Task+0x18c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2100      	movs	r1, #0
 8001762:	4618      	mov	r0, r3
 8001764:	f004 ffa8 	bl	80066b8 <xQueueGenericReset>
    	data[i] = '\0';										//caracter de terminacion para la cadena
 8001768:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800176c:	3328      	adds	r3, #40	; 0x28
 800176e:	443b      	add	r3, r7
 8001770:	2200      	movs	r2, #0
 8001772:	f803 2c18 	strb.w	r2, [r3, #-24]
    	ref = atof((char*)data);							//se obtiene el valor numerico
 8001776:	f107 0310 	add.w	r3, r7, #16
 800177a:	4618      	mov	r0, r3
 800177c:	f00a f907 	bl	800b98e <atof>
 8001780:	ec53 2b10 	vmov	r2, r3, d0
 8001784:	4610      	mov	r0, r2
 8001786:	4619      	mov	r1, r3
 8001788:	f7ff faa6 	bl	8000cd8 <__aeabi_d2f>
 800178c:	4603      	mov	r3, r0
 800178e:	60bb      	str	r3, [r7, #8]
    	memset(data,0,i);
 8001790:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001794:	f107 0310 	add.w	r3, r7, #16
 8001798:	2100      	movs	r1, #0
 800179a:	4618      	mov	r0, r3
 800179c:	f00a fa3b 	bl	800bc16 <memset>
    	i = 0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    	/*se verifica el espacio disponible*/
    	if(uxQueueSpacesAvailable(RxQueue) == 0)
 80017a6:	4b0f      	ldr	r3, [pc, #60]	; (80017e4 <LabViewRX_Task+0x18c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f005 fe62 	bl	8007474 <uxQueueSpacesAvailable>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d105      	bne.n	80017c2 <LabViewRX_Task+0x16a>
    		xQueueReset(RxQueue);							//reset queue
 80017b6:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <LabViewRX_Task+0x18c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2100      	movs	r1, #0
 80017bc:	4618      	mov	r0, r3
 80017be:	f004 ff7b 	bl	80066b8 <xQueueGenericReset>
    	/*se envia el queue hacia pid task*/
    	xQueueSend(RefQueue,&ref,20);
 80017c2:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <LabViewRX_Task+0x198>)
 80017c4:	6818      	ldr	r0, [r3, #0]
 80017c6:	f107 0108 	add.w	r1, r7, #8
 80017ca:	2300      	movs	r3, #0
 80017cc:	2214      	movs	r2, #20
 80017ce:	f005 f8c7 	bl	8006960 <xQueueGenericSend>
    }
    taskEXIT_CRITICAL();
 80017d2:	f007 ffbf 	bl	8009754 <vPortExitCritical>
    xQueueReceive(RxQueue, &_byte, portMAX_DELAY);
 80017d6:	e755      	b.n	8001684 <LabViewRX_Task+0x2c>
 80017d8:	20000248 	.word	0x20000248
 80017dc:	20000244 	.word	0x20000244
 80017e0:	20000250 	.word	0x20000250
 80017e4:	20000238 	.word	0x20000238
 80017e8:	20000a10 	.word	0x20000a10
 80017ec:	20000a5c 	.word	0x20000a5c
 80017f0:	20000240 	.word	0x20000240

080017f4 <GetDataMotorDC>:
/* USER CODE END Header_LabViewTX_Task */


/* GetDataMotorDC function */
void GetDataMotorDC(void const * argument)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetDataMotorDC */
	osSemaphoreRelease(DataSemHandle);
 80017fc:	4b04      	ldr	r3, [pc, #16]	; (8001810 <GetDataMotorDC+0x1c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4618      	mov	r0, r3
 8001802:	f004 fe39 	bl	8006478 <osSemaphoreRelease>
  /* USER CODE END GetDataMotorDC */
}
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	20000254 	.word	0x20000254

08001814 <HAL_UART_RxCpltCallback>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
	xQueueSendFromISR(RxQueue,&byte,pdFALSE);		//se envia el byte recibido
 800181c:	4b07      	ldr	r3, [pc, #28]	; (800183c <HAL_UART_RxCpltCallback+0x28>)
 800181e:	6818      	ldr	r0, [r3, #0]
 8001820:	2300      	movs	r3, #0
 8001822:	2200      	movs	r2, #0
 8001824:	4906      	ldr	r1, [pc, #24]	; (8001840 <HAL_UART_RxCpltCallback+0x2c>)
 8001826:	f005 f9c9 	bl	8006bbc <xQueueGenericSendFromISR>

	HAL_UART_Receive_IT(huart, &byte, 1);
 800182a:	2201      	movs	r2, #1
 800182c:	4904      	ldr	r1, [pc, #16]	; (8001840 <HAL_UART_RxCpltCallback+0x2c>)
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f003 fca7 	bl	8005182 <HAL_UART_Receive_IT>

	return;
 8001834:	bf00      	nop
}
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	20000238 	.word	0x20000238
 8001840:	20000200 	.word	0x20000200

08001844 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08c      	sub	sp, #48	; 0x30
 8001848:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184a:	f107 031c 	add.w	r3, r7, #28
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	605a      	str	r2, [r3, #4]
 8001854:	609a      	str	r2, [r3, #8]
 8001856:	60da      	str	r2, [r3, #12]
 8001858:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800185a:	4b70      	ldr	r3, [pc, #448]	; (8001a1c <MX_GPIO_Init+0x1d8>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	4a6f      	ldr	r2, [pc, #444]	; (8001a1c <MX_GPIO_Init+0x1d8>)
 8001860:	f043 0304 	orr.w	r3, r3, #4
 8001864:	6313      	str	r3, [r2, #48]	; 0x30
 8001866:	4b6d      	ldr	r3, [pc, #436]	; (8001a1c <MX_GPIO_Init+0x1d8>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	f003 0304 	and.w	r3, r3, #4
 800186e:	61bb      	str	r3, [r7, #24]
 8001870:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001872:	4b6a      	ldr	r3, [pc, #424]	; (8001a1c <MX_GPIO_Init+0x1d8>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	4a69      	ldr	r2, [pc, #420]	; (8001a1c <MX_GPIO_Init+0x1d8>)
 8001878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800187c:	6313      	str	r3, [r2, #48]	; 0x30
 800187e:	4b67      	ldr	r3, [pc, #412]	; (8001a1c <MX_GPIO_Init+0x1d8>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001886:	617b      	str	r3, [r7, #20]
 8001888:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800188a:	4b64      	ldr	r3, [pc, #400]	; (8001a1c <MX_GPIO_Init+0x1d8>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	4a63      	ldr	r2, [pc, #396]	; (8001a1c <MX_GPIO_Init+0x1d8>)
 8001890:	f043 0301 	orr.w	r3, r3, #1
 8001894:	6313      	str	r3, [r2, #48]	; 0x30
 8001896:	4b61      	ldr	r3, [pc, #388]	; (8001a1c <MX_GPIO_Init+0x1d8>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	613b      	str	r3, [r7, #16]
 80018a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a2:	4b5e      	ldr	r3, [pc, #376]	; (8001a1c <MX_GPIO_Init+0x1d8>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	4a5d      	ldr	r2, [pc, #372]	; (8001a1c <MX_GPIO_Init+0x1d8>)
 80018a8:	f043 0302 	orr.w	r3, r3, #2
 80018ac:	6313      	str	r3, [r2, #48]	; 0x30
 80018ae:	4b5b      	ldr	r3, [pc, #364]	; (8001a1c <MX_GPIO_Init+0x1d8>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018ba:	4b58      	ldr	r3, [pc, #352]	; (8001a1c <MX_GPIO_Init+0x1d8>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	4a57      	ldr	r2, [pc, #348]	; (8001a1c <MX_GPIO_Init+0x1d8>)
 80018c0:	f043 0320 	orr.w	r3, r3, #32
 80018c4:	6313      	str	r3, [r2, #48]	; 0x30
 80018c6:	4b55      	ldr	r3, [pc, #340]	; (8001a1c <MX_GPIO_Init+0x1d8>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	f003 0320 	and.w	r3, r3, #32
 80018ce:	60bb      	str	r3, [r7, #8]
 80018d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018d2:	4b52      	ldr	r3, [pc, #328]	; (8001a1c <MX_GPIO_Init+0x1d8>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	4a51      	ldr	r2, [pc, #324]	; (8001a1c <MX_GPIO_Init+0x1d8>)
 80018d8:	f043 0308 	orr.w	r3, r3, #8
 80018dc:	6313      	str	r3, [r2, #48]	; 0x30
 80018de:	4b4f      	ldr	r3, [pc, #316]	; (8001a1c <MX_GPIO_Init+0x1d8>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	f003 0308 	and.w	r3, r3, #8
 80018e6:	607b      	str	r3, [r7, #4]
 80018e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80018ea:	4b4c      	ldr	r3, [pc, #304]	; (8001a1c <MX_GPIO_Init+0x1d8>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	4a4b      	ldr	r2, [pc, #300]	; (8001a1c <MX_GPIO_Init+0x1d8>)
 80018f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018f4:	6313      	str	r3, [r2, #48]	; 0x30
 80018f6:	4b49      	ldr	r3, [pc, #292]	; (8001a1c <MX_GPIO_Init+0x1d8>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018fe:	603b      	str	r3, [r7, #0]
 8001900:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001902:	2200      	movs	r2, #0
 8001904:	f244 0181 	movw	r1, #16513	; 0x4081
 8001908:	4845      	ldr	r0, [pc, #276]	; (8001a20 <MX_GPIO_Init+0x1dc>)
 800190a:	f000 ffe7 	bl	80028dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_RESET);
 800190e:	2200      	movs	r2, #0
 8001910:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001914:	4843      	ldr	r0, [pc, #268]	; (8001a24 <MX_GPIO_Init+0x1e0>)
 8001916:	f000 ffe1 	bl	80028dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800191a:	2200      	movs	r2, #0
 800191c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001920:	4841      	ldr	r0, [pc, #260]	; (8001a28 <MX_GPIO_Init+0x1e4>)
 8001922:	f000 ffdb 	bl	80028dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001926:	2200      	movs	r2, #0
 8001928:	2140      	movs	r1, #64	; 0x40
 800192a:	4840      	ldr	r0, [pc, #256]	; (8001a2c <MX_GPIO_Init+0x1e8>)
 800192c:	f000 ffd6 	bl	80028dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001930:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001936:	4b3e      	ldr	r3, [pc, #248]	; (8001a30 <MX_GPIO_Init+0x1ec>)
 8001938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800193e:	f107 031c 	add.w	r3, r7, #28
 8001942:	4619      	mov	r1, r3
 8001944:	483b      	ldr	r0, [pc, #236]	; (8001a34 <MX_GPIO_Init+0x1f0>)
 8001946:	f000 fe2d 	bl	80025a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800194a:	f244 0381 	movw	r3, #16513	; 0x4081
 800194e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001950:	2301      	movs	r3, #1
 8001952:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001958:	2300      	movs	r3, #0
 800195a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800195c:	f107 031c 	add.w	r3, r7, #28
 8001960:	4619      	mov	r1, r3
 8001962:	482f      	ldr	r0, [pc, #188]	; (8001a20 <MX_GPIO_Init+0x1dc>)
 8001964:	f000 fe1e 	bl	80025a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001968:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800196c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196e:	2301      	movs	r3, #1
 8001970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001976:	2300      	movs	r3, #0
 8001978:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800197a:	f107 031c 	add.w	r3, r7, #28
 800197e:	4619      	mov	r1, r3
 8001980:	4828      	ldr	r0, [pc, #160]	; (8001a24 <MX_GPIO_Init+0x1e0>)
 8001982:	f000 fe0f 	bl	80025a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001986:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800198a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800198c:	2301      	movs	r3, #1
 800198e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001990:	2300      	movs	r3, #0
 8001992:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001994:	2303      	movs	r3, #3
 8001996:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001998:	f107 031c 	add.w	r3, r7, #28
 800199c:	4619      	mov	r1, r3
 800199e:	4822      	ldr	r0, [pc, #136]	; (8001a28 <MX_GPIO_Init+0x1e4>)
 80019a0:	f000 fe00 	bl	80025a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80019a4:	2340      	movs	r3, #64	; 0x40
 80019a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a8:	2301      	movs	r3, #1
 80019aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b0:	2300      	movs	r3, #0
 80019b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80019b4:	f107 031c 	add.w	r3, r7, #28
 80019b8:	4619      	mov	r1, r3
 80019ba:	481c      	ldr	r0, [pc, #112]	; (8001a2c <MX_GPIO_Init+0x1e8>)
 80019bc:	f000 fdf2 	bl	80025a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80019c0:	2380      	movs	r3, #128	; 0x80
 80019c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019c4:	2300      	movs	r3, #0
 80019c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80019cc:	f107 031c 	add.w	r3, r7, #28
 80019d0:	4619      	mov	r1, r3
 80019d2:	4816      	ldr	r0, [pc, #88]	; (8001a2c <MX_GPIO_Init+0x1e8>)
 80019d4:	f000 fde6 	bl	80025a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80019d8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80019dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019de:	2302      	movs	r3, #2
 80019e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e6:	2303      	movs	r3, #3
 80019e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80019ea:	230a      	movs	r3, #10
 80019ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ee:	f107 031c 	add.w	r3, r7, #28
 80019f2:	4619      	mov	r1, r3
 80019f4:	4810      	ldr	r0, [pc, #64]	; (8001a38 <MX_GPIO_Init+0x1f4>)
 80019f6:	f000 fdd5 	bl	80025a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80019fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a00:	2300      	movs	r3, #0
 8001a02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a08:	f107 031c 	add.w	r3, r7, #28
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	480a      	ldr	r0, [pc, #40]	; (8001a38 <MX_GPIO_Init+0x1f4>)
 8001a10:	f000 fdc8 	bl	80025a4 <HAL_GPIO_Init>

}
 8001a14:	bf00      	nop
 8001a16:	3730      	adds	r7, #48	; 0x30
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	40020400 	.word	0x40020400
 8001a24:	40021400 	.word	0x40021400
 8001a28:	40020c00 	.word	0x40020c00
 8001a2c:	40021800 	.word	0x40021800
 8001a30:	10110000 	.word	0x10110000
 8001a34:	40020800 	.word	0x40020800
 8001a38:	40020000 	.word	0x40020000

08001a3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a40:	f000 fc0f 	bl	8002262 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a44:	f000 f818 	bl	8001a78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a48:	f7ff fefc 	bl	8001844 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001a4c:	f000 fb48 	bl	80020e0 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8001a50:	f000 f9fe 	bl	8001e50 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001a54:	f000 fa50 	bl	8001ef8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
#if SVW
  DWT->CTRL |= 1;
 8001a58:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <main+0x38>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a05      	ldr	r2, [pc, #20]	; (8001a74 <main+0x38>)
 8001a5e:	f043 0301 	orr.w	r3, r3, #1
 8001a62:	6013      	str	r3, [r2, #0]
  SEGGER_SYSVIEW_Conf();
 8001a64:	f008 f968 	bl	8009d38 <SEGGER_SYSVIEW_Conf>
  /* Initialize PID system, float32_t format */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001a68:	f7ff fc44 	bl	80012f4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001a6c:	f004 fb6e 	bl	800614c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a70:	e7fe      	b.n	8001a70 <main+0x34>
 8001a72:	bf00      	nop
 8001a74:	e0001000 	.word	0xe0001000

08001a78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b094      	sub	sp, #80	; 0x50
 8001a7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a7e:	f107 0320 	add.w	r3, r7, #32
 8001a82:	2230      	movs	r2, #48	; 0x30
 8001a84:	2100      	movs	r1, #0
 8001a86:	4618      	mov	r0, r3
 8001a88:	f00a f8c5 	bl	800bc16 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a8c:	f107 030c 	add.w	r3, r7, #12
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	60da      	str	r2, [r3, #12]
 8001a9a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001a9c:	f000 ff38 	bl	8002910 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aa0:	4b2a      	ldr	r3, [pc, #168]	; (8001b4c <SystemClock_Config+0xd4>)
 8001aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa4:	4a29      	ldr	r2, [pc, #164]	; (8001b4c <SystemClock_Config+0xd4>)
 8001aa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aaa:	6413      	str	r3, [r2, #64]	; 0x40
 8001aac:	4b27      	ldr	r3, [pc, #156]	; (8001b4c <SystemClock_Config+0xd4>)
 8001aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab4:	60bb      	str	r3, [r7, #8]
 8001ab6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ab8:	4b25      	ldr	r3, [pc, #148]	; (8001b50 <SystemClock_Config+0xd8>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a24      	ldr	r2, [pc, #144]	; (8001b50 <SystemClock_Config+0xd8>)
 8001abe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ac2:	6013      	str	r3, [r2, #0]
 8001ac4:	4b22      	ldr	r3, [pc, #136]	; (8001b50 <SystemClock_Config+0xd8>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001acc:	607b      	str	r3, [r7, #4]
 8001ace:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001ad4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001ad8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ada:	2302      	movs	r3, #2
 8001adc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ade:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001ae4:	2304      	movs	r3, #4
 8001ae6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001ae8:	23d8      	movs	r3, #216	; 0xd8
 8001aea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001aec:	2302      	movs	r3, #2
 8001aee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001af0:	2309      	movs	r3, #9
 8001af2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001af4:	f107 0320 	add.w	r3, r7, #32
 8001af8:	4618      	mov	r0, r3
 8001afa:	f000 ff69 	bl	80029d0 <HAL_RCC_OscConfig>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001b04:	f000 f838 	bl	8001b78 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001b08:	f000 ff12 	bl	8002930 <HAL_PWREx_EnableOverDrive>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001b12:	f000 f831 	bl	8001b78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b16:	230f      	movs	r3, #15
 8001b18:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b22:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b26:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b2c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001b2e:	f107 030c 	add.w	r3, r7, #12
 8001b32:	2107      	movs	r1, #7
 8001b34:	4618      	mov	r0, r3
 8001b36:	f001 f9ef 	bl	8002f18 <HAL_RCC_ClockConfig>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001b40:	f000 f81a 	bl	8001b78 <Error_Handler>
  }
}
 8001b44:	bf00      	nop
 8001b46:	3750      	adds	r7, #80	; 0x50
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	40007000 	.word	0x40007000

08001b54 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a04      	ldr	r2, [pc, #16]	; (8001b74 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d101      	bne.n	8001b6a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b66:	f000 fb89 	bl	800227c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40001000 	.word	0x40001000

08001b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b7c:	b672      	cpsid	i
}
 8001b7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b80:	e7fe      	b.n	8001b80 <Error_Handler+0x8>
	...

08001b84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b8a:	4b11      	ldr	r3, [pc, #68]	; (8001bd0 <HAL_MspInit+0x4c>)
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	4a10      	ldr	r2, [pc, #64]	; (8001bd0 <HAL_MspInit+0x4c>)
 8001b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b94:	6413      	str	r3, [r2, #64]	; 0x40
 8001b96:	4b0e      	ldr	r3, [pc, #56]	; (8001bd0 <HAL_MspInit+0x4c>)
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b9e:	607b      	str	r3, [r7, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ba2:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <HAL_MspInit+0x4c>)
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba6:	4a0a      	ldr	r2, [pc, #40]	; (8001bd0 <HAL_MspInit+0x4c>)
 8001ba8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bac:	6453      	str	r3, [r2, #68]	; 0x44
 8001bae:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <HAL_MspInit+0x4c>)
 8001bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bb6:	603b      	str	r3, [r7, #0]
 8001bb8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	210f      	movs	r1, #15
 8001bbe:	f06f 0001 	mvn.w	r0, #1
 8001bc2:	f000 fc33 	bl	800242c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40023800 	.word	0x40023800

08001bd4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b08c      	sub	sp, #48	; 0x30
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001be0:	2300      	movs	r3, #0
 8001be2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001be4:	2200      	movs	r2, #0
 8001be6:	6879      	ldr	r1, [r7, #4]
 8001be8:	2036      	movs	r0, #54	; 0x36
 8001bea:	f000 fc1f 	bl	800242c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001bee:	2036      	movs	r0, #54	; 0x36
 8001bf0:	f000 fc38 	bl	8002464 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001bf4:	4b1f      	ldr	r3, [pc, #124]	; (8001c74 <HAL_InitTick+0xa0>)
 8001bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf8:	4a1e      	ldr	r2, [pc, #120]	; (8001c74 <HAL_InitTick+0xa0>)
 8001bfa:	f043 0310 	orr.w	r3, r3, #16
 8001bfe:	6413      	str	r3, [r2, #64]	; 0x40
 8001c00:	4b1c      	ldr	r3, [pc, #112]	; (8001c74 <HAL_InitTick+0xa0>)
 8001c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c04:	f003 0310 	and.w	r3, r3, #16
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c0c:	f107 0210 	add.w	r2, r7, #16
 8001c10:	f107 0314 	add.w	r3, r7, #20
 8001c14:	4611      	mov	r1, r2
 8001c16:	4618      	mov	r0, r3
 8001c18:	f001 fba4 	bl	8003364 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001c1c:	f001 fb7a 	bl	8003314 <HAL_RCC_GetPCLK1Freq>
 8001c20:	4603      	mov	r3, r0
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c28:	4a13      	ldr	r2, [pc, #76]	; (8001c78 <HAL_InitTick+0xa4>)
 8001c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c2e:	0c9b      	lsrs	r3, r3, #18
 8001c30:	3b01      	subs	r3, #1
 8001c32:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001c34:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <HAL_InitTick+0xa8>)
 8001c36:	4a12      	ldr	r2, [pc, #72]	; (8001c80 <HAL_InitTick+0xac>)
 8001c38:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001c3a:	4b10      	ldr	r3, [pc, #64]	; (8001c7c <HAL_InitTick+0xa8>)
 8001c3c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c40:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001c42:	4a0e      	ldr	r2, [pc, #56]	; (8001c7c <HAL_InitTick+0xa8>)
 8001c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c46:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001c48:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <HAL_InitTick+0xa8>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c4e:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <HAL_InitTick+0xa8>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001c54:	4809      	ldr	r0, [pc, #36]	; (8001c7c <HAL_InitTick+0xa8>)
 8001c56:	f001 ff01 	bl	8003a5c <HAL_TIM_Base_Init>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d104      	bne.n	8001c6a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001c60:	4806      	ldr	r0, [pc, #24]	; (8001c7c <HAL_InitTick+0xa8>)
 8001c62:	f001 ffeb 	bl	8003c3c <HAL_TIM_Base_Start_IT>
 8001c66:	4603      	mov	r3, r0
 8001c68:	e000      	b.n	8001c6c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3730      	adds	r7, #48	; 0x30
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40023800 	.word	0x40023800
 8001c78:	431bde83 	.word	0x431bde83
 8001c7c:	200009c0 	.word	0x200009c0
 8001c80:	40001000 	.word	0x40001000

08001c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c88:	e7fe      	b.n	8001c88 <NMI_Handler+0x4>

08001c8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c8e:	e7fe      	b.n	8001c8e <HardFault_Handler+0x4>

08001c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c94:	e7fe      	b.n	8001c94 <MemManage_Handler+0x4>

08001c96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c96:	b480      	push	{r7}
 8001c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c9a:	e7fe      	b.n	8001c9a <BusFault_Handler+0x4>

08001c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ca0:	e7fe      	b.n	8001ca0 <UsageFault_Handler+0x4>

08001ca2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001cb4:	4802      	ldr	r0, [pc, #8]	; (8001cc0 <USART3_IRQHandler+0x10>)
 8001cb6:	f003 faa1 	bl	80051fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20000aa8 	.word	0x20000aa8

08001cc4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001cc8:	4802      	ldr	r0, [pc, #8]	; (8001cd4 <TIM6_DAC_IRQHandler+0x10>)
 8001cca:	f002 fa01 	bl	80040d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	200009c0 	.word	0x200009c0

08001cd8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
	return 1;
 8001cdc:	2301      	movs	r3, #1
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <_kill>:

int _kill(int pid, int sig)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001cf2:	f009 fe4f 	bl	800b994 <__errno>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2216      	movs	r2, #22
 8001cfa:	601a      	str	r2, [r3, #0]
	return -1;
 8001cfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <_exit>:

void _exit (int status)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d10:	f04f 31ff 	mov.w	r1, #4294967295
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f7ff ffe7 	bl	8001ce8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d1a:	e7fe      	b.n	8001d1a <_exit+0x12>

08001d1c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d28:	2300      	movs	r3, #0
 8001d2a:	617b      	str	r3, [r7, #20]
 8001d2c:	e00a      	b.n	8001d44 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d2e:	f3af 8000 	nop.w
 8001d32:	4601      	mov	r1, r0
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	1c5a      	adds	r2, r3, #1
 8001d38:	60ba      	str	r2, [r7, #8]
 8001d3a:	b2ca      	uxtb	r2, r1
 8001d3c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	3301      	adds	r3, #1
 8001d42:	617b      	str	r3, [r7, #20]
 8001d44:	697a      	ldr	r2, [r7, #20]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	dbf0      	blt.n	8001d2e <_read+0x12>
	}

return len;
 8001d4c:	687b      	ldr	r3, [r7, #4]
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3718      	adds	r7, #24
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001d56:	b480      	push	{r7}
 8001d58:	b083      	sub	sp, #12
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
	return -1;
 8001d5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
 8001d76:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d7e:	605a      	str	r2, [r3, #4]
	return 0;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <_isatty>:

int _isatty(int file)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b083      	sub	sp, #12
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
	return 1;
 8001d96:	2301      	movs	r3, #1
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
	return 0;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3714      	adds	r7, #20
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
	...

08001dc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dc8:	4a14      	ldr	r2, [pc, #80]	; (8001e1c <_sbrk+0x5c>)
 8001dca:	4b15      	ldr	r3, [pc, #84]	; (8001e20 <_sbrk+0x60>)
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dd4:	4b13      	ldr	r3, [pc, #76]	; (8001e24 <_sbrk+0x64>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d102      	bne.n	8001de2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ddc:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <_sbrk+0x64>)
 8001dde:	4a12      	ldr	r2, [pc, #72]	; (8001e28 <_sbrk+0x68>)
 8001de0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001de2:	4b10      	ldr	r3, [pc, #64]	; (8001e24 <_sbrk+0x64>)
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4413      	add	r3, r2
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d207      	bcs.n	8001e00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001df0:	f009 fdd0 	bl	800b994 <__errno>
 8001df4:	4603      	mov	r3, r0
 8001df6:	220c      	movs	r2, #12
 8001df8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8001dfe:	e009      	b.n	8001e14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e00:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <_sbrk+0x64>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e06:	4b07      	ldr	r3, [pc, #28]	; (8001e24 <_sbrk+0x64>)
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	4a05      	ldr	r2, [pc, #20]	; (8001e24 <_sbrk+0x64>)
 8001e10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e12:	68fb      	ldr	r3, [r7, #12]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3718      	adds	r7, #24
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	20040000 	.word	0x20040000
 8001e20:	00000400 	.word	0x00000400
 8001e24:	20000a0c 	.word	0x20000a0c
 8001e28:	20007840 	.word	0x20007840

08001e2c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e30:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <SystemInit+0x20>)
 8001e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e36:	4a05      	ldr	r2, [pc, #20]	; (8001e4c <SystemInit+0x20>)
 8001e38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e40:	bf00      	nop
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	e000ed00 	.word	0xe000ed00

08001e50 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b088      	sub	sp, #32
 8001e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001e56:	f107 030c 	add.w	r3, r7, #12
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	605a      	str	r2, [r3, #4]
 8001e60:	609a      	str	r2, [r3, #8]
 8001e62:	60da      	str	r2, [r3, #12]
 8001e64:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e66:	463b      	mov	r3, r7
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	605a      	str	r2, [r3, #4]
 8001e6e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e70:	4b20      	ldr	r3, [pc, #128]	; (8001ef4 <MX_TIM2_Init+0xa4>)
 8001e72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001e78:	4b1e      	ldr	r3, [pc, #120]	; (8001ef4 <MX_TIM2_Init+0xa4>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e7e:	4b1d      	ldr	r3, [pc, #116]	; (8001ef4 <MX_TIM2_Init+0xa4>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001e84:	4b1b      	ldr	r3, [pc, #108]	; (8001ef4 <MX_TIM2_Init+0xa4>)
 8001e86:	f04f 32ff 	mov.w	r2, #4294967295
 8001e8a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e8c:	4b19      	ldr	r3, [pc, #100]	; (8001ef4 <MX_TIM2_Init+0xa4>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e92:	4b18      	ldr	r3, [pc, #96]	; (8001ef4 <MX_TIM2_Init+0xa4>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e98:	4816      	ldr	r0, [pc, #88]	; (8001ef4 <MX_TIM2_Init+0xa4>)
 8001e9a:	f001 fddf 	bl	8003a5c <HAL_TIM_Base_Init>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001ea4:	f7ff fe68 	bl	8001b78 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8001ea8:	2307      	movs	r3, #7
 8001eaa:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001eac:	2350      	movs	r3, #80	; 0x50
 8001eae:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001eb8:	f107 030c 	add.w	r3, r7, #12
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	480d      	ldr	r0, [pc, #52]	; (8001ef4 <MX_TIM2_Init+0xa4>)
 8001ec0:	f002 fb36 	bl	8004530 <HAL_TIM_SlaveConfigSynchro>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001eca:	f7ff fe55 	bl	8001b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001ece:	2320      	movs	r3, #32
 8001ed0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ed6:	463b      	mov	r3, r7
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4806      	ldr	r0, [pc, #24]	; (8001ef4 <MX_TIM2_Init+0xa4>)
 8001edc:	f002 ffc4 	bl	8004e68 <HAL_TIMEx_MasterConfigSynchronization>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001ee6:	f7ff fe47 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001eea:	bf00      	nop
 8001eec:	3720      	adds	r7, #32
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	20000a10 	.word	0x20000a10

08001ef8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b08a      	sub	sp, #40	; 0x28
 8001efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001efe:	f107 031c 	add.w	r3, r7, #28
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	605a      	str	r2, [r3, #4]
 8001f08:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f0a:	463b      	mov	r3, r7
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	605a      	str	r2, [r3, #4]
 8001f12:	609a      	str	r2, [r3, #8]
 8001f14:	60da      	str	r2, [r3, #12]
 8001f16:	611a      	str	r2, [r3, #16]
 8001f18:	615a      	str	r2, [r3, #20]
 8001f1a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f1c:	4b21      	ldr	r3, [pc, #132]	; (8001fa4 <MX_TIM4_Init+0xac>)
 8001f1e:	4a22      	ldr	r2, [pc, #136]	; (8001fa8 <MX_TIM4_Init+0xb0>)
 8001f20:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10 - 1;
 8001f22:	4b20      	ldr	r3, [pc, #128]	; (8001fa4 <MX_TIM4_Init+0xac>)
 8001f24:	2209      	movs	r2, #9
 8001f26:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f28:	4b1e      	ldr	r3, [pc, #120]	; (8001fa4 <MX_TIM4_Init+0xac>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 600-1;
 8001f2e:	4b1d      	ldr	r3, [pc, #116]	; (8001fa4 <MX_TIM4_Init+0xac>)
 8001f30:	f240 2257 	movw	r2, #599	; 0x257
 8001f34:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f36:	4b1b      	ldr	r3, [pc, #108]	; (8001fa4 <MX_TIM4_Init+0xac>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f3c:	4b19      	ldr	r3, [pc, #100]	; (8001fa4 <MX_TIM4_Init+0xac>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001f42:	4818      	ldr	r0, [pc, #96]	; (8001fa4 <MX_TIM4_Init+0xac>)
 8001f44:	f001 fef2 	bl	8003d2c <HAL_TIM_PWM_Init>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001f4e:	f7ff fe13 	bl	8001b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f52:	2300      	movs	r3, #0
 8001f54:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f56:	2300      	movs	r3, #0
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f5a:	f107 031c 	add.w	r3, r7, #28
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4810      	ldr	r0, [pc, #64]	; (8001fa4 <MX_TIM4_Init+0xac>)
 8001f62:	f002 ff81 	bl	8004e68 <HAL_TIMEx_MasterConfigSynchronization>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001f6c:	f7ff fe04 	bl	8001b78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f70:	2360      	movs	r3, #96	; 0x60
 8001f72:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001f74:	2300      	movs	r3, #0
 8001f76:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f80:	463b      	mov	r3, r7
 8001f82:	220c      	movs	r2, #12
 8001f84:	4619      	mov	r1, r3
 8001f86:	4807      	ldr	r0, [pc, #28]	; (8001fa4 <MX_TIM4_Init+0xac>)
 8001f88:	f002 f9c2 	bl	8004310 <HAL_TIM_PWM_ConfigChannel>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001f92:	f7ff fdf1 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001f96:	4803      	ldr	r0, [pc, #12]	; (8001fa4 <MX_TIM4_Init+0xac>)
 8001f98:	f000 f86a 	bl	8002070 <HAL_TIM_MspPostInit>

}
 8001f9c:	bf00      	nop
 8001f9e:	3728      	adds	r7, #40	; 0x28
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	20000a5c 	.word	0x20000a5c
 8001fa8:	40000800 	.word	0x40000800

08001fac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b08a      	sub	sp, #40	; 0x28
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb4:	f107 0314 	add.w	r3, r7, #20
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	605a      	str	r2, [r3, #4]
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	60da      	str	r2, [r3, #12]
 8001fc2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fcc:	d127      	bne.n	800201e <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fce:	4b16      	ldr	r3, [pc, #88]	; (8002028 <HAL_TIM_Base_MspInit+0x7c>)
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	4a15      	ldr	r2, [pc, #84]	; (8002028 <HAL_TIM_Base_MspInit+0x7c>)
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001fda:	4b13      	ldr	r3, [pc, #76]	; (8002028 <HAL_TIM_Base_MspInit+0x7c>)
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	613b      	str	r3, [r7, #16]
 8001fe4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe6:	4b10      	ldr	r3, [pc, #64]	; (8002028 <HAL_TIM_Base_MspInit+0x7c>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	4a0f      	ldr	r2, [pc, #60]	; (8002028 <HAL_TIM_Base_MspInit+0x7c>)
 8001fec:	f043 0301 	orr.w	r3, r3, #1
 8001ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff2:	4b0d      	ldr	r3, [pc, #52]	; (8002028 <HAL_TIM_Base_MspInit+0x7c>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ffe:	2301      	movs	r3, #1
 8002000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002002:	2302      	movs	r3, #2
 8002004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002006:	2300      	movs	r3, #0
 8002008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200a:	2300      	movs	r3, #0
 800200c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800200e:	2301      	movs	r3, #1
 8002010:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002012:	f107 0314 	add.w	r3, r7, #20
 8002016:	4619      	mov	r1, r3
 8002018:	4804      	ldr	r0, [pc, #16]	; (800202c <HAL_TIM_Base_MspInit+0x80>)
 800201a:	f000 fac3 	bl	80025a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800201e:	bf00      	nop
 8002020:	3728      	adds	r7, #40	; 0x28
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40023800 	.word	0x40023800
 800202c:	40020000 	.word	0x40020000

08002030 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a0a      	ldr	r2, [pc, #40]	; (8002068 <HAL_TIM_PWM_MspInit+0x38>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d10b      	bne.n	800205a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002042:	4b0a      	ldr	r3, [pc, #40]	; (800206c <HAL_TIM_PWM_MspInit+0x3c>)
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	4a09      	ldr	r2, [pc, #36]	; (800206c <HAL_TIM_PWM_MspInit+0x3c>)
 8002048:	f043 0304 	orr.w	r3, r3, #4
 800204c:	6413      	str	r3, [r2, #64]	; 0x40
 800204e:	4b07      	ldr	r3, [pc, #28]	; (800206c <HAL_TIM_PWM_MspInit+0x3c>)
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	f003 0304 	and.w	r3, r3, #4
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800205a:	bf00      	nop
 800205c:	3714      	adds	r7, #20
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	40000800 	.word	0x40000800
 800206c:	40023800 	.word	0x40023800

08002070 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b088      	sub	sp, #32
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002078:	f107 030c 	add.w	r3, r7, #12
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	609a      	str	r2, [r3, #8]
 8002084:	60da      	str	r2, [r3, #12]
 8002086:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a11      	ldr	r2, [pc, #68]	; (80020d4 <HAL_TIM_MspPostInit+0x64>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d11c      	bne.n	80020cc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002092:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <HAL_TIM_MspPostInit+0x68>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	4a10      	ldr	r2, [pc, #64]	; (80020d8 <HAL_TIM_MspPostInit+0x68>)
 8002098:	f043 0308 	orr.w	r3, r3, #8
 800209c:	6313      	str	r3, [r2, #48]	; 0x30
 800209e:	4b0e      	ldr	r3, [pc, #56]	; (80020d8 <HAL_TIM_MspPostInit+0x68>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	f003 0308 	and.w	r3, r3, #8
 80020a6:	60bb      	str	r3, [r7, #8]
 80020a8:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80020aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020ae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b0:	2302      	movs	r3, #2
 80020b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b4:	2300      	movs	r3, #0
 80020b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b8:	2300      	movs	r3, #0
 80020ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80020bc:	2302      	movs	r3, #2
 80020be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020c0:	f107 030c 	add.w	r3, r7, #12
 80020c4:	4619      	mov	r1, r3
 80020c6:	4805      	ldr	r0, [pc, #20]	; (80020dc <HAL_TIM_MspPostInit+0x6c>)
 80020c8:	f000 fa6c 	bl	80025a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80020cc:	bf00      	nop
 80020ce:	3720      	adds	r7, #32
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40000800 	.word	0x40000800
 80020d8:	40023800 	.word	0x40023800
 80020dc:	40020c00 	.word	0x40020c00

080020e0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80020e4:	4b14      	ldr	r3, [pc, #80]	; (8002138 <MX_USART3_UART_Init+0x58>)
 80020e6:	4a15      	ldr	r2, [pc, #84]	; (800213c <MX_USART3_UART_Init+0x5c>)
 80020e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80020ea:	4b13      	ldr	r3, [pc, #76]	; (8002138 <MX_USART3_UART_Init+0x58>)
 80020ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80020f2:	4b11      	ldr	r3, [pc, #68]	; (8002138 <MX_USART3_UART_Init+0x58>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80020f8:	4b0f      	ldr	r3, [pc, #60]	; (8002138 <MX_USART3_UART_Init+0x58>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80020fe:	4b0e      	ldr	r3, [pc, #56]	; (8002138 <MX_USART3_UART_Init+0x58>)
 8002100:	2200      	movs	r2, #0
 8002102:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002104:	4b0c      	ldr	r3, [pc, #48]	; (8002138 <MX_USART3_UART_Init+0x58>)
 8002106:	220c      	movs	r2, #12
 8002108:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800210a:	4b0b      	ldr	r3, [pc, #44]	; (8002138 <MX_USART3_UART_Init+0x58>)
 800210c:	2200      	movs	r2, #0
 800210e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002110:	4b09      	ldr	r3, [pc, #36]	; (8002138 <MX_USART3_UART_Init+0x58>)
 8002112:	2200      	movs	r2, #0
 8002114:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002116:	4b08      	ldr	r3, [pc, #32]	; (8002138 <MX_USART3_UART_Init+0x58>)
 8002118:	2200      	movs	r2, #0
 800211a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800211c:	4b06      	ldr	r3, [pc, #24]	; (8002138 <MX_USART3_UART_Init+0x58>)
 800211e:	2200      	movs	r2, #0
 8002120:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002122:	4805      	ldr	r0, [pc, #20]	; (8002138 <MX_USART3_UART_Init+0x58>)
 8002124:	f002 ff4c 	bl	8004fc0 <HAL_UART_Init>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800212e:	f7ff fd23 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002132:	bf00      	nop
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	20000aa8 	.word	0x20000aa8
 800213c:	40004800 	.word	0x40004800

08002140 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b0aa      	sub	sp, #168	; 0xa8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002148:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	605a      	str	r2, [r3, #4]
 8002152:	609a      	str	r2, [r3, #8]
 8002154:	60da      	str	r2, [r3, #12]
 8002156:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002158:	f107 0314 	add.w	r3, r7, #20
 800215c:	2280      	movs	r2, #128	; 0x80
 800215e:	2100      	movs	r1, #0
 8002160:	4618      	mov	r0, r3
 8002162:	f009 fd58 	bl	800bc16 <memset>
  if(uartHandle->Instance==USART3)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a26      	ldr	r2, [pc, #152]	; (8002204 <HAL_UART_MspInit+0xc4>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d144      	bne.n	80021fa <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002170:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002174:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002176:	2300      	movs	r3, #0
 8002178:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800217a:	f107 0314 	add.w	r3, r7, #20
 800217e:	4618      	mov	r0, r3
 8002180:	f001 f922 	bl	80033c8 <HAL_RCCEx_PeriphCLKConfig>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800218a:	f7ff fcf5 	bl	8001b78 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800218e:	4b1e      	ldr	r3, [pc, #120]	; (8002208 <HAL_UART_MspInit+0xc8>)
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002192:	4a1d      	ldr	r2, [pc, #116]	; (8002208 <HAL_UART_MspInit+0xc8>)
 8002194:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002198:	6413      	str	r3, [r2, #64]	; 0x40
 800219a:	4b1b      	ldr	r3, [pc, #108]	; (8002208 <HAL_UART_MspInit+0xc8>)
 800219c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021a2:	613b      	str	r3, [r7, #16]
 80021a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021a6:	4b18      	ldr	r3, [pc, #96]	; (8002208 <HAL_UART_MspInit+0xc8>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	4a17      	ldr	r2, [pc, #92]	; (8002208 <HAL_UART_MspInit+0xc8>)
 80021ac:	f043 0308 	orr.w	r3, r3, #8
 80021b0:	6313      	str	r3, [r2, #48]	; 0x30
 80021b2:	4b15      	ldr	r3, [pc, #84]	; (8002208 <HAL_UART_MspInit+0xc8>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	f003 0308 	and.w	r3, r3, #8
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80021be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c6:	2302      	movs	r3, #2
 80021c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021cc:	2300      	movs	r3, #0
 80021ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d2:	2303      	movs	r3, #3
 80021d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80021d8:	2307      	movs	r3, #7
 80021da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021de:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80021e2:	4619      	mov	r1, r3
 80021e4:	4809      	ldr	r0, [pc, #36]	; (800220c <HAL_UART_MspInit+0xcc>)
 80021e6:	f000 f9dd 	bl	80025a4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80021ea:	2200      	movs	r2, #0
 80021ec:	2105      	movs	r1, #5
 80021ee:	2027      	movs	r0, #39	; 0x27
 80021f0:	f000 f91c 	bl	800242c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80021f4:	2027      	movs	r0, #39	; 0x27
 80021f6:	f000 f935 	bl	8002464 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80021fa:	bf00      	nop
 80021fc:	37a8      	adds	r7, #168	; 0xa8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	40004800 	.word	0x40004800
 8002208:	40023800 	.word	0x40023800
 800220c:	40020c00 	.word	0x40020c00

08002210 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002210:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002248 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002214:	480d      	ldr	r0, [pc, #52]	; (800224c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002216:	490e      	ldr	r1, [pc, #56]	; (8002250 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002218:	4a0e      	ldr	r2, [pc, #56]	; (8002254 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800221a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800221c:	e002      	b.n	8002224 <LoopCopyDataInit>

0800221e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800221e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002220:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002222:	3304      	adds	r3, #4

08002224 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002224:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002226:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002228:	d3f9      	bcc.n	800221e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800222a:	4a0b      	ldr	r2, [pc, #44]	; (8002258 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800222c:	4c0b      	ldr	r4, [pc, #44]	; (800225c <LoopFillZerobss+0x26>)
  movs r3, #0
 800222e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002230:	e001      	b.n	8002236 <LoopFillZerobss>

08002232 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002232:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002234:	3204      	adds	r2, #4

08002236 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002236:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002238:	d3fb      	bcc.n	8002232 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800223a:	f7ff fdf7 	bl	8001e2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800223e:	f009 fca5 	bl	800bb8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002242:	f7ff fbfb 	bl	8001a3c <main>
  bx  lr    
 8002246:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002248:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 800224c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002250:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002254:	08010a0c 	.word	0x08010a0c
  ldr r2, =_sbss
 8002258:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 800225c:	20007840 	.word	0x20007840

08002260 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002260:	e7fe      	b.n	8002260 <ADC_IRQHandler>

08002262 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002266:	2003      	movs	r0, #3
 8002268:	f000 f8d5 	bl	8002416 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800226c:	200f      	movs	r0, #15
 800226e:	f7ff fcb1 	bl	8001bd4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002272:	f7ff fc87 	bl	8001b84 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	bd80      	pop	{r7, pc}

0800227c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002280:	4b06      	ldr	r3, [pc, #24]	; (800229c <HAL_IncTick+0x20>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	461a      	mov	r2, r3
 8002286:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <HAL_IncTick+0x24>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4413      	add	r3, r2
 800228c:	4a04      	ldr	r2, [pc, #16]	; (80022a0 <HAL_IncTick+0x24>)
 800228e:	6013      	str	r3, [r2, #0]
}
 8002290:	bf00      	nop
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	20000008 	.word	0x20000008
 80022a0:	20000b2c 	.word	0x20000b2c

080022a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  return uwTick;
 80022a8:	4b03      	ldr	r3, [pc, #12]	; (80022b8 <HAL_GetTick+0x14>)
 80022aa:	681b      	ldr	r3, [r3, #0]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	20000b2c 	.word	0x20000b2c

080022bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022cc:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <__NVIC_SetPriorityGrouping+0x40>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022d2:	68ba      	ldr	r2, [r7, #8]
 80022d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022d8:	4013      	ands	r3, r2
 80022da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80022e4:	4b06      	ldr	r3, [pc, #24]	; (8002300 <__NVIC_SetPriorityGrouping+0x44>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ea:	4a04      	ldr	r2, [pc, #16]	; (80022fc <__NVIC_SetPriorityGrouping+0x40>)
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	60d3      	str	r3, [r2, #12]
}
 80022f0:	bf00      	nop
 80022f2:	3714      	adds	r7, #20
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	e000ed00 	.word	0xe000ed00
 8002300:	05fa0000 	.word	0x05fa0000

08002304 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002308:	4b04      	ldr	r3, [pc, #16]	; (800231c <__NVIC_GetPriorityGrouping+0x18>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	0a1b      	lsrs	r3, r3, #8
 800230e:	f003 0307 	and.w	r3, r3, #7
}
 8002312:	4618      	mov	r0, r3
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	e000ed00 	.word	0xe000ed00

08002320 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	4603      	mov	r3, r0
 8002328:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800232a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232e:	2b00      	cmp	r3, #0
 8002330:	db0b      	blt.n	800234a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002332:	79fb      	ldrb	r3, [r7, #7]
 8002334:	f003 021f 	and.w	r2, r3, #31
 8002338:	4907      	ldr	r1, [pc, #28]	; (8002358 <__NVIC_EnableIRQ+0x38>)
 800233a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233e:	095b      	lsrs	r3, r3, #5
 8002340:	2001      	movs	r0, #1
 8002342:	fa00 f202 	lsl.w	r2, r0, r2
 8002346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	e000e100 	.word	0xe000e100

0800235c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	6039      	str	r1, [r7, #0]
 8002366:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236c:	2b00      	cmp	r3, #0
 800236e:	db0a      	blt.n	8002386 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	b2da      	uxtb	r2, r3
 8002374:	490c      	ldr	r1, [pc, #48]	; (80023a8 <__NVIC_SetPriority+0x4c>)
 8002376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237a:	0112      	lsls	r2, r2, #4
 800237c:	b2d2      	uxtb	r2, r2
 800237e:	440b      	add	r3, r1
 8002380:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002384:	e00a      	b.n	800239c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	b2da      	uxtb	r2, r3
 800238a:	4908      	ldr	r1, [pc, #32]	; (80023ac <__NVIC_SetPriority+0x50>)
 800238c:	79fb      	ldrb	r3, [r7, #7]
 800238e:	f003 030f 	and.w	r3, r3, #15
 8002392:	3b04      	subs	r3, #4
 8002394:	0112      	lsls	r2, r2, #4
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	440b      	add	r3, r1
 800239a:	761a      	strb	r2, [r3, #24]
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	e000e100 	.word	0xe000e100
 80023ac:	e000ed00 	.word	0xe000ed00

080023b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b089      	sub	sp, #36	; 0x24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	f1c3 0307 	rsb	r3, r3, #7
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	bf28      	it	cs
 80023ce:	2304      	movcs	r3, #4
 80023d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	3304      	adds	r3, #4
 80023d6:	2b06      	cmp	r3, #6
 80023d8:	d902      	bls.n	80023e0 <NVIC_EncodePriority+0x30>
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	3b03      	subs	r3, #3
 80023de:	e000      	b.n	80023e2 <NVIC_EncodePriority+0x32>
 80023e0:	2300      	movs	r3, #0
 80023e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e4:	f04f 32ff 	mov.w	r2, #4294967295
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	43da      	mvns	r2, r3
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	401a      	ands	r2, r3
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023f8:	f04f 31ff 	mov.w	r1, #4294967295
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002402:	43d9      	mvns	r1, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002408:	4313      	orrs	r3, r2
         );
}
 800240a:	4618      	mov	r0, r3
 800240c:	3724      	adds	r7, #36	; 0x24
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b082      	sub	sp, #8
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f7ff ff4c 	bl	80022bc <__NVIC_SetPriorityGrouping>
}
 8002424:	bf00      	nop
 8002426:	3708      	adds	r7, #8
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
 8002438:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800243a:	2300      	movs	r3, #0
 800243c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800243e:	f7ff ff61 	bl	8002304 <__NVIC_GetPriorityGrouping>
 8002442:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	68b9      	ldr	r1, [r7, #8]
 8002448:	6978      	ldr	r0, [r7, #20]
 800244a:	f7ff ffb1 	bl	80023b0 <NVIC_EncodePriority>
 800244e:	4602      	mov	r2, r0
 8002450:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002454:	4611      	mov	r1, r2
 8002456:	4618      	mov	r0, r3
 8002458:	f7ff ff80 	bl	800235c <__NVIC_SetPriority>
}
 800245c:	bf00      	nop
 800245e:	3718      	adds	r7, #24
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	4603      	mov	r3, r0
 800246c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800246e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff ff54 	bl	8002320 <__NVIC_EnableIRQ>
}
 8002478:	bf00      	nop
 800247a:	3708      	adds	r7, #8
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800248e:	f7ff ff09 	bl	80022a4 <HAL_GetTick>
 8002492:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d008      	beq.n	80024b2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2280      	movs	r2, #128	; 0x80
 80024a4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e052      	b.n	8002558 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 0216 	bic.w	r2, r2, #22
 80024c0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	695a      	ldr	r2, [r3, #20]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024d0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d103      	bne.n	80024e2 <HAL_DMA_Abort+0x62>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d007      	beq.n	80024f2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 0208 	bic.w	r2, r2, #8
 80024f0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 0201 	bic.w	r2, r2, #1
 8002500:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002502:	e013      	b.n	800252c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002504:	f7ff fece 	bl	80022a4 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b05      	cmp	r3, #5
 8002510:	d90c      	bls.n	800252c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2220      	movs	r2, #32
 8002516:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2203      	movs	r2, #3
 8002524:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e015      	b.n	8002558 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1e4      	bne.n	8002504 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800253e:	223f      	movs	r2, #63	; 0x3f
 8002540:	409a      	lsls	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2201      	movs	r2, #1
 8002552:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	3710      	adds	r7, #16
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d004      	beq.n	800257e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2280      	movs	r2, #128	; 0x80
 8002578:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e00c      	b.n	8002598 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2205      	movs	r2, #5
 8002582:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f022 0201 	bic.w	r2, r2, #1
 8002594:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b089      	sub	sp, #36	; 0x24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80025ae:	2300      	movs	r3, #0
 80025b0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80025b2:	2300      	movs	r3, #0
 80025b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80025b6:	2300      	movs	r3, #0
 80025b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80025ba:	2300      	movs	r3, #0
 80025bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80025be:	2300      	movs	r3, #0
 80025c0:	61fb      	str	r3, [r7, #28]
 80025c2:	e169      	b.n	8002898 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80025c4:	2201      	movs	r2, #1
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	4013      	ands	r3, r2
 80025d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025d8:	693a      	ldr	r2, [r7, #16]
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	429a      	cmp	r2, r3
 80025de:	f040 8158 	bne.w	8002892 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d00b      	beq.n	8002602 <HAL_GPIO_Init+0x5e>
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d007      	beq.n	8002602 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025f6:	2b11      	cmp	r3, #17
 80025f8:	d003      	beq.n	8002602 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b12      	cmp	r3, #18
 8002600:	d130      	bne.n	8002664 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	2203      	movs	r2, #3
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	43db      	mvns	r3, r3
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	4013      	ands	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	68da      	ldr	r2, [r3, #12]
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4313      	orrs	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002638:	2201      	movs	r2, #1
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	43db      	mvns	r3, r3
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	4013      	ands	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	091b      	lsrs	r3, r3, #4
 800264e:	f003 0201 	and.w	r2, r3, #1
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4313      	orrs	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	2203      	movs	r2, #3
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	43db      	mvns	r3, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4013      	ands	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	4313      	orrs	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	2b02      	cmp	r3, #2
 800269a:	d003      	beq.n	80026a4 <HAL_GPIO_Init+0x100>
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b12      	cmp	r3, #18
 80026a2:	d123      	bne.n	80026ec <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	08da      	lsrs	r2, r3, #3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3208      	adds	r2, #8
 80026ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	f003 0307 	and.w	r3, r3, #7
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	220f      	movs	r2, #15
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	43db      	mvns	r3, r3
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4013      	ands	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	691a      	ldr	r2, [r3, #16]
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	f003 0307 	and.w	r3, r3, #7
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4313      	orrs	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	08da      	lsrs	r2, r3, #3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	3208      	adds	r2, #8
 80026e6:	69b9      	ldr	r1, [r7, #24]
 80026e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	2203      	movs	r2, #3
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4013      	ands	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f003 0203 	and.w	r2, r3, #3
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4313      	orrs	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 80b2 	beq.w	8002892 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800272e:	4b60      	ldr	r3, [pc, #384]	; (80028b0 <HAL_GPIO_Init+0x30c>)
 8002730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002732:	4a5f      	ldr	r2, [pc, #380]	; (80028b0 <HAL_GPIO_Init+0x30c>)
 8002734:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002738:	6453      	str	r3, [r2, #68]	; 0x44
 800273a:	4b5d      	ldr	r3, [pc, #372]	; (80028b0 <HAL_GPIO_Init+0x30c>)
 800273c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002742:	60fb      	str	r3, [r7, #12]
 8002744:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002746:	4a5b      	ldr	r2, [pc, #364]	; (80028b4 <HAL_GPIO_Init+0x310>)
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	089b      	lsrs	r3, r3, #2
 800274c:	3302      	adds	r3, #2
 800274e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002752:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	f003 0303 	and.w	r3, r3, #3
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	220f      	movs	r2, #15
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	43db      	mvns	r3, r3
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	4013      	ands	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a52      	ldr	r2, [pc, #328]	; (80028b8 <HAL_GPIO_Init+0x314>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d02b      	beq.n	80027ca <HAL_GPIO_Init+0x226>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a51      	ldr	r2, [pc, #324]	; (80028bc <HAL_GPIO_Init+0x318>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d025      	beq.n	80027c6 <HAL_GPIO_Init+0x222>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a50      	ldr	r2, [pc, #320]	; (80028c0 <HAL_GPIO_Init+0x31c>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d01f      	beq.n	80027c2 <HAL_GPIO_Init+0x21e>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a4f      	ldr	r2, [pc, #316]	; (80028c4 <HAL_GPIO_Init+0x320>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d019      	beq.n	80027be <HAL_GPIO_Init+0x21a>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a4e      	ldr	r2, [pc, #312]	; (80028c8 <HAL_GPIO_Init+0x324>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d013      	beq.n	80027ba <HAL_GPIO_Init+0x216>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a4d      	ldr	r2, [pc, #308]	; (80028cc <HAL_GPIO_Init+0x328>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d00d      	beq.n	80027b6 <HAL_GPIO_Init+0x212>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a4c      	ldr	r2, [pc, #304]	; (80028d0 <HAL_GPIO_Init+0x32c>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d007      	beq.n	80027b2 <HAL_GPIO_Init+0x20e>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a4b      	ldr	r2, [pc, #300]	; (80028d4 <HAL_GPIO_Init+0x330>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d101      	bne.n	80027ae <HAL_GPIO_Init+0x20a>
 80027aa:	2307      	movs	r3, #7
 80027ac:	e00e      	b.n	80027cc <HAL_GPIO_Init+0x228>
 80027ae:	2308      	movs	r3, #8
 80027b0:	e00c      	b.n	80027cc <HAL_GPIO_Init+0x228>
 80027b2:	2306      	movs	r3, #6
 80027b4:	e00a      	b.n	80027cc <HAL_GPIO_Init+0x228>
 80027b6:	2305      	movs	r3, #5
 80027b8:	e008      	b.n	80027cc <HAL_GPIO_Init+0x228>
 80027ba:	2304      	movs	r3, #4
 80027bc:	e006      	b.n	80027cc <HAL_GPIO_Init+0x228>
 80027be:	2303      	movs	r3, #3
 80027c0:	e004      	b.n	80027cc <HAL_GPIO_Init+0x228>
 80027c2:	2302      	movs	r3, #2
 80027c4:	e002      	b.n	80027cc <HAL_GPIO_Init+0x228>
 80027c6:	2301      	movs	r3, #1
 80027c8:	e000      	b.n	80027cc <HAL_GPIO_Init+0x228>
 80027ca:	2300      	movs	r3, #0
 80027cc:	69fa      	ldr	r2, [r7, #28]
 80027ce:	f002 0203 	and.w	r2, r2, #3
 80027d2:	0092      	lsls	r2, r2, #2
 80027d4:	4093      	lsls	r3, r2
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	4313      	orrs	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80027dc:	4935      	ldr	r1, [pc, #212]	; (80028b4 <HAL_GPIO_Init+0x310>)
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	089b      	lsrs	r3, r3, #2
 80027e2:	3302      	adds	r3, #2
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027ea:	4b3b      	ldr	r3, [pc, #236]	; (80028d8 <HAL_GPIO_Init+0x334>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	43db      	mvns	r3, r3
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	4013      	ands	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d003      	beq.n	800280e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	4313      	orrs	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800280e:	4a32      	ldr	r2, [pc, #200]	; (80028d8 <HAL_GPIO_Init+0x334>)
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002814:	4b30      	ldr	r3, [pc, #192]	; (80028d8 <HAL_GPIO_Init+0x334>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	43db      	mvns	r3, r3
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	4013      	ands	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d003      	beq.n	8002838 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	4313      	orrs	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002838:	4a27      	ldr	r2, [pc, #156]	; (80028d8 <HAL_GPIO_Init+0x334>)
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800283e:	4b26      	ldr	r3, [pc, #152]	; (80028d8 <HAL_GPIO_Init+0x334>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	43db      	mvns	r3, r3
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	4013      	ands	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	4313      	orrs	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002862:	4a1d      	ldr	r2, [pc, #116]	; (80028d8 <HAL_GPIO_Init+0x334>)
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002868:	4b1b      	ldr	r3, [pc, #108]	; (80028d8 <HAL_GPIO_Init+0x334>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	43db      	mvns	r3, r3
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4013      	ands	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d003      	beq.n	800288c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	4313      	orrs	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800288c:	4a12      	ldr	r2, [pc, #72]	; (80028d8 <HAL_GPIO_Init+0x334>)
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	3301      	adds	r3, #1
 8002896:	61fb      	str	r3, [r7, #28]
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	2b0f      	cmp	r3, #15
 800289c:	f67f ae92 	bls.w	80025c4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80028a0:	bf00      	nop
 80028a2:	bf00      	nop
 80028a4:	3724      	adds	r7, #36	; 0x24
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	40023800 	.word	0x40023800
 80028b4:	40013800 	.word	0x40013800
 80028b8:	40020000 	.word	0x40020000
 80028bc:	40020400 	.word	0x40020400
 80028c0:	40020800 	.word	0x40020800
 80028c4:	40020c00 	.word	0x40020c00
 80028c8:	40021000 	.word	0x40021000
 80028cc:	40021400 	.word	0x40021400
 80028d0:	40021800 	.word	0x40021800
 80028d4:	40021c00 	.word	0x40021c00
 80028d8:	40013c00 	.word	0x40013c00

080028dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	460b      	mov	r3, r1
 80028e6:	807b      	strh	r3, [r7, #2]
 80028e8:	4613      	mov	r3, r2
 80028ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028ec:	787b      	ldrb	r3, [r7, #1]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d003      	beq.n	80028fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028f2:	887a      	ldrh	r2, [r7, #2]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80028f8:	e003      	b.n	8002902 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80028fa:	887b      	ldrh	r3, [r7, #2]
 80028fc:	041a      	lsls	r2, r3, #16
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	619a      	str	r2, [r3, #24]
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
	...

08002910 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002914:	4b05      	ldr	r3, [pc, #20]	; (800292c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a04      	ldr	r2, [pc, #16]	; (800292c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800291a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800291e:	6013      	str	r3, [r2, #0]
}
 8002920:	bf00      	nop
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	40007000 	.word	0x40007000

08002930 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002936:	2300      	movs	r3, #0
 8002938:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800293a:	4b23      	ldr	r3, [pc, #140]	; (80029c8 <HAL_PWREx_EnableOverDrive+0x98>)
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	4a22      	ldr	r2, [pc, #136]	; (80029c8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002944:	6413      	str	r3, [r2, #64]	; 0x40
 8002946:	4b20      	ldr	r3, [pc, #128]	; (80029c8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800294e:	603b      	str	r3, [r7, #0]
 8002950:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002952:	4b1e      	ldr	r3, [pc, #120]	; (80029cc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a1d      	ldr	r2, [pc, #116]	; (80029cc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800295c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800295e:	f7ff fca1 	bl	80022a4 <HAL_GetTick>
 8002962:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002964:	e009      	b.n	800297a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002966:	f7ff fc9d 	bl	80022a4 <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002974:	d901      	bls.n	800297a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e022      	b.n	80029c0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800297a:	4b14      	ldr	r3, [pc, #80]	; (80029cc <HAL_PWREx_EnableOverDrive+0x9c>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002982:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002986:	d1ee      	bne.n	8002966 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002988:	4b10      	ldr	r3, [pc, #64]	; (80029cc <HAL_PWREx_EnableOverDrive+0x9c>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a0f      	ldr	r2, [pc, #60]	; (80029cc <HAL_PWREx_EnableOverDrive+0x9c>)
 800298e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002992:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002994:	f7ff fc86 	bl	80022a4 <HAL_GetTick>
 8002998:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800299a:	e009      	b.n	80029b0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800299c:	f7ff fc82 	bl	80022a4 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029aa:	d901      	bls.n	80029b0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e007      	b.n	80029c0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80029b0:	4b06      	ldr	r3, [pc, #24]	; (80029cc <HAL_PWREx_EnableOverDrive+0x9c>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029bc:	d1ee      	bne.n	800299c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3708      	adds	r7, #8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	40023800 	.word	0x40023800
 80029cc:	40007000 	.word	0x40007000

080029d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80029d8:	2300      	movs	r3, #0
 80029da:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e291      	b.n	8002f0a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	f000 8087 	beq.w	8002b02 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029f4:	4b96      	ldr	r3, [pc, #600]	; (8002c50 <HAL_RCC_OscConfig+0x280>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f003 030c 	and.w	r3, r3, #12
 80029fc:	2b04      	cmp	r3, #4
 80029fe:	d00c      	beq.n	8002a1a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a00:	4b93      	ldr	r3, [pc, #588]	; (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f003 030c 	and.w	r3, r3, #12
 8002a08:	2b08      	cmp	r3, #8
 8002a0a:	d112      	bne.n	8002a32 <HAL_RCC_OscConfig+0x62>
 8002a0c:	4b90      	ldr	r3, [pc, #576]	; (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a18:	d10b      	bne.n	8002a32 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a1a:	4b8d      	ldr	r3, [pc, #564]	; (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d06c      	beq.n	8002b00 <HAL_RCC_OscConfig+0x130>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d168      	bne.n	8002b00 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e26b      	b.n	8002f0a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a3a:	d106      	bne.n	8002a4a <HAL_RCC_OscConfig+0x7a>
 8002a3c:	4b84      	ldr	r3, [pc, #528]	; (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a83      	ldr	r2, [pc, #524]	; (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002a42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a46:	6013      	str	r3, [r2, #0]
 8002a48:	e02e      	b.n	8002aa8 <HAL_RCC_OscConfig+0xd8>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d10c      	bne.n	8002a6c <HAL_RCC_OscConfig+0x9c>
 8002a52:	4b7f      	ldr	r3, [pc, #508]	; (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a7e      	ldr	r2, [pc, #504]	; (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002a58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a5c:	6013      	str	r3, [r2, #0]
 8002a5e:	4b7c      	ldr	r3, [pc, #496]	; (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a7b      	ldr	r2, [pc, #492]	; (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002a64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a68:	6013      	str	r3, [r2, #0]
 8002a6a:	e01d      	b.n	8002aa8 <HAL_RCC_OscConfig+0xd8>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a74:	d10c      	bne.n	8002a90 <HAL_RCC_OscConfig+0xc0>
 8002a76:	4b76      	ldr	r3, [pc, #472]	; (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a75      	ldr	r2, [pc, #468]	; (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002a7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a80:	6013      	str	r3, [r2, #0]
 8002a82:	4b73      	ldr	r3, [pc, #460]	; (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a72      	ldr	r2, [pc, #456]	; (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a8c:	6013      	str	r3, [r2, #0]
 8002a8e:	e00b      	b.n	8002aa8 <HAL_RCC_OscConfig+0xd8>
 8002a90:	4b6f      	ldr	r3, [pc, #444]	; (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a6e      	ldr	r2, [pc, #440]	; (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002a96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a9a:	6013      	str	r3, [r2, #0]
 8002a9c:	4b6c      	ldr	r3, [pc, #432]	; (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a6b      	ldr	r2, [pc, #428]	; (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002aa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d013      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab0:	f7ff fbf8 	bl	80022a4 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ab8:	f7ff fbf4 	bl	80022a4 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b64      	cmp	r3, #100	; 0x64
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e21f      	b.n	8002f0a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aca:	4b61      	ldr	r3, [pc, #388]	; (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d0f0      	beq.n	8002ab8 <HAL_RCC_OscConfig+0xe8>
 8002ad6:	e014      	b.n	8002b02 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad8:	f7ff fbe4 	bl	80022a4 <HAL_GetTick>
 8002adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ade:	e008      	b.n	8002af2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ae0:	f7ff fbe0 	bl	80022a4 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b64      	cmp	r3, #100	; 0x64
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e20b      	b.n	8002f0a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002af2:	4b57      	ldr	r3, [pc, #348]	; (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1f0      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x110>
 8002afe:	e000      	b.n	8002b02 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d069      	beq.n	8002be2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b0e:	4b50      	ldr	r3, [pc, #320]	; (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f003 030c 	and.w	r3, r3, #12
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00b      	beq.n	8002b32 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b1a:	4b4d      	ldr	r3, [pc, #308]	; (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 030c 	and.w	r3, r3, #12
 8002b22:	2b08      	cmp	r3, #8
 8002b24:	d11c      	bne.n	8002b60 <HAL_RCC_OscConfig+0x190>
 8002b26:	4b4a      	ldr	r3, [pc, #296]	; (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d116      	bne.n	8002b60 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b32:	4b47      	ldr	r3, [pc, #284]	; (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d005      	beq.n	8002b4a <HAL_RCC_OscConfig+0x17a>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d001      	beq.n	8002b4a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e1df      	b.n	8002f0a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b4a:	4b41      	ldr	r3, [pc, #260]	; (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	493d      	ldr	r1, [pc, #244]	; (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b5e:	e040      	b.n	8002be2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d023      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b68:	4b39      	ldr	r3, [pc, #228]	; (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a38      	ldr	r2, [pc, #224]	; (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002b6e:	f043 0301 	orr.w	r3, r3, #1
 8002b72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b74:	f7ff fb96 	bl	80022a4 <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b7c:	f7ff fb92 	bl	80022a4 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e1bd      	b.n	8002f0a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b8e:	4b30      	ldr	r3, [pc, #192]	; (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d0f0      	beq.n	8002b7c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b9a:	4b2d      	ldr	r3, [pc, #180]	; (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	4929      	ldr	r1, [pc, #164]	; (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	600b      	str	r3, [r1, #0]
 8002bae:	e018      	b.n	8002be2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bb0:	4b27      	ldr	r3, [pc, #156]	; (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a26      	ldr	r2, [pc, #152]	; (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002bb6:	f023 0301 	bic.w	r3, r3, #1
 8002bba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bbc:	f7ff fb72 	bl	80022a4 <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bc4:	f7ff fb6e 	bl	80022a4 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e199      	b.n	8002f0a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bd6:	4b1e      	ldr	r3, [pc, #120]	; (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1f0      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0308 	and.w	r3, r3, #8
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d038      	beq.n	8002c60 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d019      	beq.n	8002c2a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bf6:	4b16      	ldr	r3, [pc, #88]	; (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002bf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bfa:	4a15      	ldr	r2, [pc, #84]	; (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002bfc:	f043 0301 	orr.w	r3, r3, #1
 8002c00:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c02:	f7ff fb4f 	bl	80022a4 <HAL_GetTick>
 8002c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c08:	e008      	b.n	8002c1c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c0a:	f7ff fb4b 	bl	80022a4 <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d901      	bls.n	8002c1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e176      	b.n	8002f0a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c1c:	4b0c      	ldr	r3, [pc, #48]	; (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002c1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d0f0      	beq.n	8002c0a <HAL_RCC_OscConfig+0x23a>
 8002c28:	e01a      	b.n	8002c60 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c2a:	4b09      	ldr	r3, [pc, #36]	; (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002c2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c2e:	4a08      	ldr	r2, [pc, #32]	; (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002c30:	f023 0301 	bic.w	r3, r3, #1
 8002c34:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c36:	f7ff fb35 	bl	80022a4 <HAL_GetTick>
 8002c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c3c:	e00a      	b.n	8002c54 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c3e:	f7ff fb31 	bl	80022a4 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d903      	bls.n	8002c54 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e15c      	b.n	8002f0a <HAL_RCC_OscConfig+0x53a>
 8002c50:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c54:	4b91      	ldr	r3, [pc, #580]	; (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002c56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1ee      	bne.n	8002c3e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0304 	and.w	r3, r3, #4
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f000 80a4 	beq.w	8002db6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c6e:	4b8b      	ldr	r3, [pc, #556]	; (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10d      	bne.n	8002c96 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c7a:	4b88      	ldr	r3, [pc, #544]	; (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	4a87      	ldr	r2, [pc, #540]	; (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c84:	6413      	str	r3, [r2, #64]	; 0x40
 8002c86:	4b85      	ldr	r3, [pc, #532]	; (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c8e:	60bb      	str	r3, [r7, #8]
 8002c90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c92:	2301      	movs	r3, #1
 8002c94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c96:	4b82      	ldr	r3, [pc, #520]	; (8002ea0 <HAL_RCC_OscConfig+0x4d0>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d118      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002ca2:	4b7f      	ldr	r3, [pc, #508]	; (8002ea0 <HAL_RCC_OscConfig+0x4d0>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a7e      	ldr	r2, [pc, #504]	; (8002ea0 <HAL_RCC_OscConfig+0x4d0>)
 8002ca8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cae:	f7ff faf9 	bl	80022a4 <HAL_GetTick>
 8002cb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cb4:	e008      	b.n	8002cc8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cb6:	f7ff faf5 	bl	80022a4 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b64      	cmp	r3, #100	; 0x64
 8002cc2:	d901      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e120      	b.n	8002f0a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cc8:	4b75      	ldr	r3, [pc, #468]	; (8002ea0 <HAL_RCC_OscConfig+0x4d0>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d0f0      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d106      	bne.n	8002cea <HAL_RCC_OscConfig+0x31a>
 8002cdc:	4b6f      	ldr	r3, [pc, #444]	; (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce0:	4a6e      	ldr	r2, [pc, #440]	; (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002ce2:	f043 0301 	orr.w	r3, r3, #1
 8002ce6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ce8:	e02d      	b.n	8002d46 <HAL_RCC_OscConfig+0x376>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10c      	bne.n	8002d0c <HAL_RCC_OscConfig+0x33c>
 8002cf2:	4b6a      	ldr	r3, [pc, #424]	; (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf6:	4a69      	ldr	r2, [pc, #420]	; (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002cf8:	f023 0301 	bic.w	r3, r3, #1
 8002cfc:	6713      	str	r3, [r2, #112]	; 0x70
 8002cfe:	4b67      	ldr	r3, [pc, #412]	; (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d02:	4a66      	ldr	r2, [pc, #408]	; (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002d04:	f023 0304 	bic.w	r3, r3, #4
 8002d08:	6713      	str	r3, [r2, #112]	; 0x70
 8002d0a:	e01c      	b.n	8002d46 <HAL_RCC_OscConfig+0x376>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	2b05      	cmp	r3, #5
 8002d12:	d10c      	bne.n	8002d2e <HAL_RCC_OscConfig+0x35e>
 8002d14:	4b61      	ldr	r3, [pc, #388]	; (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d18:	4a60      	ldr	r2, [pc, #384]	; (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002d1a:	f043 0304 	orr.w	r3, r3, #4
 8002d1e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d20:	4b5e      	ldr	r3, [pc, #376]	; (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d24:	4a5d      	ldr	r2, [pc, #372]	; (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002d26:	f043 0301 	orr.w	r3, r3, #1
 8002d2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d2c:	e00b      	b.n	8002d46 <HAL_RCC_OscConfig+0x376>
 8002d2e:	4b5b      	ldr	r3, [pc, #364]	; (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d32:	4a5a      	ldr	r2, [pc, #360]	; (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002d34:	f023 0301 	bic.w	r3, r3, #1
 8002d38:	6713      	str	r3, [r2, #112]	; 0x70
 8002d3a:	4b58      	ldr	r3, [pc, #352]	; (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3e:	4a57      	ldr	r2, [pc, #348]	; (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002d40:	f023 0304 	bic.w	r3, r3, #4
 8002d44:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d015      	beq.n	8002d7a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d4e:	f7ff faa9 	bl	80022a4 <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d54:	e00a      	b.n	8002d6c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d56:	f7ff faa5 	bl	80022a4 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e0ce      	b.n	8002f0a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d6c:	4b4b      	ldr	r3, [pc, #300]	; (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d0ee      	beq.n	8002d56 <HAL_RCC_OscConfig+0x386>
 8002d78:	e014      	b.n	8002da4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d7a:	f7ff fa93 	bl	80022a4 <HAL_GetTick>
 8002d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d80:	e00a      	b.n	8002d98 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d82:	f7ff fa8f 	bl	80022a4 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e0b8      	b.n	8002f0a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d98:	4b40      	ldr	r3, [pc, #256]	; (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1ee      	bne.n	8002d82 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002da4:	7dfb      	ldrb	r3, [r7, #23]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d105      	bne.n	8002db6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002daa:	4b3c      	ldr	r3, [pc, #240]	; (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	4a3b      	ldr	r2, [pc, #236]	; (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002db0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002db4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f000 80a4 	beq.w	8002f08 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dc0:	4b36      	ldr	r3, [pc, #216]	; (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f003 030c 	and.w	r3, r3, #12
 8002dc8:	2b08      	cmp	r3, #8
 8002dca:	d06b      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d149      	bne.n	8002e68 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dd4:	4b31      	ldr	r3, [pc, #196]	; (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a30      	ldr	r2, [pc, #192]	; (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002dda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de0:	f7ff fa60 	bl	80022a4 <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de8:	f7ff fa5c 	bl	80022a4 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e087      	b.n	8002f0a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dfa:	4b28      	ldr	r3, [pc, #160]	; (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1f0      	bne.n	8002de8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	69da      	ldr	r2, [r3, #28]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e14:	019b      	lsls	r3, r3, #6
 8002e16:	431a      	orrs	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1c:	085b      	lsrs	r3, r3, #1
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	041b      	lsls	r3, r3, #16
 8002e22:	431a      	orrs	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e28:	061b      	lsls	r3, r3, #24
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	4a1b      	ldr	r2, [pc, #108]	; (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002e2e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002e32:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e34:	4b19      	ldr	r3, [pc, #100]	; (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a18      	ldr	r2, [pc, #96]	; (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002e3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e40:	f7ff fa30 	bl	80022a4 <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e48:	f7ff fa2c 	bl	80022a4 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e057      	b.n	8002f0a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e5a:	4b10      	ldr	r3, [pc, #64]	; (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d0f0      	beq.n	8002e48 <HAL_RCC_OscConfig+0x478>
 8002e66:	e04f      	b.n	8002f08 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e68:	4b0c      	ldr	r3, [pc, #48]	; (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a0b      	ldr	r2, [pc, #44]	; (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002e6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e74:	f7ff fa16 	bl	80022a4 <HAL_GetTick>
 8002e78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e7a:	e008      	b.n	8002e8e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e7c:	f7ff fa12 	bl	80022a4 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e03d      	b.n	8002f0a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e8e:	4b03      	ldr	r3, [pc, #12]	; (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1f0      	bne.n	8002e7c <HAL_RCC_OscConfig+0x4ac>
 8002e9a:	e035      	b.n	8002f08 <HAL_RCC_OscConfig+0x538>
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002ea4:	4b1b      	ldr	r3, [pc, #108]	; (8002f14 <HAL_RCC_OscConfig+0x544>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d028      	beq.n	8002f04 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d121      	bne.n	8002f04 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d11a      	bne.n	8002f04 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002eda:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d111      	bne.n	8002f04 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eea:	085b      	lsrs	r3, r3, #1
 8002eec:	3b01      	subs	r3, #1
 8002eee:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d107      	bne.n	8002f04 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d001      	beq.n	8002f08 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e000      	b.n	8002f0a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3718      	adds	r7, #24
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	40023800 	.word	0x40023800

08002f18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002f22:	2300      	movs	r3, #0
 8002f24:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d101      	bne.n	8002f30 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e0d0      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f30:	4b6a      	ldr	r3, [pc, #424]	; (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 030f 	and.w	r3, r3, #15
 8002f38:	683a      	ldr	r2, [r7, #0]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d910      	bls.n	8002f60 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f3e:	4b67      	ldr	r3, [pc, #412]	; (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f023 020f 	bic.w	r2, r3, #15
 8002f46:	4965      	ldr	r1, [pc, #404]	; (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f4e:	4b63      	ldr	r3, [pc, #396]	; (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 030f 	and.w	r3, r3, #15
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d001      	beq.n	8002f60 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e0b8      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d020      	beq.n	8002fae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d005      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f78:	4b59      	ldr	r3, [pc, #356]	; (80030e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	4a58      	ldr	r2, [pc, #352]	; (80030e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f82:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0308 	and.w	r3, r3, #8
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d005      	beq.n	8002f9c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f90:	4b53      	ldr	r3, [pc, #332]	; (80030e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	4a52      	ldr	r2, [pc, #328]	; (80030e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f9a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f9c:	4b50      	ldr	r3, [pc, #320]	; (80030e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	494d      	ldr	r1, [pc, #308]	; (80030e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d040      	beq.n	800303c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d107      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fc2:	4b47      	ldr	r3, [pc, #284]	; (80030e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d115      	bne.n	8002ffa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e07f      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d107      	bne.n	8002fea <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fda:	4b41      	ldr	r3, [pc, #260]	; (80030e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d109      	bne.n	8002ffa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e073      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fea:	4b3d      	ldr	r3, [pc, #244]	; (80030e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e06b      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ffa:	4b39      	ldr	r3, [pc, #228]	; (80030e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f023 0203 	bic.w	r2, r3, #3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	4936      	ldr	r1, [pc, #216]	; (80030e0 <HAL_RCC_ClockConfig+0x1c8>)
 8003008:	4313      	orrs	r3, r2
 800300a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800300c:	f7ff f94a 	bl	80022a4 <HAL_GetTick>
 8003010:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003012:	e00a      	b.n	800302a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003014:	f7ff f946 	bl	80022a4 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003022:	4293      	cmp	r3, r2
 8003024:	d901      	bls.n	800302a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e053      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800302a:	4b2d      	ldr	r3, [pc, #180]	; (80030e0 <HAL_RCC_ClockConfig+0x1c8>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 020c 	and.w	r2, r3, #12
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	429a      	cmp	r2, r3
 800303a:	d1eb      	bne.n	8003014 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800303c:	4b27      	ldr	r3, [pc, #156]	; (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 030f 	and.w	r3, r3, #15
 8003044:	683a      	ldr	r2, [r7, #0]
 8003046:	429a      	cmp	r2, r3
 8003048:	d210      	bcs.n	800306c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800304a:	4b24      	ldr	r3, [pc, #144]	; (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f023 020f 	bic.w	r2, r3, #15
 8003052:	4922      	ldr	r1, [pc, #136]	; (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	4313      	orrs	r3, r2
 8003058:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800305a:	4b20      	ldr	r3, [pc, #128]	; (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 030f 	and.w	r3, r3, #15
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	429a      	cmp	r2, r3
 8003066:	d001      	beq.n	800306c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e032      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0304 	and.w	r3, r3, #4
 8003074:	2b00      	cmp	r3, #0
 8003076:	d008      	beq.n	800308a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003078:	4b19      	ldr	r3, [pc, #100]	; (80030e0 <HAL_RCC_ClockConfig+0x1c8>)
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	4916      	ldr	r1, [pc, #88]	; (80030e0 <HAL_RCC_ClockConfig+0x1c8>)
 8003086:	4313      	orrs	r3, r2
 8003088:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0308 	and.w	r3, r3, #8
 8003092:	2b00      	cmp	r3, #0
 8003094:	d009      	beq.n	80030aa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003096:	4b12      	ldr	r3, [pc, #72]	; (80030e0 <HAL_RCC_ClockConfig+0x1c8>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	490e      	ldr	r1, [pc, #56]	; (80030e0 <HAL_RCC_ClockConfig+0x1c8>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030aa:	f000 f821 	bl	80030f0 <HAL_RCC_GetSysClockFreq>
 80030ae:	4602      	mov	r2, r0
 80030b0:	4b0b      	ldr	r3, [pc, #44]	; (80030e0 <HAL_RCC_ClockConfig+0x1c8>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	091b      	lsrs	r3, r3, #4
 80030b6:	f003 030f 	and.w	r3, r3, #15
 80030ba:	490a      	ldr	r1, [pc, #40]	; (80030e4 <HAL_RCC_ClockConfig+0x1cc>)
 80030bc:	5ccb      	ldrb	r3, [r1, r3]
 80030be:	fa22 f303 	lsr.w	r3, r2, r3
 80030c2:	4a09      	ldr	r2, [pc, #36]	; (80030e8 <HAL_RCC_ClockConfig+0x1d0>)
 80030c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030c6:	4b09      	ldr	r3, [pc, #36]	; (80030ec <HAL_RCC_ClockConfig+0x1d4>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7fe fd82 	bl	8001bd4 <HAL_InitTick>

  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	40023c00 	.word	0x40023c00
 80030e0:	40023800 	.word	0x40023800
 80030e4:	0801052c 	.word	0x0801052c
 80030e8:	20000000 	.word	0x20000000
 80030ec:	20000004 	.word	0x20000004

080030f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030f4:	b094      	sub	sp, #80	; 0x50
 80030f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80030f8:	2300      	movs	r3, #0
 80030fa:	647b      	str	r3, [r7, #68]	; 0x44
 80030fc:	2300      	movs	r3, #0
 80030fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003100:	2300      	movs	r3, #0
 8003102:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003104:	2300      	movs	r3, #0
 8003106:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003108:	4b79      	ldr	r3, [pc, #484]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f003 030c 	and.w	r3, r3, #12
 8003110:	2b08      	cmp	r3, #8
 8003112:	d00d      	beq.n	8003130 <HAL_RCC_GetSysClockFreq+0x40>
 8003114:	2b08      	cmp	r3, #8
 8003116:	f200 80e1 	bhi.w	80032dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800311a:	2b00      	cmp	r3, #0
 800311c:	d002      	beq.n	8003124 <HAL_RCC_GetSysClockFreq+0x34>
 800311e:	2b04      	cmp	r3, #4
 8003120:	d003      	beq.n	800312a <HAL_RCC_GetSysClockFreq+0x3a>
 8003122:	e0db      	b.n	80032dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003124:	4b73      	ldr	r3, [pc, #460]	; (80032f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003126:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003128:	e0db      	b.n	80032e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800312a:	4b73      	ldr	r3, [pc, #460]	; (80032f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800312c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800312e:	e0d8      	b.n	80032e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003130:	4b6f      	ldr	r3, [pc, #444]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003138:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800313a:	4b6d      	ldr	r3, [pc, #436]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d063      	beq.n	800320e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003146:	4b6a      	ldr	r3, [pc, #424]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	099b      	lsrs	r3, r3, #6
 800314c:	2200      	movs	r2, #0
 800314e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003150:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003154:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003158:	633b      	str	r3, [r7, #48]	; 0x30
 800315a:	2300      	movs	r3, #0
 800315c:	637b      	str	r3, [r7, #52]	; 0x34
 800315e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003162:	4622      	mov	r2, r4
 8003164:	462b      	mov	r3, r5
 8003166:	f04f 0000 	mov.w	r0, #0
 800316a:	f04f 0100 	mov.w	r1, #0
 800316e:	0159      	lsls	r1, r3, #5
 8003170:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003174:	0150      	lsls	r0, r2, #5
 8003176:	4602      	mov	r2, r0
 8003178:	460b      	mov	r3, r1
 800317a:	4621      	mov	r1, r4
 800317c:	1a51      	subs	r1, r2, r1
 800317e:	6139      	str	r1, [r7, #16]
 8003180:	4629      	mov	r1, r5
 8003182:	eb63 0301 	sbc.w	r3, r3, r1
 8003186:	617b      	str	r3, [r7, #20]
 8003188:	f04f 0200 	mov.w	r2, #0
 800318c:	f04f 0300 	mov.w	r3, #0
 8003190:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003194:	4659      	mov	r1, fp
 8003196:	018b      	lsls	r3, r1, #6
 8003198:	4651      	mov	r1, sl
 800319a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800319e:	4651      	mov	r1, sl
 80031a0:	018a      	lsls	r2, r1, #6
 80031a2:	4651      	mov	r1, sl
 80031a4:	ebb2 0801 	subs.w	r8, r2, r1
 80031a8:	4659      	mov	r1, fp
 80031aa:	eb63 0901 	sbc.w	r9, r3, r1
 80031ae:	f04f 0200 	mov.w	r2, #0
 80031b2:	f04f 0300 	mov.w	r3, #0
 80031b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031c2:	4690      	mov	r8, r2
 80031c4:	4699      	mov	r9, r3
 80031c6:	4623      	mov	r3, r4
 80031c8:	eb18 0303 	adds.w	r3, r8, r3
 80031cc:	60bb      	str	r3, [r7, #8]
 80031ce:	462b      	mov	r3, r5
 80031d0:	eb49 0303 	adc.w	r3, r9, r3
 80031d4:	60fb      	str	r3, [r7, #12]
 80031d6:	f04f 0200 	mov.w	r2, #0
 80031da:	f04f 0300 	mov.w	r3, #0
 80031de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80031e2:	4629      	mov	r1, r5
 80031e4:	024b      	lsls	r3, r1, #9
 80031e6:	4621      	mov	r1, r4
 80031e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80031ec:	4621      	mov	r1, r4
 80031ee:	024a      	lsls	r2, r1, #9
 80031f0:	4610      	mov	r0, r2
 80031f2:	4619      	mov	r1, r3
 80031f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031f6:	2200      	movs	r2, #0
 80031f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80031fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80031fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003200:	f7fd fdba 	bl	8000d78 <__aeabi_uldivmod>
 8003204:	4602      	mov	r2, r0
 8003206:	460b      	mov	r3, r1
 8003208:	4613      	mov	r3, r2
 800320a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800320c:	e058      	b.n	80032c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800320e:	4b38      	ldr	r3, [pc, #224]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	099b      	lsrs	r3, r3, #6
 8003214:	2200      	movs	r2, #0
 8003216:	4618      	mov	r0, r3
 8003218:	4611      	mov	r1, r2
 800321a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800321e:	623b      	str	r3, [r7, #32]
 8003220:	2300      	movs	r3, #0
 8003222:	627b      	str	r3, [r7, #36]	; 0x24
 8003224:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003228:	4642      	mov	r2, r8
 800322a:	464b      	mov	r3, r9
 800322c:	f04f 0000 	mov.w	r0, #0
 8003230:	f04f 0100 	mov.w	r1, #0
 8003234:	0159      	lsls	r1, r3, #5
 8003236:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800323a:	0150      	lsls	r0, r2, #5
 800323c:	4602      	mov	r2, r0
 800323e:	460b      	mov	r3, r1
 8003240:	4641      	mov	r1, r8
 8003242:	ebb2 0a01 	subs.w	sl, r2, r1
 8003246:	4649      	mov	r1, r9
 8003248:	eb63 0b01 	sbc.w	fp, r3, r1
 800324c:	f04f 0200 	mov.w	r2, #0
 8003250:	f04f 0300 	mov.w	r3, #0
 8003254:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003258:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800325c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003260:	ebb2 040a 	subs.w	r4, r2, sl
 8003264:	eb63 050b 	sbc.w	r5, r3, fp
 8003268:	f04f 0200 	mov.w	r2, #0
 800326c:	f04f 0300 	mov.w	r3, #0
 8003270:	00eb      	lsls	r3, r5, #3
 8003272:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003276:	00e2      	lsls	r2, r4, #3
 8003278:	4614      	mov	r4, r2
 800327a:	461d      	mov	r5, r3
 800327c:	4643      	mov	r3, r8
 800327e:	18e3      	adds	r3, r4, r3
 8003280:	603b      	str	r3, [r7, #0]
 8003282:	464b      	mov	r3, r9
 8003284:	eb45 0303 	adc.w	r3, r5, r3
 8003288:	607b      	str	r3, [r7, #4]
 800328a:	f04f 0200 	mov.w	r2, #0
 800328e:	f04f 0300 	mov.w	r3, #0
 8003292:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003296:	4629      	mov	r1, r5
 8003298:	028b      	lsls	r3, r1, #10
 800329a:	4621      	mov	r1, r4
 800329c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032a0:	4621      	mov	r1, r4
 80032a2:	028a      	lsls	r2, r1, #10
 80032a4:	4610      	mov	r0, r2
 80032a6:	4619      	mov	r1, r3
 80032a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032aa:	2200      	movs	r2, #0
 80032ac:	61bb      	str	r3, [r7, #24]
 80032ae:	61fa      	str	r2, [r7, #28]
 80032b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032b4:	f7fd fd60 	bl	8000d78 <__aeabi_uldivmod>
 80032b8:	4602      	mov	r2, r0
 80032ba:	460b      	mov	r3, r1
 80032bc:	4613      	mov	r3, r2
 80032be:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80032c0:	4b0b      	ldr	r3, [pc, #44]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	0c1b      	lsrs	r3, r3, #16
 80032c6:	f003 0303 	and.w	r3, r3, #3
 80032ca:	3301      	adds	r3, #1
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80032d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032da:	e002      	b.n	80032e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032dc:	4b05      	ldr	r3, [pc, #20]	; (80032f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80032de:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3750      	adds	r7, #80	; 0x50
 80032e8:	46bd      	mov	sp, r7
 80032ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032ee:	bf00      	nop
 80032f0:	40023800 	.word	0x40023800
 80032f4:	00f42400 	.word	0x00f42400
 80032f8:	007a1200 	.word	0x007a1200

080032fc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003300:	4b03      	ldr	r3, [pc, #12]	; (8003310 <HAL_RCC_GetHCLKFreq+0x14>)
 8003302:	681b      	ldr	r3, [r3, #0]
}
 8003304:	4618      	mov	r0, r3
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	20000000 	.word	0x20000000

08003314 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003318:	f7ff fff0 	bl	80032fc <HAL_RCC_GetHCLKFreq>
 800331c:	4602      	mov	r2, r0
 800331e:	4b05      	ldr	r3, [pc, #20]	; (8003334 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	0a9b      	lsrs	r3, r3, #10
 8003324:	f003 0307 	and.w	r3, r3, #7
 8003328:	4903      	ldr	r1, [pc, #12]	; (8003338 <HAL_RCC_GetPCLK1Freq+0x24>)
 800332a:	5ccb      	ldrb	r3, [r1, r3]
 800332c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003330:	4618      	mov	r0, r3
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40023800 	.word	0x40023800
 8003338:	0801053c 	.word	0x0801053c

0800333c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003340:	f7ff ffdc 	bl	80032fc <HAL_RCC_GetHCLKFreq>
 8003344:	4602      	mov	r2, r0
 8003346:	4b05      	ldr	r3, [pc, #20]	; (800335c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	0b5b      	lsrs	r3, r3, #13
 800334c:	f003 0307 	and.w	r3, r3, #7
 8003350:	4903      	ldr	r1, [pc, #12]	; (8003360 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003352:	5ccb      	ldrb	r3, [r1, r3]
 8003354:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003358:	4618      	mov	r0, r3
 800335a:	bd80      	pop	{r7, pc}
 800335c:	40023800 	.word	0x40023800
 8003360:	0801053c 	.word	0x0801053c

08003364 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	220f      	movs	r2, #15
 8003372:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003374:	4b12      	ldr	r3, [pc, #72]	; (80033c0 <HAL_RCC_GetClockConfig+0x5c>)
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f003 0203 	and.w	r2, r3, #3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003380:	4b0f      	ldr	r3, [pc, #60]	; (80033c0 <HAL_RCC_GetClockConfig+0x5c>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800338c:	4b0c      	ldr	r3, [pc, #48]	; (80033c0 <HAL_RCC_GetClockConfig+0x5c>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003398:	4b09      	ldr	r3, [pc, #36]	; (80033c0 <HAL_RCC_GetClockConfig+0x5c>)
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	08db      	lsrs	r3, r3, #3
 800339e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80033a6:	4b07      	ldr	r3, [pc, #28]	; (80033c4 <HAL_RCC_GetClockConfig+0x60>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 020f 	and.w	r2, r3, #15
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	601a      	str	r2, [r3, #0]
}
 80033b2:	bf00      	nop
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	40023800 	.word	0x40023800
 80033c4:	40023c00 	.word	0x40023c00

080033c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b088      	sub	sp, #32
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80033d0:	2300      	movs	r3, #0
 80033d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80033d4:	2300      	movs	r3, #0
 80033d6:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 80033d8:	2300      	movs	r3, #0
 80033da:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80033dc:	2300      	movs	r3, #0
 80033de:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d012      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80033ec:	4b65      	ldr	r3, [pc, #404]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	4a64      	ldr	r2, [pc, #400]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80033f2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80033f6:	6093      	str	r3, [r2, #8]
 80033f8:	4b62      	ldr	r3, [pc, #392]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80033fa:	689a      	ldr	r2, [r3, #8]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003400:	4960      	ldr	r1, [pc, #384]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003402:	4313      	orrs	r3, r2
 8003404:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 800340e:	2301      	movs	r3, #1
 8003410:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d017      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800341e:	4b59      	ldr	r3, [pc, #356]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003420:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003424:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800342c:	4955      	ldr	r1, [pc, #340]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800342e:	4313      	orrs	r3, r2
 8003430:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003438:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800343c:	d101      	bne.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 800343e:	2301      	movs	r3, #1
 8003440:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 800344a:	2301      	movs	r3, #1
 800344c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d017      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800345a:	4b4a      	ldr	r3, [pc, #296]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800345c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003460:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003468:	4946      	ldr	r1, [pc, #280]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800346a:	4313      	orrs	r3, r2
 800346c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003474:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003478:	d101      	bne.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 800347a:	2301      	movs	r3, #1
 800347c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8003486:	2301      	movs	r3, #1
 8003488:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0320 	and.w	r3, r3, #32
 8003492:	2b00      	cmp	r3, #0
 8003494:	f000 808b 	beq.w	80035ae <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003498:	4b3a      	ldr	r3, [pc, #232]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800349a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349c:	4a39      	ldr	r2, [pc, #228]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800349e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034a2:	6413      	str	r3, [r2, #64]	; 0x40
 80034a4:	4b37      	ldr	r3, [pc, #220]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80034a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ac:	60fb      	str	r3, [r7, #12]
 80034ae:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80034b0:	4b35      	ldr	r3, [pc, #212]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a34      	ldr	r2, [pc, #208]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80034b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034bc:	f7fe fef2 	bl	80022a4 <HAL_GetTick>
 80034c0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80034c2:	e008      	b.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034c4:	f7fe feee 	bl	80022a4 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b64      	cmp	r3, #100	; 0x64
 80034d0:	d901      	bls.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e2bc      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80034d6:	4b2c      	ldr	r3, [pc, #176]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d0f0      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034e2:	4b28      	ldr	r3, [pc, #160]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80034e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034ea:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d035      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x196>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d02e      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003500:	4b20      	ldr	r3, [pc, #128]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003504:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003508:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800350a:	4b1e      	ldr	r3, [pc, #120]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800350c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350e:	4a1d      	ldr	r2, [pc, #116]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003514:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003516:	4b1b      	ldr	r3, [pc, #108]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800351a:	4a1a      	ldr	r2, [pc, #104]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800351c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003520:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003522:	4a18      	ldr	r2, [pc, #96]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003528:	4b16      	ldr	r3, [pc, #88]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800352a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352c:	f003 0301 	and.w	r3, r3, #1
 8003530:	2b01      	cmp	r3, #1
 8003532:	d114      	bne.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003534:	f7fe feb6 	bl	80022a4 <HAL_GetTick>
 8003538:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800353a:	e00a      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800353c:	f7fe feb2 	bl	80022a4 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	f241 3288 	movw	r2, #5000	; 0x1388
 800354a:	4293      	cmp	r3, r2
 800354c:	d901      	bls.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e27e      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003552:	4b0c      	ldr	r3, [pc, #48]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d0ee      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003562:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003566:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800356a:	d111      	bne.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 800356c:	4b05      	ldr	r3, [pc, #20]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003578:	4b04      	ldr	r3, [pc, #16]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800357a:	400b      	ands	r3, r1
 800357c:	4901      	ldr	r1, [pc, #4]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800357e:	4313      	orrs	r3, r2
 8003580:	608b      	str	r3, [r1, #8]
 8003582:	e00b      	b.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003584:	40023800 	.word	0x40023800
 8003588:	40007000 	.word	0x40007000
 800358c:	0ffffcff 	.word	0x0ffffcff
 8003590:	4ba4      	ldr	r3, [pc, #656]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	4aa3      	ldr	r2, [pc, #652]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003596:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800359a:	6093      	str	r3, [r2, #8]
 800359c:	4ba1      	ldr	r3, [pc, #644]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800359e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035a8:	499e      	ldr	r1, [pc, #632]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0310 	and.w	r3, r3, #16
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d010      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80035ba:	4b9a      	ldr	r3, [pc, #616]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80035bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035c0:	4a98      	ldr	r2, [pc, #608]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80035c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035c6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80035ca:	4b96      	ldr	r3, [pc, #600]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80035cc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d4:	4993      	ldr	r1, [pc, #588]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00a      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035e8:	4b8e      	ldr	r3, [pc, #568]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80035ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035f6:	498b      	ldr	r1, [pc, #556]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00a      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800360a:	4b86      	ldr	r3, [pc, #536]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800360c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003610:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003618:	4982      	ldr	r1, [pc, #520]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800361a:	4313      	orrs	r3, r2
 800361c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00a      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800362c:	4b7d      	ldr	r3, [pc, #500]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800362e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003632:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800363a:	497a      	ldr	r1, [pc, #488]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800363c:	4313      	orrs	r3, r2
 800363e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00a      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800364e:	4b75      	ldr	r3, [pc, #468]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003654:	f023 0203 	bic.w	r2, r3, #3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800365c:	4971      	ldr	r1, [pc, #452]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800365e:	4313      	orrs	r3, r2
 8003660:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00a      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003670:	4b6c      	ldr	r3, [pc, #432]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003676:	f023 020c 	bic.w	r2, r3, #12
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367e:	4969      	ldr	r1, [pc, #420]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003680:	4313      	orrs	r3, r2
 8003682:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00a      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003692:	4b64      	ldr	r3, [pc, #400]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003698:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a0:	4960      	ldr	r1, [pc, #384]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00a      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80036b4:	4b5b      	ldr	r3, [pc, #364]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80036b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036c2:	4958      	ldr	r1, [pc, #352]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00a      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80036d6:	4b53      	ldr	r3, [pc, #332]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80036d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036e4:	494f      	ldr	r1, [pc, #316]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d00a      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80036f8:	4b4a      	ldr	r3, [pc, #296]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80036fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003706:	4947      	ldr	r1, [pc, #284]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003708:	4313      	orrs	r3, r2
 800370a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00a      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800371a:	4b42      	ldr	r3, [pc, #264]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800371c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003720:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003728:	493e      	ldr	r1, [pc, #248]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800372a:	4313      	orrs	r3, r2
 800372c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00a      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800373c:	4b39      	ldr	r3, [pc, #228]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800373e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003742:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800374a:	4936      	ldr	r1, [pc, #216]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800374c:	4313      	orrs	r3, r2
 800374e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d011      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800375e:	4b31      	ldr	r3, [pc, #196]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003764:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800376c:	492d      	ldr	r1, [pc, #180]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800376e:	4313      	orrs	r3, r2
 8003770:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003778:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800377c:	d101      	bne.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 800377e:	2301      	movs	r3, #1
 8003780:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00a      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800378e:	4b25      	ldr	r3, [pc, #148]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003794:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800379c:	4921      	ldr	r1, [pc, #132]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d00a      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80037b0:	4b1c      	ldr	r3, [pc, #112]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80037b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037be:	4919      	ldr	r1, [pc, #100]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00a      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80037d2:	4b14      	ldr	r3, [pc, #80]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80037d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037e0:	4910      	ldr	r1, [pc, #64]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d006      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x434>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	f000 809d 	beq.w	8003936 <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80037fc:	4b09      	ldr	r3, [pc, #36]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a08      	ldr	r2, [pc, #32]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003802:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003806:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003808:	f7fe fd4c 	bl	80022a4 <HAL_GetTick>
 800380c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800380e:	e00b      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003810:	f7fe fd48 	bl	80022a4 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b64      	cmp	r3, #100	; 0x64
 800381c:	d904      	bls.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e116      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8003822:	bf00      	nop
 8003824:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003828:	4b8b      	ldr	r3, [pc, #556]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1ed      	bne.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	2b00      	cmp	r3, #0
 800383e:	d017      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003844:	2b00      	cmp	r3, #0
 8003846:	d113      	bne.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003848:	4b83      	ldr	r3, [pc, #524]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800384a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800384e:	0e1b      	lsrs	r3, r3, #24
 8003850:	f003 030f 	and.w	r3, r3, #15
 8003854:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	019a      	lsls	r2, r3, #6
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	061b      	lsls	r3, r3, #24
 8003860:	431a      	orrs	r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	071b      	lsls	r3, r3, #28
 8003868:	497b      	ldr	r1, [pc, #492]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800386a:	4313      	orrs	r3, r2
 800386c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d004      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003880:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003884:	d00a      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800388e:	2b00      	cmp	r3, #0
 8003890:	d024      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003896:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800389a:	d11f      	bne.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800389c:	4b6e      	ldr	r3, [pc, #440]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800389e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038a2:	0f1b      	lsrs	r3, r3, #28
 80038a4:	f003 0307 	and.w	r3, r3, #7
 80038a8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	019a      	lsls	r2, r3, #6
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	061b      	lsls	r3, r3, #24
 80038b6:	431a      	orrs	r2, r3
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	071b      	lsls	r3, r3, #28
 80038bc:	4966      	ldr	r1, [pc, #408]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80038c4:	4b64      	ldr	r3, [pc, #400]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80038c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038ca:	f023 021f 	bic.w	r2, r3, #31
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	69db      	ldr	r3, [r3, #28]
 80038d2:	3b01      	subs	r3, #1
 80038d4:	4960      	ldr	r1, [pc, #384]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00d      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	019a      	lsls	r2, r3, #6
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	061b      	lsls	r3, r3, #24
 80038f4:	431a      	orrs	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	071b      	lsls	r3, r3, #28
 80038fc:	4956      	ldr	r1, [pc, #344]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003904:	4b54      	ldr	r3, [pc, #336]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a53      	ldr	r2, [pc, #332]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800390a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800390e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003910:	f7fe fcc8 	bl	80022a4 <HAL_GetTick>
 8003914:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003916:	e008      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003918:	f7fe fcc4 	bl	80022a4 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b64      	cmp	r3, #100	; 0x64
 8003924:	d901      	bls.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e092      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800392a:	4b4b      	ldr	r3, [pc, #300]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d0f0      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	2b01      	cmp	r3, #1
 800393a:	f040 8088 	bne.w	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800393e:	4b46      	ldr	r3, [pc, #280]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a45      	ldr	r2, [pc, #276]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003944:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003948:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800394a:	f7fe fcab 	bl	80022a4 <HAL_GetTick>
 800394e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003950:	e008      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003952:	f7fe fca7 	bl	80022a4 <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	2b64      	cmp	r3, #100	; 0x64
 800395e:	d901      	bls.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e075      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003964:	4b3c      	ldr	r3, [pc, #240]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800396c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003970:	d0ef      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d003      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x5be>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003982:	2b00      	cmp	r3, #0
 8003984:	d009      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800398e:	2b00      	cmp	r3, #0
 8003990:	d024      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003996:	2b00      	cmp	r3, #0
 8003998:	d120      	bne.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800399a:	4b2f      	ldr	r3, [pc, #188]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800399c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a0:	0c1b      	lsrs	r3, r3, #16
 80039a2:	f003 0303 	and.w	r3, r3, #3
 80039a6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	019a      	lsls	r2, r3, #6
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	041b      	lsls	r3, r3, #16
 80039b2:	431a      	orrs	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	695b      	ldr	r3, [r3, #20]
 80039b8:	061b      	lsls	r3, r3, #24
 80039ba:	4927      	ldr	r1, [pc, #156]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80039c2:	4b25      	ldr	r3, [pc, #148]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80039c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039c8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a1b      	ldr	r3, [r3, #32]
 80039d0:	3b01      	subs	r3, #1
 80039d2:	021b      	lsls	r3, r3, #8
 80039d4:	4920      	ldr	r1, [pc, #128]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d018      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x652>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039f0:	d113      	bne.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80039f2:	4b19      	ldr	r3, [pc, #100]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80039f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f8:	0e1b      	lsrs	r3, r3, #24
 80039fa:	f003 030f 	and.w	r3, r3, #15
 80039fe:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	019a      	lsls	r2, r3, #6
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	041b      	lsls	r3, r3, #16
 8003a0c:	431a      	orrs	r2, r3
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	061b      	lsls	r3, r3, #24
 8003a12:	4911      	ldr	r1, [pc, #68]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003a1a:	4b0f      	ldr	r3, [pc, #60]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a0e      	ldr	r2, [pc, #56]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a26:	f7fe fc3d 	bl	80022a4 <HAL_GetTick>
 8003a2a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a2c:	e008      	b.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003a2e:	f7fe fc39 	bl	80022a4 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b64      	cmp	r3, #100	; 0x64
 8003a3a:	d901      	bls.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e007      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a40:	4b05      	ldr	r3, [pc, #20]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a4c:	d1ef      	bne.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3720      	adds	r7, #32
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	40023800 	.word	0x40023800

08003a5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e049      	b.n	8003b02 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d106      	bne.n	8003a88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7fe fa92 	bl	8001fac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	3304      	adds	r3, #4
 8003a98:	4619      	mov	r1, r3
 8003a9a:	4610      	mov	r0, r2
 8003a9c:	f000 fdb2 	bl	8004604 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
	...

08003b0c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d001      	beq.n	8003b24 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e04c      	b.n	8003bbe <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2202      	movs	r2, #2
 8003b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a26      	ldr	r2, [pc, #152]	; (8003bcc <HAL_TIM_Base_Start+0xc0>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d022      	beq.n	8003b7c <HAL_TIM_Base_Start+0x70>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b3e:	d01d      	beq.n	8003b7c <HAL_TIM_Base_Start+0x70>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a22      	ldr	r2, [pc, #136]	; (8003bd0 <HAL_TIM_Base_Start+0xc4>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d018      	beq.n	8003b7c <HAL_TIM_Base_Start+0x70>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a21      	ldr	r2, [pc, #132]	; (8003bd4 <HAL_TIM_Base_Start+0xc8>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d013      	beq.n	8003b7c <HAL_TIM_Base_Start+0x70>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a1f      	ldr	r2, [pc, #124]	; (8003bd8 <HAL_TIM_Base_Start+0xcc>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d00e      	beq.n	8003b7c <HAL_TIM_Base_Start+0x70>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a1e      	ldr	r2, [pc, #120]	; (8003bdc <HAL_TIM_Base_Start+0xd0>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d009      	beq.n	8003b7c <HAL_TIM_Base_Start+0x70>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a1c      	ldr	r2, [pc, #112]	; (8003be0 <HAL_TIM_Base_Start+0xd4>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d004      	beq.n	8003b7c <HAL_TIM_Base_Start+0x70>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a1b      	ldr	r2, [pc, #108]	; (8003be4 <HAL_TIM_Base_Start+0xd8>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d115      	bne.n	8003ba8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	689a      	ldr	r2, [r3, #8]
 8003b82:	4b19      	ldr	r3, [pc, #100]	; (8003be8 <HAL_TIM_Base_Start+0xdc>)
 8003b84:	4013      	ands	r3, r2
 8003b86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2b06      	cmp	r3, #6
 8003b8c:	d015      	beq.n	8003bba <HAL_TIM_Base_Start+0xae>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b94:	d011      	beq.n	8003bba <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f042 0201 	orr.w	r2, r2, #1
 8003ba4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ba6:	e008      	b.n	8003bba <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f042 0201 	orr.w	r2, r2, #1
 8003bb6:	601a      	str	r2, [r3, #0]
 8003bb8:	e000      	b.n	8003bbc <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3714      	adds	r7, #20
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	40010000 	.word	0x40010000
 8003bd0:	40000400 	.word	0x40000400
 8003bd4:	40000800 	.word	0x40000800
 8003bd8:	40000c00 	.word	0x40000c00
 8003bdc:	40010400 	.word	0x40010400
 8003be0:	40014000 	.word	0x40014000
 8003be4:	40001800 	.word	0x40001800
 8003be8:	00010007 	.word	0x00010007

08003bec <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	6a1a      	ldr	r2, [r3, #32]
 8003bfa:	f241 1311 	movw	r3, #4369	; 0x1111
 8003bfe:	4013      	ands	r3, r2
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d10f      	bne.n	8003c24 <HAL_TIM_Base_Stop+0x38>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	6a1a      	ldr	r2, [r3, #32]
 8003c0a:	f240 4344 	movw	r3, #1092	; 0x444
 8003c0e:	4013      	ands	r3, r2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d107      	bne.n	8003c24 <HAL_TIM_Base_Stop+0x38>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f022 0201 	bic.w	r2, r2, #1
 8003c22:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
	...

08003c3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d001      	beq.n	8003c54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e054      	b.n	8003cfe <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2202      	movs	r2, #2
 8003c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68da      	ldr	r2, [r3, #12]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f042 0201 	orr.w	r2, r2, #1
 8003c6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a26      	ldr	r2, [pc, #152]	; (8003d0c <HAL_TIM_Base_Start_IT+0xd0>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d022      	beq.n	8003cbc <HAL_TIM_Base_Start_IT+0x80>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c7e:	d01d      	beq.n	8003cbc <HAL_TIM_Base_Start_IT+0x80>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a22      	ldr	r2, [pc, #136]	; (8003d10 <HAL_TIM_Base_Start_IT+0xd4>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d018      	beq.n	8003cbc <HAL_TIM_Base_Start_IT+0x80>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a21      	ldr	r2, [pc, #132]	; (8003d14 <HAL_TIM_Base_Start_IT+0xd8>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d013      	beq.n	8003cbc <HAL_TIM_Base_Start_IT+0x80>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a1f      	ldr	r2, [pc, #124]	; (8003d18 <HAL_TIM_Base_Start_IT+0xdc>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d00e      	beq.n	8003cbc <HAL_TIM_Base_Start_IT+0x80>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a1e      	ldr	r2, [pc, #120]	; (8003d1c <HAL_TIM_Base_Start_IT+0xe0>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d009      	beq.n	8003cbc <HAL_TIM_Base_Start_IT+0x80>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a1c      	ldr	r2, [pc, #112]	; (8003d20 <HAL_TIM_Base_Start_IT+0xe4>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d004      	beq.n	8003cbc <HAL_TIM_Base_Start_IT+0x80>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a1b      	ldr	r2, [pc, #108]	; (8003d24 <HAL_TIM_Base_Start_IT+0xe8>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d115      	bne.n	8003ce8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689a      	ldr	r2, [r3, #8]
 8003cc2:	4b19      	ldr	r3, [pc, #100]	; (8003d28 <HAL_TIM_Base_Start_IT+0xec>)
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2b06      	cmp	r3, #6
 8003ccc:	d015      	beq.n	8003cfa <HAL_TIM_Base_Start_IT+0xbe>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cd4:	d011      	beq.n	8003cfa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f042 0201 	orr.w	r2, r2, #1
 8003ce4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ce6:	e008      	b.n	8003cfa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f042 0201 	orr.w	r2, r2, #1
 8003cf6:	601a      	str	r2, [r3, #0]
 8003cf8:	e000      	b.n	8003cfc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cfa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3714      	adds	r7, #20
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	40010000 	.word	0x40010000
 8003d10:	40000400 	.word	0x40000400
 8003d14:	40000800 	.word	0x40000800
 8003d18:	40000c00 	.word	0x40000c00
 8003d1c:	40010400 	.word	0x40010400
 8003d20:	40014000 	.word	0x40014000
 8003d24:	40001800 	.word	0x40001800
 8003d28:	00010007 	.word	0x00010007

08003d2c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d101      	bne.n	8003d3e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e049      	b.n	8003dd2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d106      	bne.n	8003d58 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f7fe f96c 	bl	8002030 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	3304      	adds	r3, #4
 8003d68:	4619      	mov	r1, r3
 8003d6a:	4610      	mov	r0, r2
 8003d6c:	f000 fc4a 	bl	8004604 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
	...

08003ddc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d109      	bne.n	8003e00 <HAL_TIM_PWM_Start+0x24>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	bf14      	ite	ne
 8003df8:	2301      	movne	r3, #1
 8003dfa:	2300      	moveq	r3, #0
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	e03c      	b.n	8003e7a <HAL_TIM_PWM_Start+0x9e>
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	2b04      	cmp	r3, #4
 8003e04:	d109      	bne.n	8003e1a <HAL_TIM_PWM_Start+0x3e>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	bf14      	ite	ne
 8003e12:	2301      	movne	r3, #1
 8003e14:	2300      	moveq	r3, #0
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	e02f      	b.n	8003e7a <HAL_TIM_PWM_Start+0x9e>
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	2b08      	cmp	r3, #8
 8003e1e:	d109      	bne.n	8003e34 <HAL_TIM_PWM_Start+0x58>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	bf14      	ite	ne
 8003e2c:	2301      	movne	r3, #1
 8003e2e:	2300      	moveq	r3, #0
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	e022      	b.n	8003e7a <HAL_TIM_PWM_Start+0x9e>
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	2b0c      	cmp	r3, #12
 8003e38:	d109      	bne.n	8003e4e <HAL_TIM_PWM_Start+0x72>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	bf14      	ite	ne
 8003e46:	2301      	movne	r3, #1
 8003e48:	2300      	moveq	r3, #0
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	e015      	b.n	8003e7a <HAL_TIM_PWM_Start+0x9e>
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	2b10      	cmp	r3, #16
 8003e52:	d109      	bne.n	8003e68 <HAL_TIM_PWM_Start+0x8c>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	bf14      	ite	ne
 8003e60:	2301      	movne	r3, #1
 8003e62:	2300      	moveq	r3, #0
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	e008      	b.n	8003e7a <HAL_TIM_PWM_Start+0x9e>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	bf14      	ite	ne
 8003e74:	2301      	movne	r3, #1
 8003e76:	2300      	moveq	r3, #0
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e092      	b.n	8003fa8 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d104      	bne.n	8003e92 <HAL_TIM_PWM_Start+0xb6>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e90:	e023      	b.n	8003eda <HAL_TIM_PWM_Start+0xfe>
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	2b04      	cmp	r3, #4
 8003e96:	d104      	bne.n	8003ea2 <HAL_TIM_PWM_Start+0xc6>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ea0:	e01b      	b.n	8003eda <HAL_TIM_PWM_Start+0xfe>
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	2b08      	cmp	r3, #8
 8003ea6:	d104      	bne.n	8003eb2 <HAL_TIM_PWM_Start+0xd6>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2202      	movs	r2, #2
 8003eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003eb0:	e013      	b.n	8003eda <HAL_TIM_PWM_Start+0xfe>
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	2b0c      	cmp	r3, #12
 8003eb6:	d104      	bne.n	8003ec2 <HAL_TIM_PWM_Start+0xe6>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2202      	movs	r2, #2
 8003ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ec0:	e00b      	b.n	8003eda <HAL_TIM_PWM_Start+0xfe>
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	2b10      	cmp	r3, #16
 8003ec6:	d104      	bne.n	8003ed2 <HAL_TIM_PWM_Start+0xf6>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2202      	movs	r2, #2
 8003ecc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ed0:	e003      	b.n	8003eda <HAL_TIM_PWM_Start+0xfe>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2202      	movs	r2, #2
 8003ed6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	6839      	ldr	r1, [r7, #0]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f000 ff9b 	bl	8004e1e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a30      	ldr	r2, [pc, #192]	; (8003fb0 <HAL_TIM_PWM_Start+0x1d4>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d004      	beq.n	8003efc <HAL_TIM_PWM_Start+0x120>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a2f      	ldr	r2, [pc, #188]	; (8003fb4 <HAL_TIM_PWM_Start+0x1d8>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d101      	bne.n	8003f00 <HAL_TIM_PWM_Start+0x124>
 8003efc:	2301      	movs	r3, #1
 8003efe:	e000      	b.n	8003f02 <HAL_TIM_PWM_Start+0x126>
 8003f00:	2300      	movs	r3, #0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d007      	beq.n	8003f16 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f14:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a25      	ldr	r2, [pc, #148]	; (8003fb0 <HAL_TIM_PWM_Start+0x1d4>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d022      	beq.n	8003f66 <HAL_TIM_PWM_Start+0x18a>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f28:	d01d      	beq.n	8003f66 <HAL_TIM_PWM_Start+0x18a>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a22      	ldr	r2, [pc, #136]	; (8003fb8 <HAL_TIM_PWM_Start+0x1dc>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d018      	beq.n	8003f66 <HAL_TIM_PWM_Start+0x18a>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a20      	ldr	r2, [pc, #128]	; (8003fbc <HAL_TIM_PWM_Start+0x1e0>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d013      	beq.n	8003f66 <HAL_TIM_PWM_Start+0x18a>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a1f      	ldr	r2, [pc, #124]	; (8003fc0 <HAL_TIM_PWM_Start+0x1e4>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d00e      	beq.n	8003f66 <HAL_TIM_PWM_Start+0x18a>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a19      	ldr	r2, [pc, #100]	; (8003fb4 <HAL_TIM_PWM_Start+0x1d8>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d009      	beq.n	8003f66 <HAL_TIM_PWM_Start+0x18a>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a1b      	ldr	r2, [pc, #108]	; (8003fc4 <HAL_TIM_PWM_Start+0x1e8>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d004      	beq.n	8003f66 <HAL_TIM_PWM_Start+0x18a>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a19      	ldr	r2, [pc, #100]	; (8003fc8 <HAL_TIM_PWM_Start+0x1ec>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d115      	bne.n	8003f92 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	4b17      	ldr	r3, [pc, #92]	; (8003fcc <HAL_TIM_PWM_Start+0x1f0>)
 8003f6e:	4013      	ands	r3, r2
 8003f70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2b06      	cmp	r3, #6
 8003f76:	d015      	beq.n	8003fa4 <HAL_TIM_PWM_Start+0x1c8>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f7e:	d011      	beq.n	8003fa4 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f042 0201 	orr.w	r2, r2, #1
 8003f8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f90:	e008      	b.n	8003fa4 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f042 0201 	orr.w	r2, r2, #1
 8003fa0:	601a      	str	r2, [r3, #0]
 8003fa2:	e000      	b.n	8003fa6 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fa4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	40010000 	.word	0x40010000
 8003fb4:	40010400 	.word	0x40010400
 8003fb8:	40000400 	.word	0x40000400
 8003fbc:	40000800 	.word	0x40000800
 8003fc0:	40000c00 	.word	0x40000c00
 8003fc4:	40014000 	.word	0x40014000
 8003fc8:	40001800 	.word	0x40001800
 8003fcc:	00010007 	.word	0x00010007

08003fd0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	6839      	ldr	r1, [r7, #0]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f000 ff1b 	bl	8004e1e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a36      	ldr	r2, [pc, #216]	; (80040c8 <HAL_TIM_PWM_Stop+0xf8>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d004      	beq.n	8003ffc <HAL_TIM_PWM_Stop+0x2c>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a35      	ldr	r2, [pc, #212]	; (80040cc <HAL_TIM_PWM_Stop+0xfc>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d101      	bne.n	8004000 <HAL_TIM_PWM_Stop+0x30>
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e000      	b.n	8004002 <HAL_TIM_PWM_Stop+0x32>
 8004000:	2300      	movs	r3, #0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d017      	beq.n	8004036 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	6a1a      	ldr	r2, [r3, #32]
 800400c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004010:	4013      	ands	r3, r2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d10f      	bne.n	8004036 <HAL_TIM_PWM_Stop+0x66>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	6a1a      	ldr	r2, [r3, #32]
 800401c:	f240 4344 	movw	r3, #1092	; 0x444
 8004020:	4013      	ands	r3, r2
 8004022:	2b00      	cmp	r3, #0
 8004024:	d107      	bne.n	8004036 <HAL_TIM_PWM_Stop+0x66>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004034:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	6a1a      	ldr	r2, [r3, #32]
 800403c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004040:	4013      	ands	r3, r2
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10f      	bne.n	8004066 <HAL_TIM_PWM_Stop+0x96>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6a1a      	ldr	r2, [r3, #32]
 800404c:	f240 4344 	movw	r3, #1092	; 0x444
 8004050:	4013      	ands	r3, r2
 8004052:	2b00      	cmp	r3, #0
 8004054:	d107      	bne.n	8004066 <HAL_TIM_PWM_Stop+0x96>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f022 0201 	bic.w	r2, r2, #1
 8004064:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d104      	bne.n	8004076 <HAL_TIM_PWM_Stop+0xa6>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004074:	e023      	b.n	80040be <HAL_TIM_PWM_Stop+0xee>
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	2b04      	cmp	r3, #4
 800407a:	d104      	bne.n	8004086 <HAL_TIM_PWM_Stop+0xb6>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004084:	e01b      	b.n	80040be <HAL_TIM_PWM_Stop+0xee>
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	2b08      	cmp	r3, #8
 800408a:	d104      	bne.n	8004096 <HAL_TIM_PWM_Stop+0xc6>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004094:	e013      	b.n	80040be <HAL_TIM_PWM_Stop+0xee>
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	2b0c      	cmp	r3, #12
 800409a:	d104      	bne.n	80040a6 <HAL_TIM_PWM_Stop+0xd6>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040a4:	e00b      	b.n	80040be <HAL_TIM_PWM_Stop+0xee>
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	2b10      	cmp	r3, #16
 80040aa:	d104      	bne.n	80040b6 <HAL_TIM_PWM_Stop+0xe6>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040b4:	e003      	b.n	80040be <HAL_TIM_PWM_Stop+0xee>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3708      	adds	r7, #8
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	40010000 	.word	0x40010000
 80040cc:	40010400 	.word	0x40010400

080040d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d122      	bne.n	800412c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	f003 0302 	and.w	r3, r3, #2
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d11b      	bne.n	800412c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f06f 0202 	mvn.w	r2, #2
 80040fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2201      	movs	r2, #1
 8004102:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	f003 0303 	and.w	r3, r3, #3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d003      	beq.n	800411a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 fa58 	bl	80045c8 <HAL_TIM_IC_CaptureCallback>
 8004118:	e005      	b.n	8004126 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 fa4a 	bl	80045b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 fa5b 	bl	80045dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	f003 0304 	and.w	r3, r3, #4
 8004136:	2b04      	cmp	r3, #4
 8004138:	d122      	bne.n	8004180 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	f003 0304 	and.w	r3, r3, #4
 8004144:	2b04      	cmp	r3, #4
 8004146:	d11b      	bne.n	8004180 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f06f 0204 	mvn.w	r2, #4
 8004150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2202      	movs	r2, #2
 8004156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004162:	2b00      	cmp	r3, #0
 8004164:	d003      	beq.n	800416e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 fa2e 	bl	80045c8 <HAL_TIM_IC_CaptureCallback>
 800416c:	e005      	b.n	800417a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 fa20 	bl	80045b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 fa31 	bl	80045dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	f003 0308 	and.w	r3, r3, #8
 800418a:	2b08      	cmp	r3, #8
 800418c:	d122      	bne.n	80041d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	f003 0308 	and.w	r3, r3, #8
 8004198:	2b08      	cmp	r3, #8
 800419a:	d11b      	bne.n	80041d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f06f 0208 	mvn.w	r2, #8
 80041a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2204      	movs	r2, #4
 80041aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	69db      	ldr	r3, [r3, #28]
 80041b2:	f003 0303 	and.w	r3, r3, #3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d003      	beq.n	80041c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 fa04 	bl	80045c8 <HAL_TIM_IC_CaptureCallback>
 80041c0:	e005      	b.n	80041ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 f9f6 	bl	80045b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 fa07 	bl	80045dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	f003 0310 	and.w	r3, r3, #16
 80041de:	2b10      	cmp	r3, #16
 80041e0:	d122      	bne.n	8004228 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	f003 0310 	and.w	r3, r3, #16
 80041ec:	2b10      	cmp	r3, #16
 80041ee:	d11b      	bne.n	8004228 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f06f 0210 	mvn.w	r2, #16
 80041f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2208      	movs	r2, #8
 80041fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	69db      	ldr	r3, [r3, #28]
 8004206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800420a:	2b00      	cmp	r3, #0
 800420c:	d003      	beq.n	8004216 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 f9da 	bl	80045c8 <HAL_TIM_IC_CaptureCallback>
 8004214:	e005      	b.n	8004222 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 f9cc 	bl	80045b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 f9dd 	bl	80045dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	2b01      	cmp	r3, #1
 8004234:	d10e      	bne.n	8004254 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	f003 0301 	and.w	r3, r3, #1
 8004240:	2b01      	cmp	r3, #1
 8004242:	d107      	bne.n	8004254 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f06f 0201 	mvn.w	r2, #1
 800424c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f7fd fc80 	bl	8001b54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800425e:	2b80      	cmp	r3, #128	; 0x80
 8004260:	d10e      	bne.n	8004280 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800426c:	2b80      	cmp	r3, #128	; 0x80
 800426e:	d107      	bne.n	8004280 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 fe8c 	bl	8004f98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800428a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800428e:	d10e      	bne.n	80042ae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800429a:	2b80      	cmp	r3, #128	; 0x80
 800429c:	d107      	bne.n	80042ae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80042a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f000 fe7f 	bl	8004fac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b8:	2b40      	cmp	r3, #64	; 0x40
 80042ba:	d10e      	bne.n	80042da <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c6:	2b40      	cmp	r3, #64	; 0x40
 80042c8:	d107      	bne.n	80042da <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 f98b 	bl	80045f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	f003 0320 	and.w	r3, r3, #32
 80042e4:	2b20      	cmp	r3, #32
 80042e6:	d10e      	bne.n	8004306 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	f003 0320 	and.w	r3, r3, #32
 80042f2:	2b20      	cmp	r3, #32
 80042f4:	d107      	bne.n	8004306 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f06f 0220 	mvn.w	r2, #32
 80042fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 fe3f 	bl	8004f84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004306:	bf00      	nop
 8004308:	3708      	adds	r7, #8
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
	...

08004310 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004322:	2b01      	cmp	r3, #1
 8004324:	d101      	bne.n	800432a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004326:	2302      	movs	r3, #2
 8004328:	e0fd      	b.n	8004526 <HAL_TIM_PWM_ConfigChannel+0x216>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2201      	movs	r2, #1
 800432e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2b14      	cmp	r3, #20
 8004336:	f200 80f0 	bhi.w	800451a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800433a:	a201      	add	r2, pc, #4	; (adr r2, 8004340 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800433c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004340:	08004395 	.word	0x08004395
 8004344:	0800451b 	.word	0x0800451b
 8004348:	0800451b 	.word	0x0800451b
 800434c:	0800451b 	.word	0x0800451b
 8004350:	080043d5 	.word	0x080043d5
 8004354:	0800451b 	.word	0x0800451b
 8004358:	0800451b 	.word	0x0800451b
 800435c:	0800451b 	.word	0x0800451b
 8004360:	08004417 	.word	0x08004417
 8004364:	0800451b 	.word	0x0800451b
 8004368:	0800451b 	.word	0x0800451b
 800436c:	0800451b 	.word	0x0800451b
 8004370:	08004457 	.word	0x08004457
 8004374:	0800451b 	.word	0x0800451b
 8004378:	0800451b 	.word	0x0800451b
 800437c:	0800451b 	.word	0x0800451b
 8004380:	08004499 	.word	0x08004499
 8004384:	0800451b 	.word	0x0800451b
 8004388:	0800451b 	.word	0x0800451b
 800438c:	0800451b 	.word	0x0800451b
 8004390:	080044d9 	.word	0x080044d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68b9      	ldr	r1, [r7, #8]
 800439a:	4618      	mov	r0, r3
 800439c:	f000 f9d2 	bl	8004744 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	699a      	ldr	r2, [r3, #24]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f042 0208 	orr.w	r2, r2, #8
 80043ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	699a      	ldr	r2, [r3, #24]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f022 0204 	bic.w	r2, r2, #4
 80043be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	6999      	ldr	r1, [r3, #24]
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	691a      	ldr	r2, [r3, #16]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	430a      	orrs	r2, r1
 80043d0:	619a      	str	r2, [r3, #24]
      break;
 80043d2:	e0a3      	b.n	800451c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68b9      	ldr	r1, [r7, #8]
 80043da:	4618      	mov	r0, r3
 80043dc:	f000 fa24 	bl	8004828 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	699a      	ldr	r2, [r3, #24]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	699a      	ldr	r2, [r3, #24]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	6999      	ldr	r1, [r3, #24]
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	021a      	lsls	r2, r3, #8
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	430a      	orrs	r2, r1
 8004412:	619a      	str	r2, [r3, #24]
      break;
 8004414:	e082      	b.n	800451c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68b9      	ldr	r1, [r7, #8]
 800441c:	4618      	mov	r0, r3
 800441e:	f000 fa7b 	bl	8004918 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	69da      	ldr	r2, [r3, #28]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f042 0208 	orr.w	r2, r2, #8
 8004430:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	69da      	ldr	r2, [r3, #28]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f022 0204 	bic.w	r2, r2, #4
 8004440:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	69d9      	ldr	r1, [r3, #28]
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	691a      	ldr	r2, [r3, #16]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	430a      	orrs	r2, r1
 8004452:	61da      	str	r2, [r3, #28]
      break;
 8004454:	e062      	b.n	800451c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68b9      	ldr	r1, [r7, #8]
 800445c:	4618      	mov	r0, r3
 800445e:	f000 fad1 	bl	8004a04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	69da      	ldr	r2, [r3, #28]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004470:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	69da      	ldr	r2, [r3, #28]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004480:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	69d9      	ldr	r1, [r3, #28]
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	021a      	lsls	r2, r3, #8
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	430a      	orrs	r2, r1
 8004494:	61da      	str	r2, [r3, #28]
      break;
 8004496:	e041      	b.n	800451c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68b9      	ldr	r1, [r7, #8]
 800449e:	4618      	mov	r0, r3
 80044a0:	f000 fb08 	bl	8004ab4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f042 0208 	orr.w	r2, r2, #8
 80044b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f022 0204 	bic.w	r2, r2, #4
 80044c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	691a      	ldr	r2, [r3, #16]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	430a      	orrs	r2, r1
 80044d4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80044d6:	e021      	b.n	800451c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68b9      	ldr	r1, [r7, #8]
 80044de:	4618      	mov	r0, r3
 80044e0:	f000 fb3a 	bl	8004b58 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004502:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	021a      	lsls	r2, r3, #8
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	430a      	orrs	r2, r1
 8004516:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004518:	e000      	b.n	800451c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800451a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3710      	adds	r7, #16
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop

08004530 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004540:	2b01      	cmp	r3, #1
 8004542:	d101      	bne.n	8004548 <HAL_TIM_SlaveConfigSynchro+0x18>
 8004544:	2302      	movs	r3, #2
 8004546:	e031      	b.n	80045ac <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2202      	movs	r2, #2
 8004554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004558:	6839      	ldr	r1, [r7, #0]
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 fb50 	bl	8004c00 <TIM_SlaveTimer_SetConfig>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d009      	beq.n	800457a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2201      	movs	r2, #1
 800456a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e018      	b.n	80045ac <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68da      	ldr	r2, [r3, #12]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004588:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68da      	ldr	r2, [r3, #12]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004598:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2201      	movs	r2, #1
 800459e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3708      	adds	r7, #8
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045bc:	bf00      	nop
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045f8:	bf00      	nop
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a40      	ldr	r2, [pc, #256]	; (8004718 <TIM_Base_SetConfig+0x114>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d013      	beq.n	8004644 <TIM_Base_SetConfig+0x40>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004622:	d00f      	beq.n	8004644 <TIM_Base_SetConfig+0x40>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a3d      	ldr	r2, [pc, #244]	; (800471c <TIM_Base_SetConfig+0x118>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d00b      	beq.n	8004644 <TIM_Base_SetConfig+0x40>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a3c      	ldr	r2, [pc, #240]	; (8004720 <TIM_Base_SetConfig+0x11c>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d007      	beq.n	8004644 <TIM_Base_SetConfig+0x40>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a3b      	ldr	r2, [pc, #236]	; (8004724 <TIM_Base_SetConfig+0x120>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d003      	beq.n	8004644 <TIM_Base_SetConfig+0x40>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4a3a      	ldr	r2, [pc, #232]	; (8004728 <TIM_Base_SetConfig+0x124>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d108      	bne.n	8004656 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800464a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	4313      	orrs	r3, r2
 8004654:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a2f      	ldr	r2, [pc, #188]	; (8004718 <TIM_Base_SetConfig+0x114>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d02b      	beq.n	80046b6 <TIM_Base_SetConfig+0xb2>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004664:	d027      	beq.n	80046b6 <TIM_Base_SetConfig+0xb2>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a2c      	ldr	r2, [pc, #176]	; (800471c <TIM_Base_SetConfig+0x118>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d023      	beq.n	80046b6 <TIM_Base_SetConfig+0xb2>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a2b      	ldr	r2, [pc, #172]	; (8004720 <TIM_Base_SetConfig+0x11c>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d01f      	beq.n	80046b6 <TIM_Base_SetConfig+0xb2>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a2a      	ldr	r2, [pc, #168]	; (8004724 <TIM_Base_SetConfig+0x120>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d01b      	beq.n	80046b6 <TIM_Base_SetConfig+0xb2>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a29      	ldr	r2, [pc, #164]	; (8004728 <TIM_Base_SetConfig+0x124>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d017      	beq.n	80046b6 <TIM_Base_SetConfig+0xb2>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a28      	ldr	r2, [pc, #160]	; (800472c <TIM_Base_SetConfig+0x128>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d013      	beq.n	80046b6 <TIM_Base_SetConfig+0xb2>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a27      	ldr	r2, [pc, #156]	; (8004730 <TIM_Base_SetConfig+0x12c>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d00f      	beq.n	80046b6 <TIM_Base_SetConfig+0xb2>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a26      	ldr	r2, [pc, #152]	; (8004734 <TIM_Base_SetConfig+0x130>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d00b      	beq.n	80046b6 <TIM_Base_SetConfig+0xb2>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a25      	ldr	r2, [pc, #148]	; (8004738 <TIM_Base_SetConfig+0x134>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d007      	beq.n	80046b6 <TIM_Base_SetConfig+0xb2>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a24      	ldr	r2, [pc, #144]	; (800473c <TIM_Base_SetConfig+0x138>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d003      	beq.n	80046b6 <TIM_Base_SetConfig+0xb2>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a23      	ldr	r2, [pc, #140]	; (8004740 <TIM_Base_SetConfig+0x13c>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d108      	bne.n	80046c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	689a      	ldr	r2, [r3, #8]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a0a      	ldr	r2, [pc, #40]	; (8004718 <TIM_Base_SetConfig+0x114>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d003      	beq.n	80046fc <TIM_Base_SetConfig+0xf8>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a0c      	ldr	r2, [pc, #48]	; (8004728 <TIM_Base_SetConfig+0x124>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d103      	bne.n	8004704 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	691a      	ldr	r2, [r3, #16]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	615a      	str	r2, [r3, #20]
}
 800470a:	bf00      	nop
 800470c:	3714      	adds	r7, #20
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	40010000 	.word	0x40010000
 800471c:	40000400 	.word	0x40000400
 8004720:	40000800 	.word	0x40000800
 8004724:	40000c00 	.word	0x40000c00
 8004728:	40010400 	.word	0x40010400
 800472c:	40014000 	.word	0x40014000
 8004730:	40014400 	.word	0x40014400
 8004734:	40014800 	.word	0x40014800
 8004738:	40001800 	.word	0x40001800
 800473c:	40001c00 	.word	0x40001c00
 8004740:	40002000 	.word	0x40002000

08004744 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004744:	b480      	push	{r7}
 8004746:	b087      	sub	sp, #28
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a1b      	ldr	r3, [r3, #32]
 8004752:	f023 0201 	bic.w	r2, r3, #1
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a1b      	ldr	r3, [r3, #32]
 800475e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	4b2b      	ldr	r3, [pc, #172]	; (800481c <TIM_OC1_SetConfig+0xd8>)
 8004770:	4013      	ands	r3, r2
 8004772:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f023 0303 	bic.w	r3, r3, #3
 800477a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	4313      	orrs	r3, r2
 8004784:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	f023 0302 	bic.w	r3, r3, #2
 800478c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	697a      	ldr	r2, [r7, #20]
 8004794:	4313      	orrs	r3, r2
 8004796:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a21      	ldr	r2, [pc, #132]	; (8004820 <TIM_OC1_SetConfig+0xdc>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d003      	beq.n	80047a8 <TIM_OC1_SetConfig+0x64>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4a20      	ldr	r2, [pc, #128]	; (8004824 <TIM_OC1_SetConfig+0xe0>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d10c      	bne.n	80047c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	f023 0308 	bic.w	r3, r3, #8
 80047ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	f023 0304 	bic.w	r3, r3, #4
 80047c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a16      	ldr	r2, [pc, #88]	; (8004820 <TIM_OC1_SetConfig+0xdc>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d003      	beq.n	80047d2 <TIM_OC1_SetConfig+0x8e>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a15      	ldr	r2, [pc, #84]	; (8004824 <TIM_OC1_SetConfig+0xe0>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d111      	bne.n	80047f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	693a      	ldr	r2, [r7, #16]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	693a      	ldr	r2, [r7, #16]
 80047fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	685a      	ldr	r2, [r3, #4]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	697a      	ldr	r2, [r7, #20]
 800480e:	621a      	str	r2, [r3, #32]
}
 8004810:	bf00      	nop
 8004812:	371c      	adds	r7, #28
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr
 800481c:	fffeff8f 	.word	0xfffeff8f
 8004820:	40010000 	.word	0x40010000
 8004824:	40010400 	.word	0x40010400

08004828 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004828:	b480      	push	{r7}
 800482a:	b087      	sub	sp, #28
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	f023 0210 	bic.w	r2, r3, #16
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	4b2e      	ldr	r3, [pc, #184]	; (800490c <TIM_OC2_SetConfig+0xe4>)
 8004854:	4013      	ands	r3, r2
 8004856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800485e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	021b      	lsls	r3, r3, #8
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	4313      	orrs	r3, r2
 800486a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	f023 0320 	bic.w	r3, r3, #32
 8004872:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	011b      	lsls	r3, r3, #4
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	4313      	orrs	r3, r2
 800487e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4a23      	ldr	r2, [pc, #140]	; (8004910 <TIM_OC2_SetConfig+0xe8>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d003      	beq.n	8004890 <TIM_OC2_SetConfig+0x68>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a22      	ldr	r2, [pc, #136]	; (8004914 <TIM_OC2_SetConfig+0xec>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d10d      	bne.n	80048ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004896:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	011b      	lsls	r3, r3, #4
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a18      	ldr	r2, [pc, #96]	; (8004910 <TIM_OC2_SetConfig+0xe8>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d003      	beq.n	80048bc <TIM_OC2_SetConfig+0x94>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a17      	ldr	r2, [pc, #92]	; (8004914 <TIM_OC2_SetConfig+0xec>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d113      	bne.n	80048e4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	695b      	ldr	r3, [r3, #20]
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	693a      	ldr	r2, [r7, #16]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	699b      	ldr	r3, [r3, #24]
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	693a      	ldr	r2, [r7, #16]
 80048e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	685a      	ldr	r2, [r3, #4]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	697a      	ldr	r2, [r7, #20]
 80048fc:	621a      	str	r2, [r3, #32]
}
 80048fe:	bf00      	nop
 8004900:	371c      	adds	r7, #28
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	feff8fff 	.word	0xfeff8fff
 8004910:	40010000 	.word	0x40010000
 8004914:	40010400 	.word	0x40010400

08004918 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004918:	b480      	push	{r7}
 800491a:	b087      	sub	sp, #28
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a1b      	ldr	r3, [r3, #32]
 8004926:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a1b      	ldr	r3, [r3, #32]
 8004932:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	69db      	ldr	r3, [r3, #28]
 800493e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004940:	68fa      	ldr	r2, [r7, #12]
 8004942:	4b2d      	ldr	r3, [pc, #180]	; (80049f8 <TIM_OC3_SetConfig+0xe0>)
 8004944:	4013      	ands	r3, r2
 8004946:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f023 0303 	bic.w	r3, r3, #3
 800494e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	4313      	orrs	r3, r2
 8004958:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004960:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	021b      	lsls	r3, r3, #8
 8004968:	697a      	ldr	r2, [r7, #20]
 800496a:	4313      	orrs	r3, r2
 800496c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a22      	ldr	r2, [pc, #136]	; (80049fc <TIM_OC3_SetConfig+0xe4>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d003      	beq.n	800497e <TIM_OC3_SetConfig+0x66>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a21      	ldr	r2, [pc, #132]	; (8004a00 <TIM_OC3_SetConfig+0xe8>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d10d      	bne.n	800499a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004984:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	021b      	lsls	r3, r3, #8
 800498c:	697a      	ldr	r2, [r7, #20]
 800498e:	4313      	orrs	r3, r2
 8004990:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004998:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a17      	ldr	r2, [pc, #92]	; (80049fc <TIM_OC3_SetConfig+0xe4>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d003      	beq.n	80049aa <TIM_OC3_SetConfig+0x92>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a16      	ldr	r2, [pc, #88]	; (8004a00 <TIM_OC3_SetConfig+0xe8>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d113      	bne.n	80049d2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	011b      	lsls	r3, r3, #4
 80049c0:	693a      	ldr	r2, [r7, #16]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	011b      	lsls	r3, r3, #4
 80049cc:	693a      	ldr	r2, [r7, #16]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	685a      	ldr	r2, [r3, #4]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	697a      	ldr	r2, [r7, #20]
 80049ea:	621a      	str	r2, [r3, #32]
}
 80049ec:	bf00      	nop
 80049ee:	371c      	adds	r7, #28
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr
 80049f8:	fffeff8f 	.word	0xfffeff8f
 80049fc:	40010000 	.word	0x40010000
 8004a00:	40010400 	.word	0x40010400

08004a04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b087      	sub	sp, #28
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a1b      	ldr	r3, [r3, #32]
 8004a12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	69db      	ldr	r3, [r3, #28]
 8004a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	4b1e      	ldr	r3, [pc, #120]	; (8004aa8 <TIM_OC4_SetConfig+0xa4>)
 8004a30:	4013      	ands	r3, r2
 8004a32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	021b      	lsls	r3, r3, #8
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	031b      	lsls	r3, r3, #12
 8004a56:	693a      	ldr	r2, [r7, #16]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a13      	ldr	r2, [pc, #76]	; (8004aac <TIM_OC4_SetConfig+0xa8>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d003      	beq.n	8004a6c <TIM_OC4_SetConfig+0x68>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a12      	ldr	r2, [pc, #72]	; (8004ab0 <TIM_OC4_SetConfig+0xac>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d109      	bne.n	8004a80 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	695b      	ldr	r3, [r3, #20]
 8004a78:	019b      	lsls	r3, r3, #6
 8004a7a:	697a      	ldr	r2, [r7, #20]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	697a      	ldr	r2, [r7, #20]
 8004a84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	68fa      	ldr	r2, [r7, #12]
 8004a8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	685a      	ldr	r2, [r3, #4]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	621a      	str	r2, [r3, #32]
}
 8004a9a:	bf00      	nop
 8004a9c:	371c      	adds	r7, #28
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	feff8fff 	.word	0xfeff8fff
 8004aac:	40010000 	.word	0x40010000
 8004ab0:	40010400 	.word	0x40010400

08004ab4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b087      	sub	sp, #28
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	4b1b      	ldr	r3, [pc, #108]	; (8004b4c <TIM_OC5_SetConfig+0x98>)
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004af4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	041b      	lsls	r3, r3, #16
 8004afc:	693a      	ldr	r2, [r7, #16]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a12      	ldr	r2, [pc, #72]	; (8004b50 <TIM_OC5_SetConfig+0x9c>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d003      	beq.n	8004b12 <TIM_OC5_SetConfig+0x5e>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a11      	ldr	r2, [pc, #68]	; (8004b54 <TIM_OC5_SetConfig+0xa0>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d109      	bne.n	8004b26 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b18:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	021b      	lsls	r3, r3, #8
 8004b20:	697a      	ldr	r2, [r7, #20]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	697a      	ldr	r2, [r7, #20]
 8004b2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	685a      	ldr	r2, [r3, #4]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	693a      	ldr	r2, [r7, #16]
 8004b3e:	621a      	str	r2, [r3, #32]
}
 8004b40:	bf00      	nop
 8004b42:	371c      	adds	r7, #28
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr
 8004b4c:	fffeff8f 	.word	0xfffeff8f
 8004b50:	40010000 	.word	0x40010000
 8004b54:	40010400 	.word	0x40010400

08004b58 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b087      	sub	sp, #28
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a1b      	ldr	r3, [r3, #32]
 8004b66:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a1b      	ldr	r3, [r3, #32]
 8004b72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	4b1c      	ldr	r3, [pc, #112]	; (8004bf4 <TIM_OC6_SetConfig+0x9c>)
 8004b84:	4013      	ands	r3, r2
 8004b86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	021b      	lsls	r3, r3, #8
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	051b      	lsls	r3, r3, #20
 8004ba2:	693a      	ldr	r2, [r7, #16]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a13      	ldr	r2, [pc, #76]	; (8004bf8 <TIM_OC6_SetConfig+0xa0>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d003      	beq.n	8004bb8 <TIM_OC6_SetConfig+0x60>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a12      	ldr	r2, [pc, #72]	; (8004bfc <TIM_OC6_SetConfig+0xa4>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d109      	bne.n	8004bcc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bbe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	695b      	ldr	r3, [r3, #20]
 8004bc4:	029b      	lsls	r3, r3, #10
 8004bc6:	697a      	ldr	r2, [r7, #20]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	697a      	ldr	r2, [r7, #20]
 8004bd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	685a      	ldr	r2, [r3, #4]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	621a      	str	r2, [r3, #32]
}
 8004be6:	bf00      	nop
 8004be8:	371c      	adds	r7, #28
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	feff8fff 	.word	0xfeff8fff
 8004bf8:	40010000 	.word	0x40010000
 8004bfc:	40010400 	.word	0x40010400

08004c00 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b086      	sub	sp, #24
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c18:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004c24:	697a      	ldr	r2, [r7, #20]
 8004c26:	4b3d      	ldr	r3, [pc, #244]	; (8004d1c <TIM_SlaveTimer_SetConfig+0x11c>)
 8004c28:	4013      	ands	r3, r2
 8004c2a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	697a      	ldr	r2, [r7, #20]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	2b70      	cmp	r3, #112	; 0x70
 8004c44:	d01a      	beq.n	8004c7c <TIM_SlaveTimer_SetConfig+0x7c>
 8004c46:	2b70      	cmp	r3, #112	; 0x70
 8004c48:	d860      	bhi.n	8004d0c <TIM_SlaveTimer_SetConfig+0x10c>
 8004c4a:	2b60      	cmp	r3, #96	; 0x60
 8004c4c:	d054      	beq.n	8004cf8 <TIM_SlaveTimer_SetConfig+0xf8>
 8004c4e:	2b60      	cmp	r3, #96	; 0x60
 8004c50:	d85c      	bhi.n	8004d0c <TIM_SlaveTimer_SetConfig+0x10c>
 8004c52:	2b50      	cmp	r3, #80	; 0x50
 8004c54:	d046      	beq.n	8004ce4 <TIM_SlaveTimer_SetConfig+0xe4>
 8004c56:	2b50      	cmp	r3, #80	; 0x50
 8004c58:	d858      	bhi.n	8004d0c <TIM_SlaveTimer_SetConfig+0x10c>
 8004c5a:	2b40      	cmp	r3, #64	; 0x40
 8004c5c:	d019      	beq.n	8004c92 <TIM_SlaveTimer_SetConfig+0x92>
 8004c5e:	2b40      	cmp	r3, #64	; 0x40
 8004c60:	d854      	bhi.n	8004d0c <TIM_SlaveTimer_SetConfig+0x10c>
 8004c62:	2b30      	cmp	r3, #48	; 0x30
 8004c64:	d054      	beq.n	8004d10 <TIM_SlaveTimer_SetConfig+0x110>
 8004c66:	2b30      	cmp	r3, #48	; 0x30
 8004c68:	d850      	bhi.n	8004d0c <TIM_SlaveTimer_SetConfig+0x10c>
 8004c6a:	2b20      	cmp	r3, #32
 8004c6c:	d050      	beq.n	8004d10 <TIM_SlaveTimer_SetConfig+0x110>
 8004c6e:	2b20      	cmp	r3, #32
 8004c70:	d84c      	bhi.n	8004d0c <TIM_SlaveTimer_SetConfig+0x10c>
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d04c      	beq.n	8004d10 <TIM_SlaveTimer_SetConfig+0x110>
 8004c76:	2b10      	cmp	r3, #16
 8004c78:	d04a      	beq.n	8004d10 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8004c7a:	e047      	b.n	8004d0c <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6818      	ldr	r0, [r3, #0]
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	68d9      	ldr	r1, [r3, #12]
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	689a      	ldr	r2, [r3, #8]
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	f000 f8a7 	bl	8004dde <TIM_ETR_SetConfig>
      break;
 8004c90:	e03f      	b.n	8004d12 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2b05      	cmp	r3, #5
 8004c98:	d101      	bne.n	8004c9e <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e03a      	b.n	8004d14 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	6a1b      	ldr	r3, [r3, #32]
 8004ca4:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	6a1a      	ldr	r2, [r3, #32]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f022 0201 	bic.w	r2, r2, #1
 8004cb4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cc4:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	011b      	lsls	r3, r3, #4
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	621a      	str	r2, [r3, #32]
      break;
 8004ce2:	e016      	b.n	8004d12 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6818      	ldr	r0, [r3, #0]
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	6899      	ldr	r1, [r3, #8]
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	f000 f815 	bl	8004d20 <TIM_TI1_ConfigInputStage>
      break;
 8004cf6:	e00c      	b.n	8004d12 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6818      	ldr	r0, [r3, #0]
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	6899      	ldr	r1, [r3, #8]
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	461a      	mov	r2, r3
 8004d06:	f000 f83a 	bl	8004d7e <TIM_TI2_ConfigInputStage>
      break;
 8004d0a:	e002      	b.n	8004d12 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8004d0c:	bf00      	nop
 8004d0e:	e000      	b.n	8004d12 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8004d10:	bf00      	nop
  }
  return HAL_OK;
 8004d12:	2300      	movs	r3, #0
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3718      	adds	r7, #24
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	fffefff8 	.word	0xfffefff8

08004d20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b087      	sub	sp, #28
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6a1b      	ldr	r3, [r3, #32]
 8004d30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6a1b      	ldr	r3, [r3, #32]
 8004d36:	f023 0201 	bic.w	r2, r3, #1
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	011b      	lsls	r3, r3, #4
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	f023 030a 	bic.w	r3, r3, #10
 8004d5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	693a      	ldr	r2, [r7, #16]
 8004d6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	621a      	str	r2, [r3, #32]
}
 8004d72:	bf00      	nop
 8004d74:	371c      	adds	r7, #28
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr

08004d7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d7e:	b480      	push	{r7}
 8004d80:	b087      	sub	sp, #28
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	60f8      	str	r0, [r7, #12]
 8004d86:	60b9      	str	r1, [r7, #8]
 8004d88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6a1b      	ldr	r3, [r3, #32]
 8004d8e:	f023 0210 	bic.w	r2, r3, #16
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6a1b      	ldr	r3, [r3, #32]
 8004da0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004da8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	031b      	lsls	r3, r3, #12
 8004dae:	697a      	ldr	r2, [r7, #20]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004dba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	011b      	lsls	r3, r3, #4
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	697a      	ldr	r2, [r7, #20]
 8004dca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	693a      	ldr	r2, [r7, #16]
 8004dd0:	621a      	str	r2, [r3, #32]
}
 8004dd2:	bf00      	nop
 8004dd4:	371c      	adds	r7, #28
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr

08004dde <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004dde:	b480      	push	{r7}
 8004de0:	b087      	sub	sp, #28
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	60f8      	str	r0, [r7, #12]
 8004de6:	60b9      	str	r1, [r7, #8]
 8004de8:	607a      	str	r2, [r7, #4]
 8004dea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004df8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	021a      	lsls	r2, r3, #8
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	431a      	orrs	r2, r3
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	697a      	ldr	r2, [r7, #20]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	609a      	str	r2, [r3, #8]
}
 8004e12:	bf00      	nop
 8004e14:	371c      	adds	r7, #28
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr

08004e1e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e1e:	b480      	push	{r7}
 8004e20:	b087      	sub	sp, #28
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	60f8      	str	r0, [r7, #12]
 8004e26:	60b9      	str	r1, [r7, #8]
 8004e28:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	f003 031f 	and.w	r3, r3, #31
 8004e30:	2201      	movs	r2, #1
 8004e32:	fa02 f303 	lsl.w	r3, r2, r3
 8004e36:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6a1a      	ldr	r2, [r3, #32]
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	43db      	mvns	r3, r3
 8004e40:	401a      	ands	r2, r3
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6a1a      	ldr	r2, [r3, #32]
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	f003 031f 	and.w	r3, r3, #31
 8004e50:	6879      	ldr	r1, [r7, #4]
 8004e52:	fa01 f303 	lsl.w	r3, r1, r3
 8004e56:	431a      	orrs	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	621a      	str	r2, [r3, #32]
}
 8004e5c:	bf00      	nop
 8004e5e:	371c      	adds	r7, #28
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d101      	bne.n	8004e80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e7c:	2302      	movs	r3, #2
 8004e7e:	e06d      	b.n	8004f5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2202      	movs	r2, #2
 8004e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a30      	ldr	r2, [pc, #192]	; (8004f68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d004      	beq.n	8004eb4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a2f      	ldr	r2, [pc, #188]	; (8004f6c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d108      	bne.n	8004ec6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004eba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ecc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a20      	ldr	r2, [pc, #128]	; (8004f68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d022      	beq.n	8004f30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ef2:	d01d      	beq.n	8004f30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a1d      	ldr	r2, [pc, #116]	; (8004f70 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d018      	beq.n	8004f30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a1c      	ldr	r2, [pc, #112]	; (8004f74 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d013      	beq.n	8004f30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a1a      	ldr	r2, [pc, #104]	; (8004f78 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d00e      	beq.n	8004f30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a15      	ldr	r2, [pc, #84]	; (8004f6c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d009      	beq.n	8004f30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a16      	ldr	r2, [pc, #88]	; (8004f7c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d004      	beq.n	8004f30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a15      	ldr	r2, [pc, #84]	; (8004f80 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d10c      	bne.n	8004f4a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f36:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	68ba      	ldr	r2, [r7, #8]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68ba      	ldr	r2, [r7, #8]
 8004f48:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3714      	adds	r7, #20
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr
 8004f68:	40010000 	.word	0x40010000
 8004f6c:	40010400 	.word	0x40010400
 8004f70:	40000400 	.word	0x40000400
 8004f74:	40000800 	.word	0x40000800
 8004f78:	40000c00 	.word	0x40000c00
 8004f7c:	40014000 	.word	0x40014000
 8004f80:	40001800 	.word	0x40001800

08004f84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f8c:	bf00      	nop
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fa0:	bf00      	nop
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004fb4:	bf00      	nop
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d101      	bne.n	8004fd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e040      	b.n	8005054 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d106      	bne.n	8004fe8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f7fd f8ac 	bl	8002140 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2224      	movs	r2, #36	; 0x24
 8004fec:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f022 0201 	bic.w	r2, r2, #1
 8004ffc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 fb0a 	bl	8005618 <UART_SetConfig>
 8005004:	4603      	mov	r3, r0
 8005006:	2b01      	cmp	r3, #1
 8005008:	d101      	bne.n	800500e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e022      	b.n	8005054 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005012:	2b00      	cmp	r3, #0
 8005014:	d002      	beq.n	800501c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 fd62 	bl	8005ae0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	685a      	ldr	r2, [r3, #4]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800502a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	689a      	ldr	r2, [r3, #8]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800503a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f042 0201 	orr.w	r2, r2, #1
 800504a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 fde9 	bl	8005c24 <UART_CheckIdleState>
 8005052:	4603      	mov	r3, r0
}
 8005054:	4618      	mov	r0, r3
 8005056:	3708      	adds	r7, #8
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b08a      	sub	sp, #40	; 0x28
 8005060:	af02      	add	r7, sp, #8
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	603b      	str	r3, [r7, #0]
 8005068:	4613      	mov	r3, r2
 800506a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005070:	2b20      	cmp	r3, #32
 8005072:	f040 8081 	bne.w	8005178 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d002      	beq.n	8005082 <HAL_UART_Transmit+0x26>
 800507c:	88fb      	ldrh	r3, [r7, #6]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d101      	bne.n	8005086 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e079      	b.n	800517a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800508c:	2b01      	cmp	r3, #1
 800508e:	d101      	bne.n	8005094 <HAL_UART_Transmit+0x38>
 8005090:	2302      	movs	r3, #2
 8005092:	e072      	b.n	800517a <HAL_UART_Transmit+0x11e>
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2221      	movs	r2, #33	; 0x21
 80050a8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050aa:	f7fd f8fb 	bl	80022a4 <HAL_GetTick>
 80050ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	88fa      	ldrh	r2, [r7, #6]
 80050b4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	88fa      	ldrh	r2, [r7, #6]
 80050bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050c8:	d108      	bne.n	80050dc <HAL_UART_Transmit+0x80>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d104      	bne.n	80050dc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80050d2:	2300      	movs	r3, #0
 80050d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	61bb      	str	r3, [r7, #24]
 80050da:	e003      	b.n	80050e4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050e0:	2300      	movs	r3, #0
 80050e2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80050ec:	e02c      	b.n	8005148 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	9300      	str	r3, [sp, #0]
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	2200      	movs	r2, #0
 80050f6:	2180      	movs	r1, #128	; 0x80
 80050f8:	68f8      	ldr	r0, [r7, #12]
 80050fa:	f000 fdc6 	bl	8005c8a <UART_WaitOnFlagUntilTimeout>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d001      	beq.n	8005108 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e038      	b.n	800517a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d10b      	bne.n	8005126 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	881b      	ldrh	r3, [r3, #0]
 8005112:	461a      	mov	r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800511c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	3302      	adds	r3, #2
 8005122:	61bb      	str	r3, [r7, #24]
 8005124:	e007      	b.n	8005136 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	781a      	ldrb	r2, [r3, #0]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	3301      	adds	r3, #1
 8005134:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800513c:	b29b      	uxth	r3, r3
 800513e:	3b01      	subs	r3, #1
 8005140:	b29a      	uxth	r2, r3
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800514e:	b29b      	uxth	r3, r3
 8005150:	2b00      	cmp	r3, #0
 8005152:	d1cc      	bne.n	80050ee <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	9300      	str	r3, [sp, #0]
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	2200      	movs	r2, #0
 800515c:	2140      	movs	r1, #64	; 0x40
 800515e:	68f8      	ldr	r0, [r7, #12]
 8005160:	f000 fd93 	bl	8005c8a <UART_WaitOnFlagUntilTimeout>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d001      	beq.n	800516e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e005      	b.n	800517a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2220      	movs	r2, #32
 8005172:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005174:	2300      	movs	r3, #0
 8005176:	e000      	b.n	800517a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005178:	2302      	movs	r3, #2
  }
}
 800517a:	4618      	mov	r0, r3
 800517c:	3720      	adds	r7, #32
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}

08005182 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005182:	b580      	push	{r7, lr}
 8005184:	b084      	sub	sp, #16
 8005186:	af00      	add	r7, sp, #0
 8005188:	60f8      	str	r0, [r7, #12]
 800518a:	60b9      	str	r1, [r7, #8]
 800518c:	4613      	mov	r3, r2
 800518e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005194:	2b20      	cmp	r3, #32
 8005196:	d12c      	bne.n	80051f2 <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d002      	beq.n	80051a4 <HAL_UART_Receive_IT+0x22>
 800519e:	88fb      	ldrh	r3, [r7, #6]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d101      	bne.n	80051a8 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e025      	b.n	80051f4 <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d101      	bne.n	80051b6 <HAL_UART_Receive_IT+0x34>
 80051b2:	2302      	movs	r3, #2
 80051b4:	e01e      	b.n	80051f4 <HAL_UART_Receive_IT+0x72>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2201      	movs	r2, #1
 80051ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2200      	movs	r2, #0
 80051c2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d007      	beq.n	80051e2 <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80051e0:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80051e2:	88fb      	ldrh	r3, [r7, #6]
 80051e4:	461a      	mov	r2, r3
 80051e6:	68b9      	ldr	r1, [r7, #8]
 80051e8:	68f8      	ldr	r0, [r7, #12]
 80051ea:	f000 fdcb 	bl	8005d84 <UART_Start_Receive_IT>
 80051ee:	4603      	mov	r3, r0
 80051f0:	e000      	b.n	80051f4 <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 80051f2:	2302      	movs	r3, #2
  }
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3710      	adds	r7, #16
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b088      	sub	sp, #32
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	69db      	ldr	r3, [r3, #28]
 800520a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800521c:	69fa      	ldr	r2, [r7, #28]
 800521e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005222:	4013      	ands	r3, r2
 8005224:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d113      	bne.n	8005254 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	f003 0320 	and.w	r3, r3, #32
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00e      	beq.n	8005254 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	f003 0320 	and.w	r3, r3, #32
 800523c:	2b00      	cmp	r3, #0
 800523e:	d009      	beq.n	8005254 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005244:	2b00      	cmp	r3, #0
 8005246:	f000 81ba 	beq.w	80055be <HAL_UART_IRQHandler+0x3c2>
      {
        huart->RxISR(huart);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	4798      	blx	r3
      }
      return;
 8005252:	e1b4      	b.n	80055be <HAL_UART_IRQHandler+0x3c2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	2b00      	cmp	r3, #0
 8005258:	f000 80e8 	beq.w	800542c <HAL_UART_IRQHandler+0x230>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	f003 0301 	and.w	r3, r3, #1
 8005262:	2b00      	cmp	r3, #0
 8005264:	d105      	bne.n	8005272 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005266:	69ba      	ldr	r2, [r7, #24]
 8005268:	4b6e      	ldr	r3, [pc, #440]	; (8005424 <HAL_UART_IRQHandler+0x228>)
 800526a:	4013      	ands	r3, r2
 800526c:	2b00      	cmp	r3, #0
 800526e:	f000 80dd 	beq.w	800542c <HAL_UART_IRQHandler+0x230>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	f003 0301 	and.w	r3, r3, #1
 8005278:	2b00      	cmp	r3, #0
 800527a:	d010      	beq.n	800529e <HAL_UART_IRQHandler+0xa2>
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00b      	beq.n	800529e <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2201      	movs	r2, #1
 800528c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005294:	f043 0201 	orr.w	r2, r3, #1
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	f003 0302 	and.w	r3, r3, #2
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d010      	beq.n	80052ca <HAL_UART_IRQHandler+0xce>
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	f003 0301 	and.w	r3, r3, #1
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00b      	beq.n	80052ca <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2202      	movs	r2, #2
 80052b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052c0:	f043 0204 	orr.w	r2, r3, #4
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	f003 0304 	and.w	r3, r3, #4
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d010      	beq.n	80052f6 <HAL_UART_IRQHandler+0xfa>
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	f003 0301 	and.w	r3, r3, #1
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00b      	beq.n	80052f6 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2204      	movs	r2, #4
 80052e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052ec:	f043 0202 	orr.w	r2, r3, #2
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	f003 0308 	and.w	r3, r3, #8
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d015      	beq.n	800532c <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	f003 0320 	and.w	r3, r3, #32
 8005306:	2b00      	cmp	r3, #0
 8005308:	d104      	bne.n	8005314 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005310:	2b00      	cmp	r3, #0
 8005312:	d00b      	beq.n	800532c <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2208      	movs	r2, #8
 800531a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005322:	f043 0208 	orr.w	r2, r3, #8
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005332:	2b00      	cmp	r3, #0
 8005334:	d011      	beq.n	800535a <HAL_UART_IRQHandler+0x15e>
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00c      	beq.n	800535a <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005348:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005350:	f043 0220 	orr.w	r2, r3, #32
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005360:	2b00      	cmp	r3, #0
 8005362:	f000 812e 	beq.w	80055c2 <HAL_UART_IRQHandler+0x3c6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	f003 0320 	and.w	r3, r3, #32
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00c      	beq.n	800538a <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	f003 0320 	and.w	r3, r3, #32
 8005376:	2b00      	cmp	r3, #0
 8005378:	d007      	beq.n	800538a <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800537e:	2b00      	cmp	r3, #0
 8005380:	d003      	beq.n	800538a <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005390:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800539c:	2b40      	cmp	r3, #64	; 0x40
 800539e:	d004      	beq.n	80053aa <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d031      	beq.n	800540e <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 fd72 	bl	8005e94 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ba:	2b40      	cmp	r3, #64	; 0x40
 80053bc:	d123      	bne.n	8005406 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	689a      	ldr	r2, [r3, #8]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053cc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d013      	beq.n	80053fe <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053da:	4a13      	ldr	r2, [pc, #76]	; (8005428 <HAL_UART_IRQHandler+0x22c>)
 80053dc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7fd f8bc 	bl	8002560 <HAL_DMA_Abort_IT>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d017      	beq.n	800541e <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80053f8:	4610      	mov	r0, r2
 80053fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053fc:	e00f      	b.n	800541e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 f8f4 	bl	80055ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005404:	e00b      	b.n	800541e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 f8f0 	bl	80055ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800540c:	e007      	b.n	800541e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 f8ec 	bl	80055ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800541c:	e0d1      	b.n	80055c2 <HAL_UART_IRQHandler+0x3c6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800541e:	bf00      	nop
    return;
 8005420:	e0cf      	b.n	80055c2 <HAL_UART_IRQHandler+0x3c6>
 8005422:	bf00      	nop
 8005424:	04000120 	.word	0x04000120
 8005428:	08005ef3 	.word	0x08005ef3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005430:	2b01      	cmp	r3, #1
 8005432:	f040 80a3 	bne.w	800557c <HAL_UART_IRQHandler+0x380>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	f003 0310 	and.w	r3, r3, #16
 800543c:	2b00      	cmp	r3, #0
 800543e:	f000 809d 	beq.w	800557c <HAL_UART_IRQHandler+0x380>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	f003 0310 	and.w	r3, r3, #16
 8005448:	2b00      	cmp	r3, #0
 800544a:	f000 8097 	beq.w	800557c <HAL_UART_IRQHandler+0x380>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2210      	movs	r2, #16
 8005454:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005460:	2b40      	cmp	r3, #64	; 0x40
 8005462:	d152      	bne.n	800550a <HAL_UART_IRQHandler+0x30e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800546e:	893b      	ldrh	r3, [r7, #8]
 8005470:	2b00      	cmp	r3, #0
 8005472:	f000 80a8 	beq.w	80055c6 <HAL_UART_IRQHandler+0x3ca>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800547c:	893a      	ldrh	r2, [r7, #8]
 800547e:	429a      	cmp	r2, r3
 8005480:	f080 80a1 	bcs.w	80055c6 <HAL_UART_IRQHandler+0x3ca>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	893a      	ldrh	r2, [r7, #8]
 8005488:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005490:	69db      	ldr	r3, [r3, #28]
 8005492:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005496:	d02a      	beq.n	80054ee <HAL_UART_IRQHandler+0x2f2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054a6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	689a      	ldr	r2, [r3, #8]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f022 0201 	bic.w	r2, r2, #1
 80054b6:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	689a      	ldr	r2, [r3, #8]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054c6:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2220      	movs	r2, #32
 80054cc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f022 0210 	bic.w	r2, r2, #16
 80054e2:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054e8:	4618      	mov	r0, r3
 80054ea:	f7fc ffc9 	bl	8002480 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	b29b      	uxth	r3, r3
 8005500:	4619      	mov	r1, r3
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 f87c 	bl	8005600 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005508:	e05d      	b.n	80055c6 <HAL_UART_IRQHandler+0x3ca>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005516:	b29b      	uxth	r3, r3
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005522:	b29b      	uxth	r3, r3
 8005524:	2b00      	cmp	r3, #0
 8005526:	d050      	beq.n	80055ca <HAL_UART_IRQHandler+0x3ce>
          && (nb_rx_data > 0U))
 8005528:	897b      	ldrh	r3, [r7, #10]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d04d      	beq.n	80055ca <HAL_UART_IRQHandler+0x3ce>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800553c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	689a      	ldr	r2, [r3, #8]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f022 0201 	bic.w	r2, r2, #1
 800554c:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2220      	movs	r2, #32
 8005552:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f022 0210 	bic.w	r2, r2, #16
 800556e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005570:	897b      	ldrh	r3, [r7, #10]
 8005572:	4619      	mov	r1, r3
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 f843 	bl	8005600 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800557a:	e026      	b.n	80055ca <HAL_UART_IRQHandler+0x3ce>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00d      	beq.n	80055a2 <HAL_UART_IRQHandler+0x3a6>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800558c:	2b00      	cmp	r3, #0
 800558e:	d008      	beq.n	80055a2 <HAL_UART_IRQHandler+0x3a6>
  {
    if (huart->TxISR != NULL)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005594:	2b00      	cmp	r3, #0
 8005596:	d01a      	beq.n	80055ce <HAL_UART_IRQHandler+0x3d2>
    {
      huart->TxISR(huart);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	4798      	blx	r3
    }
    return;
 80055a0:	e015      	b.n	80055ce <HAL_UART_IRQHandler+0x3d2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d011      	beq.n	80055d0 <HAL_UART_IRQHandler+0x3d4>
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00c      	beq.n	80055d0 <HAL_UART_IRQHandler+0x3d4>
  {
    UART_EndTransmit_IT(huart);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 fcb1 	bl	8005f1e <UART_EndTransmit_IT>
    return;
 80055bc:	e008      	b.n	80055d0 <HAL_UART_IRQHandler+0x3d4>
      return;
 80055be:	bf00      	nop
 80055c0:	e006      	b.n	80055d0 <HAL_UART_IRQHandler+0x3d4>
    return;
 80055c2:	bf00      	nop
 80055c4:	e004      	b.n	80055d0 <HAL_UART_IRQHandler+0x3d4>
      return;
 80055c6:	bf00      	nop
 80055c8:	e002      	b.n	80055d0 <HAL_UART_IRQHandler+0x3d4>
      return;
 80055ca:	bf00      	nop
 80055cc:	e000      	b.n	80055d0 <HAL_UART_IRQHandler+0x3d4>
    return;
 80055ce:	bf00      	nop
  }

}
 80055d0:	3720      	adds	r7, #32
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop

080055d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80055e0:	bf00      	nop
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80055f4:	bf00      	nop
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	460b      	mov	r3, r1
 800560a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800560c:	bf00      	nop
 800560e:	370c      	adds	r7, #12
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b088      	sub	sp, #32
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005620:	2300      	movs	r3, #0
 8005622:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	689a      	ldr	r2, [r3, #8]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	431a      	orrs	r2, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	431a      	orrs	r2, r3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	69db      	ldr	r3, [r3, #28]
 8005638:	4313      	orrs	r3, r2
 800563a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	4ba6      	ldr	r3, [pc, #664]	; (80058dc <UART_SetConfig+0x2c4>)
 8005644:	4013      	ands	r3, r2
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	6812      	ldr	r2, [r2, #0]
 800564a:	6979      	ldr	r1, [r7, #20]
 800564c:	430b      	orrs	r3, r1
 800564e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	68da      	ldr	r2, [r3, #12]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	430a      	orrs	r2, r1
 8005664:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6a1b      	ldr	r3, [r3, #32]
 8005670:	697a      	ldr	r2, [r7, #20]
 8005672:	4313      	orrs	r3, r2
 8005674:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	697a      	ldr	r2, [r7, #20]
 8005686:	430a      	orrs	r2, r1
 8005688:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a94      	ldr	r2, [pc, #592]	; (80058e0 <UART_SetConfig+0x2c8>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d120      	bne.n	80056d6 <UART_SetConfig+0xbe>
 8005694:	4b93      	ldr	r3, [pc, #588]	; (80058e4 <UART_SetConfig+0x2cc>)
 8005696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800569a:	f003 0303 	and.w	r3, r3, #3
 800569e:	2b03      	cmp	r3, #3
 80056a0:	d816      	bhi.n	80056d0 <UART_SetConfig+0xb8>
 80056a2:	a201      	add	r2, pc, #4	; (adr r2, 80056a8 <UART_SetConfig+0x90>)
 80056a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a8:	080056b9 	.word	0x080056b9
 80056ac:	080056c5 	.word	0x080056c5
 80056b0:	080056bf 	.word	0x080056bf
 80056b4:	080056cb 	.word	0x080056cb
 80056b8:	2301      	movs	r3, #1
 80056ba:	77fb      	strb	r3, [r7, #31]
 80056bc:	e150      	b.n	8005960 <UART_SetConfig+0x348>
 80056be:	2302      	movs	r3, #2
 80056c0:	77fb      	strb	r3, [r7, #31]
 80056c2:	e14d      	b.n	8005960 <UART_SetConfig+0x348>
 80056c4:	2304      	movs	r3, #4
 80056c6:	77fb      	strb	r3, [r7, #31]
 80056c8:	e14a      	b.n	8005960 <UART_SetConfig+0x348>
 80056ca:	2308      	movs	r3, #8
 80056cc:	77fb      	strb	r3, [r7, #31]
 80056ce:	e147      	b.n	8005960 <UART_SetConfig+0x348>
 80056d0:	2310      	movs	r3, #16
 80056d2:	77fb      	strb	r3, [r7, #31]
 80056d4:	e144      	b.n	8005960 <UART_SetConfig+0x348>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a83      	ldr	r2, [pc, #524]	; (80058e8 <UART_SetConfig+0x2d0>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d132      	bne.n	8005746 <UART_SetConfig+0x12e>
 80056e0:	4b80      	ldr	r3, [pc, #512]	; (80058e4 <UART_SetConfig+0x2cc>)
 80056e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056e6:	f003 030c 	and.w	r3, r3, #12
 80056ea:	2b0c      	cmp	r3, #12
 80056ec:	d828      	bhi.n	8005740 <UART_SetConfig+0x128>
 80056ee:	a201      	add	r2, pc, #4	; (adr r2, 80056f4 <UART_SetConfig+0xdc>)
 80056f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f4:	08005729 	.word	0x08005729
 80056f8:	08005741 	.word	0x08005741
 80056fc:	08005741 	.word	0x08005741
 8005700:	08005741 	.word	0x08005741
 8005704:	08005735 	.word	0x08005735
 8005708:	08005741 	.word	0x08005741
 800570c:	08005741 	.word	0x08005741
 8005710:	08005741 	.word	0x08005741
 8005714:	0800572f 	.word	0x0800572f
 8005718:	08005741 	.word	0x08005741
 800571c:	08005741 	.word	0x08005741
 8005720:	08005741 	.word	0x08005741
 8005724:	0800573b 	.word	0x0800573b
 8005728:	2300      	movs	r3, #0
 800572a:	77fb      	strb	r3, [r7, #31]
 800572c:	e118      	b.n	8005960 <UART_SetConfig+0x348>
 800572e:	2302      	movs	r3, #2
 8005730:	77fb      	strb	r3, [r7, #31]
 8005732:	e115      	b.n	8005960 <UART_SetConfig+0x348>
 8005734:	2304      	movs	r3, #4
 8005736:	77fb      	strb	r3, [r7, #31]
 8005738:	e112      	b.n	8005960 <UART_SetConfig+0x348>
 800573a:	2308      	movs	r3, #8
 800573c:	77fb      	strb	r3, [r7, #31]
 800573e:	e10f      	b.n	8005960 <UART_SetConfig+0x348>
 8005740:	2310      	movs	r3, #16
 8005742:	77fb      	strb	r3, [r7, #31]
 8005744:	e10c      	b.n	8005960 <UART_SetConfig+0x348>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a68      	ldr	r2, [pc, #416]	; (80058ec <UART_SetConfig+0x2d4>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d120      	bne.n	8005792 <UART_SetConfig+0x17a>
 8005750:	4b64      	ldr	r3, [pc, #400]	; (80058e4 <UART_SetConfig+0x2cc>)
 8005752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005756:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800575a:	2b30      	cmp	r3, #48	; 0x30
 800575c:	d013      	beq.n	8005786 <UART_SetConfig+0x16e>
 800575e:	2b30      	cmp	r3, #48	; 0x30
 8005760:	d814      	bhi.n	800578c <UART_SetConfig+0x174>
 8005762:	2b20      	cmp	r3, #32
 8005764:	d009      	beq.n	800577a <UART_SetConfig+0x162>
 8005766:	2b20      	cmp	r3, #32
 8005768:	d810      	bhi.n	800578c <UART_SetConfig+0x174>
 800576a:	2b00      	cmp	r3, #0
 800576c:	d002      	beq.n	8005774 <UART_SetConfig+0x15c>
 800576e:	2b10      	cmp	r3, #16
 8005770:	d006      	beq.n	8005780 <UART_SetConfig+0x168>
 8005772:	e00b      	b.n	800578c <UART_SetConfig+0x174>
 8005774:	2300      	movs	r3, #0
 8005776:	77fb      	strb	r3, [r7, #31]
 8005778:	e0f2      	b.n	8005960 <UART_SetConfig+0x348>
 800577a:	2302      	movs	r3, #2
 800577c:	77fb      	strb	r3, [r7, #31]
 800577e:	e0ef      	b.n	8005960 <UART_SetConfig+0x348>
 8005780:	2304      	movs	r3, #4
 8005782:	77fb      	strb	r3, [r7, #31]
 8005784:	e0ec      	b.n	8005960 <UART_SetConfig+0x348>
 8005786:	2308      	movs	r3, #8
 8005788:	77fb      	strb	r3, [r7, #31]
 800578a:	e0e9      	b.n	8005960 <UART_SetConfig+0x348>
 800578c:	2310      	movs	r3, #16
 800578e:	77fb      	strb	r3, [r7, #31]
 8005790:	e0e6      	b.n	8005960 <UART_SetConfig+0x348>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a56      	ldr	r2, [pc, #344]	; (80058f0 <UART_SetConfig+0x2d8>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d120      	bne.n	80057de <UART_SetConfig+0x1c6>
 800579c:	4b51      	ldr	r3, [pc, #324]	; (80058e4 <UART_SetConfig+0x2cc>)
 800579e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80057a6:	2bc0      	cmp	r3, #192	; 0xc0
 80057a8:	d013      	beq.n	80057d2 <UART_SetConfig+0x1ba>
 80057aa:	2bc0      	cmp	r3, #192	; 0xc0
 80057ac:	d814      	bhi.n	80057d8 <UART_SetConfig+0x1c0>
 80057ae:	2b80      	cmp	r3, #128	; 0x80
 80057b0:	d009      	beq.n	80057c6 <UART_SetConfig+0x1ae>
 80057b2:	2b80      	cmp	r3, #128	; 0x80
 80057b4:	d810      	bhi.n	80057d8 <UART_SetConfig+0x1c0>
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d002      	beq.n	80057c0 <UART_SetConfig+0x1a8>
 80057ba:	2b40      	cmp	r3, #64	; 0x40
 80057bc:	d006      	beq.n	80057cc <UART_SetConfig+0x1b4>
 80057be:	e00b      	b.n	80057d8 <UART_SetConfig+0x1c0>
 80057c0:	2300      	movs	r3, #0
 80057c2:	77fb      	strb	r3, [r7, #31]
 80057c4:	e0cc      	b.n	8005960 <UART_SetConfig+0x348>
 80057c6:	2302      	movs	r3, #2
 80057c8:	77fb      	strb	r3, [r7, #31]
 80057ca:	e0c9      	b.n	8005960 <UART_SetConfig+0x348>
 80057cc:	2304      	movs	r3, #4
 80057ce:	77fb      	strb	r3, [r7, #31]
 80057d0:	e0c6      	b.n	8005960 <UART_SetConfig+0x348>
 80057d2:	2308      	movs	r3, #8
 80057d4:	77fb      	strb	r3, [r7, #31]
 80057d6:	e0c3      	b.n	8005960 <UART_SetConfig+0x348>
 80057d8:	2310      	movs	r3, #16
 80057da:	77fb      	strb	r3, [r7, #31]
 80057dc:	e0c0      	b.n	8005960 <UART_SetConfig+0x348>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a44      	ldr	r2, [pc, #272]	; (80058f4 <UART_SetConfig+0x2dc>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d125      	bne.n	8005834 <UART_SetConfig+0x21c>
 80057e8:	4b3e      	ldr	r3, [pc, #248]	; (80058e4 <UART_SetConfig+0x2cc>)
 80057ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057f6:	d017      	beq.n	8005828 <UART_SetConfig+0x210>
 80057f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057fc:	d817      	bhi.n	800582e <UART_SetConfig+0x216>
 80057fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005802:	d00b      	beq.n	800581c <UART_SetConfig+0x204>
 8005804:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005808:	d811      	bhi.n	800582e <UART_SetConfig+0x216>
 800580a:	2b00      	cmp	r3, #0
 800580c:	d003      	beq.n	8005816 <UART_SetConfig+0x1fe>
 800580e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005812:	d006      	beq.n	8005822 <UART_SetConfig+0x20a>
 8005814:	e00b      	b.n	800582e <UART_SetConfig+0x216>
 8005816:	2300      	movs	r3, #0
 8005818:	77fb      	strb	r3, [r7, #31]
 800581a:	e0a1      	b.n	8005960 <UART_SetConfig+0x348>
 800581c:	2302      	movs	r3, #2
 800581e:	77fb      	strb	r3, [r7, #31]
 8005820:	e09e      	b.n	8005960 <UART_SetConfig+0x348>
 8005822:	2304      	movs	r3, #4
 8005824:	77fb      	strb	r3, [r7, #31]
 8005826:	e09b      	b.n	8005960 <UART_SetConfig+0x348>
 8005828:	2308      	movs	r3, #8
 800582a:	77fb      	strb	r3, [r7, #31]
 800582c:	e098      	b.n	8005960 <UART_SetConfig+0x348>
 800582e:	2310      	movs	r3, #16
 8005830:	77fb      	strb	r3, [r7, #31]
 8005832:	e095      	b.n	8005960 <UART_SetConfig+0x348>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a2f      	ldr	r2, [pc, #188]	; (80058f8 <UART_SetConfig+0x2e0>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d125      	bne.n	800588a <UART_SetConfig+0x272>
 800583e:	4b29      	ldr	r3, [pc, #164]	; (80058e4 <UART_SetConfig+0x2cc>)
 8005840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005844:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005848:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800584c:	d017      	beq.n	800587e <UART_SetConfig+0x266>
 800584e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005852:	d817      	bhi.n	8005884 <UART_SetConfig+0x26c>
 8005854:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005858:	d00b      	beq.n	8005872 <UART_SetConfig+0x25a>
 800585a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800585e:	d811      	bhi.n	8005884 <UART_SetConfig+0x26c>
 8005860:	2b00      	cmp	r3, #0
 8005862:	d003      	beq.n	800586c <UART_SetConfig+0x254>
 8005864:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005868:	d006      	beq.n	8005878 <UART_SetConfig+0x260>
 800586a:	e00b      	b.n	8005884 <UART_SetConfig+0x26c>
 800586c:	2301      	movs	r3, #1
 800586e:	77fb      	strb	r3, [r7, #31]
 8005870:	e076      	b.n	8005960 <UART_SetConfig+0x348>
 8005872:	2302      	movs	r3, #2
 8005874:	77fb      	strb	r3, [r7, #31]
 8005876:	e073      	b.n	8005960 <UART_SetConfig+0x348>
 8005878:	2304      	movs	r3, #4
 800587a:	77fb      	strb	r3, [r7, #31]
 800587c:	e070      	b.n	8005960 <UART_SetConfig+0x348>
 800587e:	2308      	movs	r3, #8
 8005880:	77fb      	strb	r3, [r7, #31]
 8005882:	e06d      	b.n	8005960 <UART_SetConfig+0x348>
 8005884:	2310      	movs	r3, #16
 8005886:	77fb      	strb	r3, [r7, #31]
 8005888:	e06a      	b.n	8005960 <UART_SetConfig+0x348>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a1b      	ldr	r2, [pc, #108]	; (80058fc <UART_SetConfig+0x2e4>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d138      	bne.n	8005906 <UART_SetConfig+0x2ee>
 8005894:	4b13      	ldr	r3, [pc, #76]	; (80058e4 <UART_SetConfig+0x2cc>)
 8005896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800589a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800589e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80058a2:	d017      	beq.n	80058d4 <UART_SetConfig+0x2bc>
 80058a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80058a8:	d82a      	bhi.n	8005900 <UART_SetConfig+0x2e8>
 80058aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058ae:	d00b      	beq.n	80058c8 <UART_SetConfig+0x2b0>
 80058b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058b4:	d824      	bhi.n	8005900 <UART_SetConfig+0x2e8>
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d003      	beq.n	80058c2 <UART_SetConfig+0x2aa>
 80058ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058be:	d006      	beq.n	80058ce <UART_SetConfig+0x2b6>
 80058c0:	e01e      	b.n	8005900 <UART_SetConfig+0x2e8>
 80058c2:	2300      	movs	r3, #0
 80058c4:	77fb      	strb	r3, [r7, #31]
 80058c6:	e04b      	b.n	8005960 <UART_SetConfig+0x348>
 80058c8:	2302      	movs	r3, #2
 80058ca:	77fb      	strb	r3, [r7, #31]
 80058cc:	e048      	b.n	8005960 <UART_SetConfig+0x348>
 80058ce:	2304      	movs	r3, #4
 80058d0:	77fb      	strb	r3, [r7, #31]
 80058d2:	e045      	b.n	8005960 <UART_SetConfig+0x348>
 80058d4:	2308      	movs	r3, #8
 80058d6:	77fb      	strb	r3, [r7, #31]
 80058d8:	e042      	b.n	8005960 <UART_SetConfig+0x348>
 80058da:	bf00      	nop
 80058dc:	efff69f3 	.word	0xefff69f3
 80058e0:	40011000 	.word	0x40011000
 80058e4:	40023800 	.word	0x40023800
 80058e8:	40004400 	.word	0x40004400
 80058ec:	40004800 	.word	0x40004800
 80058f0:	40004c00 	.word	0x40004c00
 80058f4:	40005000 	.word	0x40005000
 80058f8:	40011400 	.word	0x40011400
 80058fc:	40007800 	.word	0x40007800
 8005900:	2310      	movs	r3, #16
 8005902:	77fb      	strb	r3, [r7, #31]
 8005904:	e02c      	b.n	8005960 <UART_SetConfig+0x348>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a72      	ldr	r2, [pc, #456]	; (8005ad4 <UART_SetConfig+0x4bc>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d125      	bne.n	800595c <UART_SetConfig+0x344>
 8005910:	4b71      	ldr	r3, [pc, #452]	; (8005ad8 <UART_SetConfig+0x4c0>)
 8005912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005916:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800591a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800591e:	d017      	beq.n	8005950 <UART_SetConfig+0x338>
 8005920:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005924:	d817      	bhi.n	8005956 <UART_SetConfig+0x33e>
 8005926:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800592a:	d00b      	beq.n	8005944 <UART_SetConfig+0x32c>
 800592c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005930:	d811      	bhi.n	8005956 <UART_SetConfig+0x33e>
 8005932:	2b00      	cmp	r3, #0
 8005934:	d003      	beq.n	800593e <UART_SetConfig+0x326>
 8005936:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800593a:	d006      	beq.n	800594a <UART_SetConfig+0x332>
 800593c:	e00b      	b.n	8005956 <UART_SetConfig+0x33e>
 800593e:	2300      	movs	r3, #0
 8005940:	77fb      	strb	r3, [r7, #31]
 8005942:	e00d      	b.n	8005960 <UART_SetConfig+0x348>
 8005944:	2302      	movs	r3, #2
 8005946:	77fb      	strb	r3, [r7, #31]
 8005948:	e00a      	b.n	8005960 <UART_SetConfig+0x348>
 800594a:	2304      	movs	r3, #4
 800594c:	77fb      	strb	r3, [r7, #31]
 800594e:	e007      	b.n	8005960 <UART_SetConfig+0x348>
 8005950:	2308      	movs	r3, #8
 8005952:	77fb      	strb	r3, [r7, #31]
 8005954:	e004      	b.n	8005960 <UART_SetConfig+0x348>
 8005956:	2310      	movs	r3, #16
 8005958:	77fb      	strb	r3, [r7, #31]
 800595a:	e001      	b.n	8005960 <UART_SetConfig+0x348>
 800595c:	2310      	movs	r3, #16
 800595e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	69db      	ldr	r3, [r3, #28]
 8005964:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005968:	d15c      	bne.n	8005a24 <UART_SetConfig+0x40c>
  {
    switch (clocksource)
 800596a:	7ffb      	ldrb	r3, [r7, #31]
 800596c:	2b08      	cmp	r3, #8
 800596e:	d828      	bhi.n	80059c2 <UART_SetConfig+0x3aa>
 8005970:	a201      	add	r2, pc, #4	; (adr r2, 8005978 <UART_SetConfig+0x360>)
 8005972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005976:	bf00      	nop
 8005978:	0800599d 	.word	0x0800599d
 800597c:	080059a5 	.word	0x080059a5
 8005980:	080059ad 	.word	0x080059ad
 8005984:	080059c3 	.word	0x080059c3
 8005988:	080059b3 	.word	0x080059b3
 800598c:	080059c3 	.word	0x080059c3
 8005990:	080059c3 	.word	0x080059c3
 8005994:	080059c3 	.word	0x080059c3
 8005998:	080059bb 	.word	0x080059bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800599c:	f7fd fcba 	bl	8003314 <HAL_RCC_GetPCLK1Freq>
 80059a0:	61b8      	str	r0, [r7, #24]
        break;
 80059a2:	e013      	b.n	80059cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059a4:	f7fd fcca 	bl	800333c <HAL_RCC_GetPCLK2Freq>
 80059a8:	61b8      	str	r0, [r7, #24]
        break;
 80059aa:	e00f      	b.n	80059cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059ac:	4b4b      	ldr	r3, [pc, #300]	; (8005adc <UART_SetConfig+0x4c4>)
 80059ae:	61bb      	str	r3, [r7, #24]
        break;
 80059b0:	e00c      	b.n	80059cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059b2:	f7fd fb9d 	bl	80030f0 <HAL_RCC_GetSysClockFreq>
 80059b6:	61b8      	str	r0, [r7, #24]
        break;
 80059b8:	e008      	b.n	80059cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059be:	61bb      	str	r3, [r7, #24]
        break;
 80059c0:	e004      	b.n	80059cc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80059c2:	2300      	movs	r3, #0
 80059c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	77bb      	strb	r3, [r7, #30]
        break;
 80059ca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d074      	beq.n	8005abc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	005a      	lsls	r2, r3, #1
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	085b      	lsrs	r3, r3, #1
 80059dc:	441a      	add	r2, r3
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	2b0f      	cmp	r3, #15
 80059ee:	d916      	bls.n	8005a1e <UART_SetConfig+0x406>
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059f6:	d212      	bcs.n	8005a1e <UART_SetConfig+0x406>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	f023 030f 	bic.w	r3, r3, #15
 8005a00:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	085b      	lsrs	r3, r3, #1
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	f003 0307 	and.w	r3, r3, #7
 8005a0c:	b29a      	uxth	r2, r3
 8005a0e:	89fb      	ldrh	r3, [r7, #14]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	89fa      	ldrh	r2, [r7, #14]
 8005a1a:	60da      	str	r2, [r3, #12]
 8005a1c:	e04e      	b.n	8005abc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	77bb      	strb	r3, [r7, #30]
 8005a22:	e04b      	b.n	8005abc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a24:	7ffb      	ldrb	r3, [r7, #31]
 8005a26:	2b08      	cmp	r3, #8
 8005a28:	d827      	bhi.n	8005a7a <UART_SetConfig+0x462>
 8005a2a:	a201      	add	r2, pc, #4	; (adr r2, 8005a30 <UART_SetConfig+0x418>)
 8005a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a30:	08005a55 	.word	0x08005a55
 8005a34:	08005a5d 	.word	0x08005a5d
 8005a38:	08005a65 	.word	0x08005a65
 8005a3c:	08005a7b 	.word	0x08005a7b
 8005a40:	08005a6b 	.word	0x08005a6b
 8005a44:	08005a7b 	.word	0x08005a7b
 8005a48:	08005a7b 	.word	0x08005a7b
 8005a4c:	08005a7b 	.word	0x08005a7b
 8005a50:	08005a73 	.word	0x08005a73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a54:	f7fd fc5e 	bl	8003314 <HAL_RCC_GetPCLK1Freq>
 8005a58:	61b8      	str	r0, [r7, #24]
        break;
 8005a5a:	e013      	b.n	8005a84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a5c:	f7fd fc6e 	bl	800333c <HAL_RCC_GetPCLK2Freq>
 8005a60:	61b8      	str	r0, [r7, #24]
        break;
 8005a62:	e00f      	b.n	8005a84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a64:	4b1d      	ldr	r3, [pc, #116]	; (8005adc <UART_SetConfig+0x4c4>)
 8005a66:	61bb      	str	r3, [r7, #24]
        break;
 8005a68:	e00c      	b.n	8005a84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a6a:	f7fd fb41 	bl	80030f0 <HAL_RCC_GetSysClockFreq>
 8005a6e:	61b8      	str	r0, [r7, #24]
        break;
 8005a70:	e008      	b.n	8005a84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a76:	61bb      	str	r3, [r7, #24]
        break;
 8005a78:	e004      	b.n	8005a84 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	77bb      	strb	r3, [r7, #30]
        break;
 8005a82:	bf00      	nop
    }

    if (pclk != 0U)
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d018      	beq.n	8005abc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	085a      	lsrs	r2, r3, #1
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	441a      	add	r2, r3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	2b0f      	cmp	r3, #15
 8005aa4:	d908      	bls.n	8005ab8 <UART_SetConfig+0x4a0>
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aac:	d204      	bcs.n	8005ab8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = usartdiv;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	693a      	ldr	r2, [r7, #16]
 8005ab4:	60da      	str	r2, [r3, #12]
 8005ab6:	e001      	b.n	8005abc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005ac8:	7fbb      	ldrb	r3, [r7, #30]
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3720      	adds	r7, #32
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	40007c00 	.word	0x40007c00
 8005ad8:	40023800 	.word	0x40023800
 8005adc:	00f42400 	.word	0x00f42400

08005ae0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aec:	f003 0301 	and.w	r3, r3, #1
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d00a      	beq.n	8005b0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	430a      	orrs	r2, r1
 8005b08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0e:	f003 0302 	and.w	r3, r3, #2
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00a      	beq.n	8005b2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	430a      	orrs	r2, r1
 8005b2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b30:	f003 0304 	and.w	r3, r3, #4
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d00a      	beq.n	8005b4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	430a      	orrs	r2, r1
 8005b4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b52:	f003 0308 	and.w	r3, r3, #8
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d00a      	beq.n	8005b70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	430a      	orrs	r2, r1
 8005b6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b74:	f003 0310 	and.w	r3, r3, #16
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d00a      	beq.n	8005b92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	430a      	orrs	r2, r1
 8005b90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b96:	f003 0320 	and.w	r3, r3, #32
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00a      	beq.n	8005bb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	430a      	orrs	r2, r1
 8005bb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d01a      	beq.n	8005bf6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	430a      	orrs	r2, r1
 8005bd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bde:	d10a      	bne.n	8005bf6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	430a      	orrs	r2, r1
 8005bf4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d00a      	beq.n	8005c18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	430a      	orrs	r2, r1
 8005c16:	605a      	str	r2, [r3, #4]
  }
}
 8005c18:	bf00      	nop
 8005c1a:	370c      	adds	r7, #12
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b086      	sub	sp, #24
 8005c28:	af02      	add	r7, sp, #8
 8005c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c34:	f7fc fb36 	bl	80022a4 <HAL_GetTick>
 8005c38:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 0308 	and.w	r3, r3, #8
 8005c44:	2b08      	cmp	r3, #8
 8005c46:	d10e      	bne.n	8005c66 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c4c:	9300      	str	r3, [sp, #0]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 f817 	bl	8005c8a <UART_WaitOnFlagUntilTimeout>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d001      	beq.n	8005c66 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	e00d      	b.n	8005c82 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2220      	movs	r2, #32
 8005c6a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2220      	movs	r2, #32
 8005c70:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3710      	adds	r7, #16
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}

08005c8a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c8a:	b580      	push	{r7, lr}
 8005c8c:	b084      	sub	sp, #16
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	60f8      	str	r0, [r7, #12]
 8005c92:	60b9      	str	r1, [r7, #8]
 8005c94:	603b      	str	r3, [r7, #0]
 8005c96:	4613      	mov	r3, r2
 8005c98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c9a:	e05e      	b.n	8005d5a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca2:	d05a      	beq.n	8005d5a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ca4:	f7fc fafe 	bl	80022a4 <HAL_GetTick>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	69ba      	ldr	r2, [r7, #24]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d302      	bcc.n	8005cba <UART_WaitOnFlagUntilTimeout+0x30>
 8005cb4:	69bb      	ldr	r3, [r7, #24]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d11b      	bne.n	8005cf2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005cc8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	689a      	ldr	r2, [r3, #8]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f022 0201 	bic.w	r2, r2, #1
 8005cd8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2220      	movs	r2, #32
 8005cde:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2220      	movs	r2, #32
 8005ce4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e043      	b.n	8005d7a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 0304 	and.w	r3, r3, #4
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d02c      	beq.n	8005d5a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	69db      	ldr	r3, [r3, #28]
 8005d06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d0e:	d124      	bne.n	8005d5a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d18:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005d28:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	689a      	ldr	r2, [r3, #8]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f022 0201 	bic.w	r2, r2, #1
 8005d38:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2220      	movs	r2, #32
 8005d3e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2220      	movs	r2, #32
 8005d44:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2220      	movs	r2, #32
 8005d4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e00f      	b.n	8005d7a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	69da      	ldr	r2, [r3, #28]
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	4013      	ands	r3, r2
 8005d64:	68ba      	ldr	r2, [r7, #8]
 8005d66:	429a      	cmp	r2, r3
 8005d68:	bf0c      	ite	eq
 8005d6a:	2301      	moveq	r3, #1
 8005d6c:	2300      	movne	r3, #0
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	461a      	mov	r2, r3
 8005d72:	79fb      	ldrb	r3, [r7, #7]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d091      	beq.n	8005c9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3710      	adds	r7, #16
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
	...

08005d84 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b085      	sub	sp, #20
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	4613      	mov	r3, r2
 8005d90:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	68ba      	ldr	r2, [r7, #8]
 8005d96:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	88fa      	ldrh	r2, [r7, #6]
 8005d9c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	88fa      	ldrh	r2, [r7, #6]
 8005da4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2200      	movs	r2, #0
 8005dac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005db6:	d10e      	bne.n	8005dd6 <UART_Start_Receive_IT+0x52>
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d105      	bne.n	8005dcc <UART_Start_Receive_IT+0x48>
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005dc6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005dca:	e02d      	b.n	8005e28 <UART_Start_Receive_IT+0xa4>
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	22ff      	movs	r2, #255	; 0xff
 8005dd0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005dd4:	e028      	b.n	8005e28 <UART_Start_Receive_IT+0xa4>
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d10d      	bne.n	8005dfa <UART_Start_Receive_IT+0x76>
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d104      	bne.n	8005df0 <UART_Start_Receive_IT+0x6c>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	22ff      	movs	r2, #255	; 0xff
 8005dea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005dee:	e01b      	b.n	8005e28 <UART_Start_Receive_IT+0xa4>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	227f      	movs	r2, #127	; 0x7f
 8005df4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005df8:	e016      	b.n	8005e28 <UART_Start_Receive_IT+0xa4>
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e02:	d10d      	bne.n	8005e20 <UART_Start_Receive_IT+0x9c>
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d104      	bne.n	8005e16 <UART_Start_Receive_IT+0x92>
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	227f      	movs	r2, #127	; 0x7f
 8005e10:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e14:	e008      	b.n	8005e28 <UART_Start_Receive_IT+0xa4>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	223f      	movs	r2, #63	; 0x3f
 8005e1a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e1e:	e003      	b.n	8005e28 <UART_Start_Receive_IT+0xa4>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2222      	movs	r2, #34	; 0x22
 8005e34:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	689a      	ldr	r2, [r3, #8]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f042 0201 	orr.w	r2, r2, #1
 8005e44:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e4e:	d107      	bne.n	8005e60 <UART_Start_Receive_IT+0xdc>
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d103      	bne.n	8005e60 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	4a0c      	ldr	r2, [pc, #48]	; (8005e8c <UART_Start_Receive_IT+0x108>)
 8005e5c:	665a      	str	r2, [r3, #100]	; 0x64
 8005e5e:	e002      	b.n	8005e66 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	4a0b      	ldr	r2, [pc, #44]	; (8005e90 <UART_Start_Receive_IT+0x10c>)
 8005e64:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8005e7c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3714      	adds	r7, #20
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr
 8005e8c:	08006025 	.word	0x08006025
 8005e90:	08005f51 	.word	0x08005f51

08005e94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005eaa:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	689a      	ldr	r2, [r3, #8]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f022 0201 	bic.w	r2, r2, #1
 8005eba:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d107      	bne.n	8005ed4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f022 0210 	bic.w	r2, r2, #16
 8005ed2:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2220      	movs	r2, #32
 8005ed8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005ee6:	bf00      	nop
 8005ee8:	370c      	adds	r7, #12
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr

08005ef2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ef2:	b580      	push	{r7, lr}
 8005ef4:	b084      	sub	sp, #16
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005efe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f10:	68f8      	ldr	r0, [r7, #12]
 8005f12:	f7ff fb6b 	bl	80055ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f16:	bf00      	nop
 8005f18:	3710      	adds	r7, #16
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}

08005f1e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b082      	sub	sp, #8
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f34:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2220      	movs	r2, #32
 8005f3a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f7ff fb48 	bl	80055d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f48:	bf00      	nop
 8005f4a:	3708      	adds	r7, #8
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005f5e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f64:	2b22      	cmp	r3, #34	; 0x22
 8005f66:	d151      	bne.n	800600c <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6e:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005f70:	89bb      	ldrh	r3, [r7, #12]
 8005f72:	b2d9      	uxtb	r1, r3
 8005f74:	89fb      	ldrh	r3, [r7, #14]
 8005f76:	b2da      	uxtb	r2, r3
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f7c:	400a      	ands	r2, r1
 8005f7e:	b2d2      	uxtb	r2, r2
 8005f80:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f86:	1c5a      	adds	r2, r3, #1
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	3b01      	subs	r3, #1
 8005f96:	b29a      	uxth	r2, r3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d138      	bne.n	800601c <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005fb8:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	689a      	ldr	r2, [r3, #8]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f022 0201 	bic.w	r2, r2, #1
 8005fc8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2220      	movs	r2, #32
 8005fce:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d10f      	bne.n	8005ffe <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f022 0210 	bic.w	r2, r2, #16
 8005fec:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f7ff fb02 	bl	8005600 <HAL_UARTEx_RxEventCallback>
 8005ffc:	e002      	b.n	8006004 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f7fb fc08 	bl	8001814 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800600a:	e007      	b.n	800601c <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	699a      	ldr	r2, [r3, #24]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f042 0208 	orr.w	r2, r2, #8
 800601a:	619a      	str	r2, [r3, #24]
}
 800601c:	bf00      	nop
 800601e:	3710      	adds	r7, #16
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b084      	sub	sp, #16
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006032:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006038:	2b22      	cmp	r3, #34	; 0x22
 800603a:	d151      	bne.n	80060e0 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006042:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006048:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800604a:	89ba      	ldrh	r2, [r7, #12]
 800604c:	89fb      	ldrh	r3, [r7, #14]
 800604e:	4013      	ands	r3, r2
 8006050:	b29a      	uxth	r2, r3
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800605a:	1c9a      	adds	r2, r3, #2
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006066:	b29b      	uxth	r3, r3
 8006068:	3b01      	subs	r3, #1
 800606a:	b29a      	uxth	r2, r3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006078:	b29b      	uxth	r3, r3
 800607a:	2b00      	cmp	r3, #0
 800607c:	d138      	bne.n	80060f0 <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800608c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	689a      	ldr	r2, [r3, #8]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f022 0201 	bic.w	r2, r2, #1
 800609c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2220      	movs	r2, #32
 80060a2:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d10f      	bne.n	80060d2 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f022 0210 	bic.w	r2, r2, #16
 80060c0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80060c8:	4619      	mov	r1, r3
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f7ff fa98 	bl	8005600 <HAL_UARTEx_RxEventCallback>
 80060d0:	e002      	b.n	80060d8 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f7fb fb9e 	bl	8001814 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80060de:	e007      	b.n	80060f0 <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	699a      	ldr	r2, [r3, #24]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f042 0208 	orr.w	r2, r2, #8
 80060ee:	619a      	str	r2, [r3, #24]
}
 80060f0:	bf00      	nop
 80060f2:	3710      	adds	r7, #16
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b085      	sub	sp, #20
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	4603      	mov	r3, r0
 8006100:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006102:	2300      	movs	r3, #0
 8006104:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006106:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800610a:	2b84      	cmp	r3, #132	; 0x84
 800610c:	d005      	beq.n	800611a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800610e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	4413      	add	r3, r2
 8006116:	3303      	adds	r3, #3
 8006118:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800611a:	68fb      	ldr	r3, [r7, #12]
}
 800611c:	4618      	mov	r0, r3
 800611e:	3714      	adds	r7, #20
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800612e:	f3ef 8305 	mrs	r3, IPSR
 8006132:	607b      	str	r3, [r7, #4]
  return(result);
 8006134:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006136:	2b00      	cmp	r3, #0
 8006138:	bf14      	ite	ne
 800613a:	2301      	movne	r3, #1
 800613c:	2300      	moveq	r3, #0
 800613e:	b2db      	uxtb	r3, r3
}
 8006140:	4618      	mov	r0, r3
 8006142:	370c      	adds	r7, #12
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr

0800614c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006150:	f001 fed8 	bl	8007f04 <vTaskStartScheduler>
  
  return osOK;
 8006154:	2300      	movs	r3, #0
}
 8006156:	4618      	mov	r0, r3
 8006158:	bd80      	pop	{r7, pc}

0800615a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800615a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800615c:	b089      	sub	sp, #36	; 0x24
 800615e:	af04      	add	r7, sp, #16
 8006160:	6078      	str	r0, [r7, #4]
 8006162:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	695b      	ldr	r3, [r3, #20]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d020      	beq.n	80061ae <osThreadCreate+0x54>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	699b      	ldr	r3, [r3, #24]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d01c      	beq.n	80061ae <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	685c      	ldr	r4, [r3, #4]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681d      	ldr	r5, [r3, #0]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	691e      	ldr	r6, [r3, #16]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006186:	4618      	mov	r0, r3
 8006188:	f7ff ffb6 	bl	80060f8 <makeFreeRtosPriority>
 800618c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	695b      	ldr	r3, [r3, #20]
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006196:	9202      	str	r2, [sp, #8]
 8006198:	9301      	str	r3, [sp, #4]
 800619a:	9100      	str	r1, [sp, #0]
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	4632      	mov	r2, r6
 80061a0:	4629      	mov	r1, r5
 80061a2:	4620      	mov	r0, r4
 80061a4:	f001 fb1a 	bl	80077dc <xTaskCreateStatic>
 80061a8:	4603      	mov	r3, r0
 80061aa:	60fb      	str	r3, [r7, #12]
 80061ac:	e01c      	b.n	80061e8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	685c      	ldr	r4, [r3, #4]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80061ba:	b29e      	uxth	r6, r3
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80061c2:	4618      	mov	r0, r3
 80061c4:	f7ff ff98 	bl	80060f8 <makeFreeRtosPriority>
 80061c8:	4602      	mov	r2, r0
 80061ca:	f107 030c 	add.w	r3, r7, #12
 80061ce:	9301      	str	r3, [sp, #4]
 80061d0:	9200      	str	r2, [sp, #0]
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	4632      	mov	r2, r6
 80061d6:	4629      	mov	r1, r5
 80061d8:	4620      	mov	r0, r4
 80061da:	f001 fb62 	bl	80078a2 <xTaskCreate>
 80061de:	4603      	mov	r3, r0
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d001      	beq.n	80061e8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80061e4:	2300      	movs	r3, #0
 80061e6:	e000      	b.n	80061ea <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80061e8:	68fb      	ldr	r3, [r7, #12]
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3714      	adds	r7, #20
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080061f4 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b086      	sub	sp, #24
 80061f8:	af02      	add	r7, sp, #8
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	460b      	mov	r3, r1
 80061fe:	607a      	str	r2, [r7, #4]
 8006200:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d013      	beq.n	8006232 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 800620a:	7afb      	ldrb	r3, [r7, #11]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d101      	bne.n	8006214 <osTimerCreate+0x20>
 8006210:	2101      	movs	r1, #1
 8006212:	e000      	b.n	8006216 <osTimerCreate+0x22>
 8006214:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 800621e:	9201      	str	r2, [sp, #4]
 8006220:	9300      	str	r3, [sp, #0]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	460a      	mov	r2, r1
 8006226:	2101      	movs	r1, #1
 8006228:	480b      	ldr	r0, [pc, #44]	; (8006258 <osTimerCreate+0x64>)
 800622a:	f002 fde2 	bl	8008df2 <xTimerCreateStatic>
 800622e:	4603      	mov	r3, r0
 8006230:	e00e      	b.n	8006250 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8006232:	7afb      	ldrb	r3, [r7, #11]
 8006234:	2b01      	cmp	r3, #1
 8006236:	d101      	bne.n	800623c <osTimerCreate+0x48>
 8006238:	2201      	movs	r2, #1
 800623a:	e000      	b.n	800623e <osTimerCreate+0x4a>
 800623c:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8006242:	9300      	str	r3, [sp, #0]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2101      	movs	r1, #1
 8006248:	4803      	ldr	r0, [pc, #12]	; (8006258 <osTimerCreate+0x64>)
 800624a:	f002 fdb1 	bl	8008db0 <xTimerCreate>
 800624e:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8006250:	4618      	mov	r0, r3
 8006252:	3710      	adds	r7, #16
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	0801045c 	.word	0x0801045c

0800625c <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b088      	sub	sp, #32
 8006260:	af02      	add	r7, sp, #8
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 8006266:	2300      	movs	r3, #0
 8006268:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 800626a:	2300      	movs	r3, #0
 800626c:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d101      	bne.n	800627c <osTimerStart+0x20>
    ticks = 1;
 8006278:	2301      	movs	r3, #1
 800627a:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 800627c:	f7ff ff54 	bl	8006128 <inHandlerMode>
 8006280:	4603      	mov	r3, r0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d01f      	beq.n	80062c6 <osTimerStart+0x6a>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8006286:	f107 030c 	add.w	r3, r7, #12
 800628a:	2200      	movs	r2, #0
 800628c:	9200      	str	r2, [sp, #0]
 800628e:	693a      	ldr	r2, [r7, #16]
 8006290:	2109      	movs	r1, #9
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f002 fe2c 	bl	8008ef0 <xTimerGenericCommand>
 8006298:	4603      	mov	r3, r0
 800629a:	2b01      	cmp	r3, #1
 800629c:	d002      	beq.n	80062a4 <osTimerStart+0x48>
    {
      result = osErrorOS;
 800629e:	23ff      	movs	r3, #255	; 0xff
 80062a0:	617b      	str	r3, [r7, #20]
 80062a2:	e01d      	b.n	80062e0 <osTimerStart+0x84>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00a      	beq.n	80062c0 <osTimerStart+0x64>
 80062aa:	f005 f8b9 	bl	800b420 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 80062ae:	4b0f      	ldr	r3, [pc, #60]	; (80062ec <osTimerStart+0x90>)
 80062b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062b4:	601a      	str	r2, [r3, #0]
 80062b6:	f3bf 8f4f 	dsb	sy
 80062ba:	f3bf 8f6f 	isb	sy
 80062be:	e00f      	b.n	80062e0 <osTimerStart+0x84>
 80062c0:	f005 f892 	bl	800b3e8 <SEGGER_SYSVIEW_RecordExitISR>
 80062c4:	e00c      	b.n	80062e0 <osTimerStart+0x84>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 80062c6:	2300      	movs	r3, #0
 80062c8:	9300      	str	r3, [sp, #0]
 80062ca:	2300      	movs	r3, #0
 80062cc:	693a      	ldr	r2, [r7, #16]
 80062ce:	2104      	movs	r1, #4
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f002 fe0d 	bl	8008ef0 <xTimerGenericCommand>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d001      	beq.n	80062e0 <osTimerStart+0x84>
      result = osErrorOS;
 80062dc:	23ff      	movs	r3, #255	; 0xff
 80062de:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 80062e0:	697b      	ldr	r3, [r7, #20]
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3718      	adds	r7, #24
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	e000ed04 	.word	0xe000ed04

080062f0 <osTimerStop>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStop (osTimerId timer_id)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b086      	sub	sp, #24
 80062f4:	af02      	add	r7, sp, #8
 80062f6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80062f8:	2300      	movs	r3, #0
 80062fa:	60fb      	str	r3, [r7, #12]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 80062fc:	2300      	movs	r3, #0
 80062fe:	60bb      	str	r3, [r7, #8]

  if (inHandlerMode()) {
 8006300:	f7ff ff12 	bl	8006128 <inHandlerMode>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d01e      	beq.n	8006348 <osTimerStop+0x58>
    if (xTimerStopFromISR(timer_id, &taskWoken) != pdPASS) {
 800630a:	f107 0308 	add.w	r3, r7, #8
 800630e:	2200      	movs	r2, #0
 8006310:	9200      	str	r2, [sp, #0]
 8006312:	2200      	movs	r2, #0
 8006314:	2108      	movs	r1, #8
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f002 fdea 	bl	8008ef0 <xTimerGenericCommand>
 800631c:	4603      	mov	r3, r0
 800631e:	2b01      	cmp	r3, #1
 8006320:	d001      	beq.n	8006326 <osTimerStop+0x36>
      return osErrorOS;
 8006322:	23ff      	movs	r3, #255	; 0xff
 8006324:	e01e      	b.n	8006364 <osTimerStop+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d00a      	beq.n	8006342 <osTimerStop+0x52>
 800632c:	f005 f878 	bl	800b420 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 8006330:	4b0e      	ldr	r3, [pc, #56]	; (800636c <osTimerStop+0x7c>)
 8006332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006336:	601a      	str	r2, [r3, #0]
 8006338:	f3bf 8f4f 	dsb	sy
 800633c:	f3bf 8f6f 	isb	sy
 8006340:	e00f      	b.n	8006362 <osTimerStop+0x72>
 8006342:	f005 f851 	bl	800b3e8 <SEGGER_SYSVIEW_RecordExitISR>
 8006346:	e00c      	b.n	8006362 <osTimerStop+0x72>
  }
  else {
    if (xTimerStop(timer_id, 0) != pdPASS) {
 8006348:	2300      	movs	r3, #0
 800634a:	9300      	str	r3, [sp, #0]
 800634c:	2300      	movs	r3, #0
 800634e:	2200      	movs	r2, #0
 8006350:	2103      	movs	r1, #3
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f002 fdcc 	bl	8008ef0 <xTimerGenericCommand>
 8006358:	4603      	mov	r3, r0
 800635a:	2b01      	cmp	r3, #1
 800635c:	d001      	beq.n	8006362 <osTimerStop+0x72>
      result = osErrorOS;
 800635e:	23ff      	movs	r3, #255	; 0xff
 8006360:	60fb      	str	r3, [r7, #12]
    }
  }
#else 
  result = osErrorOS;
#endif 
  return result;
 8006362:	68fb      	ldr	r3, [r7, #12]
}
 8006364:	4618      	mov	r0, r3
 8006366:	3710      	adds	r7, #16
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}
 800636c:	e000ed04 	.word	0xe000ed04

08006370 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8006370:	b580      	push	{r7, lr}
 8006372:	b086      	sub	sp, #24
 8006374:	af02      	add	r7, sp, #8
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d00f      	beq.n	80063a2 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	2b01      	cmp	r3, #1
 8006386:	d10a      	bne.n	800639e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	2203      	movs	r2, #3
 800638e:	9200      	str	r2, [sp, #0]
 8006390:	2200      	movs	r2, #0
 8006392:	2100      	movs	r1, #0
 8006394:	2001      	movs	r0, #1
 8006396:	f000 f9f9 	bl	800678c <xQueueGenericCreateStatic>
 800639a:	4603      	mov	r3, r0
 800639c:	e016      	b.n	80063cc <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800639e:	2300      	movs	r3, #0
 80063a0:	e014      	b.n	80063cc <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d110      	bne.n	80063ca <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80063a8:	2203      	movs	r2, #3
 80063aa:	2100      	movs	r1, #0
 80063ac:	2001      	movs	r0, #1
 80063ae:	f000 fa6f 	bl	8006890 <xQueueGenericCreate>
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d005      	beq.n	80063c6 <osSemaphoreCreate+0x56>
 80063ba:	2300      	movs	r3, #0
 80063bc:	2200      	movs	r2, #0
 80063be:	2100      	movs	r1, #0
 80063c0:	68f8      	ldr	r0, [r7, #12]
 80063c2:	f000 facd 	bl	8006960 <xQueueGenericSend>
      return sema;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	e000      	b.n	80063cc <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80063ca:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3710      	adds	r7, #16
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80063de:	2300      	movs	r3, #0
 80063e0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d101      	bne.n	80063ec <osSemaphoreWait+0x18>
    return osErrorParameter;
 80063e8:	2380      	movs	r3, #128	; 0x80
 80063ea:	e03f      	b.n	800646c <osSemaphoreWait+0x98>
  }
  
  ticks = 0;
 80063ec:	2300      	movs	r3, #0
 80063ee:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f6:	d103      	bne.n	8006400 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80063f8:	f04f 33ff 	mov.w	r3, #4294967295
 80063fc:	60fb      	str	r3, [r7, #12]
 80063fe:	e009      	b.n	8006414 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d006      	beq.n	8006414 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d101      	bne.n	8006414 <osSemaphoreWait+0x40>
      ticks = 1;
 8006410:	2301      	movs	r3, #1
 8006412:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006414:	f7ff fe88 	bl	8006128 <inHandlerMode>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d01c      	beq.n	8006458 <osSemaphoreWait+0x84>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800641e:	f107 0308 	add.w	r3, r7, #8
 8006422:	461a      	mov	r2, r3
 8006424:	2100      	movs	r1, #0
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 ff80 	bl	800732c <xQueueReceiveFromISR>
 800642c:	4603      	mov	r3, r0
 800642e:	2b01      	cmp	r3, #1
 8006430:	d001      	beq.n	8006436 <osSemaphoreWait+0x62>
      return osErrorOS;
 8006432:	23ff      	movs	r3, #255	; 0xff
 8006434:	e01a      	b.n	800646c <osSemaphoreWait+0x98>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d00a      	beq.n	8006452 <osSemaphoreWait+0x7e>
 800643c:	f004 fff0 	bl	800b420 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 8006440:	4b0c      	ldr	r3, [pc, #48]	; (8006474 <osSemaphoreWait+0xa0>)
 8006442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006446:	601a      	str	r2, [r3, #0]
 8006448:	f3bf 8f4f 	dsb	sy
 800644c:	f3bf 8f6f 	isb	sy
 8006450:	e00b      	b.n	800646a <osSemaphoreWait+0x96>
 8006452:	f004 ffc9 	bl	800b3e8 <SEGGER_SYSVIEW_RecordExitISR>
 8006456:	e008      	b.n	800646a <osSemaphoreWait+0x96>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8006458:	68f9      	ldr	r1, [r7, #12]
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 fe22 	bl	80070a4 <xQueueSemaphoreTake>
 8006460:	4603      	mov	r3, r0
 8006462:	2b01      	cmp	r3, #1
 8006464:	d001      	beq.n	800646a <osSemaphoreWait+0x96>
    return osErrorOS;
 8006466:	23ff      	movs	r3, #255	; 0xff
 8006468:	e000      	b.n	800646c <osSemaphoreWait+0x98>
  }
  
  return osOK;
 800646a:	2300      	movs	r3, #0
}
 800646c:	4618      	mov	r0, r3
 800646e:	3710      	adds	r7, #16
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}
 8006474:	e000ed04 	.word	0xe000ed04

08006478 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006480:	2300      	movs	r3, #0
 8006482:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006484:	2300      	movs	r3, #0
 8006486:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8006488:	f7ff fe4e 	bl	8006128 <inHandlerMode>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d01b      	beq.n	80064ca <osSemaphoreRelease+0x52>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006492:	f107 0308 	add.w	r3, r7, #8
 8006496:	4619      	mov	r1, r3
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 fc43 	bl	8006d24 <xQueueGiveFromISR>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d001      	beq.n	80064a8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80064a4:	23ff      	movs	r3, #255	; 0xff
 80064a6:	e01c      	b.n	80064e2 <osSemaphoreRelease+0x6a>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00a      	beq.n	80064c4 <osSemaphoreRelease+0x4c>
 80064ae:	f004 ffb7 	bl	800b420 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 80064b2:	4b0e      	ldr	r3, [pc, #56]	; (80064ec <osSemaphoreRelease+0x74>)
 80064b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064b8:	601a      	str	r2, [r3, #0]
 80064ba:	f3bf 8f4f 	dsb	sy
 80064be:	f3bf 8f6f 	isb	sy
 80064c2:	e00d      	b.n	80064e0 <osSemaphoreRelease+0x68>
 80064c4:	f004 ff90 	bl	800b3e8 <SEGGER_SYSVIEW_RecordExitISR>
 80064c8:	e00a      	b.n	80064e0 <osSemaphoreRelease+0x68>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80064ca:	2300      	movs	r3, #0
 80064cc:	2200      	movs	r2, #0
 80064ce:	2100      	movs	r1, #0
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 fa45 	bl	8006960 <xQueueGenericSend>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d001      	beq.n	80064e0 <osSemaphoreRelease+0x68>
      result = osErrorOS;
 80064dc:	23ff      	movs	r3, #255	; 0xff
 80064de:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80064e0:	68fb      	ldr	r3, [r7, #12]
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3710      	adds	r7, #16
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	e000ed04 	.word	0xe000ed04

080064f0 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b082      	sub	sp, #8
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f001 fb3f 	bl	8007b7c <vTaskSuspend>
  
  return osOK;
 80064fe:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8006500:	4618      	mov	r0, r3
 8006502:	3708      	adds	r7, #8
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 8006510:	f7ff fe0a 	bl	8006128 <inHandlerMode>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d010      	beq.n	800653c <osThreadResume+0x34>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f001 fc70 	bl	8007e00 <xTaskResumeFromISR>
 8006520:	4603      	mov	r3, r0
 8006522:	2b01      	cmp	r3, #1
 8006524:	d10d      	bne.n	8006542 <osThreadResume+0x3a>
    {
      portYIELD_FROM_ISR(pdTRUE);
 8006526:	f004 ff7b 	bl	800b420 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 800652a:	4b08      	ldr	r3, [pc, #32]	; (800654c <osThreadResume+0x44>)
 800652c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006530:	601a      	str	r2, [r3, #0]
 8006532:	f3bf 8f4f 	dsb	sy
 8006536:	f3bf 8f6f 	isb	sy
 800653a:	e002      	b.n	8006542 <osThreadResume+0x3a>
    }
  }
  else
  {
    vTaskResume(thread_id);
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f001 fbf3 	bl	8007d28 <vTaskResume>
  }
  return osOK;
 8006542:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8006544:	4618      	mov	r0, r3
 8006546:	3708      	adds	r7, #8
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}
 800654c:	e000ed04 	.word	0xe000ed04

08006550 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006550:	b480      	push	{r7}
 8006552:	b083      	sub	sp, #12
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f103 0208 	add.w	r2, r3, #8
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f04f 32ff 	mov.w	r2, #4294967295
 8006568:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f103 0208 	add.w	r2, r3, #8
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f103 0208 	add.w	r2, r3, #8
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006584:	bf00      	nop
 8006586:	370c      	adds	r7, #12
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2200      	movs	r2, #0
 800659c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800659e:	bf00      	nop
 80065a0:	370c      	adds	r7, #12
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr

080065aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80065aa:	b480      	push	{r7}
 80065ac:	b085      	sub	sp, #20
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
 80065b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	689a      	ldr	r2, [r3, #8]
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	683a      	ldr	r2, [r7, #0]
 80065ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	683a      	ldr	r2, [r7, #0]
 80065d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	1c5a      	adds	r2, r3, #1
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	601a      	str	r2, [r3, #0]
}
 80065e6:	bf00      	nop
 80065e8:	3714      	adds	r7, #20
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr

080065f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80065f2:	b480      	push	{r7}
 80065f4:	b085      	sub	sp, #20
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
 80065fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006608:	d103      	bne.n	8006612 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	60fb      	str	r3, [r7, #12]
 8006610:	e00c      	b.n	800662c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	3308      	adds	r3, #8
 8006616:	60fb      	str	r3, [r7, #12]
 8006618:	e002      	b.n	8006620 <vListInsert+0x2e>
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	60fb      	str	r3, [r7, #12]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68ba      	ldr	r2, [r7, #8]
 8006628:	429a      	cmp	r2, r3
 800662a:	d2f6      	bcs.n	800661a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	685a      	ldr	r2, [r3, #4]
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	683a      	ldr	r2, [r7, #0]
 800663a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	68fa      	ldr	r2, [r7, #12]
 8006640:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	683a      	ldr	r2, [r7, #0]
 8006646:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	1c5a      	adds	r2, r3, #1
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	601a      	str	r2, [r3, #0]
}
 8006658:	bf00      	nop
 800665a:	3714      	adds	r7, #20
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006664:	b480      	push	{r7}
 8006666:	b085      	sub	sp, #20
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	691b      	ldr	r3, [r3, #16]
 8006670:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	6892      	ldr	r2, [r2, #8]
 800667a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	6852      	ldr	r2, [r2, #4]
 8006684:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	429a      	cmp	r2, r3
 800668e:	d103      	bne.n	8006698 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	689a      	ldr	r2, [r3, #8]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	1e5a      	subs	r2, r3, #1
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3714      	adds	r7, #20
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d10c      	bne.n	80066e6 <xQueueGenericReset+0x2e>
	__asm volatile
 80066cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d0:	b672      	cpsid	i
 80066d2:	f383 8811 	msr	BASEPRI, r3
 80066d6:	f3bf 8f6f 	isb	sy
 80066da:	f3bf 8f4f 	dsb	sy
 80066de:	b662      	cpsie	i
 80066e0:	60bb      	str	r3, [r7, #8]
}
 80066e2:	bf00      	nop
 80066e4:	e7fe      	b.n	80066e4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80066e6:	f003 f801 	bl	80096ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066f2:	68f9      	ldr	r1, [r7, #12]
 80066f4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80066f6:	fb01 f303 	mul.w	r3, r1, r3
 80066fa:	441a      	add	r2, r3
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2200      	movs	r2, #0
 8006704:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006716:	3b01      	subs	r3, #1
 8006718:	68f9      	ldr	r1, [r7, #12]
 800671a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800671c:	fb01 f303 	mul.w	r3, r1, r3
 8006720:	441a      	add	r2, r3
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	22ff      	movs	r2, #255	; 0xff
 800672a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	22ff      	movs	r2, #255	; 0xff
 8006732:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d114      	bne.n	8006766 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	691b      	ldr	r3, [r3, #16]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d01a      	beq.n	800677a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	3310      	adds	r3, #16
 8006748:	4618      	mov	r0, r3
 800674a:	f001 feb5 	bl	80084b8 <xTaskRemoveFromEventList>
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	d012      	beq.n	800677a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006754:	4b0c      	ldr	r3, [pc, #48]	; (8006788 <xQueueGenericReset+0xd0>)
 8006756:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800675a:	601a      	str	r2, [r3, #0]
 800675c:	f3bf 8f4f 	dsb	sy
 8006760:	f3bf 8f6f 	isb	sy
 8006764:	e009      	b.n	800677a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	3310      	adds	r3, #16
 800676a:	4618      	mov	r0, r3
 800676c:	f7ff fef0 	bl	8006550 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	3324      	adds	r3, #36	; 0x24
 8006774:	4618      	mov	r0, r3
 8006776:	f7ff feeb 	bl	8006550 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800677a:	f002 ffeb 	bl	8009754 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800677e:	2301      	movs	r3, #1
}
 8006780:	4618      	mov	r0, r3
 8006782:	3710      	adds	r7, #16
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}
 8006788:	e000ed04 	.word	0xe000ed04

0800678c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800678c:	b580      	push	{r7, lr}
 800678e:	b08e      	sub	sp, #56	; 0x38
 8006790:	af02      	add	r7, sp, #8
 8006792:	60f8      	str	r0, [r7, #12]
 8006794:	60b9      	str	r1, [r7, #8]
 8006796:	607a      	str	r2, [r7, #4]
 8006798:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d10c      	bne.n	80067ba <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80067a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a4:	b672      	cpsid	i
 80067a6:	f383 8811 	msr	BASEPRI, r3
 80067aa:	f3bf 8f6f 	isb	sy
 80067ae:	f3bf 8f4f 	dsb	sy
 80067b2:	b662      	cpsie	i
 80067b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80067b6:	bf00      	nop
 80067b8:	e7fe      	b.n	80067b8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d10c      	bne.n	80067da <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80067c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c4:	b672      	cpsid	i
 80067c6:	f383 8811 	msr	BASEPRI, r3
 80067ca:	f3bf 8f6f 	isb	sy
 80067ce:	f3bf 8f4f 	dsb	sy
 80067d2:	b662      	cpsie	i
 80067d4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80067d6:	bf00      	nop
 80067d8:	e7fe      	b.n	80067d8 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d002      	beq.n	80067e6 <xQueueGenericCreateStatic+0x5a>
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d001      	beq.n	80067ea <xQueueGenericCreateStatic+0x5e>
 80067e6:	2301      	movs	r3, #1
 80067e8:	e000      	b.n	80067ec <xQueueGenericCreateStatic+0x60>
 80067ea:	2300      	movs	r3, #0
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d10c      	bne.n	800680a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80067f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f4:	b672      	cpsid	i
 80067f6:	f383 8811 	msr	BASEPRI, r3
 80067fa:	f3bf 8f6f 	isb	sy
 80067fe:	f3bf 8f4f 	dsb	sy
 8006802:	b662      	cpsie	i
 8006804:	623b      	str	r3, [r7, #32]
}
 8006806:	bf00      	nop
 8006808:	e7fe      	b.n	8006808 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d102      	bne.n	8006816 <xQueueGenericCreateStatic+0x8a>
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d101      	bne.n	800681a <xQueueGenericCreateStatic+0x8e>
 8006816:	2301      	movs	r3, #1
 8006818:	e000      	b.n	800681c <xQueueGenericCreateStatic+0x90>
 800681a:	2300      	movs	r3, #0
 800681c:	2b00      	cmp	r3, #0
 800681e:	d10c      	bne.n	800683a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8006820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006824:	b672      	cpsid	i
 8006826:	f383 8811 	msr	BASEPRI, r3
 800682a:	f3bf 8f6f 	isb	sy
 800682e:	f3bf 8f4f 	dsb	sy
 8006832:	b662      	cpsie	i
 8006834:	61fb      	str	r3, [r7, #28]
}
 8006836:	bf00      	nop
 8006838:	e7fe      	b.n	8006838 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800683a:	2348      	movs	r3, #72	; 0x48
 800683c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	2b48      	cmp	r3, #72	; 0x48
 8006842:	d00c      	beq.n	800685e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8006844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006848:	b672      	cpsid	i
 800684a:	f383 8811 	msr	BASEPRI, r3
 800684e:	f3bf 8f6f 	isb	sy
 8006852:	f3bf 8f4f 	dsb	sy
 8006856:	b662      	cpsie	i
 8006858:	61bb      	str	r3, [r7, #24]
}
 800685a:	bf00      	nop
 800685c:	e7fe      	b.n	800685c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800685e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006866:	2b00      	cmp	r3, #0
 8006868:	d00d      	beq.n	8006886 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800686a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800686c:	2201      	movs	r2, #1
 800686e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006872:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006878:	9300      	str	r3, [sp, #0]
 800687a:	4613      	mov	r3, r2
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	68b9      	ldr	r1, [r7, #8]
 8006880:	68f8      	ldr	r0, [r7, #12]
 8006882:	f000 f847 	bl	8006914 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006888:	4618      	mov	r0, r3
 800688a:	3730      	adds	r7, #48	; 0x30
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006890:	b580      	push	{r7, lr}
 8006892:	b08a      	sub	sp, #40	; 0x28
 8006894:	af02      	add	r7, sp, #8
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	4613      	mov	r3, r2
 800689c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d10c      	bne.n	80068be <xQueueGenericCreate+0x2e>
	__asm volatile
 80068a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a8:	b672      	cpsid	i
 80068aa:	f383 8811 	msr	BASEPRI, r3
 80068ae:	f3bf 8f6f 	isb	sy
 80068b2:	f3bf 8f4f 	dsb	sy
 80068b6:	b662      	cpsie	i
 80068b8:	613b      	str	r3, [r7, #16]
}
 80068ba:	bf00      	nop
 80068bc:	e7fe      	b.n	80068bc <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d102      	bne.n	80068ca <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80068c4:	2300      	movs	r3, #0
 80068c6:	61fb      	str	r3, [r7, #28]
 80068c8:	e004      	b.n	80068d4 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	68ba      	ldr	r2, [r7, #8]
 80068ce:	fb02 f303 	mul.w	r3, r2, r3
 80068d2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	3348      	adds	r3, #72	; 0x48
 80068d8:	4618      	mov	r0, r3
 80068da:	f003 f83b 	bl	8009954 <pvPortMalloc>
 80068de:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d011      	beq.n	800690a <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	3348      	adds	r3, #72	; 0x48
 80068ee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80068f8:	79fa      	ldrb	r2, [r7, #7]
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	9300      	str	r3, [sp, #0]
 80068fe:	4613      	mov	r3, r2
 8006900:	697a      	ldr	r2, [r7, #20]
 8006902:	68b9      	ldr	r1, [r7, #8]
 8006904:	68f8      	ldr	r0, [r7, #12]
 8006906:	f000 f805 	bl	8006914 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800690a:	69bb      	ldr	r3, [r7, #24]
	}
 800690c:	4618      	mov	r0, r3
 800690e:	3720      	adds	r7, #32
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	60b9      	str	r1, [r7, #8]
 800691e:	607a      	str	r2, [r7, #4]
 8006920:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d103      	bne.n	8006930 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	69ba      	ldr	r2, [r7, #24]
 800692c:	601a      	str	r2, [r3, #0]
 800692e:	e002      	b.n	8006936 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006936:	69bb      	ldr	r3, [r7, #24]
 8006938:	68fa      	ldr	r2, [r7, #12]
 800693a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	68ba      	ldr	r2, [r7, #8]
 8006940:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006942:	2101      	movs	r1, #1
 8006944:	69b8      	ldr	r0, [r7, #24]
 8006946:	f7ff feb7 	bl	80066b8 <xQueueGenericReset>
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 800694a:	78fb      	ldrb	r3, [r7, #3]
 800694c:	68ba      	ldr	r2, [r7, #8]
 800694e:	68f9      	ldr	r1, [r7, #12]
 8006950:	2073      	movs	r0, #115	; 0x73
 8006952:	f004 f937 	bl	800abc4 <SEGGER_SYSVIEW_RecordU32x3>
}
 8006956:	bf00      	nop
 8006958:	3710      	adds	r7, #16
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
	...

08006960 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b090      	sub	sp, #64	; 0x40
 8006964:	af02      	add	r7, sp, #8
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	60b9      	str	r1, [r7, #8]
 800696a:	607a      	str	r2, [r7, #4]
 800696c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800696e:	2300      	movs	r3, #0
 8006970:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006978:	2b00      	cmp	r3, #0
 800697a:	d10c      	bne.n	8006996 <xQueueGenericSend+0x36>
	__asm volatile
 800697c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006980:	b672      	cpsid	i
 8006982:	f383 8811 	msr	BASEPRI, r3
 8006986:	f3bf 8f6f 	isb	sy
 800698a:	f3bf 8f4f 	dsb	sy
 800698e:	b662      	cpsie	i
 8006990:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006992:	bf00      	nop
 8006994:	e7fe      	b.n	8006994 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d103      	bne.n	80069a4 <xQueueGenericSend+0x44>
 800699c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d101      	bne.n	80069a8 <xQueueGenericSend+0x48>
 80069a4:	2301      	movs	r3, #1
 80069a6:	e000      	b.n	80069aa <xQueueGenericSend+0x4a>
 80069a8:	2300      	movs	r3, #0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d10c      	bne.n	80069c8 <xQueueGenericSend+0x68>
	__asm volatile
 80069ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b2:	b672      	cpsid	i
 80069b4:	f383 8811 	msr	BASEPRI, r3
 80069b8:	f3bf 8f6f 	isb	sy
 80069bc:	f3bf 8f4f 	dsb	sy
 80069c0:	b662      	cpsie	i
 80069c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80069c4:	bf00      	nop
 80069c6:	e7fe      	b.n	80069c6 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	d103      	bne.n	80069d6 <xQueueGenericSend+0x76>
 80069ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d101      	bne.n	80069da <xQueueGenericSend+0x7a>
 80069d6:	2301      	movs	r3, #1
 80069d8:	e000      	b.n	80069dc <xQueueGenericSend+0x7c>
 80069da:	2300      	movs	r3, #0
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d10c      	bne.n	80069fa <xQueueGenericSend+0x9a>
	__asm volatile
 80069e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e4:	b672      	cpsid	i
 80069e6:	f383 8811 	msr	BASEPRI, r3
 80069ea:	f3bf 8f6f 	isb	sy
 80069ee:	f3bf 8f4f 	dsb	sy
 80069f2:	b662      	cpsie	i
 80069f4:	623b      	str	r3, [r7, #32]
}
 80069f6:	bf00      	nop
 80069f8:	e7fe      	b.n	80069f8 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80069fa:	f001 ff29 	bl	8008850 <xTaskGetSchedulerState>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d102      	bne.n	8006a0a <xQueueGenericSend+0xaa>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d101      	bne.n	8006a0e <xQueueGenericSend+0xae>
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e000      	b.n	8006a10 <xQueueGenericSend+0xb0>
 8006a0e:	2300      	movs	r3, #0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d10c      	bne.n	8006a2e <xQueueGenericSend+0xce>
	__asm volatile
 8006a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a18:	b672      	cpsid	i
 8006a1a:	f383 8811 	msr	BASEPRI, r3
 8006a1e:	f3bf 8f6f 	isb	sy
 8006a22:	f3bf 8f4f 	dsb	sy
 8006a26:	b662      	cpsie	i
 8006a28:	61fb      	str	r3, [r7, #28]
}
 8006a2a:	bf00      	nop
 8006a2c:	e7fe      	b.n	8006a2c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a2e:	f002 fe5d 	bl	80096ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d302      	bcc.n	8006a44 <xQueueGenericSend+0xe4>
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	2b02      	cmp	r3, #2
 8006a42:	d136      	bne.n	8006ab2 <xQueueGenericSend+0x152>
			{
				traceQUEUE_SEND( pxQueue );
 8006a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a46:	4618      	mov	r0, r3
 8006a48:	f004 fe48 	bl	800b6dc <SEGGER_SYSVIEW_ShrinkId>
 8006a4c:	68ba      	ldr	r2, [r7, #8]
 8006a4e:	6879      	ldr	r1, [r7, #4]
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	9300      	str	r3, [sp, #0]
 8006a54:	460b      	mov	r3, r1
 8006a56:	4601      	mov	r1, r0
 8006a58:	205a      	movs	r0, #90	; 0x5a
 8006a5a:	f004 f929 	bl	800acb0 <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006a5e:	683a      	ldr	r2, [r7, #0]
 8006a60:	68b9      	ldr	r1, [r7, #8]
 8006a62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a64:	f000 fd43 	bl	80074ee <prvCopyDataToQueue>
 8006a68:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d010      	beq.n	8006a94 <xQueueGenericSend+0x134>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a74:	3324      	adds	r3, #36	; 0x24
 8006a76:	4618      	mov	r0, r3
 8006a78:	f001 fd1e 	bl	80084b8 <xTaskRemoveFromEventList>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d013      	beq.n	8006aaa <xQueueGenericSend+0x14a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006a82:	4b4d      	ldr	r3, [pc, #308]	; (8006bb8 <xQueueGenericSend+0x258>)
 8006a84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a88:	601a      	str	r2, [r3, #0]
 8006a8a:	f3bf 8f4f 	dsb	sy
 8006a8e:	f3bf 8f6f 	isb	sy
 8006a92:	e00a      	b.n	8006aaa <xQueueGenericSend+0x14a>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d007      	beq.n	8006aaa <xQueueGenericSend+0x14a>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006a9a:	4b47      	ldr	r3, [pc, #284]	; (8006bb8 <xQueueGenericSend+0x258>)
 8006a9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006aa0:	601a      	str	r2, [r3, #0]
 8006aa2:	f3bf 8f4f 	dsb	sy
 8006aa6:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006aaa:	f002 fe53 	bl	8009754 <vPortExitCritical>
				return pdPASS;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e07d      	b.n	8006bae <xQueueGenericSend+0x24e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d110      	bne.n	8006ada <xQueueGenericSend+0x17a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006ab8:	f002 fe4c 	bl	8009754 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8006abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f004 fe0c 	bl	800b6dc <SEGGER_SYSVIEW_ShrinkId>
 8006ac4:	68ba      	ldr	r2, [r7, #8]
 8006ac6:	6879      	ldr	r1, [r7, #4]
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	9300      	str	r3, [sp, #0]
 8006acc:	460b      	mov	r3, r1
 8006ace:	4601      	mov	r1, r0
 8006ad0:	205a      	movs	r0, #90	; 0x5a
 8006ad2:	f004 f8ed 	bl	800acb0 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	e069      	b.n	8006bae <xQueueGenericSend+0x24e>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d106      	bne.n	8006aee <xQueueGenericSend+0x18e>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ae0:	f107 0314 	add.w	r3, r7, #20
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f001 fd4f 	bl	8008588 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006aea:	2301      	movs	r3, #1
 8006aec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006aee:	f002 fe31 	bl	8009754 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006af2:	f001 fa89 	bl	8008008 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006af6:	f002 fdf9 	bl	80096ec <vPortEnterCritical>
 8006afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006afc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b00:	b25b      	sxtb	r3, r3
 8006b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b06:	d103      	bne.n	8006b10 <xQueueGenericSend+0x1b0>
 8006b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b16:	b25b      	sxtb	r3, r3
 8006b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b1c:	d103      	bne.n	8006b26 <xQueueGenericSend+0x1c6>
 8006b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b20:	2200      	movs	r2, #0
 8006b22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b26:	f002 fe15 	bl	8009754 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b2a:	1d3a      	adds	r2, r7, #4
 8006b2c:	f107 0314 	add.w	r3, r7, #20
 8006b30:	4611      	mov	r1, r2
 8006b32:	4618      	mov	r0, r3
 8006b34:	f001 fd3e 	bl	80085b4 <xTaskCheckForTimeOut>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d124      	bne.n	8006b88 <xQueueGenericSend+0x228>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006b3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b40:	f000 fdcd 	bl	80076de <prvIsQueueFull>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d018      	beq.n	8006b7c <xQueueGenericSend+0x21c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4c:	3310      	adds	r3, #16
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	4611      	mov	r1, r2
 8006b52:	4618      	mov	r0, r3
 8006b54:	f001 fc5a 	bl	800840c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006b58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b5a:	f000 fd58 	bl	800760e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006b5e:	f001 fa61 	bl	8008024 <xTaskResumeAll>
 8006b62:	4603      	mov	r3, r0
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	f47f af62 	bne.w	8006a2e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8006b6a:	4b13      	ldr	r3, [pc, #76]	; (8006bb8 <xQueueGenericSend+0x258>)
 8006b6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b70:	601a      	str	r2, [r3, #0]
 8006b72:	f3bf 8f4f 	dsb	sy
 8006b76:	f3bf 8f6f 	isb	sy
 8006b7a:	e758      	b.n	8006a2e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006b7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b7e:	f000 fd46 	bl	800760e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b82:	f001 fa4f 	bl	8008024 <xTaskResumeAll>
 8006b86:	e752      	b.n	8006a2e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006b88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b8a:	f000 fd40 	bl	800760e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b8e:	f001 fa49 	bl	8008024 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 8006b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b94:	4618      	mov	r0, r3
 8006b96:	f004 fda1 	bl	800b6dc <SEGGER_SYSVIEW_ShrinkId>
 8006b9a:	68ba      	ldr	r2, [r7, #8]
 8006b9c:	6879      	ldr	r1, [r7, #4]
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	9300      	str	r3, [sp, #0]
 8006ba2:	460b      	mov	r3, r1
 8006ba4:	4601      	mov	r1, r0
 8006ba6:	205a      	movs	r0, #90	; 0x5a
 8006ba8:	f004 f882 	bl	800acb0 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 8006bac:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3738      	adds	r7, #56	; 0x38
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	e000ed04 	.word	0xe000ed04

08006bbc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b08e      	sub	sp, #56	; 0x38
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	60b9      	str	r1, [r7, #8]
 8006bc6:	607a      	str	r2, [r7, #4]
 8006bc8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d10c      	bne.n	8006bee <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8006bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd8:	b672      	cpsid	i
 8006bda:	f383 8811 	msr	BASEPRI, r3
 8006bde:	f3bf 8f6f 	isb	sy
 8006be2:	f3bf 8f4f 	dsb	sy
 8006be6:	b662      	cpsie	i
 8006be8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006bea:	bf00      	nop
 8006bec:	e7fe      	b.n	8006bec <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d103      	bne.n	8006bfc <xQueueGenericSendFromISR+0x40>
 8006bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d101      	bne.n	8006c00 <xQueueGenericSendFromISR+0x44>
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	e000      	b.n	8006c02 <xQueueGenericSendFromISR+0x46>
 8006c00:	2300      	movs	r3, #0
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d10c      	bne.n	8006c20 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8006c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0a:	b672      	cpsid	i
 8006c0c:	f383 8811 	msr	BASEPRI, r3
 8006c10:	f3bf 8f6f 	isb	sy
 8006c14:	f3bf 8f4f 	dsb	sy
 8006c18:	b662      	cpsie	i
 8006c1a:	623b      	str	r3, [r7, #32]
}
 8006c1c:	bf00      	nop
 8006c1e:	e7fe      	b.n	8006c1e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	2b02      	cmp	r3, #2
 8006c24:	d103      	bne.n	8006c2e <xQueueGenericSendFromISR+0x72>
 8006c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d101      	bne.n	8006c32 <xQueueGenericSendFromISR+0x76>
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e000      	b.n	8006c34 <xQueueGenericSendFromISR+0x78>
 8006c32:	2300      	movs	r3, #0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d10c      	bne.n	8006c52 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8006c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c3c:	b672      	cpsid	i
 8006c3e:	f383 8811 	msr	BASEPRI, r3
 8006c42:	f3bf 8f6f 	isb	sy
 8006c46:	f3bf 8f4f 	dsb	sy
 8006c4a:	b662      	cpsie	i
 8006c4c:	61fb      	str	r3, [r7, #28]
}
 8006c4e:	bf00      	nop
 8006c50:	e7fe      	b.n	8006c50 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c52:	f002 fe3b 	bl	80098cc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006c56:	f3ef 8211 	mrs	r2, BASEPRI
 8006c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c5e:	b672      	cpsid	i
 8006c60:	f383 8811 	msr	BASEPRI, r3
 8006c64:	f3bf 8f6f 	isb	sy
 8006c68:	f3bf 8f4f 	dsb	sy
 8006c6c:	b662      	cpsie	i
 8006c6e:	61ba      	str	r2, [r7, #24]
 8006c70:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006c72:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c74:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d302      	bcc.n	8006c88 <xQueueGenericSendFromISR+0xcc>
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	2b02      	cmp	r3, #2
 8006c86:	d136      	bne.n	8006cf6 <xQueueGenericSendFromISR+0x13a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8006c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c94:	4618      	mov	r0, r3
 8006c96:	f004 fd21 	bl	800b6dc <SEGGER_SYSVIEW_ShrinkId>
 8006c9a:	4601      	mov	r1, r0
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	2060      	movs	r0, #96	; 0x60
 8006ca2:	f003 ff35 	bl	800ab10 <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006ca6:	683a      	ldr	r2, [r7, #0]
 8006ca8:	68b9      	ldr	r1, [r7, #8]
 8006caa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cac:	f000 fc1f 	bl	80074ee <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006cb0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cb8:	d112      	bne.n	8006ce0 <xQueueGenericSendFromISR+0x124>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d016      	beq.n	8006cf0 <xQueueGenericSendFromISR+0x134>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc4:	3324      	adds	r3, #36	; 0x24
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f001 fbf6 	bl	80084b8 <xTaskRemoveFromEventList>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d00e      	beq.n	8006cf0 <xQueueGenericSendFromISR+0x134>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d00b      	beq.n	8006cf0 <xQueueGenericSendFromISR+0x134>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	601a      	str	r2, [r3, #0]
 8006cde:	e007      	b.n	8006cf0 <xQueueGenericSendFromISR+0x134>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006ce0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	b25a      	sxtb	r2, r3
 8006cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006cf4:	e00b      	b.n	8006d0e <xQueueGenericSendFromISR+0x152>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8006cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f004 fcef 	bl	800b6dc <SEGGER_SYSVIEW_ShrinkId>
 8006cfe:	4601      	mov	r1, r0
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	461a      	mov	r2, r3
 8006d04:	2060      	movs	r0, #96	; 0x60
 8006d06:	f003 ff03 	bl	800ab10 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	637b      	str	r3, [r7, #52]	; 0x34
 8006d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d10:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006d18:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3738      	adds	r7, #56	; 0x38
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b08e      	sub	sp, #56	; 0x38
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d10c      	bne.n	8006d52 <xQueueGiveFromISR+0x2e>
	__asm volatile
 8006d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d3c:	b672      	cpsid	i
 8006d3e:	f383 8811 	msr	BASEPRI, r3
 8006d42:	f3bf 8f6f 	isb	sy
 8006d46:	f3bf 8f4f 	dsb	sy
 8006d4a:	b662      	cpsie	i
 8006d4c:	623b      	str	r3, [r7, #32]
}
 8006d4e:	bf00      	nop
 8006d50:	e7fe      	b.n	8006d50 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d00c      	beq.n	8006d74 <xQueueGiveFromISR+0x50>
	__asm volatile
 8006d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d5e:	b672      	cpsid	i
 8006d60:	f383 8811 	msr	BASEPRI, r3
 8006d64:	f3bf 8f6f 	isb	sy
 8006d68:	f3bf 8f4f 	dsb	sy
 8006d6c:	b662      	cpsie	i
 8006d6e:	61fb      	str	r3, [r7, #28]
}
 8006d70:	bf00      	nop
 8006d72:	e7fe      	b.n	8006d72 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d103      	bne.n	8006d84 <xQueueGiveFromISR+0x60>
 8006d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d101      	bne.n	8006d88 <xQueueGiveFromISR+0x64>
 8006d84:	2301      	movs	r3, #1
 8006d86:	e000      	b.n	8006d8a <xQueueGiveFromISR+0x66>
 8006d88:	2300      	movs	r3, #0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d10c      	bne.n	8006da8 <xQueueGiveFromISR+0x84>
	__asm volatile
 8006d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d92:	b672      	cpsid	i
 8006d94:	f383 8811 	msr	BASEPRI, r3
 8006d98:	f3bf 8f6f 	isb	sy
 8006d9c:	f3bf 8f4f 	dsb	sy
 8006da0:	b662      	cpsie	i
 8006da2:	61bb      	str	r3, [r7, #24]
}
 8006da4:	bf00      	nop
 8006da6:	e7fe      	b.n	8006da6 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006da8:	f002 fd90 	bl	80098cc <vPortValidateInterruptPriority>
	__asm volatile
 8006dac:	f3ef 8211 	mrs	r2, BASEPRI
 8006db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db4:	b672      	cpsid	i
 8006db6:	f383 8811 	msr	BASEPRI, r3
 8006dba:	f3bf 8f6f 	isb	sy
 8006dbe:	f3bf 8f4f 	dsb	sy
 8006dc2:	b662      	cpsie	i
 8006dc4:	617a      	str	r2, [r7, #20]
 8006dc6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006dc8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006dca:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dd0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d235      	bcs.n	8006e48 <xQueueGiveFromISR+0x124>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006de2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8006de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de8:	4618      	mov	r0, r3
 8006dea:	f004 fc77 	bl	800b6dc <SEGGER_SYSVIEW_ShrinkId>
 8006dee:	4601      	mov	r1, r0
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	461a      	mov	r2, r3
 8006df4:	2060      	movs	r0, #96	; 0x60
 8006df6:	f003 fe8b 	bl	800ab10 <SEGGER_SYSVIEW_RecordU32x2>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dfc:	1c5a      	adds	r2, r3, #1
 8006dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e00:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006e02:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e0a:	d112      	bne.n	8006e32 <xQueueGiveFromISR+0x10e>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d016      	beq.n	8006e42 <xQueueGiveFromISR+0x11e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e16:	3324      	adds	r3, #36	; 0x24
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f001 fb4d 	bl	80084b8 <xTaskRemoveFromEventList>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d00e      	beq.n	8006e42 <xQueueGiveFromISR+0x11e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d00b      	beq.n	8006e42 <xQueueGiveFromISR+0x11e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	601a      	str	r2, [r3, #0]
 8006e30:	e007      	b.n	8006e42 <xQueueGiveFromISR+0x11e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006e32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e36:	3301      	adds	r3, #1
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	b25a      	sxtb	r2, r3
 8006e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006e42:	2301      	movs	r3, #1
 8006e44:	637b      	str	r3, [r7, #52]	; 0x34
 8006e46:	e00b      	b.n	8006e60 <xQueueGiveFromISR+0x13c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8006e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f004 fc46 	bl	800b6dc <SEGGER_SYSVIEW_ShrinkId>
 8006e50:	4601      	mov	r1, r0
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	461a      	mov	r2, r3
 8006e56:	2060      	movs	r0, #96	; 0x60
 8006e58:	f003 fe5a 	bl	800ab10 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	637b      	str	r3, [r7, #52]	; 0x34
 8006e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e62:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f383 8811 	msr	BASEPRI, r3
}
 8006e6a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3738      	adds	r7, #56	; 0x38
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
	...

08006e78 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006e78:	b590      	push	{r4, r7, lr}
 8006e7a:	b08f      	sub	sp, #60	; 0x3c
 8006e7c:	af02      	add	r7, sp, #8
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006e84:	2300      	movs	r3, #0
 8006e86:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d10c      	bne.n	8006eac <xQueueReceive+0x34>
	__asm volatile
 8006e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e96:	b672      	cpsid	i
 8006e98:	f383 8811 	msr	BASEPRI, r3
 8006e9c:	f3bf 8f6f 	isb	sy
 8006ea0:	f3bf 8f4f 	dsb	sy
 8006ea4:	b662      	cpsie	i
 8006ea6:	623b      	str	r3, [r7, #32]
}
 8006ea8:	bf00      	nop
 8006eaa:	e7fe      	b.n	8006eaa <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d103      	bne.n	8006eba <xQueueReceive+0x42>
 8006eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d101      	bne.n	8006ebe <xQueueReceive+0x46>
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e000      	b.n	8006ec0 <xQueueReceive+0x48>
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d10c      	bne.n	8006ede <xQueueReceive+0x66>
	__asm volatile
 8006ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec8:	b672      	cpsid	i
 8006eca:	f383 8811 	msr	BASEPRI, r3
 8006ece:	f3bf 8f6f 	isb	sy
 8006ed2:	f3bf 8f4f 	dsb	sy
 8006ed6:	b662      	cpsie	i
 8006ed8:	61fb      	str	r3, [r7, #28]
}
 8006eda:	bf00      	nop
 8006edc:	e7fe      	b.n	8006edc <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ede:	f001 fcb7 	bl	8008850 <xTaskGetSchedulerState>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d102      	bne.n	8006eee <xQueueReceive+0x76>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d101      	bne.n	8006ef2 <xQueueReceive+0x7a>
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e000      	b.n	8006ef4 <xQueueReceive+0x7c>
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d10c      	bne.n	8006f12 <xQueueReceive+0x9a>
	__asm volatile
 8006ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006efc:	b672      	cpsid	i
 8006efe:	f383 8811 	msr	BASEPRI, r3
 8006f02:	f3bf 8f6f 	isb	sy
 8006f06:	f3bf 8f4f 	dsb	sy
 8006f0a:	b662      	cpsie	i
 8006f0c:	61bb      	str	r3, [r7, #24]
}
 8006f0e:	bf00      	nop
 8006f10:	e7fe      	b.n	8006f10 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f12:	f002 fbeb 	bl	80096ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f1a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d02f      	beq.n	8006f82 <xQueueReceive+0x10a>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006f22:	68b9      	ldr	r1, [r7, #8]
 8006f24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f26:	f000 fb4c 	bl	80075c2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 8006f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f004 fbd5 	bl	800b6dc <SEGGER_SYSVIEW_ShrinkId>
 8006f32:	4604      	mov	r4, r0
 8006f34:	2000      	movs	r0, #0
 8006f36:	f004 fbd1 	bl	800b6dc <SEGGER_SYSVIEW_ShrinkId>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2101      	movs	r1, #1
 8006f40:	9100      	str	r1, [sp, #0]
 8006f42:	4621      	mov	r1, r4
 8006f44:	205c      	movs	r0, #92	; 0x5c
 8006f46:	f003 feb3 	bl	800acb0 <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4c:	1e5a      	subs	r2, r3, #1
 8006f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f50:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f54:	691b      	ldr	r3, [r3, #16]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d00f      	beq.n	8006f7a <xQueueReceive+0x102>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f5c:	3310      	adds	r3, #16
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f001 faaa 	bl	80084b8 <xTaskRemoveFromEventList>
 8006f64:	4603      	mov	r3, r0
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d007      	beq.n	8006f7a <xQueueReceive+0x102>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006f6a:	4b4d      	ldr	r3, [pc, #308]	; (80070a0 <xQueueReceive+0x228>)
 8006f6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f70:	601a      	str	r2, [r3, #0]
 8006f72:	f3bf 8f4f 	dsb	sy
 8006f76:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006f7a:	f002 fbeb 	bl	8009754 <vPortExitCritical>
				return pdPASS;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e08a      	b.n	8007098 <xQueueReceive+0x220>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d113      	bne.n	8006fb0 <xQueueReceive+0x138>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006f88:	f002 fbe4 	bl	8009754 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8006f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f004 fba4 	bl	800b6dc <SEGGER_SYSVIEW_ShrinkId>
 8006f94:	4604      	mov	r4, r0
 8006f96:	2000      	movs	r0, #0
 8006f98:	f004 fba0 	bl	800b6dc <SEGGER_SYSVIEW_ShrinkId>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2101      	movs	r1, #1
 8006fa2:	9100      	str	r1, [sp, #0]
 8006fa4:	4621      	mov	r1, r4
 8006fa6:	205c      	movs	r0, #92	; 0x5c
 8006fa8:	f003 fe82 	bl	800acb0 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8006fac:	2300      	movs	r3, #0
 8006fae:	e073      	b.n	8007098 <xQueueReceive+0x220>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d106      	bne.n	8006fc4 <xQueueReceive+0x14c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006fb6:	f107 0310 	add.w	r3, r7, #16
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f001 fae4 	bl	8008588 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006fc4:	f002 fbc6 	bl	8009754 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006fc8:	f001 f81e 	bl	8008008 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006fcc:	f002 fb8e 	bl	80096ec <vPortEnterCritical>
 8006fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006fd6:	b25b      	sxtb	r3, r3
 8006fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fdc:	d103      	bne.n	8006fe6 <xQueueReceive+0x16e>
 8006fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fec:	b25b      	sxtb	r3, r3
 8006fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ff2:	d103      	bne.n	8006ffc <xQueueReceive+0x184>
 8006ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ffc:	f002 fbaa 	bl	8009754 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007000:	1d3a      	adds	r2, r7, #4
 8007002:	f107 0310 	add.w	r3, r7, #16
 8007006:	4611      	mov	r1, r2
 8007008:	4618      	mov	r0, r3
 800700a:	f001 fad3 	bl	80085b4 <xTaskCheckForTimeOut>
 800700e:	4603      	mov	r3, r0
 8007010:	2b00      	cmp	r3, #0
 8007012:	d124      	bne.n	800705e <xQueueReceive+0x1e6>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007014:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007016:	f000 fb4c 	bl	80076b2 <prvIsQueueEmpty>
 800701a:	4603      	mov	r3, r0
 800701c:	2b00      	cmp	r3, #0
 800701e:	d018      	beq.n	8007052 <xQueueReceive+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007022:	3324      	adds	r3, #36	; 0x24
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	4611      	mov	r1, r2
 8007028:	4618      	mov	r0, r3
 800702a:	f001 f9ef 	bl	800840c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800702e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007030:	f000 faed 	bl	800760e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007034:	f000 fff6 	bl	8008024 <xTaskResumeAll>
 8007038:	4603      	mov	r3, r0
 800703a:	2b00      	cmp	r3, #0
 800703c:	f47f af69 	bne.w	8006f12 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8007040:	4b17      	ldr	r3, [pc, #92]	; (80070a0 <xQueueReceive+0x228>)
 8007042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007046:	601a      	str	r2, [r3, #0]
 8007048:	f3bf 8f4f 	dsb	sy
 800704c:	f3bf 8f6f 	isb	sy
 8007050:	e75f      	b.n	8006f12 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007052:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007054:	f000 fadb 	bl	800760e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007058:	f000 ffe4 	bl	8008024 <xTaskResumeAll>
 800705c:	e759      	b.n	8006f12 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800705e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007060:	f000 fad5 	bl	800760e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007064:	f000 ffde 	bl	8008024 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007068:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800706a:	f000 fb22 	bl	80076b2 <prvIsQueueEmpty>
 800706e:	4603      	mov	r3, r0
 8007070:	2b00      	cmp	r3, #0
 8007072:	f43f af4e 	beq.w	8006f12 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8007076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007078:	4618      	mov	r0, r3
 800707a:	f004 fb2f 	bl	800b6dc <SEGGER_SYSVIEW_ShrinkId>
 800707e:	4604      	mov	r4, r0
 8007080:	2000      	movs	r0, #0
 8007082:	f004 fb2b 	bl	800b6dc <SEGGER_SYSVIEW_ShrinkId>
 8007086:	4602      	mov	r2, r0
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2101      	movs	r1, #1
 800708c:	9100      	str	r1, [sp, #0]
 800708e:	4621      	mov	r1, r4
 8007090:	205c      	movs	r0, #92	; 0x5c
 8007092:	f003 fe0d 	bl	800acb0 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8007096:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007098:	4618      	mov	r0, r3
 800709a:	3734      	adds	r7, #52	; 0x34
 800709c:	46bd      	mov	sp, r7
 800709e:	bd90      	pop	{r4, r7, pc}
 80070a0:	e000ed04 	.word	0xe000ed04

080070a4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80070a4:	b590      	push	{r4, r7, lr}
 80070a6:	b091      	sub	sp, #68	; 0x44
 80070a8:	af02      	add	r7, sp, #8
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80070ae:	2300      	movs	r3, #0
 80070b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80070b6:	2300      	movs	r3, #0
 80070b8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80070ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d10c      	bne.n	80070da <xQueueSemaphoreTake+0x36>
	__asm volatile
 80070c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c4:	b672      	cpsid	i
 80070c6:	f383 8811 	msr	BASEPRI, r3
 80070ca:	f3bf 8f6f 	isb	sy
 80070ce:	f3bf 8f4f 	dsb	sy
 80070d2:	b662      	cpsie	i
 80070d4:	623b      	str	r3, [r7, #32]
}
 80070d6:	bf00      	nop
 80070d8:	e7fe      	b.n	80070d8 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80070da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00c      	beq.n	80070fc <xQueueSemaphoreTake+0x58>
	__asm volatile
 80070e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e6:	b672      	cpsid	i
 80070e8:	f383 8811 	msr	BASEPRI, r3
 80070ec:	f3bf 8f6f 	isb	sy
 80070f0:	f3bf 8f4f 	dsb	sy
 80070f4:	b662      	cpsie	i
 80070f6:	61fb      	str	r3, [r7, #28]
}
 80070f8:	bf00      	nop
 80070fa:	e7fe      	b.n	80070fa <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80070fc:	f001 fba8 	bl	8008850 <xTaskGetSchedulerState>
 8007100:	4603      	mov	r3, r0
 8007102:	2b00      	cmp	r3, #0
 8007104:	d102      	bne.n	800710c <xQueueSemaphoreTake+0x68>
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d101      	bne.n	8007110 <xQueueSemaphoreTake+0x6c>
 800710c:	2301      	movs	r3, #1
 800710e:	e000      	b.n	8007112 <xQueueSemaphoreTake+0x6e>
 8007110:	2300      	movs	r3, #0
 8007112:	2b00      	cmp	r3, #0
 8007114:	d10c      	bne.n	8007130 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8007116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711a:	b672      	cpsid	i
 800711c:	f383 8811 	msr	BASEPRI, r3
 8007120:	f3bf 8f6f 	isb	sy
 8007124:	f3bf 8f4f 	dsb	sy
 8007128:	b662      	cpsie	i
 800712a:	61bb      	str	r3, [r7, #24]
}
 800712c:	bf00      	nop
 800712e:	e7fe      	b.n	800712e <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007130:	f002 fadc 	bl	80096ec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007138:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800713a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800713c:	2b00      	cmp	r3, #0
 800713e:	d034      	beq.n	80071aa <xQueueSemaphoreTake+0x106>
			{
				traceQUEUE_RECEIVE( pxQueue );
 8007140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007142:	4618      	mov	r0, r3
 8007144:	f004 faca 	bl	800b6dc <SEGGER_SYSVIEW_ShrinkId>
 8007148:	4604      	mov	r4, r0
 800714a:	2000      	movs	r0, #0
 800714c:	f004 fac6 	bl	800b6dc <SEGGER_SYSVIEW_ShrinkId>
 8007150:	4602      	mov	r2, r0
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	2101      	movs	r1, #1
 8007156:	9100      	str	r1, [sp, #0]
 8007158:	4621      	mov	r1, r4
 800715a:	205c      	movs	r0, #92	; 0x5c
 800715c:	f003 fda8 	bl	800acb0 <SEGGER_SYSVIEW_RecordU32x4>

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007162:	1e5a      	subs	r2, r3, #1
 8007164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007166:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d104      	bne.n	800717a <xQueueSemaphoreTake+0xd6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007170:	f001 fd48 	bl	8008c04 <pvTaskIncrementMutexHeldCount>
 8007174:	4602      	mov	r2, r0
 8007176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007178:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800717a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800717c:	691b      	ldr	r3, [r3, #16]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d00f      	beq.n	80071a2 <xQueueSemaphoreTake+0xfe>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007184:	3310      	adds	r3, #16
 8007186:	4618      	mov	r0, r3
 8007188:	f001 f996 	bl	80084b8 <xTaskRemoveFromEventList>
 800718c:	4603      	mov	r3, r0
 800718e:	2b00      	cmp	r3, #0
 8007190:	d007      	beq.n	80071a2 <xQueueSemaphoreTake+0xfe>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007192:	4b65      	ldr	r3, [pc, #404]	; (8007328 <xQueueSemaphoreTake+0x284>)
 8007194:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007198:	601a      	str	r2, [r3, #0]
 800719a:	f3bf 8f4f 	dsb	sy
 800719e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80071a2:	f002 fad7 	bl	8009754 <vPortExitCritical>
				return pdPASS;
 80071a6:	2301      	movs	r3, #1
 80071a8:	e0b9      	b.n	800731e <xQueueSemaphoreTake+0x27a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d123      	bne.n	80071f8 <xQueueSemaphoreTake+0x154>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80071b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d00c      	beq.n	80071d0 <xQueueSemaphoreTake+0x12c>
	__asm volatile
 80071b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ba:	b672      	cpsid	i
 80071bc:	f383 8811 	msr	BASEPRI, r3
 80071c0:	f3bf 8f6f 	isb	sy
 80071c4:	f3bf 8f4f 	dsb	sy
 80071c8:	b662      	cpsie	i
 80071ca:	617b      	str	r3, [r7, #20]
}
 80071cc:	bf00      	nop
 80071ce:	e7fe      	b.n	80071ce <xQueueSemaphoreTake+0x12a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80071d0:	f002 fac0 	bl	8009754 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 80071d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d6:	4618      	mov	r0, r3
 80071d8:	f004 fa80 	bl	800b6dc <SEGGER_SYSVIEW_ShrinkId>
 80071dc:	4604      	mov	r4, r0
 80071de:	2000      	movs	r0, #0
 80071e0:	f004 fa7c 	bl	800b6dc <SEGGER_SYSVIEW_ShrinkId>
 80071e4:	4602      	mov	r2, r0
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	2101      	movs	r1, #1
 80071ea:	9100      	str	r1, [sp, #0]
 80071ec:	4621      	mov	r1, r4
 80071ee:	205c      	movs	r0, #92	; 0x5c
 80071f0:	f003 fd5e 	bl	800acb0 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 80071f4:	2300      	movs	r3, #0
 80071f6:	e092      	b.n	800731e <xQueueSemaphoreTake+0x27a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80071f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d106      	bne.n	800720c <xQueueSemaphoreTake+0x168>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80071fe:	f107 030c 	add.w	r3, r7, #12
 8007202:	4618      	mov	r0, r3
 8007204:	f001 f9c0 	bl	8008588 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007208:	2301      	movs	r3, #1
 800720a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800720c:	f002 faa2 	bl	8009754 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007210:	f000 fefa 	bl	8008008 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007214:	f002 fa6a 	bl	80096ec <vPortEnterCritical>
 8007218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800721a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800721e:	b25b      	sxtb	r3, r3
 8007220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007224:	d103      	bne.n	800722e <xQueueSemaphoreTake+0x18a>
 8007226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007228:	2200      	movs	r2, #0
 800722a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800722e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007230:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007234:	b25b      	sxtb	r3, r3
 8007236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800723a:	d103      	bne.n	8007244 <xQueueSemaphoreTake+0x1a0>
 800723c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800723e:	2200      	movs	r2, #0
 8007240:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007244:	f002 fa86 	bl	8009754 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007248:	463a      	mov	r2, r7
 800724a:	f107 030c 	add.w	r3, r7, #12
 800724e:	4611      	mov	r1, r2
 8007250:	4618      	mov	r0, r3
 8007252:	f001 f9af 	bl	80085b4 <xTaskCheckForTimeOut>
 8007256:	4603      	mov	r3, r0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d132      	bne.n	80072c2 <xQueueSemaphoreTake+0x21e>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800725c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800725e:	f000 fa28 	bl	80076b2 <prvIsQueueEmpty>
 8007262:	4603      	mov	r3, r0
 8007264:	2b00      	cmp	r3, #0
 8007266:	d026      	beq.n	80072b6 <xQueueSemaphoreTake+0x212>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d109      	bne.n	8007284 <xQueueSemaphoreTake+0x1e0>
					{
						taskENTER_CRITICAL();
 8007270:	f002 fa3c 	bl	80096ec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	4618      	mov	r0, r3
 800727a:	f001 fb07 	bl	800888c <xTaskPriorityInherit>
 800727e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007280:	f002 fa68 	bl	8009754 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007286:	3324      	adds	r3, #36	; 0x24
 8007288:	683a      	ldr	r2, [r7, #0]
 800728a:	4611      	mov	r1, r2
 800728c:	4618      	mov	r0, r3
 800728e:	f001 f8bd 	bl	800840c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007292:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007294:	f000 f9bb 	bl	800760e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007298:	f000 fec4 	bl	8008024 <xTaskResumeAll>
 800729c:	4603      	mov	r3, r0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	f47f af46 	bne.w	8007130 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 80072a4:	4b20      	ldr	r3, [pc, #128]	; (8007328 <xQueueSemaphoreTake+0x284>)
 80072a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072aa:	601a      	str	r2, [r3, #0]
 80072ac:	f3bf 8f4f 	dsb	sy
 80072b0:	f3bf 8f6f 	isb	sy
 80072b4:	e73c      	b.n	8007130 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80072b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072b8:	f000 f9a9 	bl	800760e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80072bc:	f000 feb2 	bl	8008024 <xTaskResumeAll>
 80072c0:	e736      	b.n	8007130 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80072c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072c4:	f000 f9a3 	bl	800760e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80072c8:	f000 feac 	bl	8008024 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80072cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072ce:	f000 f9f0 	bl	80076b2 <prvIsQueueEmpty>
 80072d2:	4603      	mov	r3, r0
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	f43f af2b 	beq.w	8007130 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80072da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d00d      	beq.n	80072fc <xQueueSemaphoreTake+0x258>
					{
						taskENTER_CRITICAL();
 80072e0:	f002 fa04 	bl	80096ec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80072e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072e6:	f000 f8ea 	bl	80074be <prvGetDisinheritPriorityAfterTimeout>
 80072ea:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80072ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80072f2:	4618      	mov	r0, r3
 80072f4:	f001 fbde 	bl	8008ab4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80072f8:	f002 fa2c 	bl	8009754 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
 80072fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072fe:	4618      	mov	r0, r3
 8007300:	f004 f9ec 	bl	800b6dc <SEGGER_SYSVIEW_ShrinkId>
 8007304:	4604      	mov	r4, r0
 8007306:	2000      	movs	r0, #0
 8007308:	f004 f9e8 	bl	800b6dc <SEGGER_SYSVIEW_ShrinkId>
 800730c:	4602      	mov	r2, r0
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	2101      	movs	r1, #1
 8007312:	9100      	str	r1, [sp, #0]
 8007314:	4621      	mov	r1, r4
 8007316:	205c      	movs	r0, #92	; 0x5c
 8007318:	f003 fcca 	bl	800acb0 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 800731c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800731e:	4618      	mov	r0, r3
 8007320:	373c      	adds	r7, #60	; 0x3c
 8007322:	46bd      	mov	sp, r7
 8007324:	bd90      	pop	{r4, r7, pc}
 8007326:	bf00      	nop
 8007328:	e000ed04 	.word	0xe000ed04

0800732c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800732c:	b590      	push	{r4, r7, lr}
 800732e:	b08f      	sub	sp, #60	; 0x3c
 8007330:	af00      	add	r7, sp, #0
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	60b9      	str	r1, [r7, #8]
 8007336:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800733c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800733e:	2b00      	cmp	r3, #0
 8007340:	d10c      	bne.n	800735c <xQueueReceiveFromISR+0x30>
	__asm volatile
 8007342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007346:	b672      	cpsid	i
 8007348:	f383 8811 	msr	BASEPRI, r3
 800734c:	f3bf 8f6f 	isb	sy
 8007350:	f3bf 8f4f 	dsb	sy
 8007354:	b662      	cpsie	i
 8007356:	623b      	str	r3, [r7, #32]
}
 8007358:	bf00      	nop
 800735a:	e7fe      	b.n	800735a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d103      	bne.n	800736a <xQueueReceiveFromISR+0x3e>
 8007362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007366:	2b00      	cmp	r3, #0
 8007368:	d101      	bne.n	800736e <xQueueReceiveFromISR+0x42>
 800736a:	2301      	movs	r3, #1
 800736c:	e000      	b.n	8007370 <xQueueReceiveFromISR+0x44>
 800736e:	2300      	movs	r3, #0
 8007370:	2b00      	cmp	r3, #0
 8007372:	d10c      	bne.n	800738e <xQueueReceiveFromISR+0x62>
	__asm volatile
 8007374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007378:	b672      	cpsid	i
 800737a:	f383 8811 	msr	BASEPRI, r3
 800737e:	f3bf 8f6f 	isb	sy
 8007382:	f3bf 8f4f 	dsb	sy
 8007386:	b662      	cpsie	i
 8007388:	61fb      	str	r3, [r7, #28]
}
 800738a:	bf00      	nop
 800738c:	e7fe      	b.n	800738c <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800738e:	f002 fa9d 	bl	80098cc <vPortValidateInterruptPriority>
	__asm volatile
 8007392:	f3ef 8211 	mrs	r2, BASEPRI
 8007396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800739a:	b672      	cpsid	i
 800739c:	f383 8811 	msr	BASEPRI, r3
 80073a0:	f3bf 8f6f 	isb	sy
 80073a4:	f3bf 8f4f 	dsb	sy
 80073a8:	b662      	cpsie	i
 80073aa:	61ba      	str	r2, [r7, #24]
 80073ac:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80073ae:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80073b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80073b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80073b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d03e      	beq.n	800743c <xQueueReceiveFromISR+0x110>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80073be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80073c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 80073c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ca:	4618      	mov	r0, r3
 80073cc:	f004 f986 	bl	800b6dc <SEGGER_SYSVIEW_ShrinkId>
 80073d0:	4604      	mov	r4, r0
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	4618      	mov	r0, r3
 80073d6:	f004 f981 	bl	800b6dc <SEGGER_SYSVIEW_ShrinkId>
 80073da:	4602      	mov	r2, r0
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	4621      	mov	r1, r4
 80073e0:	2062      	movs	r0, #98	; 0x62
 80073e2:	f003 fbef 	bl	800abc4 <SEGGER_SYSVIEW_RecordU32x3>

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80073e6:	68b9      	ldr	r1, [r7, #8]
 80073e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073ea:	f000 f8ea 	bl	80075c2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80073ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f0:	1e5a      	subs	r2, r3, #1
 80073f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f4:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80073f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80073fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073fe:	d112      	bne.n	8007426 <xQueueReceiveFromISR+0xfa>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007402:	691b      	ldr	r3, [r3, #16]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d016      	beq.n	8007436 <xQueueReceiveFromISR+0x10a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740a:	3310      	adds	r3, #16
 800740c:	4618      	mov	r0, r3
 800740e:	f001 f853 	bl	80084b8 <xTaskRemoveFromEventList>
 8007412:	4603      	mov	r3, r0
 8007414:	2b00      	cmp	r3, #0
 8007416:	d00e      	beq.n	8007436 <xQueueReceiveFromISR+0x10a>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d00b      	beq.n	8007436 <xQueueReceiveFromISR+0x10a>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2201      	movs	r2, #1
 8007422:	601a      	str	r2, [r3, #0]
 8007424:	e007      	b.n	8007436 <xQueueReceiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007426:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800742a:	3301      	adds	r3, #1
 800742c:	b2db      	uxtb	r3, r3
 800742e:	b25a      	sxtb	r2, r3
 8007430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007432:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007436:	2301      	movs	r3, #1
 8007438:	637b      	str	r3, [r7, #52]	; 0x34
 800743a:	e010      	b.n	800745e <xQueueReceiveFromISR+0x132>
		}
		else
		{
			xReturn = pdFAIL;
 800743c:	2300      	movs	r3, #0
 800743e:	637b      	str	r3, [r7, #52]	; 0x34
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 8007440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007442:	4618      	mov	r0, r3
 8007444:	f004 f94a 	bl	800b6dc <SEGGER_SYSVIEW_ShrinkId>
 8007448:	4604      	mov	r4, r0
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	4618      	mov	r0, r3
 800744e:	f004 f945 	bl	800b6dc <SEGGER_SYSVIEW_ShrinkId>
 8007452:	4602      	mov	r2, r0
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	4621      	mov	r1, r4
 8007458:	2062      	movs	r0, #98	; 0x62
 800745a:	f003 fbb3 	bl	800abc4 <SEGGER_SYSVIEW_RecordU32x3>
 800745e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007460:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	f383 8811 	msr	BASEPRI, r3
}
 8007468:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800746a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800746c:	4618      	mov	r0, r3
 800746e:	373c      	adds	r7, #60	; 0x3c
 8007470:	46bd      	mov	sp, r7
 8007472:	bd90      	pop	{r4, r7, pc}

08007474 <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b086      	sub	sp, #24
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d10c      	bne.n	80074a0 <uxQueueSpacesAvailable+0x2c>
	__asm volatile
 8007486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800748a:	b672      	cpsid	i
 800748c:	f383 8811 	msr	BASEPRI, r3
 8007490:	f3bf 8f6f 	isb	sy
 8007494:	f3bf 8f4f 	dsb	sy
 8007498:	b662      	cpsie	i
 800749a:	60fb      	str	r3, [r7, #12]
}
 800749c:	bf00      	nop
 800749e:	e7fe      	b.n	800749e <uxQueueSpacesAvailable+0x2a>

	taskENTER_CRITICAL();
 80074a0:	f002 f924 	bl	80096ec <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ac:	1ad3      	subs	r3, r2, r3
 80074ae:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80074b0:	f002 f950 	bl	8009754 <vPortExitCritical>

	return uxReturn;
 80074b4:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80074b6:	4618      	mov	r0, r3
 80074b8:	3718      	adds	r7, #24
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}

080074be <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80074be:	b480      	push	{r7}
 80074c0:	b085      	sub	sp, #20
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d006      	beq.n	80074dc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f1c3 0307 	rsb	r3, r3, #7
 80074d8:	60fb      	str	r3, [r7, #12]
 80074da:	e001      	b.n	80074e0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80074dc:	2300      	movs	r3, #0
 80074de:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80074e0:	68fb      	ldr	r3, [r7, #12]
	}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3714      	adds	r7, #20
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr

080074ee <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80074ee:	b580      	push	{r7, lr}
 80074f0:	b086      	sub	sp, #24
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	60f8      	str	r0, [r7, #12]
 80074f6:	60b9      	str	r1, [r7, #8]
 80074f8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80074fa:	2300      	movs	r3, #0
 80074fc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007502:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007508:	2b00      	cmp	r3, #0
 800750a:	d10d      	bne.n	8007528 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d14d      	bne.n	80075b0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	4618      	mov	r0, r3
 800751a:	f001 fa3d 	bl	8008998 <xTaskPriorityDisinherit>
 800751e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2200      	movs	r2, #0
 8007524:	609a      	str	r2, [r3, #8]
 8007526:	e043      	b.n	80075b0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d119      	bne.n	8007562 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	6858      	ldr	r0, [r3, #4]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007536:	461a      	mov	r2, r3
 8007538:	68b9      	ldr	r1, [r7, #8]
 800753a:	f004 fb5e 	bl	800bbfa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	685a      	ldr	r2, [r3, #4]
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007546:	441a      	add	r2, r3
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	685a      	ldr	r2, [r3, #4]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	429a      	cmp	r2, r3
 8007556:	d32b      	bcc.n	80075b0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	605a      	str	r2, [r3, #4]
 8007560:	e026      	b.n	80075b0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	68d8      	ldr	r0, [r3, #12]
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800756a:	461a      	mov	r2, r3
 800756c:	68b9      	ldr	r1, [r7, #8]
 800756e:	f004 fb44 	bl	800bbfa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	68da      	ldr	r2, [r3, #12]
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800757a:	425b      	negs	r3, r3
 800757c:	441a      	add	r2, r3
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	68da      	ldr	r2, [r3, #12]
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	429a      	cmp	r2, r3
 800758c:	d207      	bcs.n	800759e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	689a      	ldr	r2, [r3, #8]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007596:	425b      	negs	r3, r3
 8007598:	441a      	add	r2, r3
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2b02      	cmp	r3, #2
 80075a2:	d105      	bne.n	80075b0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d002      	beq.n	80075b0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	3b01      	subs	r3, #1
 80075ae:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	1c5a      	adds	r2, r3, #1
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80075b8:	697b      	ldr	r3, [r7, #20]
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3718      	adds	r7, #24
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}

080075c2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b082      	sub	sp, #8
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
 80075ca:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d018      	beq.n	8007606 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	68da      	ldr	r2, [r3, #12]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075dc:	441a      	add	r2, r3
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	68da      	ldr	r2, [r3, #12]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d303      	bcc.n	80075f6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	68d9      	ldr	r1, [r3, #12]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075fe:	461a      	mov	r2, r3
 8007600:	6838      	ldr	r0, [r7, #0]
 8007602:	f004 fafa 	bl	800bbfa <memcpy>
	}
}
 8007606:	bf00      	nop
 8007608:	3708      	adds	r7, #8
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}

0800760e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800760e:	b580      	push	{r7, lr}
 8007610:	b084      	sub	sp, #16
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007616:	f002 f869 	bl	80096ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007620:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007622:	e011      	b.n	8007648 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007628:	2b00      	cmp	r3, #0
 800762a:	d012      	beq.n	8007652 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	3324      	adds	r3, #36	; 0x24
 8007630:	4618      	mov	r0, r3
 8007632:	f000 ff41 	bl	80084b8 <xTaskRemoveFromEventList>
 8007636:	4603      	mov	r3, r0
 8007638:	2b00      	cmp	r3, #0
 800763a:	d001      	beq.n	8007640 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800763c:	f001 f820 	bl	8008680 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007640:	7bfb      	ldrb	r3, [r7, #15]
 8007642:	3b01      	subs	r3, #1
 8007644:	b2db      	uxtb	r3, r3
 8007646:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007648:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800764c:	2b00      	cmp	r3, #0
 800764e:	dce9      	bgt.n	8007624 <prvUnlockQueue+0x16>
 8007650:	e000      	b.n	8007654 <prvUnlockQueue+0x46>
					break;
 8007652:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	22ff      	movs	r2, #255	; 0xff
 8007658:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800765c:	f002 f87a 	bl	8009754 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007660:	f002 f844 	bl	80096ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800766a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800766c:	e011      	b.n	8007692 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	691b      	ldr	r3, [r3, #16]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d012      	beq.n	800769c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	3310      	adds	r3, #16
 800767a:	4618      	mov	r0, r3
 800767c:	f000 ff1c 	bl	80084b8 <xTaskRemoveFromEventList>
 8007680:	4603      	mov	r3, r0
 8007682:	2b00      	cmp	r3, #0
 8007684:	d001      	beq.n	800768a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007686:	f000 fffb 	bl	8008680 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800768a:	7bbb      	ldrb	r3, [r7, #14]
 800768c:	3b01      	subs	r3, #1
 800768e:	b2db      	uxtb	r3, r3
 8007690:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007692:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007696:	2b00      	cmp	r3, #0
 8007698:	dce9      	bgt.n	800766e <prvUnlockQueue+0x60>
 800769a:	e000      	b.n	800769e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800769c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	22ff      	movs	r2, #255	; 0xff
 80076a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80076a6:	f002 f855 	bl	8009754 <vPortExitCritical>
}
 80076aa:	bf00      	nop
 80076ac:	3710      	adds	r7, #16
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}

080076b2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80076b2:	b580      	push	{r7, lr}
 80076b4:	b084      	sub	sp, #16
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80076ba:	f002 f817 	bl	80096ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d102      	bne.n	80076cc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80076c6:	2301      	movs	r3, #1
 80076c8:	60fb      	str	r3, [r7, #12]
 80076ca:	e001      	b.n	80076d0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80076cc:	2300      	movs	r3, #0
 80076ce:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80076d0:	f002 f840 	bl	8009754 <vPortExitCritical>

	return xReturn;
 80076d4:	68fb      	ldr	r3, [r7, #12]
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3710      	adds	r7, #16
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}

080076de <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80076de:	b580      	push	{r7, lr}
 80076e0:	b084      	sub	sp, #16
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80076e6:	f002 f801 	bl	80096ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d102      	bne.n	80076fc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80076f6:	2301      	movs	r3, #1
 80076f8:	60fb      	str	r3, [r7, #12]
 80076fa:	e001      	b.n	8007700 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80076fc:	2300      	movs	r3, #0
 80076fe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007700:	f002 f828 	bl	8009754 <vPortExitCritical>

	return xReturn;
 8007704:	68fb      	ldr	r3, [r7, #12]
}
 8007706:	4618      	mov	r0, r3
 8007708:	3710      	adds	r7, #16
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
	...

08007710 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800771a:	2300      	movs	r3, #0
 800771c:	60fb      	str	r3, [r7, #12]
 800771e:	e01e      	b.n	800775e <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007720:	4a13      	ldr	r2, [pc, #76]	; (8007770 <vQueueAddToRegistry+0x60>)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d115      	bne.n	8007758 <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800772c:	4910      	ldr	r1, [pc, #64]	; (8007770 <vQueueAddToRegistry+0x60>)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	683a      	ldr	r2, [r7, #0]
 8007732:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007736:	4a0e      	ldr	r2, [pc, #56]	; (8007770 <vQueueAddToRegistry+0x60>)
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	00db      	lsls	r3, r3, #3
 800773c:	4413      	add	r3, r2
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4618      	mov	r0, r3
 8007746:	f003 ffc9 	bl	800b6dc <SEGGER_SYSVIEW_ShrinkId>
 800774a:	4601      	mov	r1, r0
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	461a      	mov	r2, r3
 8007750:	2071      	movs	r0, #113	; 0x71
 8007752:	f003 f9dd 	bl	800ab10 <SEGGER_SYSVIEW_RecordU32x2>
				break;
 8007756:	e006      	b.n	8007766 <vQueueAddToRegistry+0x56>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	3301      	adds	r3, #1
 800775c:	60fb      	str	r3, [r7, #12]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2b07      	cmp	r3, #7
 8007762:	d9dd      	bls.n	8007720 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007764:	bf00      	nop
 8007766:	bf00      	nop
 8007768:	3710      	adds	r7, #16
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	20000b30 	.word	0x20000b30

08007774 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007774:	b580      	push	{r7, lr}
 8007776:	b086      	sub	sp, #24
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007784:	f001 ffb2 	bl	80096ec <vPortEnterCritical>
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800778e:	b25b      	sxtb	r3, r3
 8007790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007794:	d103      	bne.n	800779e <vQueueWaitForMessageRestricted+0x2a>
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	2200      	movs	r2, #0
 800779a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077a4:	b25b      	sxtb	r3, r3
 80077a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077aa:	d103      	bne.n	80077b4 <vQueueWaitForMessageRestricted+0x40>
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	2200      	movs	r2, #0
 80077b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80077b4:	f001 ffce 	bl	8009754 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d106      	bne.n	80077ce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	3324      	adds	r3, #36	; 0x24
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	68b9      	ldr	r1, [r7, #8]
 80077c8:	4618      	mov	r0, r3
 80077ca:	f000 fe45 	bl	8008458 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80077ce:	6978      	ldr	r0, [r7, #20]
 80077d0:	f7ff ff1d 	bl	800760e <prvUnlockQueue>
	}
 80077d4:	bf00      	nop
 80077d6:	3718      	adds	r7, #24
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b08e      	sub	sp, #56	; 0x38
 80077e0:	af04      	add	r7, sp, #16
 80077e2:	60f8      	str	r0, [r7, #12]
 80077e4:	60b9      	str	r1, [r7, #8]
 80077e6:	607a      	str	r2, [r7, #4]
 80077e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80077ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d10c      	bne.n	800780a <xTaskCreateStatic+0x2e>
	__asm volatile
 80077f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f4:	b672      	cpsid	i
 80077f6:	f383 8811 	msr	BASEPRI, r3
 80077fa:	f3bf 8f6f 	isb	sy
 80077fe:	f3bf 8f4f 	dsb	sy
 8007802:	b662      	cpsie	i
 8007804:	623b      	str	r3, [r7, #32]
}
 8007806:	bf00      	nop
 8007808:	e7fe      	b.n	8007808 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800780a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800780c:	2b00      	cmp	r3, #0
 800780e:	d10c      	bne.n	800782a <xTaskCreateStatic+0x4e>
	__asm volatile
 8007810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007814:	b672      	cpsid	i
 8007816:	f383 8811 	msr	BASEPRI, r3
 800781a:	f3bf 8f6f 	isb	sy
 800781e:	f3bf 8f4f 	dsb	sy
 8007822:	b662      	cpsie	i
 8007824:	61fb      	str	r3, [r7, #28]
}
 8007826:	bf00      	nop
 8007828:	e7fe      	b.n	8007828 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800782a:	23b4      	movs	r3, #180	; 0xb4
 800782c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	2bb4      	cmp	r3, #180	; 0xb4
 8007832:	d00c      	beq.n	800784e <xTaskCreateStatic+0x72>
	__asm volatile
 8007834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007838:	b672      	cpsid	i
 800783a:	f383 8811 	msr	BASEPRI, r3
 800783e:	f3bf 8f6f 	isb	sy
 8007842:	f3bf 8f4f 	dsb	sy
 8007846:	b662      	cpsie	i
 8007848:	61bb      	str	r3, [r7, #24]
}
 800784a:	bf00      	nop
 800784c:	e7fe      	b.n	800784c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800784e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007852:	2b00      	cmp	r3, #0
 8007854:	d01e      	beq.n	8007894 <xTaskCreateStatic+0xb8>
 8007856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007858:	2b00      	cmp	r3, #0
 800785a:	d01b      	beq.n	8007894 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800785c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800785e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007862:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007864:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007868:	2202      	movs	r2, #2
 800786a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800786e:	2300      	movs	r3, #0
 8007870:	9303      	str	r3, [sp, #12]
 8007872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007874:	9302      	str	r3, [sp, #8]
 8007876:	f107 0314 	add.w	r3, r7, #20
 800787a:	9301      	str	r3, [sp, #4]
 800787c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800787e:	9300      	str	r3, [sp, #0]
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	68b9      	ldr	r1, [r7, #8]
 8007886:	68f8      	ldr	r0, [r7, #12]
 8007888:	f000 f850 	bl	800792c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800788c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800788e:	f000 f8ed 	bl	8007a6c <prvAddNewTaskToReadyList>
 8007892:	e001      	b.n	8007898 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8007894:	2300      	movs	r3, #0
 8007896:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007898:	697b      	ldr	r3, [r7, #20]
	}
 800789a:	4618      	mov	r0, r3
 800789c:	3728      	adds	r7, #40	; 0x28
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}

080078a2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80078a2:	b580      	push	{r7, lr}
 80078a4:	b08c      	sub	sp, #48	; 0x30
 80078a6:	af04      	add	r7, sp, #16
 80078a8:	60f8      	str	r0, [r7, #12]
 80078aa:	60b9      	str	r1, [r7, #8]
 80078ac:	603b      	str	r3, [r7, #0]
 80078ae:	4613      	mov	r3, r2
 80078b0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80078b2:	88fb      	ldrh	r3, [r7, #6]
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	4618      	mov	r0, r3
 80078b8:	f002 f84c 	bl	8009954 <pvPortMalloc>
 80078bc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d00e      	beq.n	80078e2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80078c4:	20b4      	movs	r0, #180	; 0xb4
 80078c6:	f002 f845 	bl	8009954 <pvPortMalloc>
 80078ca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80078cc:	69fb      	ldr	r3, [r7, #28]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d003      	beq.n	80078da <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80078d2:	69fb      	ldr	r3, [r7, #28]
 80078d4:	697a      	ldr	r2, [r7, #20]
 80078d6:	631a      	str	r2, [r3, #48]	; 0x30
 80078d8:	e005      	b.n	80078e6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80078da:	6978      	ldr	r0, [r7, #20]
 80078dc:	f002 f904 	bl	8009ae8 <vPortFree>
 80078e0:	e001      	b.n	80078e6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80078e2:	2300      	movs	r3, #0
 80078e4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80078e6:	69fb      	ldr	r3, [r7, #28]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d017      	beq.n	800791c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80078ec:	69fb      	ldr	r3, [r7, #28]
 80078ee:	2200      	movs	r2, #0
 80078f0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80078f4:	88fa      	ldrh	r2, [r7, #6]
 80078f6:	2300      	movs	r3, #0
 80078f8:	9303      	str	r3, [sp, #12]
 80078fa:	69fb      	ldr	r3, [r7, #28]
 80078fc:	9302      	str	r3, [sp, #8]
 80078fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007900:	9301      	str	r3, [sp, #4]
 8007902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007904:	9300      	str	r3, [sp, #0]
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	68b9      	ldr	r1, [r7, #8]
 800790a:	68f8      	ldr	r0, [r7, #12]
 800790c:	f000 f80e 	bl	800792c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007910:	69f8      	ldr	r0, [r7, #28]
 8007912:	f000 f8ab 	bl	8007a6c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007916:	2301      	movs	r3, #1
 8007918:	61bb      	str	r3, [r7, #24]
 800791a:	e002      	b.n	8007922 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800791c:	f04f 33ff 	mov.w	r3, #4294967295
 8007920:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007922:	69bb      	ldr	r3, [r7, #24]
	}
 8007924:	4618      	mov	r0, r3
 8007926:	3720      	adds	r7, #32
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b088      	sub	sp, #32
 8007930:	af00      	add	r7, sp, #0
 8007932:	60f8      	str	r0, [r7, #12]
 8007934:	60b9      	str	r1, [r7, #8]
 8007936:	607a      	str	r2, [r7, #4]
 8007938:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800793a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800793c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800793e:	6879      	ldr	r1, [r7, #4]
 8007940:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007944:	440b      	add	r3, r1
 8007946:	009b      	lsls	r3, r3, #2
 8007948:	4413      	add	r3, r2
 800794a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800794c:	69bb      	ldr	r3, [r7, #24]
 800794e:	f023 0307 	bic.w	r3, r3, #7
 8007952:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007954:	69bb      	ldr	r3, [r7, #24]
 8007956:	f003 0307 	and.w	r3, r3, #7
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00c      	beq.n	8007978 <prvInitialiseNewTask+0x4c>
	__asm volatile
 800795e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007962:	b672      	cpsid	i
 8007964:	f383 8811 	msr	BASEPRI, r3
 8007968:	f3bf 8f6f 	isb	sy
 800796c:	f3bf 8f4f 	dsb	sy
 8007970:	b662      	cpsie	i
 8007972:	617b      	str	r3, [r7, #20]
}
 8007974:	bf00      	nop
 8007976:	e7fe      	b.n	8007976 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d01f      	beq.n	80079be <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800797e:	2300      	movs	r3, #0
 8007980:	61fb      	str	r3, [r7, #28]
 8007982:	e012      	b.n	80079aa <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007984:	68ba      	ldr	r2, [r7, #8]
 8007986:	69fb      	ldr	r3, [r7, #28]
 8007988:	4413      	add	r3, r2
 800798a:	7819      	ldrb	r1, [r3, #0]
 800798c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800798e:	69fb      	ldr	r3, [r7, #28]
 8007990:	4413      	add	r3, r2
 8007992:	3334      	adds	r3, #52	; 0x34
 8007994:	460a      	mov	r2, r1
 8007996:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007998:	68ba      	ldr	r2, [r7, #8]
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	4413      	add	r3, r2
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d006      	beq.n	80079b2 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80079a4:	69fb      	ldr	r3, [r7, #28]
 80079a6:	3301      	adds	r3, #1
 80079a8:	61fb      	str	r3, [r7, #28]
 80079aa:	69fb      	ldr	r3, [r7, #28]
 80079ac:	2b0f      	cmp	r3, #15
 80079ae:	d9e9      	bls.n	8007984 <prvInitialiseNewTask+0x58>
 80079b0:	e000      	b.n	80079b4 <prvInitialiseNewTask+0x88>
			{
				break;
 80079b2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80079b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b6:	2200      	movs	r2, #0
 80079b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80079bc:	e003      	b.n	80079c6 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80079be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c0:	2200      	movs	r2, #0
 80079c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80079c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c8:	2b06      	cmp	r3, #6
 80079ca:	d901      	bls.n	80079d0 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80079cc:	2306      	movs	r3, #6
 80079ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80079d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80079d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079da:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80079dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079de:	2200      	movs	r2, #0
 80079e0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80079e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e4:	3304      	adds	r3, #4
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7fe fdd2 	bl	8006590 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80079ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ee:	3318      	adds	r3, #24
 80079f0:	4618      	mov	r0, r3
 80079f2:	f7fe fdcd 	bl	8006590 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80079f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fe:	f1c3 0207 	rsb	r2, r3, #7
 8007a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a04:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a0a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a16:	2200      	movs	r2, #0
 8007a18:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1e:	334c      	adds	r3, #76	; 0x4c
 8007a20:	2260      	movs	r2, #96	; 0x60
 8007a22:	2100      	movs	r1, #0
 8007a24:	4618      	mov	r0, r3
 8007a26:	f004 f8f6 	bl	800bc16 <memset>
 8007a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2c:	4a0c      	ldr	r2, [pc, #48]	; (8007a60 <prvInitialiseNewTask+0x134>)
 8007a2e:	651a      	str	r2, [r3, #80]	; 0x50
 8007a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a32:	4a0c      	ldr	r2, [pc, #48]	; (8007a64 <prvInitialiseNewTask+0x138>)
 8007a34:	655a      	str	r2, [r3, #84]	; 0x54
 8007a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a38:	4a0b      	ldr	r2, [pc, #44]	; (8007a68 <prvInitialiseNewTask+0x13c>)
 8007a3a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007a3c:	683a      	ldr	r2, [r7, #0]
 8007a3e:	68f9      	ldr	r1, [r7, #12]
 8007a40:	69b8      	ldr	r0, [r7, #24]
 8007a42:	f001 fd49 	bl	80094d8 <pxPortInitialiseStack>
 8007a46:	4602      	mov	r2, r0
 8007a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d002      	beq.n	8007a58 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a56:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a58:	bf00      	nop
 8007a5a:	3720      	adds	r7, #32
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	08010578 	.word	0x08010578
 8007a64:	08010598 	.word	0x08010598
 8007a68:	08010558 	.word	0x08010558

08007a6c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007a6c:	b5b0      	push	{r4, r5, r7, lr}
 8007a6e:	b084      	sub	sp, #16
 8007a70:	af02      	add	r7, sp, #8
 8007a72:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007a74:	f001 fe3a 	bl	80096ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007a78:	4b39      	ldr	r3, [pc, #228]	; (8007b60 <prvAddNewTaskToReadyList+0xf4>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	3301      	adds	r3, #1
 8007a7e:	4a38      	ldr	r2, [pc, #224]	; (8007b60 <prvAddNewTaskToReadyList+0xf4>)
 8007a80:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007a82:	4b38      	ldr	r3, [pc, #224]	; (8007b64 <prvAddNewTaskToReadyList+0xf8>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d109      	bne.n	8007a9e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007a8a:	4a36      	ldr	r2, [pc, #216]	; (8007b64 <prvAddNewTaskToReadyList+0xf8>)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007a90:	4b33      	ldr	r3, [pc, #204]	; (8007b60 <prvAddNewTaskToReadyList+0xf4>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	d110      	bne.n	8007aba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007a98:	f000 fe16 	bl	80086c8 <prvInitialiseTaskLists>
 8007a9c:	e00d      	b.n	8007aba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007a9e:	4b32      	ldr	r3, [pc, #200]	; (8007b68 <prvAddNewTaskToReadyList+0xfc>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d109      	bne.n	8007aba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007aa6:	4b2f      	ldr	r3, [pc, #188]	; (8007b64 <prvAddNewTaskToReadyList+0xf8>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d802      	bhi.n	8007aba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007ab4:	4a2b      	ldr	r2, [pc, #172]	; (8007b64 <prvAddNewTaskToReadyList+0xf8>)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007aba:	4b2c      	ldr	r3, [pc, #176]	; (8007b6c <prvAddNewTaskToReadyList+0x100>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	3301      	adds	r3, #1
 8007ac0:	4a2a      	ldr	r2, [pc, #168]	; (8007b6c <prvAddNewTaskToReadyList+0x100>)
 8007ac2:	6013      	str	r3, [r2, #0]
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d016      	beq.n	8007af8 <prvAddNewTaskToReadyList+0x8c>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	4618      	mov	r0, r3
 8007ace:	f003 fcdf 	bl	800b490 <SEGGER_SYSVIEW_OnTaskCreate>
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae2:	461d      	mov	r5, r3
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	461c      	mov	r4, r3
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aee:	1ae3      	subs	r3, r4, r3
 8007af0:	9300      	str	r3, [sp, #0]
 8007af2:	462b      	mov	r3, r5
 8007af4:	f002 f9c2 	bl	8009e7c <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	4618      	mov	r0, r3
 8007afc:	f003 fd4c 	bl	800b598 <SEGGER_SYSVIEW_OnTaskStartReady>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b04:	2201      	movs	r2, #1
 8007b06:	409a      	lsls	r2, r3
 8007b08:	4b19      	ldr	r3, [pc, #100]	; (8007b70 <prvAddNewTaskToReadyList+0x104>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	4a18      	ldr	r2, [pc, #96]	; (8007b70 <prvAddNewTaskToReadyList+0x104>)
 8007b10:	6013      	str	r3, [r2, #0]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b16:	4613      	mov	r3, r2
 8007b18:	009b      	lsls	r3, r3, #2
 8007b1a:	4413      	add	r3, r2
 8007b1c:	009b      	lsls	r3, r3, #2
 8007b1e:	4a15      	ldr	r2, [pc, #84]	; (8007b74 <prvAddNewTaskToReadyList+0x108>)
 8007b20:	441a      	add	r2, r3
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	3304      	adds	r3, #4
 8007b26:	4619      	mov	r1, r3
 8007b28:	4610      	mov	r0, r2
 8007b2a:	f7fe fd3e 	bl	80065aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007b2e:	f001 fe11 	bl	8009754 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007b32:	4b0d      	ldr	r3, [pc, #52]	; (8007b68 <prvAddNewTaskToReadyList+0xfc>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d00e      	beq.n	8007b58 <prvAddNewTaskToReadyList+0xec>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007b3a:	4b0a      	ldr	r3, [pc, #40]	; (8007b64 <prvAddNewTaskToReadyList+0xf8>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d207      	bcs.n	8007b58 <prvAddNewTaskToReadyList+0xec>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007b48:	4b0b      	ldr	r3, [pc, #44]	; (8007b78 <prvAddNewTaskToReadyList+0x10c>)
 8007b4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b4e:	601a      	str	r2, [r3, #0]
 8007b50:	f3bf 8f4f 	dsb	sy
 8007b54:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b58:	bf00      	nop
 8007b5a:	3708      	adds	r7, #8
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bdb0      	pop	{r4, r5, r7, pc}
 8007b60:	20000c70 	.word	0x20000c70
 8007b64:	20000b70 	.word	0x20000b70
 8007b68:	20000c7c 	.word	0x20000c7c
 8007b6c:	20000c8c 	.word	0x20000c8c
 8007b70:	20000c78 	.word	0x20000c78
 8007b74:	20000b74 	.word	0x20000b74
 8007b78:	e000ed04 	.word	0xe000ed04

08007b7c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007b84:	f001 fdb2 	bl	80096ec <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d102      	bne.n	8007b94 <vTaskSuspend+0x18>
 8007b8e:	4b44      	ldr	r3, [pc, #272]	; (8007ca0 <vTaskSuspend+0x124>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	e000      	b.n	8007b96 <vTaskSuspend+0x1a>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f003 fd9e 	bl	800b6dc <SEGGER_SYSVIEW_ShrinkId>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	2029      	movs	r0, #41	; 0x29
 8007ba6:	f002 ff77 	bl	800aa98 <SEGGER_SYSVIEW_RecordU32>

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	3304      	adds	r3, #4
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f7fe fd58 	bl	8006664 <uxListRemove>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d115      	bne.n	8007be6 <vTaskSuspend+0x6a>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bbe:	4939      	ldr	r1, [pc, #228]	; (8007ca4 <vTaskSuspend+0x128>)
 8007bc0:	4613      	mov	r3, r2
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	4413      	add	r3, r2
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	440b      	add	r3, r1
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d10a      	bne.n	8007be6 <vTaskSuspend+0x6a>
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8007bda:	43da      	mvns	r2, r3
 8007bdc:	4b32      	ldr	r3, [pc, #200]	; (8007ca8 <vTaskSuspend+0x12c>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4013      	ands	r3, r2
 8007be2:	4a31      	ldr	r2, [pc, #196]	; (8007ca8 <vTaskSuspend+0x12c>)
 8007be4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d004      	beq.n	8007bf8 <vTaskSuspend+0x7c>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	3318      	adds	r3, #24
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7fe fd36 	bl	8006664 <uxListRemove>
			}
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
      traceMOVED_TASK_TO_SUSPENDED_LIST(pxTCB);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	211b      	movs	r1, #27
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f003 fd0d 	bl	800b61c <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	3304      	adds	r3, #4
 8007c06:	4619      	mov	r1, r3
 8007c08:	4828      	ldr	r0, [pc, #160]	; (8007cac <vTaskSuspend+0x130>)
 8007c0a:	f7fe fcce 	bl	80065aa <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d103      	bne.n	8007c22 <vTaskSuspend+0xa6>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8007c22:	f001 fd97 	bl	8009754 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8007c26:	4b22      	ldr	r3, [pc, #136]	; (8007cb0 <vTaskSuspend+0x134>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d005      	beq.n	8007c3a <vTaskSuspend+0xbe>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8007c2e:	f001 fd5d 	bl	80096ec <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8007c32:	f000 fded 	bl	8008810 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8007c36:	f001 fd8d 	bl	8009754 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8007c3a:	4b19      	ldr	r3, [pc, #100]	; (8007ca0 <vTaskSuspend+0x124>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	68fa      	ldr	r2, [r7, #12]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d129      	bne.n	8007c98 <vTaskSuspend+0x11c>
		{
			if( xSchedulerRunning != pdFALSE )
 8007c44:	4b1a      	ldr	r3, [pc, #104]	; (8007cb0 <vTaskSuspend+0x134>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d019      	beq.n	8007c80 <vTaskSuspend+0x104>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8007c4c:	4b19      	ldr	r3, [pc, #100]	; (8007cb4 <vTaskSuspend+0x138>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d00c      	beq.n	8007c6e <vTaskSuspend+0xf2>
	__asm volatile
 8007c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c58:	b672      	cpsid	i
 8007c5a:	f383 8811 	msr	BASEPRI, r3
 8007c5e:	f3bf 8f6f 	isb	sy
 8007c62:	f3bf 8f4f 	dsb	sy
 8007c66:	b662      	cpsie	i
 8007c68:	60bb      	str	r3, [r7, #8]
}
 8007c6a:	bf00      	nop
 8007c6c:	e7fe      	b.n	8007c6c <vTaskSuspend+0xf0>
				portYIELD_WITHIN_API();
 8007c6e:	4b12      	ldr	r3, [pc, #72]	; (8007cb8 <vTaskSuspend+0x13c>)
 8007c70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c74:	601a      	str	r2, [r3, #0]
 8007c76:	f3bf 8f4f 	dsb	sy
 8007c7a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007c7e:	e00b      	b.n	8007c98 <vTaskSuspend+0x11c>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8007c80:	4b0a      	ldr	r3, [pc, #40]	; (8007cac <vTaskSuspend+0x130>)
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	4b0d      	ldr	r3, [pc, #52]	; (8007cbc <vTaskSuspend+0x140>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d103      	bne.n	8007c94 <vTaskSuspend+0x118>
					pxCurrentTCB = NULL;
 8007c8c:	4b04      	ldr	r3, [pc, #16]	; (8007ca0 <vTaskSuspend+0x124>)
 8007c8e:	2200      	movs	r2, #0
 8007c90:	601a      	str	r2, [r3, #0]
	}
 8007c92:	e001      	b.n	8007c98 <vTaskSuspend+0x11c>
					vTaskSwitchContext();
 8007c94:	f000 fb48 	bl	8008328 <vTaskSwitchContext>
	}
 8007c98:	bf00      	nop
 8007c9a:	3710      	adds	r7, #16
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}
 8007ca0:	20000b70 	.word	0x20000b70
 8007ca4:	20000b74 	.word	0x20000b74
 8007ca8:	20000c78 	.word	0x20000c78
 8007cac:	20000c5c 	.word	0x20000c5c
 8007cb0:	20000c7c 	.word	0x20000c7c
 8007cb4:	20000c98 	.word	0x20000c98
 8007cb8:	e000ed04 	.word	0xe000ed04
 8007cbc:	20000c70 	.word	0x20000c70

08007cc0 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b087      	sub	sp, #28
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d10c      	bne.n	8007cf0 <prvTaskIsTaskSuspended+0x30>
	__asm volatile
 8007cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cda:	b672      	cpsid	i
 8007cdc:	f383 8811 	msr	BASEPRI, r3
 8007ce0:	f3bf 8f6f 	isb	sy
 8007ce4:	f3bf 8f4f 	dsb	sy
 8007ce8:	b662      	cpsie	i
 8007cea:	60fb      	str	r3, [r7, #12]
}
 8007cec:	bf00      	nop
 8007cee:	e7fe      	b.n	8007cee <prvTaskIsTaskSuspended+0x2e>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	695b      	ldr	r3, [r3, #20]
 8007cf4:	4a0a      	ldr	r2, [pc, #40]	; (8007d20 <prvTaskIsTaskSuspended+0x60>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d10a      	bne.n	8007d10 <prvTaskIsTaskSuspended+0x50>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cfe:	4a09      	ldr	r2, [pc, #36]	; (8007d24 <prvTaskIsTaskSuspended+0x64>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d005      	beq.n	8007d10 <prvTaskIsTaskSuspended+0x50>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d101      	bne.n	8007d10 <prvTaskIsTaskSuspended+0x50>
				{
					xReturn = pdTRUE;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007d10:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8007d12:	4618      	mov	r0, r3
 8007d14:	371c      	adds	r7, #28
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr
 8007d1e:	bf00      	nop
 8007d20:	20000c5c 	.word	0x20000c5c
 8007d24:	20000c30 	.word	0x20000c30

08007d28 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d10c      	bne.n	8007d54 <vTaskResume+0x2c>
	__asm volatile
 8007d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d3e:	b672      	cpsid	i
 8007d40:	f383 8811 	msr	BASEPRI, r3
 8007d44:	f3bf 8f6f 	isb	sy
 8007d48:	f3bf 8f4f 	dsb	sy
 8007d4c:	b662      	cpsie	i
 8007d4e:	60bb      	str	r3, [r7, #8]
}
 8007d50:	bf00      	nop
 8007d52:	e7fe      	b.n	8007d52 <vTaskResume+0x2a>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8007d54:	4b26      	ldr	r3, [pc, #152]	; (8007df0 <vTaskResume+0xc8>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	68fa      	ldr	r2, [r7, #12]
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d044      	beq.n	8007de8 <vTaskResume+0xc0>
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d041      	beq.n	8007de8 <vTaskResume+0xc0>
		{
			taskENTER_CRITICAL();
 8007d64:	f001 fcc2 	bl	80096ec <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8007d68:	68f8      	ldr	r0, [r7, #12]
 8007d6a:	f7ff ffa9 	bl	8007cc0 <prvTaskIsTaskSuspended>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d037      	beq.n	8007de4 <vTaskResume+0xbc>
				{
					traceTASK_RESUME( pxTCB );
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	4618      	mov	r0, r3
 8007d78:	f003 fcb0 	bl	800b6dc <SEGGER_SYSVIEW_ShrinkId>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	4619      	mov	r1, r3
 8007d80:	202a      	movs	r0, #42	; 0x2a
 8007d82:	f002 fe89 	bl	800aa98 <SEGGER_SYSVIEW_RecordU32>

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	3304      	adds	r3, #4
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f7fe fc6a 	bl	8006664 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	4618      	mov	r0, r3
 8007d94:	f003 fc00 	bl	800b598 <SEGGER_SYSVIEW_OnTaskStartReady>
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	409a      	lsls	r2, r3
 8007da0:	4b14      	ldr	r3, [pc, #80]	; (8007df4 <vTaskResume+0xcc>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4313      	orrs	r3, r2
 8007da6:	4a13      	ldr	r2, [pc, #76]	; (8007df4 <vTaskResume+0xcc>)
 8007da8:	6013      	str	r3, [r2, #0]
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dae:	4613      	mov	r3, r2
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	4413      	add	r3, r2
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	4a10      	ldr	r2, [pc, #64]	; (8007df8 <vTaskResume+0xd0>)
 8007db8:	441a      	add	r2, r3
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	3304      	adds	r3, #4
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	4610      	mov	r0, r2
 8007dc2:	f7fe fbf2 	bl	80065aa <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dca:	4b09      	ldr	r3, [pc, #36]	; (8007df0 <vTaskResume+0xc8>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d307      	bcc.n	8007de4 <vTaskResume+0xbc>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8007dd4:	4b09      	ldr	r3, [pc, #36]	; (8007dfc <vTaskResume+0xd4>)
 8007dd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dda:	601a      	str	r2, [r3, #0]
 8007ddc:	f3bf 8f4f 	dsb	sy
 8007de0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8007de4:	f001 fcb6 	bl	8009754 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007de8:	bf00      	nop
 8007dea:	3710      	adds	r7, #16
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}
 8007df0:	20000b70 	.word	0x20000b70
 8007df4:	20000c78 	.word	0x20000c78
 8007df8:	20000b74 	.word	0x20000b74
 8007dfc:	e000ed04 	.word	0xe000ed04

08007e00 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b08a      	sub	sp, #40	; 0x28
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d10c      	bne.n	8007e30 <xTaskResumeFromISR+0x30>
	__asm volatile
 8007e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e1a:	b672      	cpsid	i
 8007e1c:	f383 8811 	msr	BASEPRI, r3
 8007e20:	f3bf 8f6f 	isb	sy
 8007e24:	f3bf 8f4f 	dsb	sy
 8007e28:	b662      	cpsie	i
 8007e2a:	61bb      	str	r3, [r7, #24]
}
 8007e2c:	bf00      	nop
 8007e2e:	e7fe      	b.n	8007e2e <xTaskResumeFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007e30:	f001 fd4c 	bl	80098cc <vPortValidateInterruptPriority>
	__asm volatile
 8007e34:	f3ef 8211 	mrs	r2, BASEPRI
 8007e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e3c:	b672      	cpsid	i
 8007e3e:	f383 8811 	msr	BASEPRI, r3
 8007e42:	f3bf 8f6f 	isb	sy
 8007e46:	f3bf 8f4f 	dsb	sy
 8007e4a:	b662      	cpsie	i
 8007e4c:	617a      	str	r2, [r7, #20]
 8007e4e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007e50:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007e52:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8007e54:	6a38      	ldr	r0, [r7, #32]
 8007e56:	f7ff ff33 	bl	8007cc0 <prvTaskIsTaskSuspended>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d03c      	beq.n	8007eda <xTaskResumeFromISR+0xda>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );
 8007e60:	6a3b      	ldr	r3, [r7, #32]
 8007e62:	4618      	mov	r0, r3
 8007e64:	f003 fc3a 	bl	800b6dc <SEGGER_SYSVIEW_ShrinkId>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	4619      	mov	r1, r3
 8007e6c:	202b      	movs	r0, #43	; 0x2b
 8007e6e:	f002 fe13 	bl	800aa98 <SEGGER_SYSVIEW_RecordU32>

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e72:	4b1f      	ldr	r3, [pc, #124]	; (8007ef0 <xTaskResumeFromISR+0xf0>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d129      	bne.n	8007ece <xTaskResumeFromISR+0xce>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007e7a:	6a3b      	ldr	r3, [r7, #32]
 8007e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e7e:	4b1d      	ldr	r3, [pc, #116]	; (8007ef4 <xTaskResumeFromISR+0xf4>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d301      	bcc.n	8007e8c <xTaskResumeFromISR+0x8c>
					{
						xYieldRequired = pdTRUE;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e8c:	6a3b      	ldr	r3, [r7, #32]
 8007e8e:	3304      	adds	r3, #4
 8007e90:	4618      	mov	r0, r3
 8007e92:	f7fe fbe7 	bl	8006664 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007e96:	6a3b      	ldr	r3, [r7, #32]
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f003 fb7d 	bl	800b598 <SEGGER_SYSVIEW_OnTaskStartReady>
 8007e9e:	6a3b      	ldr	r3, [r7, #32]
 8007ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	409a      	lsls	r2, r3
 8007ea6:	4b14      	ldr	r3, [pc, #80]	; (8007ef8 <xTaskResumeFromISR+0xf8>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	4a12      	ldr	r2, [pc, #72]	; (8007ef8 <xTaskResumeFromISR+0xf8>)
 8007eae:	6013      	str	r3, [r2, #0]
 8007eb0:	6a3b      	ldr	r3, [r7, #32]
 8007eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eb4:	4613      	mov	r3, r2
 8007eb6:	009b      	lsls	r3, r3, #2
 8007eb8:	4413      	add	r3, r2
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	4a0f      	ldr	r2, [pc, #60]	; (8007efc <xTaskResumeFromISR+0xfc>)
 8007ebe:	441a      	add	r2, r3
 8007ec0:	6a3b      	ldr	r3, [r7, #32]
 8007ec2:	3304      	adds	r3, #4
 8007ec4:	4619      	mov	r1, r3
 8007ec6:	4610      	mov	r0, r2
 8007ec8:	f7fe fb6f 	bl	80065aa <vListInsertEnd>
 8007ecc:	e005      	b.n	8007eda <xTaskResumeFromISR+0xda>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007ece:	6a3b      	ldr	r3, [r7, #32]
 8007ed0:	3318      	adds	r3, #24
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	480a      	ldr	r0, [pc, #40]	; (8007f00 <xTaskResumeFromISR+0x100>)
 8007ed6:	f7fe fb68 	bl	80065aa <vListInsertEnd>
 8007eda:	69fb      	ldr	r3, [r7, #28]
 8007edc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	f383 8811 	msr	BASEPRI, r3
}
 8007ee4:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8007ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3728      	adds	r7, #40	; 0x28
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}
 8007ef0:	20000c98 	.word	0x20000c98
 8007ef4:	20000b70 	.word	0x20000b70
 8007ef8:	20000c78 	.word	0x20000c78
 8007efc:	20000b74 	.word	0x20000b74
 8007f00:	20000c30 	.word	0x20000c30

08007f04 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b08a      	sub	sp, #40	; 0x28
 8007f08:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007f12:	463a      	mov	r2, r7
 8007f14:	1d39      	adds	r1, r7, #4
 8007f16:	f107 0308 	add.w	r3, r7, #8
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f7f9 f9b6 	bl	800128c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007f20:	6839      	ldr	r1, [r7, #0]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	68ba      	ldr	r2, [r7, #8]
 8007f26:	9202      	str	r2, [sp, #8]
 8007f28:	9301      	str	r3, [sp, #4]
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	9300      	str	r3, [sp, #0]
 8007f2e:	2300      	movs	r3, #0
 8007f30:	460a      	mov	r2, r1
 8007f32:	492d      	ldr	r1, [pc, #180]	; (8007fe8 <vTaskStartScheduler+0xe4>)
 8007f34:	482d      	ldr	r0, [pc, #180]	; (8007fec <vTaskStartScheduler+0xe8>)
 8007f36:	f7ff fc51 	bl	80077dc <xTaskCreateStatic>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	4a2c      	ldr	r2, [pc, #176]	; (8007ff0 <vTaskStartScheduler+0xec>)
 8007f3e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007f40:	4b2b      	ldr	r3, [pc, #172]	; (8007ff0 <vTaskStartScheduler+0xec>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d002      	beq.n	8007f4e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007f48:	2301      	movs	r3, #1
 8007f4a:	617b      	str	r3, [r7, #20]
 8007f4c:	e001      	b.n	8007f52 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	d102      	bne.n	8007f5e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007f58:	f000 fee0 	bl	8008d1c <xTimerCreateTimerTask>
 8007f5c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d12b      	bne.n	8007fbc <vTaskStartScheduler+0xb8>
	__asm volatile
 8007f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f68:	b672      	cpsid	i
 8007f6a:	f383 8811 	msr	BASEPRI, r3
 8007f6e:	f3bf 8f6f 	isb	sy
 8007f72:	f3bf 8f4f 	dsb	sy
 8007f76:	b662      	cpsie	i
 8007f78:	613b      	str	r3, [r7, #16]
}
 8007f7a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007f7c:	4b1d      	ldr	r3, [pc, #116]	; (8007ff4 <vTaskStartScheduler+0xf0>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	334c      	adds	r3, #76	; 0x4c
 8007f82:	4a1d      	ldr	r2, [pc, #116]	; (8007ff8 <vTaskStartScheduler+0xf4>)
 8007f84:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007f86:	4b1d      	ldr	r3, [pc, #116]	; (8007ffc <vTaskStartScheduler+0xf8>)
 8007f88:	f04f 32ff 	mov.w	r2, #4294967295
 8007f8c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007f8e:	4b1c      	ldr	r3, [pc, #112]	; (8008000 <vTaskStartScheduler+0xfc>)
 8007f90:	2201      	movs	r2, #1
 8007f92:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007f94:	4b1b      	ldr	r3, [pc, #108]	; (8008004 <vTaskStartScheduler+0x100>)
 8007f96:	2200      	movs	r2, #0
 8007f98:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8007f9a:	4b16      	ldr	r3, [pc, #88]	; (8007ff4 <vTaskStartScheduler+0xf0>)
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	4b14      	ldr	r3, [pc, #80]	; (8007ff0 <vTaskStartScheduler+0xec>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d102      	bne.n	8007fac <vTaskStartScheduler+0xa8>
 8007fa6:	f003 fa57 	bl	800b458 <SEGGER_SYSVIEW_OnIdle>
 8007faa:	e004      	b.n	8007fb6 <vTaskStartScheduler+0xb2>
 8007fac:	4b11      	ldr	r3, [pc, #68]	; (8007ff4 <vTaskStartScheduler+0xf0>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f003 faaf 	bl	800b514 <SEGGER_SYSVIEW_OnTaskStartExec>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007fb6:	f001 fb1b 	bl	80095f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007fba:	e010      	b.n	8007fde <vTaskStartScheduler+0xda>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fc2:	d10c      	bne.n	8007fde <vTaskStartScheduler+0xda>
	__asm volatile
 8007fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc8:	b672      	cpsid	i
 8007fca:	f383 8811 	msr	BASEPRI, r3
 8007fce:	f3bf 8f6f 	isb	sy
 8007fd2:	f3bf 8f4f 	dsb	sy
 8007fd6:	b662      	cpsie	i
 8007fd8:	60fb      	str	r3, [r7, #12]
}
 8007fda:	bf00      	nop
 8007fdc:	e7fe      	b.n	8007fdc <vTaskStartScheduler+0xd8>
}
 8007fde:	bf00      	nop
 8007fe0:	3718      	adds	r7, #24
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	bf00      	nop
 8007fe8:	08010460 	.word	0x08010460
 8007fec:	08008699 	.word	0x08008699
 8007ff0:	20000c94 	.word	0x20000c94
 8007ff4:	20000b70 	.word	0x20000b70
 8007ff8:	20000010 	.word	0x20000010
 8007ffc:	20000c90 	.word	0x20000c90
 8008000:	20000c7c 	.word	0x20000c7c
 8008004:	20000c74 	.word	0x20000c74

08008008 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008008:	b480      	push	{r7}
 800800a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800800c:	4b04      	ldr	r3, [pc, #16]	; (8008020 <vTaskSuspendAll+0x18>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	3301      	adds	r3, #1
 8008012:	4a03      	ldr	r2, [pc, #12]	; (8008020 <vTaskSuspendAll+0x18>)
 8008014:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008016:	bf00      	nop
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr
 8008020:	20000c98 	.word	0x20000c98

08008024 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800802a:	2300      	movs	r3, #0
 800802c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800802e:	2300      	movs	r3, #0
 8008030:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008032:	4b44      	ldr	r3, [pc, #272]	; (8008144 <xTaskResumeAll+0x120>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d10c      	bne.n	8008054 <xTaskResumeAll+0x30>
	__asm volatile
 800803a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800803e:	b672      	cpsid	i
 8008040:	f383 8811 	msr	BASEPRI, r3
 8008044:	f3bf 8f6f 	isb	sy
 8008048:	f3bf 8f4f 	dsb	sy
 800804c:	b662      	cpsie	i
 800804e:	603b      	str	r3, [r7, #0]
}
 8008050:	bf00      	nop
 8008052:	e7fe      	b.n	8008052 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008054:	f001 fb4a 	bl	80096ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008058:	4b3a      	ldr	r3, [pc, #232]	; (8008144 <xTaskResumeAll+0x120>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	3b01      	subs	r3, #1
 800805e:	4a39      	ldr	r2, [pc, #228]	; (8008144 <xTaskResumeAll+0x120>)
 8008060:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008062:	4b38      	ldr	r3, [pc, #224]	; (8008144 <xTaskResumeAll+0x120>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d165      	bne.n	8008136 <xTaskResumeAll+0x112>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800806a:	4b37      	ldr	r3, [pc, #220]	; (8008148 <xTaskResumeAll+0x124>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d061      	beq.n	8008136 <xTaskResumeAll+0x112>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008072:	e032      	b.n	80080da <xTaskResumeAll+0xb6>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008074:	4b35      	ldr	r3, [pc, #212]	; (800814c <xTaskResumeAll+0x128>)
 8008076:	68db      	ldr	r3, [r3, #12]
 8008078:	68db      	ldr	r3, [r3, #12]
 800807a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	3318      	adds	r3, #24
 8008080:	4618      	mov	r0, r3
 8008082:	f7fe faef 	bl	8006664 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	3304      	adds	r3, #4
 800808a:	4618      	mov	r0, r3
 800808c:	f7fe faea 	bl	8006664 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	4618      	mov	r0, r3
 8008094:	f003 fa80 	bl	800b598 <SEGGER_SYSVIEW_OnTaskStartReady>
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800809c:	2201      	movs	r2, #1
 800809e:	409a      	lsls	r2, r3
 80080a0:	4b2b      	ldr	r3, [pc, #172]	; (8008150 <xTaskResumeAll+0x12c>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4313      	orrs	r3, r2
 80080a6:	4a2a      	ldr	r2, [pc, #168]	; (8008150 <xTaskResumeAll+0x12c>)
 80080a8:	6013      	str	r3, [r2, #0]
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080ae:	4613      	mov	r3, r2
 80080b0:	009b      	lsls	r3, r3, #2
 80080b2:	4413      	add	r3, r2
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	4a27      	ldr	r2, [pc, #156]	; (8008154 <xTaskResumeAll+0x130>)
 80080b8:	441a      	add	r2, r3
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	3304      	adds	r3, #4
 80080be:	4619      	mov	r1, r3
 80080c0:	4610      	mov	r0, r2
 80080c2:	f7fe fa72 	bl	80065aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080ca:	4b23      	ldr	r3, [pc, #140]	; (8008158 <xTaskResumeAll+0x134>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d302      	bcc.n	80080da <xTaskResumeAll+0xb6>
					{
						xYieldPending = pdTRUE;
 80080d4:	4b21      	ldr	r3, [pc, #132]	; (800815c <xTaskResumeAll+0x138>)
 80080d6:	2201      	movs	r2, #1
 80080d8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80080da:	4b1c      	ldr	r3, [pc, #112]	; (800814c <xTaskResumeAll+0x128>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d1c8      	bne.n	8008074 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d001      	beq.n	80080ec <xTaskResumeAll+0xc8>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80080e8:	f000 fb92 	bl	8008810 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80080ec:	4b1c      	ldr	r3, [pc, #112]	; (8008160 <xTaskResumeAll+0x13c>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d010      	beq.n	800811a <xTaskResumeAll+0xf6>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80080f8:	f000 f858 	bl	80081ac <xTaskIncrementTick>
 80080fc:	4603      	mov	r3, r0
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d002      	beq.n	8008108 <xTaskResumeAll+0xe4>
							{
								xYieldPending = pdTRUE;
 8008102:	4b16      	ldr	r3, [pc, #88]	; (800815c <xTaskResumeAll+0x138>)
 8008104:	2201      	movs	r2, #1
 8008106:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	3b01      	subs	r3, #1
 800810c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d1f1      	bne.n	80080f8 <xTaskResumeAll+0xd4>

						uxPendedTicks = 0;
 8008114:	4b12      	ldr	r3, [pc, #72]	; (8008160 <xTaskResumeAll+0x13c>)
 8008116:	2200      	movs	r2, #0
 8008118:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800811a:	4b10      	ldr	r3, [pc, #64]	; (800815c <xTaskResumeAll+0x138>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d009      	beq.n	8008136 <xTaskResumeAll+0x112>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008122:	2301      	movs	r3, #1
 8008124:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008126:	4b0f      	ldr	r3, [pc, #60]	; (8008164 <xTaskResumeAll+0x140>)
 8008128:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800812c:	601a      	str	r2, [r3, #0]
 800812e:	f3bf 8f4f 	dsb	sy
 8008132:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008136:	f001 fb0d 	bl	8009754 <vPortExitCritical>

	return xAlreadyYielded;
 800813a:	68bb      	ldr	r3, [r7, #8]
}
 800813c:	4618      	mov	r0, r3
 800813e:	3710      	adds	r7, #16
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}
 8008144:	20000c98 	.word	0x20000c98
 8008148:	20000c70 	.word	0x20000c70
 800814c:	20000c30 	.word	0x20000c30
 8008150:	20000c78 	.word	0x20000c78
 8008154:	20000b74 	.word	0x20000b74
 8008158:	20000b70 	.word	0x20000b70
 800815c:	20000c84 	.word	0x20000c84
 8008160:	20000c80 	.word	0x20000c80
 8008164:	e000ed04 	.word	0xe000ed04

08008168 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008168:	b480      	push	{r7}
 800816a:	b083      	sub	sp, #12
 800816c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800816e:	4b05      	ldr	r3, [pc, #20]	; (8008184 <xTaskGetTickCount+0x1c>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008174:	687b      	ldr	r3, [r7, #4]
}
 8008176:	4618      	mov	r0, r3
 8008178:	370c      	adds	r7, #12
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr
 8008182:	bf00      	nop
 8008184:	20000c74 	.word	0x20000c74

08008188 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b082      	sub	sp, #8
 800818c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800818e:	f001 fb9d 	bl	80098cc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8008192:	2300      	movs	r3, #0
 8008194:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8008196:	4b04      	ldr	r3, [pc, #16]	; (80081a8 <xTaskGetTickCountFromISR+0x20>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800819c:	683b      	ldr	r3, [r7, #0]
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3708      	adds	r7, #8
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
 80081a6:	bf00      	nop
 80081a8:	20000c74 	.word	0x20000c74

080081ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b086      	sub	sp, #24
 80081b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80081b2:	2300      	movs	r3, #0
 80081b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081b6:	4b51      	ldr	r3, [pc, #324]	; (80082fc <xTaskIncrementTick+0x150>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	f040 808e 	bne.w	80082dc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80081c0:	4b4f      	ldr	r3, [pc, #316]	; (8008300 <xTaskIncrementTick+0x154>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	3301      	adds	r3, #1
 80081c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80081c8:	4a4d      	ldr	r2, [pc, #308]	; (8008300 <xTaskIncrementTick+0x154>)
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d122      	bne.n	800821a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80081d4:	4b4b      	ldr	r3, [pc, #300]	; (8008304 <xTaskIncrementTick+0x158>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d00c      	beq.n	80081f8 <xTaskIncrementTick+0x4c>
	__asm volatile
 80081de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e2:	b672      	cpsid	i
 80081e4:	f383 8811 	msr	BASEPRI, r3
 80081e8:	f3bf 8f6f 	isb	sy
 80081ec:	f3bf 8f4f 	dsb	sy
 80081f0:	b662      	cpsie	i
 80081f2:	603b      	str	r3, [r7, #0]
}
 80081f4:	bf00      	nop
 80081f6:	e7fe      	b.n	80081f6 <xTaskIncrementTick+0x4a>
 80081f8:	4b42      	ldr	r3, [pc, #264]	; (8008304 <xTaskIncrementTick+0x158>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	60fb      	str	r3, [r7, #12]
 80081fe:	4b42      	ldr	r3, [pc, #264]	; (8008308 <xTaskIncrementTick+0x15c>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a40      	ldr	r2, [pc, #256]	; (8008304 <xTaskIncrementTick+0x158>)
 8008204:	6013      	str	r3, [r2, #0]
 8008206:	4a40      	ldr	r2, [pc, #256]	; (8008308 <xTaskIncrementTick+0x15c>)
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	6013      	str	r3, [r2, #0]
 800820c:	4b3f      	ldr	r3, [pc, #252]	; (800830c <xTaskIncrementTick+0x160>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	3301      	adds	r3, #1
 8008212:	4a3e      	ldr	r2, [pc, #248]	; (800830c <xTaskIncrementTick+0x160>)
 8008214:	6013      	str	r3, [r2, #0]
 8008216:	f000 fafb 	bl	8008810 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800821a:	4b3d      	ldr	r3, [pc, #244]	; (8008310 <xTaskIncrementTick+0x164>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	693a      	ldr	r2, [r7, #16]
 8008220:	429a      	cmp	r2, r3
 8008222:	d34c      	bcc.n	80082be <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008224:	4b37      	ldr	r3, [pc, #220]	; (8008304 <xTaskIncrementTick+0x158>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d104      	bne.n	8008238 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800822e:	4b38      	ldr	r3, [pc, #224]	; (8008310 <xTaskIncrementTick+0x164>)
 8008230:	f04f 32ff 	mov.w	r2, #4294967295
 8008234:	601a      	str	r2, [r3, #0]
					break;
 8008236:	e042      	b.n	80082be <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008238:	4b32      	ldr	r3, [pc, #200]	; (8008304 <xTaskIncrementTick+0x158>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	68db      	ldr	r3, [r3, #12]
 800823e:	68db      	ldr	r3, [r3, #12]
 8008240:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008248:	693a      	ldr	r2, [r7, #16]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	429a      	cmp	r2, r3
 800824e:	d203      	bcs.n	8008258 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008250:	4a2f      	ldr	r2, [pc, #188]	; (8008310 <xTaskIncrementTick+0x164>)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008256:	e032      	b.n	80082be <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	3304      	adds	r3, #4
 800825c:	4618      	mov	r0, r3
 800825e:	f7fe fa01 	bl	8006664 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008266:	2b00      	cmp	r3, #0
 8008268:	d004      	beq.n	8008274 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	3318      	adds	r3, #24
 800826e:	4618      	mov	r0, r3
 8008270:	f7fe f9f8 	bl	8006664 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	4618      	mov	r0, r3
 8008278:	f003 f98e 	bl	800b598 <SEGGER_SYSVIEW_OnTaskStartReady>
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008280:	2201      	movs	r2, #1
 8008282:	409a      	lsls	r2, r3
 8008284:	4b23      	ldr	r3, [pc, #140]	; (8008314 <xTaskIncrementTick+0x168>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4313      	orrs	r3, r2
 800828a:	4a22      	ldr	r2, [pc, #136]	; (8008314 <xTaskIncrementTick+0x168>)
 800828c:	6013      	str	r3, [r2, #0]
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008292:	4613      	mov	r3, r2
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	4413      	add	r3, r2
 8008298:	009b      	lsls	r3, r3, #2
 800829a:	4a1f      	ldr	r2, [pc, #124]	; (8008318 <xTaskIncrementTick+0x16c>)
 800829c:	441a      	add	r2, r3
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	3304      	adds	r3, #4
 80082a2:	4619      	mov	r1, r3
 80082a4:	4610      	mov	r0, r2
 80082a6:	f7fe f980 	bl	80065aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082ae:	4b1b      	ldr	r3, [pc, #108]	; (800831c <xTaskIncrementTick+0x170>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d3b5      	bcc.n	8008224 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80082b8:	2301      	movs	r3, #1
 80082ba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082bc:	e7b2      	b.n	8008224 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80082be:	4b17      	ldr	r3, [pc, #92]	; (800831c <xTaskIncrementTick+0x170>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082c4:	4914      	ldr	r1, [pc, #80]	; (8008318 <xTaskIncrementTick+0x16c>)
 80082c6:	4613      	mov	r3, r2
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	4413      	add	r3, r2
 80082cc:	009b      	lsls	r3, r3, #2
 80082ce:	440b      	add	r3, r1
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	2b01      	cmp	r3, #1
 80082d4:	d907      	bls.n	80082e6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80082d6:	2301      	movs	r3, #1
 80082d8:	617b      	str	r3, [r7, #20]
 80082da:	e004      	b.n	80082e6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80082dc:	4b10      	ldr	r3, [pc, #64]	; (8008320 <xTaskIncrementTick+0x174>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	3301      	adds	r3, #1
 80082e2:	4a0f      	ldr	r2, [pc, #60]	; (8008320 <xTaskIncrementTick+0x174>)
 80082e4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80082e6:	4b0f      	ldr	r3, [pc, #60]	; (8008324 <xTaskIncrementTick+0x178>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d001      	beq.n	80082f2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80082ee:	2301      	movs	r3, #1
 80082f0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80082f2:	697b      	ldr	r3, [r7, #20]
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3718      	adds	r7, #24
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}
 80082fc:	20000c98 	.word	0x20000c98
 8008300:	20000c74 	.word	0x20000c74
 8008304:	20000c28 	.word	0x20000c28
 8008308:	20000c2c 	.word	0x20000c2c
 800830c:	20000c88 	.word	0x20000c88
 8008310:	20000c90 	.word	0x20000c90
 8008314:	20000c78 	.word	0x20000c78
 8008318:	20000b74 	.word	0x20000b74
 800831c:	20000b70 	.word	0x20000b70
 8008320:	20000c80 	.word	0x20000c80
 8008324:	20000c84 	.word	0x20000c84

08008328 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b086      	sub	sp, #24
 800832c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800832e:	4b30      	ldr	r3, [pc, #192]	; (80083f0 <vTaskSwitchContext+0xc8>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d003      	beq.n	800833e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008336:	4b2f      	ldr	r3, [pc, #188]	; (80083f4 <vTaskSwitchContext+0xcc>)
 8008338:	2201      	movs	r2, #1
 800833a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800833c:	e054      	b.n	80083e8 <vTaskSwitchContext+0xc0>
		xYieldPending = pdFALSE;
 800833e:	4b2d      	ldr	r3, [pc, #180]	; (80083f4 <vTaskSwitchContext+0xcc>)
 8008340:	2200      	movs	r2, #0
 8008342:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008344:	4b2c      	ldr	r3, [pc, #176]	; (80083f8 <vTaskSwitchContext+0xd0>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	fab3 f383 	clz	r3, r3
 8008350:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008352:	7afb      	ldrb	r3, [r7, #11]
 8008354:	f1c3 031f 	rsb	r3, r3, #31
 8008358:	617b      	str	r3, [r7, #20]
 800835a:	4928      	ldr	r1, [pc, #160]	; (80083fc <vTaskSwitchContext+0xd4>)
 800835c:	697a      	ldr	r2, [r7, #20]
 800835e:	4613      	mov	r3, r2
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	4413      	add	r3, r2
 8008364:	009b      	lsls	r3, r3, #2
 8008366:	440b      	add	r3, r1
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d10c      	bne.n	8008388 <vTaskSwitchContext+0x60>
	__asm volatile
 800836e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008372:	b672      	cpsid	i
 8008374:	f383 8811 	msr	BASEPRI, r3
 8008378:	f3bf 8f6f 	isb	sy
 800837c:	f3bf 8f4f 	dsb	sy
 8008380:	b662      	cpsie	i
 8008382:	607b      	str	r3, [r7, #4]
}
 8008384:	bf00      	nop
 8008386:	e7fe      	b.n	8008386 <vTaskSwitchContext+0x5e>
 8008388:	697a      	ldr	r2, [r7, #20]
 800838a:	4613      	mov	r3, r2
 800838c:	009b      	lsls	r3, r3, #2
 800838e:	4413      	add	r3, r2
 8008390:	009b      	lsls	r3, r3, #2
 8008392:	4a1a      	ldr	r2, [pc, #104]	; (80083fc <vTaskSwitchContext+0xd4>)
 8008394:	4413      	add	r3, r2
 8008396:	613b      	str	r3, [r7, #16]
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	685a      	ldr	r2, [r3, #4]
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	605a      	str	r2, [r3, #4]
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	685a      	ldr	r2, [r3, #4]
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	3308      	adds	r3, #8
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d104      	bne.n	80083b8 <vTaskSwitchContext+0x90>
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	685a      	ldr	r2, [r3, #4]
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	605a      	str	r2, [r3, #4]
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	68db      	ldr	r3, [r3, #12]
 80083be:	4a10      	ldr	r2, [pc, #64]	; (8008400 <vTaskSwitchContext+0xd8>)
 80083c0:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 80083c2:	4b0f      	ldr	r3, [pc, #60]	; (8008400 <vTaskSwitchContext+0xd8>)
 80083c4:	681a      	ldr	r2, [r3, #0]
 80083c6:	4b0f      	ldr	r3, [pc, #60]	; (8008404 <vTaskSwitchContext+0xdc>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	429a      	cmp	r2, r3
 80083cc:	d102      	bne.n	80083d4 <vTaskSwitchContext+0xac>
 80083ce:	f003 f843 	bl	800b458 <SEGGER_SYSVIEW_OnIdle>
 80083d2:	e004      	b.n	80083de <vTaskSwitchContext+0xb6>
 80083d4:	4b0a      	ldr	r3, [pc, #40]	; (8008400 <vTaskSwitchContext+0xd8>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4618      	mov	r0, r3
 80083da:	f003 f89b 	bl	800b514 <SEGGER_SYSVIEW_OnTaskStartExec>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80083de:	4b08      	ldr	r3, [pc, #32]	; (8008400 <vTaskSwitchContext+0xd8>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	334c      	adds	r3, #76	; 0x4c
 80083e4:	4a08      	ldr	r2, [pc, #32]	; (8008408 <vTaskSwitchContext+0xe0>)
 80083e6:	6013      	str	r3, [r2, #0]
}
 80083e8:	bf00      	nop
 80083ea:	3718      	adds	r7, #24
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}
 80083f0:	20000c98 	.word	0x20000c98
 80083f4:	20000c84 	.word	0x20000c84
 80083f8:	20000c78 	.word	0x20000c78
 80083fc:	20000b74 	.word	0x20000b74
 8008400:	20000b70 	.word	0x20000b70
 8008404:	20000c94 	.word	0x20000c94
 8008408:	20000010 	.word	0x20000010

0800840c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b084      	sub	sp, #16
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d10c      	bne.n	8008436 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800841c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008420:	b672      	cpsid	i
 8008422:	f383 8811 	msr	BASEPRI, r3
 8008426:	f3bf 8f6f 	isb	sy
 800842a:	f3bf 8f4f 	dsb	sy
 800842e:	b662      	cpsie	i
 8008430:	60fb      	str	r3, [r7, #12]
}
 8008432:	bf00      	nop
 8008434:	e7fe      	b.n	8008434 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008436:	4b07      	ldr	r3, [pc, #28]	; (8008454 <vTaskPlaceOnEventList+0x48>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	3318      	adds	r3, #24
 800843c:	4619      	mov	r1, r3
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f7fe f8d7 	bl	80065f2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008444:	2101      	movs	r1, #1
 8008446:	6838      	ldr	r0, [r7, #0]
 8008448:	f000 fbf0 	bl	8008c2c <prvAddCurrentTaskToDelayedList>
}
 800844c:	bf00      	nop
 800844e:	3710      	adds	r7, #16
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}
 8008454:	20000b70 	.word	0x20000b70

08008458 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008458:	b580      	push	{r7, lr}
 800845a:	b086      	sub	sp, #24
 800845c:	af00      	add	r7, sp, #0
 800845e:	60f8      	str	r0, [r7, #12]
 8008460:	60b9      	str	r1, [r7, #8]
 8008462:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d10c      	bne.n	8008484 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800846a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800846e:	b672      	cpsid	i
 8008470:	f383 8811 	msr	BASEPRI, r3
 8008474:	f3bf 8f6f 	isb	sy
 8008478:	f3bf 8f4f 	dsb	sy
 800847c:	b662      	cpsie	i
 800847e:	617b      	str	r3, [r7, #20]
}
 8008480:	bf00      	nop
 8008482:	e7fe      	b.n	8008482 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008484:	4b0b      	ldr	r3, [pc, #44]	; (80084b4 <vTaskPlaceOnEventListRestricted+0x5c>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	3318      	adds	r3, #24
 800848a:	4619      	mov	r1, r3
 800848c:	68f8      	ldr	r0, [r7, #12]
 800848e:	f7fe f88c 	bl	80065aa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d002      	beq.n	800849e <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8008498:	f04f 33ff 	mov.w	r3, #4294967295
 800849c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800849e:	2024      	movs	r0, #36	; 0x24
 80084a0:	f002 fadc 	bl	800aa5c <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80084a4:	6879      	ldr	r1, [r7, #4]
 80084a6:	68b8      	ldr	r0, [r7, #8]
 80084a8:	f000 fbc0 	bl	8008c2c <prvAddCurrentTaskToDelayedList>
	}
 80084ac:	bf00      	nop
 80084ae:	3718      	adds	r7, #24
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}
 80084b4:	20000b70 	.word	0x20000b70

080084b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b086      	sub	sp, #24
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	68db      	ldr	r3, [r3, #12]
 80084c4:	68db      	ldr	r3, [r3, #12]
 80084c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d10c      	bne.n	80084e8 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80084ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d2:	b672      	cpsid	i
 80084d4:	f383 8811 	msr	BASEPRI, r3
 80084d8:	f3bf 8f6f 	isb	sy
 80084dc:	f3bf 8f4f 	dsb	sy
 80084e0:	b662      	cpsie	i
 80084e2:	60fb      	str	r3, [r7, #12]
}
 80084e4:	bf00      	nop
 80084e6:	e7fe      	b.n	80084e6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	3318      	adds	r3, #24
 80084ec:	4618      	mov	r0, r3
 80084ee:	f7fe f8b9 	bl	8006664 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084f2:	4b1f      	ldr	r3, [pc, #124]	; (8008570 <xTaskRemoveFromEventList+0xb8>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d120      	bne.n	800853c <xTaskRemoveFromEventList+0x84>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	3304      	adds	r3, #4
 80084fe:	4618      	mov	r0, r3
 8008500:	f7fe f8b0 	bl	8006664 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	4618      	mov	r0, r3
 8008508:	f003 f846 	bl	800b598 <SEGGER_SYSVIEW_OnTaskStartReady>
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008510:	2201      	movs	r2, #1
 8008512:	409a      	lsls	r2, r3
 8008514:	4b17      	ldr	r3, [pc, #92]	; (8008574 <xTaskRemoveFromEventList+0xbc>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4313      	orrs	r3, r2
 800851a:	4a16      	ldr	r2, [pc, #88]	; (8008574 <xTaskRemoveFromEventList+0xbc>)
 800851c:	6013      	str	r3, [r2, #0]
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008522:	4613      	mov	r3, r2
 8008524:	009b      	lsls	r3, r3, #2
 8008526:	4413      	add	r3, r2
 8008528:	009b      	lsls	r3, r3, #2
 800852a:	4a13      	ldr	r2, [pc, #76]	; (8008578 <xTaskRemoveFromEventList+0xc0>)
 800852c:	441a      	add	r2, r3
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	3304      	adds	r3, #4
 8008532:	4619      	mov	r1, r3
 8008534:	4610      	mov	r0, r2
 8008536:	f7fe f838 	bl	80065aa <vListInsertEnd>
 800853a:	e005      	b.n	8008548 <xTaskRemoveFromEventList+0x90>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	3318      	adds	r3, #24
 8008540:	4619      	mov	r1, r3
 8008542:	480e      	ldr	r0, [pc, #56]	; (800857c <xTaskRemoveFromEventList+0xc4>)
 8008544:	f7fe f831 	bl	80065aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800854c:	4b0c      	ldr	r3, [pc, #48]	; (8008580 <xTaskRemoveFromEventList+0xc8>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008552:	429a      	cmp	r2, r3
 8008554:	d905      	bls.n	8008562 <xTaskRemoveFromEventList+0xaa>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008556:	2301      	movs	r3, #1
 8008558:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800855a:	4b0a      	ldr	r3, [pc, #40]	; (8008584 <xTaskRemoveFromEventList+0xcc>)
 800855c:	2201      	movs	r2, #1
 800855e:	601a      	str	r2, [r3, #0]
 8008560:	e001      	b.n	8008566 <xTaskRemoveFromEventList+0xae>
	}
	else
	{
		xReturn = pdFALSE;
 8008562:	2300      	movs	r3, #0
 8008564:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008566:	697b      	ldr	r3, [r7, #20]
}
 8008568:	4618      	mov	r0, r3
 800856a:	3718      	adds	r7, #24
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}
 8008570:	20000c98 	.word	0x20000c98
 8008574:	20000c78 	.word	0x20000c78
 8008578:	20000b74 	.word	0x20000b74
 800857c:	20000c30 	.word	0x20000c30
 8008580:	20000b70 	.word	0x20000b70
 8008584:	20000c84 	.word	0x20000c84

08008588 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008588:	b480      	push	{r7}
 800858a:	b083      	sub	sp, #12
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008590:	4b06      	ldr	r3, [pc, #24]	; (80085ac <vTaskInternalSetTimeOutState+0x24>)
 8008592:	681a      	ldr	r2, [r3, #0]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008598:	4b05      	ldr	r3, [pc, #20]	; (80085b0 <vTaskInternalSetTimeOutState+0x28>)
 800859a:	681a      	ldr	r2, [r3, #0]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	605a      	str	r2, [r3, #4]
}
 80085a0:	bf00      	nop
 80085a2:	370c      	adds	r7, #12
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr
 80085ac:	20000c88 	.word	0x20000c88
 80085b0:	20000c74 	.word	0x20000c74

080085b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b088      	sub	sp, #32
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d10c      	bne.n	80085de <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80085c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c8:	b672      	cpsid	i
 80085ca:	f383 8811 	msr	BASEPRI, r3
 80085ce:	f3bf 8f6f 	isb	sy
 80085d2:	f3bf 8f4f 	dsb	sy
 80085d6:	b662      	cpsie	i
 80085d8:	613b      	str	r3, [r7, #16]
}
 80085da:	bf00      	nop
 80085dc:	e7fe      	b.n	80085dc <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d10c      	bne.n	80085fe <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80085e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e8:	b672      	cpsid	i
 80085ea:	f383 8811 	msr	BASEPRI, r3
 80085ee:	f3bf 8f6f 	isb	sy
 80085f2:	f3bf 8f4f 	dsb	sy
 80085f6:	b662      	cpsie	i
 80085f8:	60fb      	str	r3, [r7, #12]
}
 80085fa:	bf00      	nop
 80085fc:	e7fe      	b.n	80085fc <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80085fe:	f001 f875 	bl	80096ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008602:	4b1d      	ldr	r3, [pc, #116]	; (8008678 <xTaskCheckForTimeOut+0xc4>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	69ba      	ldr	r2, [r7, #24]
 800860e:	1ad3      	subs	r3, r2, r3
 8008610:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800861a:	d102      	bne.n	8008622 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800861c:	2300      	movs	r3, #0
 800861e:	61fb      	str	r3, [r7, #28]
 8008620:	e023      	b.n	800866a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681a      	ldr	r2, [r3, #0]
 8008626:	4b15      	ldr	r3, [pc, #84]	; (800867c <xTaskCheckForTimeOut+0xc8>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	429a      	cmp	r2, r3
 800862c:	d007      	beq.n	800863e <xTaskCheckForTimeOut+0x8a>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	69ba      	ldr	r2, [r7, #24]
 8008634:	429a      	cmp	r2, r3
 8008636:	d302      	bcc.n	800863e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008638:	2301      	movs	r3, #1
 800863a:	61fb      	str	r3, [r7, #28]
 800863c:	e015      	b.n	800866a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	697a      	ldr	r2, [r7, #20]
 8008644:	429a      	cmp	r2, r3
 8008646:	d20b      	bcs.n	8008660 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	681a      	ldr	r2, [r3, #0]
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	1ad2      	subs	r2, r2, r3
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f7ff ff97 	bl	8008588 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800865a:	2300      	movs	r3, #0
 800865c:	61fb      	str	r3, [r7, #28]
 800865e:	e004      	b.n	800866a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	2200      	movs	r2, #0
 8008664:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008666:	2301      	movs	r3, #1
 8008668:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800866a:	f001 f873 	bl	8009754 <vPortExitCritical>

	return xReturn;
 800866e:	69fb      	ldr	r3, [r7, #28]
}
 8008670:	4618      	mov	r0, r3
 8008672:	3720      	adds	r7, #32
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}
 8008678:	20000c74 	.word	0x20000c74
 800867c:	20000c88 	.word	0x20000c88

08008680 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008680:	b480      	push	{r7}
 8008682:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008684:	4b03      	ldr	r3, [pc, #12]	; (8008694 <vTaskMissedYield+0x14>)
 8008686:	2201      	movs	r2, #1
 8008688:	601a      	str	r2, [r3, #0]
}
 800868a:	bf00      	nop
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr
 8008694:	20000c84 	.word	0x20000c84

08008698 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b082      	sub	sp, #8
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80086a0:	f000 f852 	bl	8008748 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80086a4:	4b06      	ldr	r3, [pc, #24]	; (80086c0 <prvIdleTask+0x28>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d9f9      	bls.n	80086a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80086ac:	4b05      	ldr	r3, [pc, #20]	; (80086c4 <prvIdleTask+0x2c>)
 80086ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086b2:	601a      	str	r2, [r3, #0]
 80086b4:	f3bf 8f4f 	dsb	sy
 80086b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80086bc:	e7f0      	b.n	80086a0 <prvIdleTask+0x8>
 80086be:	bf00      	nop
 80086c0:	20000b74 	.word	0x20000b74
 80086c4:	e000ed04 	.word	0xe000ed04

080086c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80086ce:	2300      	movs	r3, #0
 80086d0:	607b      	str	r3, [r7, #4]
 80086d2:	e00c      	b.n	80086ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80086d4:	687a      	ldr	r2, [r7, #4]
 80086d6:	4613      	mov	r3, r2
 80086d8:	009b      	lsls	r3, r3, #2
 80086da:	4413      	add	r3, r2
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	4a12      	ldr	r2, [pc, #72]	; (8008728 <prvInitialiseTaskLists+0x60>)
 80086e0:	4413      	add	r3, r2
 80086e2:	4618      	mov	r0, r3
 80086e4:	f7fd ff34 	bl	8006550 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	3301      	adds	r3, #1
 80086ec:	607b      	str	r3, [r7, #4]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2b06      	cmp	r3, #6
 80086f2:	d9ef      	bls.n	80086d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80086f4:	480d      	ldr	r0, [pc, #52]	; (800872c <prvInitialiseTaskLists+0x64>)
 80086f6:	f7fd ff2b 	bl	8006550 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80086fa:	480d      	ldr	r0, [pc, #52]	; (8008730 <prvInitialiseTaskLists+0x68>)
 80086fc:	f7fd ff28 	bl	8006550 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008700:	480c      	ldr	r0, [pc, #48]	; (8008734 <prvInitialiseTaskLists+0x6c>)
 8008702:	f7fd ff25 	bl	8006550 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008706:	480c      	ldr	r0, [pc, #48]	; (8008738 <prvInitialiseTaskLists+0x70>)
 8008708:	f7fd ff22 	bl	8006550 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800870c:	480b      	ldr	r0, [pc, #44]	; (800873c <prvInitialiseTaskLists+0x74>)
 800870e:	f7fd ff1f 	bl	8006550 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008712:	4b0b      	ldr	r3, [pc, #44]	; (8008740 <prvInitialiseTaskLists+0x78>)
 8008714:	4a05      	ldr	r2, [pc, #20]	; (800872c <prvInitialiseTaskLists+0x64>)
 8008716:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008718:	4b0a      	ldr	r3, [pc, #40]	; (8008744 <prvInitialiseTaskLists+0x7c>)
 800871a:	4a05      	ldr	r2, [pc, #20]	; (8008730 <prvInitialiseTaskLists+0x68>)
 800871c:	601a      	str	r2, [r3, #0]
}
 800871e:	bf00      	nop
 8008720:	3708      	adds	r7, #8
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}
 8008726:	bf00      	nop
 8008728:	20000b74 	.word	0x20000b74
 800872c:	20000c00 	.word	0x20000c00
 8008730:	20000c14 	.word	0x20000c14
 8008734:	20000c30 	.word	0x20000c30
 8008738:	20000c44 	.word	0x20000c44
 800873c:	20000c5c 	.word	0x20000c5c
 8008740:	20000c28 	.word	0x20000c28
 8008744:	20000c2c 	.word	0x20000c2c

08008748 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b082      	sub	sp, #8
 800874c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800874e:	e019      	b.n	8008784 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008750:	f000 ffcc 	bl	80096ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008754:	4b10      	ldr	r3, [pc, #64]	; (8008798 <prvCheckTasksWaitingTermination+0x50>)
 8008756:	68db      	ldr	r3, [r3, #12]
 8008758:	68db      	ldr	r3, [r3, #12]
 800875a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	3304      	adds	r3, #4
 8008760:	4618      	mov	r0, r3
 8008762:	f7fd ff7f 	bl	8006664 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008766:	4b0d      	ldr	r3, [pc, #52]	; (800879c <prvCheckTasksWaitingTermination+0x54>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	3b01      	subs	r3, #1
 800876c:	4a0b      	ldr	r2, [pc, #44]	; (800879c <prvCheckTasksWaitingTermination+0x54>)
 800876e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008770:	4b0b      	ldr	r3, [pc, #44]	; (80087a0 <prvCheckTasksWaitingTermination+0x58>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	3b01      	subs	r3, #1
 8008776:	4a0a      	ldr	r2, [pc, #40]	; (80087a0 <prvCheckTasksWaitingTermination+0x58>)
 8008778:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800877a:	f000 ffeb 	bl	8009754 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f000 f810 	bl	80087a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008784:	4b06      	ldr	r3, [pc, #24]	; (80087a0 <prvCheckTasksWaitingTermination+0x58>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d1e1      	bne.n	8008750 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800878c:	bf00      	nop
 800878e:	bf00      	nop
 8008790:	3708      	adds	r7, #8
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}
 8008796:	bf00      	nop
 8008798:	20000c44 	.word	0x20000c44
 800879c:	20000c70 	.word	0x20000c70
 80087a0:	20000c58 	.word	0x20000c58

080087a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b084      	sub	sp, #16
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	334c      	adds	r3, #76	; 0x4c
 80087b0:	4618      	mov	r0, r3
 80087b2:	f004 f955 	bl	800ca60 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d108      	bne.n	80087d2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087c4:	4618      	mov	r0, r3
 80087c6:	f001 f98f 	bl	8009ae8 <vPortFree>
				vPortFree( pxTCB );
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f001 f98c 	bl	8009ae8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80087d0:	e01a      	b.n	8008808 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80087d8:	2b01      	cmp	r3, #1
 80087da:	d103      	bne.n	80087e4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f001 f983 	bl	8009ae8 <vPortFree>
	}
 80087e2:	e011      	b.n	8008808 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80087ea:	2b02      	cmp	r3, #2
 80087ec:	d00c      	beq.n	8008808 <prvDeleteTCB+0x64>
	__asm volatile
 80087ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f2:	b672      	cpsid	i
 80087f4:	f383 8811 	msr	BASEPRI, r3
 80087f8:	f3bf 8f6f 	isb	sy
 80087fc:	f3bf 8f4f 	dsb	sy
 8008800:	b662      	cpsie	i
 8008802:	60fb      	str	r3, [r7, #12]
}
 8008804:	bf00      	nop
 8008806:	e7fe      	b.n	8008806 <prvDeleteTCB+0x62>
	}
 8008808:	bf00      	nop
 800880a:	3710      	adds	r7, #16
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008810:	b480      	push	{r7}
 8008812:	b083      	sub	sp, #12
 8008814:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008816:	4b0c      	ldr	r3, [pc, #48]	; (8008848 <prvResetNextTaskUnblockTime+0x38>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d104      	bne.n	800882a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008820:	4b0a      	ldr	r3, [pc, #40]	; (800884c <prvResetNextTaskUnblockTime+0x3c>)
 8008822:	f04f 32ff 	mov.w	r2, #4294967295
 8008826:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008828:	e008      	b.n	800883c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800882a:	4b07      	ldr	r3, [pc, #28]	; (8008848 <prvResetNextTaskUnblockTime+0x38>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	68db      	ldr	r3, [r3, #12]
 8008830:	68db      	ldr	r3, [r3, #12]
 8008832:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	4a04      	ldr	r2, [pc, #16]	; (800884c <prvResetNextTaskUnblockTime+0x3c>)
 800883a:	6013      	str	r3, [r2, #0]
}
 800883c:	bf00      	nop
 800883e:	370c      	adds	r7, #12
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr
 8008848:	20000c28 	.word	0x20000c28
 800884c:	20000c90 	.word	0x20000c90

08008850 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008850:	b480      	push	{r7}
 8008852:	b083      	sub	sp, #12
 8008854:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008856:	4b0b      	ldr	r3, [pc, #44]	; (8008884 <xTaskGetSchedulerState+0x34>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d102      	bne.n	8008864 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800885e:	2301      	movs	r3, #1
 8008860:	607b      	str	r3, [r7, #4]
 8008862:	e008      	b.n	8008876 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008864:	4b08      	ldr	r3, [pc, #32]	; (8008888 <xTaskGetSchedulerState+0x38>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d102      	bne.n	8008872 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800886c:	2302      	movs	r3, #2
 800886e:	607b      	str	r3, [r7, #4]
 8008870:	e001      	b.n	8008876 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008872:	2300      	movs	r3, #0
 8008874:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008876:	687b      	ldr	r3, [r7, #4]
	}
 8008878:	4618      	mov	r0, r3
 800887a:	370c      	adds	r7, #12
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr
 8008884:	20000c7c 	.word	0x20000c7c
 8008888:	20000c98 	.word	0x20000c98

0800888c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800888c:	b580      	push	{r7, lr}
 800888e:	b084      	sub	sp, #16
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008898:	2300      	movs	r3, #0
 800889a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d06e      	beq.n	8008980 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088a6:	4b39      	ldr	r3, [pc, #228]	; (800898c <xTaskPriorityInherit+0x100>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ac:	429a      	cmp	r2, r3
 80088ae:	d25e      	bcs.n	800896e <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	699b      	ldr	r3, [r3, #24]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	db06      	blt.n	80088c6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088b8:	4b34      	ldr	r3, [pc, #208]	; (800898c <xTaskPriorityInherit+0x100>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088be:	f1c3 0207 	rsb	r2, r3, #7
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	6959      	ldr	r1, [r3, #20]
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088ce:	4613      	mov	r3, r2
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	4413      	add	r3, r2
 80088d4:	009b      	lsls	r3, r3, #2
 80088d6:	4a2e      	ldr	r2, [pc, #184]	; (8008990 <xTaskPriorityInherit+0x104>)
 80088d8:	4413      	add	r3, r2
 80088da:	4299      	cmp	r1, r3
 80088dc:	d13a      	bne.n	8008954 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	3304      	adds	r3, #4
 80088e2:	4618      	mov	r0, r3
 80088e4:	f7fd febe 	bl	8006664 <uxListRemove>
 80088e8:	4603      	mov	r3, r0
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d115      	bne.n	800891a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088f2:	4927      	ldr	r1, [pc, #156]	; (8008990 <xTaskPriorityInherit+0x104>)
 80088f4:	4613      	mov	r3, r2
 80088f6:	009b      	lsls	r3, r3, #2
 80088f8:	4413      	add	r3, r2
 80088fa:	009b      	lsls	r3, r3, #2
 80088fc:	440b      	add	r3, r1
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d10a      	bne.n	800891a <xTaskPriorityInherit+0x8e>
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008908:	2201      	movs	r2, #1
 800890a:	fa02 f303 	lsl.w	r3, r2, r3
 800890e:	43da      	mvns	r2, r3
 8008910:	4b20      	ldr	r3, [pc, #128]	; (8008994 <xTaskPriorityInherit+0x108>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4013      	ands	r3, r2
 8008916:	4a1f      	ldr	r2, [pc, #124]	; (8008994 <xTaskPriorityInherit+0x108>)
 8008918:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800891a:	4b1c      	ldr	r3, [pc, #112]	; (800898c <xTaskPriorityInherit+0x100>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	62da      	str	r2, [r3, #44]	; 0x2c
					prvReaddTaskToReadyList( pxMutexHolderTCB );
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008928:	2201      	movs	r2, #1
 800892a:	409a      	lsls	r2, r3
 800892c:	4b19      	ldr	r3, [pc, #100]	; (8008994 <xTaskPriorityInherit+0x108>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4313      	orrs	r3, r2
 8008932:	4a18      	ldr	r2, [pc, #96]	; (8008994 <xTaskPriorityInherit+0x108>)
 8008934:	6013      	str	r3, [r2, #0]
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800893a:	4613      	mov	r3, r2
 800893c:	009b      	lsls	r3, r3, #2
 800893e:	4413      	add	r3, r2
 8008940:	009b      	lsls	r3, r3, #2
 8008942:	4a13      	ldr	r2, [pc, #76]	; (8008990 <xTaskPriorityInherit+0x104>)
 8008944:	441a      	add	r2, r3
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	3304      	adds	r3, #4
 800894a:	4619      	mov	r1, r3
 800894c:	4610      	mov	r0, r2
 800894e:	f7fd fe2c 	bl	80065aa <vListInsertEnd>
 8008952:	e004      	b.n	800895e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008954:	4b0d      	ldr	r3, [pc, #52]	; (800898c <xTaskPriorityInherit+0x100>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	4619      	mov	r1, r3
 8008962:	2049      	movs	r0, #73	; 0x49
 8008964:	f002 f898 	bl	800aa98 <SEGGER_SYSVIEW_RecordU32>

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008968:	2301      	movs	r3, #1
 800896a:	60fb      	str	r3, [r7, #12]
 800896c:	e008      	b.n	8008980 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008972:	4b06      	ldr	r3, [pc, #24]	; (800898c <xTaskPriorityInherit+0x100>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008978:	429a      	cmp	r2, r3
 800897a:	d201      	bcs.n	8008980 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800897c:	2301      	movs	r3, #1
 800897e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008980:	68fb      	ldr	r3, [r7, #12]
	}
 8008982:	4618      	mov	r0, r3
 8008984:	3710      	adds	r7, #16
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}
 800898a:	bf00      	nop
 800898c:	20000b70 	.word	0x20000b70
 8008990:	20000b74 	.word	0x20000b74
 8008994:	20000c78 	.word	0x20000c78

08008998 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008998:	b580      	push	{r7, lr}
 800899a:	b086      	sub	sp, #24
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80089a4:	2300      	movs	r3, #0
 80089a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d077      	beq.n	8008a9e <xTaskPriorityDisinherit+0x106>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80089ae:	4b3e      	ldr	r3, [pc, #248]	; (8008aa8 <xTaskPriorityDisinherit+0x110>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	693a      	ldr	r2, [r7, #16]
 80089b4:	429a      	cmp	r2, r3
 80089b6:	d00c      	beq.n	80089d2 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80089b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089bc:	b672      	cpsid	i
 80089be:	f383 8811 	msr	BASEPRI, r3
 80089c2:	f3bf 8f6f 	isb	sy
 80089c6:	f3bf 8f4f 	dsb	sy
 80089ca:	b662      	cpsie	i
 80089cc:	60fb      	str	r3, [r7, #12]
}
 80089ce:	bf00      	nop
 80089d0:	e7fe      	b.n	80089d0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d10c      	bne.n	80089f4 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80089da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089de:	b672      	cpsid	i
 80089e0:	f383 8811 	msr	BASEPRI, r3
 80089e4:	f3bf 8f6f 	isb	sy
 80089e8:	f3bf 8f4f 	dsb	sy
 80089ec:	b662      	cpsie	i
 80089ee:	60bb      	str	r3, [r7, #8]
}
 80089f0:	bf00      	nop
 80089f2:	e7fe      	b.n	80089f2 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089f8:	1e5a      	subs	r2, r3, #1
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d049      	beq.n	8008a9e <xTaskPriorityDisinherit+0x106>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d145      	bne.n	8008a9e <xTaskPriorityDisinherit+0x106>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	3304      	adds	r3, #4
 8008a16:	4618      	mov	r0, r3
 8008a18:	f7fd fe24 	bl	8006664 <uxListRemove>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d115      	bne.n	8008a4e <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a26:	4921      	ldr	r1, [pc, #132]	; (8008aac <xTaskPriorityDisinherit+0x114>)
 8008a28:	4613      	mov	r3, r2
 8008a2a:	009b      	lsls	r3, r3, #2
 8008a2c:	4413      	add	r3, r2
 8008a2e:	009b      	lsls	r3, r3, #2
 8008a30:	440b      	add	r3, r1
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d10a      	bne.n	8008a4e <xTaskPriorityDisinherit+0xb6>
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8008a42:	43da      	mvns	r2, r3
 8008a44:	4b1a      	ldr	r3, [pc, #104]	; (8008ab0 <xTaskPriorityDisinherit+0x118>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4013      	ands	r3, r2
 8008a4a:	4a19      	ldr	r2, [pc, #100]	; (8008ab0 <xTaskPriorityDisinherit+0x118>)
 8008a4c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	4619      	mov	r1, r3
 8008a52:	204a      	movs	r0, #74	; 0x4a
 8008a54:	f002 f820 	bl	800aa98 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a64:	f1c3 0207 	rsb	r2, r3, #7
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	619a      	str	r2, [r3, #24]
					prvReaddTaskToReadyList( pxTCB );
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a70:	2201      	movs	r2, #1
 8008a72:	409a      	lsls	r2, r3
 8008a74:	4b0e      	ldr	r3, [pc, #56]	; (8008ab0 <xTaskPriorityDisinherit+0x118>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	4a0d      	ldr	r2, [pc, #52]	; (8008ab0 <xTaskPriorityDisinherit+0x118>)
 8008a7c:	6013      	str	r3, [r2, #0]
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a82:	4613      	mov	r3, r2
 8008a84:	009b      	lsls	r3, r3, #2
 8008a86:	4413      	add	r3, r2
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	4a08      	ldr	r2, [pc, #32]	; (8008aac <xTaskPriorityDisinherit+0x114>)
 8008a8c:	441a      	add	r2, r3
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	3304      	adds	r3, #4
 8008a92:	4619      	mov	r1, r3
 8008a94:	4610      	mov	r0, r2
 8008a96:	f7fd fd88 	bl	80065aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008a9e:	697b      	ldr	r3, [r7, #20]
	}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3718      	adds	r7, #24
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}
 8008aa8:	20000b70 	.word	0x20000b70
 8008aac:	20000b74 	.word	0x20000b74
 8008ab0:	20000c78 	.word	0x20000c78

08008ab4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b088      	sub	sp, #32
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	f000 8090 	beq.w	8008bee <vTaskPriorityDisinheritAfterTimeout+0x13a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008ace:	69bb      	ldr	r3, [r7, #24]
 8008ad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d10c      	bne.n	8008af0 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8008ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ada:	b672      	cpsid	i
 8008adc:	f383 8811 	msr	BASEPRI, r3
 8008ae0:	f3bf 8f6f 	isb	sy
 8008ae4:	f3bf 8f4f 	dsb	sy
 8008ae8:	b662      	cpsie	i
 8008aea:	60fb      	str	r3, [r7, #12]
}
 8008aec:	bf00      	nop
 8008aee:	e7fe      	b.n	8008aee <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008af0:	69bb      	ldr	r3, [r7, #24]
 8008af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008af4:	683a      	ldr	r2, [r7, #0]
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d902      	bls.n	8008b00 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	61fb      	str	r3, [r7, #28]
 8008afe:	e002      	b.n	8008b06 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008b00:	69bb      	ldr	r3, [r7, #24]
 8008b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b04:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008b06:	69bb      	ldr	r3, [r7, #24]
 8008b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b0a:	69fa      	ldr	r2, [r7, #28]
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d06e      	beq.n	8008bee <vTaskPriorityDisinheritAfterTimeout+0x13a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008b10:	69bb      	ldr	r3, [r7, #24]
 8008b12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b14:	697a      	ldr	r2, [r7, #20]
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d169      	bne.n	8008bee <vTaskPriorityDisinheritAfterTimeout+0x13a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008b1a:	4b37      	ldr	r3, [pc, #220]	; (8008bf8 <vTaskPriorityDisinheritAfterTimeout+0x144>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	69ba      	ldr	r2, [r7, #24]
 8008b20:	429a      	cmp	r2, r3
 8008b22:	d10c      	bne.n	8008b3e <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8008b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b28:	b672      	cpsid	i
 8008b2a:	f383 8811 	msr	BASEPRI, r3
 8008b2e:	f3bf 8f6f 	isb	sy
 8008b32:	f3bf 8f4f 	dsb	sy
 8008b36:	b662      	cpsie	i
 8008b38:	60bb      	str	r3, [r7, #8]
}
 8008b3a:	bf00      	nop
 8008b3c:	e7fe      	b.n	8008b3c <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	4619      	mov	r1, r3
 8008b42:	204a      	movs	r0, #74	; 0x4a
 8008b44:	f001 ffa8 	bl	800aa98 <SEGGER_SYSVIEW_RecordU32>
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008b48:	69bb      	ldr	r3, [r7, #24]
 8008b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b4c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008b4e:	69bb      	ldr	r3, [r7, #24]
 8008b50:	69fa      	ldr	r2, [r7, #28]
 8008b52:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008b54:	69bb      	ldr	r3, [r7, #24]
 8008b56:	699b      	ldr	r3, [r3, #24]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	db04      	blt.n	8008b66 <vTaskPriorityDisinheritAfterTimeout+0xb2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b5c:	69fb      	ldr	r3, [r7, #28]
 8008b5e:	f1c3 0207 	rsb	r2, r3, #7
 8008b62:	69bb      	ldr	r3, [r7, #24]
 8008b64:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008b66:	69bb      	ldr	r3, [r7, #24]
 8008b68:	6959      	ldr	r1, [r3, #20]
 8008b6a:	693a      	ldr	r2, [r7, #16]
 8008b6c:	4613      	mov	r3, r2
 8008b6e:	009b      	lsls	r3, r3, #2
 8008b70:	4413      	add	r3, r2
 8008b72:	009b      	lsls	r3, r3, #2
 8008b74:	4a21      	ldr	r2, [pc, #132]	; (8008bfc <vTaskPriorityDisinheritAfterTimeout+0x148>)
 8008b76:	4413      	add	r3, r2
 8008b78:	4299      	cmp	r1, r3
 8008b7a:	d138      	bne.n	8008bee <vTaskPriorityDisinheritAfterTimeout+0x13a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b7c:	69bb      	ldr	r3, [r7, #24]
 8008b7e:	3304      	adds	r3, #4
 8008b80:	4618      	mov	r0, r3
 8008b82:	f7fd fd6f 	bl	8006664 <uxListRemove>
 8008b86:	4603      	mov	r3, r0
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d115      	bne.n	8008bb8 <vTaskPriorityDisinheritAfterTimeout+0x104>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008b8c:	69bb      	ldr	r3, [r7, #24]
 8008b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b90:	491a      	ldr	r1, [pc, #104]	; (8008bfc <vTaskPriorityDisinheritAfterTimeout+0x148>)
 8008b92:	4613      	mov	r3, r2
 8008b94:	009b      	lsls	r3, r3, #2
 8008b96:	4413      	add	r3, r2
 8008b98:	009b      	lsls	r3, r3, #2
 8008b9a:	440b      	add	r3, r1
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d10a      	bne.n	8008bb8 <vTaskPriorityDisinheritAfterTimeout+0x104>
 8008ba2:	69bb      	ldr	r3, [r7, #24]
 8008ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8008bac:	43da      	mvns	r2, r3
 8008bae:	4b14      	ldr	r3, [pc, #80]	; (8008c00 <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	4013      	ands	r3, r2
 8008bb4:	4a12      	ldr	r2, [pc, #72]	; (8008c00 <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 8008bb6:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008bb8:	69bb      	ldr	r3, [r7, #24]
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f002 fcec 	bl	800b598 <SEGGER_SYSVIEW_OnTaskStartReady>
 8008bc0:	69bb      	ldr	r3, [r7, #24]
 8008bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	409a      	lsls	r2, r3
 8008bc8:	4b0d      	ldr	r3, [pc, #52]	; (8008c00 <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	4a0c      	ldr	r2, [pc, #48]	; (8008c00 <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 8008bd0:	6013      	str	r3, [r2, #0]
 8008bd2:	69bb      	ldr	r3, [r7, #24]
 8008bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bd6:	4613      	mov	r3, r2
 8008bd8:	009b      	lsls	r3, r3, #2
 8008bda:	4413      	add	r3, r2
 8008bdc:	009b      	lsls	r3, r3, #2
 8008bde:	4a07      	ldr	r2, [pc, #28]	; (8008bfc <vTaskPriorityDisinheritAfterTimeout+0x148>)
 8008be0:	441a      	add	r2, r3
 8008be2:	69bb      	ldr	r3, [r7, #24]
 8008be4:	3304      	adds	r3, #4
 8008be6:	4619      	mov	r1, r3
 8008be8:	4610      	mov	r0, r2
 8008bea:	f7fd fcde 	bl	80065aa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008bee:	bf00      	nop
 8008bf0:	3720      	adds	r7, #32
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
 8008bf6:	bf00      	nop
 8008bf8:	20000b70 	.word	0x20000b70
 8008bfc:	20000b74 	.word	0x20000b74
 8008c00:	20000c78 	.word	0x20000c78

08008c04 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008c04:	b480      	push	{r7}
 8008c06:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008c08:	4b07      	ldr	r3, [pc, #28]	; (8008c28 <pvTaskIncrementMutexHeldCount+0x24>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d004      	beq.n	8008c1a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008c10:	4b05      	ldr	r3, [pc, #20]	; (8008c28 <pvTaskIncrementMutexHeldCount+0x24>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008c16:	3201      	adds	r2, #1
 8008c18:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8008c1a:	4b03      	ldr	r3, [pc, #12]	; (8008c28 <pvTaskIncrementMutexHeldCount+0x24>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
	}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr
 8008c28:	20000b70 	.word	0x20000b70

08008c2c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008c36:	4b32      	ldr	r3, [pc, #200]	; (8008d00 <prvAddCurrentTaskToDelayedList+0xd4>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c3c:	4b31      	ldr	r3, [pc, #196]	; (8008d04 <prvAddCurrentTaskToDelayedList+0xd8>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	3304      	adds	r3, #4
 8008c42:	4618      	mov	r0, r3
 8008c44:	f7fd fd0e 	bl	8006664 <uxListRemove>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d10b      	bne.n	8008c66 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008c4e:	4b2d      	ldr	r3, [pc, #180]	; (8008d04 <prvAddCurrentTaskToDelayedList+0xd8>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c54:	2201      	movs	r2, #1
 8008c56:	fa02 f303 	lsl.w	r3, r2, r3
 8008c5a:	43da      	mvns	r2, r3
 8008c5c:	4b2a      	ldr	r3, [pc, #168]	; (8008d08 <prvAddCurrentTaskToDelayedList+0xdc>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4013      	ands	r3, r2
 8008c62:	4a29      	ldr	r2, [pc, #164]	; (8008d08 <prvAddCurrentTaskToDelayedList+0xdc>)
 8008c64:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c6c:	d110      	bne.n	8008c90 <prvAddCurrentTaskToDelayedList+0x64>
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d00d      	beq.n	8008c90 <prvAddCurrentTaskToDelayedList+0x64>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
      traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8008c74:	4b23      	ldr	r3, [pc, #140]	; (8008d04 <prvAddCurrentTaskToDelayedList+0xd8>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	211b      	movs	r1, #27
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f002 fcce 	bl	800b61c <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c80:	4b20      	ldr	r3, [pc, #128]	; (8008d04 <prvAddCurrentTaskToDelayedList+0xd8>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	3304      	adds	r3, #4
 8008c86:	4619      	mov	r1, r3
 8008c88:	4820      	ldr	r0, [pc, #128]	; (8008d0c <prvAddCurrentTaskToDelayedList+0xe0>)
 8008c8a:	f7fd fc8e 	bl	80065aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008c8e:	e032      	b.n	8008cf6 <prvAddCurrentTaskToDelayedList+0xca>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008c90:	68fa      	ldr	r2, [r7, #12]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	4413      	add	r3, r2
 8008c96:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008c98:	4b1a      	ldr	r3, [pc, #104]	; (8008d04 <prvAddCurrentTaskToDelayedList+0xd8>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	68ba      	ldr	r2, [r7, #8]
 8008c9e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008ca0:	68ba      	ldr	r2, [r7, #8]
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d20f      	bcs.n	8008cc8 <prvAddCurrentTaskToDelayedList+0x9c>
        traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8008ca8:	4b16      	ldr	r3, [pc, #88]	; (8008d04 <prvAddCurrentTaskToDelayedList+0xd8>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	2104      	movs	r1, #4
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f002 fcb4 	bl	800b61c <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008cb4:	4b16      	ldr	r3, [pc, #88]	; (8008d10 <prvAddCurrentTaskToDelayedList+0xe4>)
 8008cb6:	681a      	ldr	r2, [r3, #0]
 8008cb8:	4b12      	ldr	r3, [pc, #72]	; (8008d04 <prvAddCurrentTaskToDelayedList+0xd8>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	3304      	adds	r3, #4
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	4610      	mov	r0, r2
 8008cc2:	f7fd fc96 	bl	80065f2 <vListInsert>
}
 8008cc6:	e016      	b.n	8008cf6 <prvAddCurrentTaskToDelayedList+0xca>
        traceMOVED_TASK_TO_DELAYED_LIST();
 8008cc8:	4b0e      	ldr	r3, [pc, #56]	; (8008d04 <prvAddCurrentTaskToDelayedList+0xd8>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	2104      	movs	r1, #4
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f002 fca4 	bl	800b61c <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008cd4:	4b0f      	ldr	r3, [pc, #60]	; (8008d14 <prvAddCurrentTaskToDelayedList+0xe8>)
 8008cd6:	681a      	ldr	r2, [r3, #0]
 8008cd8:	4b0a      	ldr	r3, [pc, #40]	; (8008d04 <prvAddCurrentTaskToDelayedList+0xd8>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	3304      	adds	r3, #4
 8008cde:	4619      	mov	r1, r3
 8008ce0:	4610      	mov	r0, r2
 8008ce2:	f7fd fc86 	bl	80065f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008ce6:	4b0c      	ldr	r3, [pc, #48]	; (8008d18 <prvAddCurrentTaskToDelayedList+0xec>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	68ba      	ldr	r2, [r7, #8]
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d202      	bcs.n	8008cf6 <prvAddCurrentTaskToDelayedList+0xca>
					xNextTaskUnblockTime = xTimeToWake;
 8008cf0:	4a09      	ldr	r2, [pc, #36]	; (8008d18 <prvAddCurrentTaskToDelayedList+0xec>)
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	6013      	str	r3, [r2, #0]
}
 8008cf6:	bf00      	nop
 8008cf8:	3710      	adds	r7, #16
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}
 8008cfe:	bf00      	nop
 8008d00:	20000c74 	.word	0x20000c74
 8008d04:	20000b70 	.word	0x20000b70
 8008d08:	20000c78 	.word	0x20000c78
 8008d0c:	20000c5c 	.word	0x20000c5c
 8008d10:	20000c2c 	.word	0x20000c2c
 8008d14:	20000c28 	.word	0x20000c28
 8008d18:	20000c90 	.word	0x20000c90

08008d1c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b08a      	sub	sp, #40	; 0x28
 8008d20:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008d22:	2300      	movs	r3, #0
 8008d24:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008d26:	f000 fb97 	bl	8009458 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008d2a:	4b1d      	ldr	r3, [pc, #116]	; (8008da0 <xTimerCreateTimerTask+0x84>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d021      	beq.n	8008d76 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008d32:	2300      	movs	r3, #0
 8008d34:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008d36:	2300      	movs	r3, #0
 8008d38:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008d3a:	1d3a      	adds	r2, r7, #4
 8008d3c:	f107 0108 	add.w	r1, r7, #8
 8008d40:	f107 030c 	add.w	r3, r7, #12
 8008d44:	4618      	mov	r0, r3
 8008d46:	f7f8 fabb 	bl	80012c0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008d4a:	6879      	ldr	r1, [r7, #4]
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	68fa      	ldr	r2, [r7, #12]
 8008d50:	9202      	str	r2, [sp, #8]
 8008d52:	9301      	str	r3, [sp, #4]
 8008d54:	2302      	movs	r3, #2
 8008d56:	9300      	str	r3, [sp, #0]
 8008d58:	2300      	movs	r3, #0
 8008d5a:	460a      	mov	r2, r1
 8008d5c:	4911      	ldr	r1, [pc, #68]	; (8008da4 <xTimerCreateTimerTask+0x88>)
 8008d5e:	4812      	ldr	r0, [pc, #72]	; (8008da8 <xTimerCreateTimerTask+0x8c>)
 8008d60:	f7fe fd3c 	bl	80077dc <xTaskCreateStatic>
 8008d64:	4603      	mov	r3, r0
 8008d66:	4a11      	ldr	r2, [pc, #68]	; (8008dac <xTimerCreateTimerTask+0x90>)
 8008d68:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008d6a:	4b10      	ldr	r3, [pc, #64]	; (8008dac <xTimerCreateTimerTask+0x90>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d001      	beq.n	8008d76 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008d72:	2301      	movs	r3, #1
 8008d74:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d10c      	bne.n	8008d96 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8008d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d80:	b672      	cpsid	i
 8008d82:	f383 8811 	msr	BASEPRI, r3
 8008d86:	f3bf 8f6f 	isb	sy
 8008d8a:	f3bf 8f4f 	dsb	sy
 8008d8e:	b662      	cpsie	i
 8008d90:	613b      	str	r3, [r7, #16]
}
 8008d92:	bf00      	nop
 8008d94:	e7fe      	b.n	8008d94 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8008d96:	697b      	ldr	r3, [r7, #20]
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3718      	adds	r7, #24
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}
 8008da0:	20000ccc 	.word	0x20000ccc
 8008da4:	08010468 	.word	0x08010468
 8008da8:	0800902d 	.word	0x0800902d
 8008dac:	20000cd0 	.word	0x20000cd0

08008db0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b088      	sub	sp, #32
 8008db4:	af02      	add	r7, sp, #8
 8008db6:	60f8      	str	r0, [r7, #12]
 8008db8:	60b9      	str	r1, [r7, #8]
 8008dba:	607a      	str	r2, [r7, #4]
 8008dbc:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8008dbe:	2028      	movs	r0, #40	; 0x28
 8008dc0:	f000 fdc8 	bl	8009954 <pvPortMalloc>
 8008dc4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d00d      	beq.n	8008de8 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	9301      	str	r3, [sp, #4]
 8008dd8:	6a3b      	ldr	r3, [r7, #32]
 8008dda:	9300      	str	r3, [sp, #0]
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	687a      	ldr	r2, [r7, #4]
 8008de0:	68b9      	ldr	r1, [r7, #8]
 8008de2:	68f8      	ldr	r0, [r7, #12]
 8008de4:	f000 f847 	bl	8008e76 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8008de8:	697b      	ldr	r3, [r7, #20]
	}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3718      	adds	r7, #24
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}

08008df2 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8008df2:	b580      	push	{r7, lr}
 8008df4:	b08a      	sub	sp, #40	; 0x28
 8008df6:	af02      	add	r7, sp, #8
 8008df8:	60f8      	str	r0, [r7, #12]
 8008dfa:	60b9      	str	r1, [r7, #8]
 8008dfc:	607a      	str	r2, [r7, #4]
 8008dfe:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8008e00:	2328      	movs	r3, #40	; 0x28
 8008e02:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	2b28      	cmp	r3, #40	; 0x28
 8008e08:	d00c      	beq.n	8008e24 <xTimerCreateStatic+0x32>
	__asm volatile
 8008e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e0e:	b672      	cpsid	i
 8008e10:	f383 8811 	msr	BASEPRI, r3
 8008e14:	f3bf 8f6f 	isb	sy
 8008e18:	f3bf 8f4f 	dsb	sy
 8008e1c:	b662      	cpsie	i
 8008e1e:	61bb      	str	r3, [r7, #24]
}
 8008e20:	bf00      	nop
 8008e22:	e7fe      	b.n	8008e22 <xTimerCreateStatic+0x30>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008e24:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8008e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d10c      	bne.n	8008e46 <xTimerCreateStatic+0x54>
	__asm volatile
 8008e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e30:	b672      	cpsid	i
 8008e32:	f383 8811 	msr	BASEPRI, r3
 8008e36:	f3bf 8f6f 	isb	sy
 8008e3a:	f3bf 8f4f 	dsb	sy
 8008e3e:	b662      	cpsie	i
 8008e40:	617b      	str	r3, [r7, #20]
}
 8008e42:	bf00      	nop
 8008e44:	e7fe      	b.n	8008e44 <xTimerCreateStatic+0x52>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8008e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e48:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8008e4a:	69fb      	ldr	r3, [r7, #28]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d00d      	beq.n	8008e6c <xTimerCreateStatic+0x7a>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8008e50:	69fb      	ldr	r3, [r7, #28]
 8008e52:	2202      	movs	r2, #2
 8008e54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008e58:	69fb      	ldr	r3, [r7, #28]
 8008e5a:	9301      	str	r3, [sp, #4]
 8008e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e5e:	9300      	str	r3, [sp, #0]
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	687a      	ldr	r2, [r7, #4]
 8008e64:	68b9      	ldr	r1, [r7, #8]
 8008e66:	68f8      	ldr	r0, [r7, #12]
 8008e68:	f000 f805 	bl	8008e76 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8008e6c:	69fb      	ldr	r3, [r7, #28]
	}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3720      	adds	r7, #32
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}

08008e76 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8008e76:	b580      	push	{r7, lr}
 8008e78:	b086      	sub	sp, #24
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	60f8      	str	r0, [r7, #12]
 8008e7e:	60b9      	str	r1, [r7, #8]
 8008e80:	607a      	str	r2, [r7, #4]
 8008e82:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d10c      	bne.n	8008ea4 <prvInitialiseNewTimer+0x2e>
	__asm volatile
 8008e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e8e:	b672      	cpsid	i
 8008e90:	f383 8811 	msr	BASEPRI, r3
 8008e94:	f3bf 8f6f 	isb	sy
 8008e98:	f3bf 8f4f 	dsb	sy
 8008e9c:	b662      	cpsie	i
 8008e9e:	617b      	str	r3, [r7, #20]
}
 8008ea0:	bf00      	nop
 8008ea2:	e7fe      	b.n	8008ea2 <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 8008ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d01e      	beq.n	8008ee8 <prvInitialiseNewTimer+0x72>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8008eaa:	f000 fad5 	bl	8009458 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8008eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb0:	68fa      	ldr	r2, [r7, #12]
 8008eb2:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8008eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb6:	68ba      	ldr	r2, [r7, #8]
 8008eb8:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8008eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ebc:	683a      	ldr	r2, [r7, #0]
 8008ebe:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8008ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec2:	6a3a      	ldr	r2, [r7, #32]
 8008ec4:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8008ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec8:	3304      	adds	r3, #4
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f7fd fb60 	bl	8006590 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d008      	beq.n	8008ee8 <prvInitialiseNewTimer+0x72>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8008ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008edc:	f043 0304 	orr.w	r3, r3, #4
 8008ee0:	b2da      	uxtb	r2, r3
 8008ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8008ee8:	bf00      	nop
 8008eea:	3718      	adds	r7, #24
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}

08008ef0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b08a      	sub	sp, #40	; 0x28
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	60f8      	str	r0, [r7, #12]
 8008ef8:	60b9      	str	r1, [r7, #8]
 8008efa:	607a      	str	r2, [r7, #4]
 8008efc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008efe:	2300      	movs	r3, #0
 8008f00:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d10c      	bne.n	8008f22 <xTimerGenericCommand+0x32>
	__asm volatile
 8008f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f0c:	b672      	cpsid	i
 8008f0e:	f383 8811 	msr	BASEPRI, r3
 8008f12:	f3bf 8f6f 	isb	sy
 8008f16:	f3bf 8f4f 	dsb	sy
 8008f1a:	b662      	cpsie	i
 8008f1c:	623b      	str	r3, [r7, #32]
}
 8008f1e:	bf00      	nop
 8008f20:	e7fe      	b.n	8008f20 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008f22:	4b1a      	ldr	r3, [pc, #104]	; (8008f8c <xTimerGenericCommand+0x9c>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d02a      	beq.n	8008f80 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	2b05      	cmp	r3, #5
 8008f3a:	dc18      	bgt.n	8008f6e <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008f3c:	f7ff fc88 	bl	8008850 <xTaskGetSchedulerState>
 8008f40:	4603      	mov	r3, r0
 8008f42:	2b02      	cmp	r3, #2
 8008f44:	d109      	bne.n	8008f5a <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008f46:	4b11      	ldr	r3, [pc, #68]	; (8008f8c <xTimerGenericCommand+0x9c>)
 8008f48:	6818      	ldr	r0, [r3, #0]
 8008f4a:	f107 0114 	add.w	r1, r7, #20
 8008f4e:	2300      	movs	r3, #0
 8008f50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f52:	f7fd fd05 	bl	8006960 <xQueueGenericSend>
 8008f56:	6278      	str	r0, [r7, #36]	; 0x24
 8008f58:	e012      	b.n	8008f80 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008f5a:	4b0c      	ldr	r3, [pc, #48]	; (8008f8c <xTimerGenericCommand+0x9c>)
 8008f5c:	6818      	ldr	r0, [r3, #0]
 8008f5e:	f107 0114 	add.w	r1, r7, #20
 8008f62:	2300      	movs	r3, #0
 8008f64:	2200      	movs	r2, #0
 8008f66:	f7fd fcfb 	bl	8006960 <xQueueGenericSend>
 8008f6a:	6278      	str	r0, [r7, #36]	; 0x24
 8008f6c:	e008      	b.n	8008f80 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008f6e:	4b07      	ldr	r3, [pc, #28]	; (8008f8c <xTimerGenericCommand+0x9c>)
 8008f70:	6818      	ldr	r0, [r3, #0]
 8008f72:	f107 0114 	add.w	r1, r7, #20
 8008f76:	2300      	movs	r3, #0
 8008f78:	683a      	ldr	r2, [r7, #0]
 8008f7a:	f7fd fe1f 	bl	8006bbc <xQueueGenericSendFromISR>
 8008f7e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3728      	adds	r7, #40	; 0x28
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}
 8008f8a:	bf00      	nop
 8008f8c:	20000ccc 	.word	0x20000ccc

08008f90 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b088      	sub	sp, #32
 8008f94:	af02      	add	r7, sp, #8
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f9a:	4b23      	ldr	r3, [pc, #140]	; (8009028 <prvProcessExpiredTimer+0x98>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	68db      	ldr	r3, [r3, #12]
 8008fa0:	68db      	ldr	r3, [r3, #12]
 8008fa2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	3304      	adds	r3, #4
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f7fd fb5b 	bl	8006664 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008fb4:	f003 0304 	and.w	r3, r3, #4
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d024      	beq.n	8009006 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	699a      	ldr	r2, [r3, #24]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	18d1      	adds	r1, r2, r3
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	683a      	ldr	r2, [r7, #0]
 8008fc8:	6978      	ldr	r0, [r7, #20]
 8008fca:	f000 f8d3 	bl	8009174 <prvInsertTimerInActiveList>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d021      	beq.n	8009018 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	9300      	str	r3, [sp, #0]
 8008fd8:	2300      	movs	r3, #0
 8008fda:	687a      	ldr	r2, [r7, #4]
 8008fdc:	2100      	movs	r1, #0
 8008fde:	6978      	ldr	r0, [r7, #20]
 8008fe0:	f7ff ff86 	bl	8008ef0 <xTimerGenericCommand>
 8008fe4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d115      	bne.n	8009018 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8008fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff0:	b672      	cpsid	i
 8008ff2:	f383 8811 	msr	BASEPRI, r3
 8008ff6:	f3bf 8f6f 	isb	sy
 8008ffa:	f3bf 8f4f 	dsb	sy
 8008ffe:	b662      	cpsie	i
 8009000:	60fb      	str	r3, [r7, #12]
}
 8009002:	bf00      	nop
 8009004:	e7fe      	b.n	8009004 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800900c:	f023 0301 	bic.w	r3, r3, #1
 8009010:	b2da      	uxtb	r2, r3
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	6a1b      	ldr	r3, [r3, #32]
 800901c:	6978      	ldr	r0, [r7, #20]
 800901e:	4798      	blx	r3
}
 8009020:	bf00      	nop
 8009022:	3718      	adds	r7, #24
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}
 8009028:	20000cc4 	.word	0x20000cc4

0800902c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b084      	sub	sp, #16
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009034:	f107 0308 	add.w	r3, r7, #8
 8009038:	4618      	mov	r0, r3
 800903a:	f000 f857 	bl	80090ec <prvGetNextExpireTime>
 800903e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	4619      	mov	r1, r3
 8009044:	68f8      	ldr	r0, [r7, #12]
 8009046:	f000 f803 	bl	8009050 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800904a:	f000 f8d5 	bl	80091f8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800904e:	e7f1      	b.n	8009034 <prvTimerTask+0x8>

08009050 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b084      	sub	sp, #16
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800905a:	f7fe ffd5 	bl	8008008 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800905e:	f107 0308 	add.w	r3, r7, #8
 8009062:	4618      	mov	r0, r3
 8009064:	f000 f866 	bl	8009134 <prvSampleTimeNow>
 8009068:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d130      	bne.n	80090d2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d10a      	bne.n	800908c <prvProcessTimerOrBlockTask+0x3c>
 8009076:	687a      	ldr	r2, [r7, #4]
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	429a      	cmp	r2, r3
 800907c:	d806      	bhi.n	800908c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800907e:	f7fe ffd1 	bl	8008024 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009082:	68f9      	ldr	r1, [r7, #12]
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f7ff ff83 	bl	8008f90 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800908a:	e024      	b.n	80090d6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d008      	beq.n	80090a4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009092:	4b13      	ldr	r3, [pc, #76]	; (80090e0 <prvProcessTimerOrBlockTask+0x90>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d101      	bne.n	80090a0 <prvProcessTimerOrBlockTask+0x50>
 800909c:	2301      	movs	r3, #1
 800909e:	e000      	b.n	80090a2 <prvProcessTimerOrBlockTask+0x52>
 80090a0:	2300      	movs	r3, #0
 80090a2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80090a4:	4b0f      	ldr	r3, [pc, #60]	; (80090e4 <prvProcessTimerOrBlockTask+0x94>)
 80090a6:	6818      	ldr	r0, [r3, #0]
 80090a8:	687a      	ldr	r2, [r7, #4]
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	1ad3      	subs	r3, r2, r3
 80090ae:	683a      	ldr	r2, [r7, #0]
 80090b0:	4619      	mov	r1, r3
 80090b2:	f7fe fb5f 	bl	8007774 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80090b6:	f7fe ffb5 	bl	8008024 <xTaskResumeAll>
 80090ba:	4603      	mov	r3, r0
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d10a      	bne.n	80090d6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80090c0:	4b09      	ldr	r3, [pc, #36]	; (80090e8 <prvProcessTimerOrBlockTask+0x98>)
 80090c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090c6:	601a      	str	r2, [r3, #0]
 80090c8:	f3bf 8f4f 	dsb	sy
 80090cc:	f3bf 8f6f 	isb	sy
}
 80090d0:	e001      	b.n	80090d6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80090d2:	f7fe ffa7 	bl	8008024 <xTaskResumeAll>
}
 80090d6:	bf00      	nop
 80090d8:	3710      	adds	r7, #16
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
 80090de:	bf00      	nop
 80090e0:	20000cc8 	.word	0x20000cc8
 80090e4:	20000ccc 	.word	0x20000ccc
 80090e8:	e000ed04 	.word	0xe000ed04

080090ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80090ec:	b480      	push	{r7}
 80090ee:	b085      	sub	sp, #20
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80090f4:	4b0e      	ldr	r3, [pc, #56]	; (8009130 <prvGetNextExpireTime+0x44>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d101      	bne.n	8009102 <prvGetNextExpireTime+0x16>
 80090fe:	2201      	movs	r2, #1
 8009100:	e000      	b.n	8009104 <prvGetNextExpireTime+0x18>
 8009102:	2200      	movs	r2, #0
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d105      	bne.n	800911c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009110:	4b07      	ldr	r3, [pc, #28]	; (8009130 <prvGetNextExpireTime+0x44>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	68db      	ldr	r3, [r3, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	60fb      	str	r3, [r7, #12]
 800911a:	e001      	b.n	8009120 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800911c:	2300      	movs	r3, #0
 800911e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009120:	68fb      	ldr	r3, [r7, #12]
}
 8009122:	4618      	mov	r0, r3
 8009124:	3714      	adds	r7, #20
 8009126:	46bd      	mov	sp, r7
 8009128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912c:	4770      	bx	lr
 800912e:	bf00      	nop
 8009130:	20000cc4 	.word	0x20000cc4

08009134 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b084      	sub	sp, #16
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800913c:	f7ff f814 	bl	8008168 <xTaskGetTickCount>
 8009140:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009142:	4b0b      	ldr	r3, [pc, #44]	; (8009170 <prvSampleTimeNow+0x3c>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	68fa      	ldr	r2, [r7, #12]
 8009148:	429a      	cmp	r2, r3
 800914a:	d205      	bcs.n	8009158 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800914c:	f000 f91e 	bl	800938c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2201      	movs	r2, #1
 8009154:	601a      	str	r2, [r3, #0]
 8009156:	e002      	b.n	800915e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2200      	movs	r2, #0
 800915c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800915e:	4a04      	ldr	r2, [pc, #16]	; (8009170 <prvSampleTimeNow+0x3c>)
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009164:	68fb      	ldr	r3, [r7, #12]
}
 8009166:	4618      	mov	r0, r3
 8009168:	3710      	adds	r7, #16
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
 800916e:	bf00      	nop
 8009170:	20000cd4 	.word	0x20000cd4

08009174 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b086      	sub	sp, #24
 8009178:	af00      	add	r7, sp, #0
 800917a:	60f8      	str	r0, [r7, #12]
 800917c:	60b9      	str	r1, [r7, #8]
 800917e:	607a      	str	r2, [r7, #4]
 8009180:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009182:	2300      	movs	r3, #0
 8009184:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	68ba      	ldr	r2, [r7, #8]
 800918a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	68fa      	ldr	r2, [r7, #12]
 8009190:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009192:	68ba      	ldr	r2, [r7, #8]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	429a      	cmp	r2, r3
 8009198:	d812      	bhi.n	80091c0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800919a:	687a      	ldr	r2, [r7, #4]
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	1ad2      	subs	r2, r2, r3
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	699b      	ldr	r3, [r3, #24]
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d302      	bcc.n	80091ae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80091a8:	2301      	movs	r3, #1
 80091aa:	617b      	str	r3, [r7, #20]
 80091ac:	e01b      	b.n	80091e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80091ae:	4b10      	ldr	r3, [pc, #64]	; (80091f0 <prvInsertTimerInActiveList+0x7c>)
 80091b0:	681a      	ldr	r2, [r3, #0]
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	3304      	adds	r3, #4
 80091b6:	4619      	mov	r1, r3
 80091b8:	4610      	mov	r0, r2
 80091ba:	f7fd fa1a 	bl	80065f2 <vListInsert>
 80091be:	e012      	b.n	80091e6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80091c0:	687a      	ldr	r2, [r7, #4]
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	429a      	cmp	r2, r3
 80091c6:	d206      	bcs.n	80091d6 <prvInsertTimerInActiveList+0x62>
 80091c8:	68ba      	ldr	r2, [r7, #8]
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d302      	bcc.n	80091d6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80091d0:	2301      	movs	r3, #1
 80091d2:	617b      	str	r3, [r7, #20]
 80091d4:	e007      	b.n	80091e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80091d6:	4b07      	ldr	r3, [pc, #28]	; (80091f4 <prvInsertTimerInActiveList+0x80>)
 80091d8:	681a      	ldr	r2, [r3, #0]
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	3304      	adds	r3, #4
 80091de:	4619      	mov	r1, r3
 80091e0:	4610      	mov	r0, r2
 80091e2:	f7fd fa06 	bl	80065f2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80091e6:	697b      	ldr	r3, [r7, #20]
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3718      	adds	r7, #24
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}
 80091f0:	20000cc8 	.word	0x20000cc8
 80091f4:	20000cc4 	.word	0x20000cc4

080091f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b08c      	sub	sp, #48	; 0x30
 80091fc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80091fe:	e0b2      	b.n	8009366 <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	2b00      	cmp	r3, #0
 8009204:	f2c0 80ae 	blt.w	8009364 <prvProcessReceivedCommands+0x16c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800920c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800920e:	695b      	ldr	r3, [r3, #20]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d004      	beq.n	800921e <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009216:	3304      	adds	r3, #4
 8009218:	4618      	mov	r0, r3
 800921a:	f7fd fa23 	bl	8006664 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800921e:	1d3b      	adds	r3, r7, #4
 8009220:	4618      	mov	r0, r3
 8009222:	f7ff ff87 	bl	8009134 <prvSampleTimeNow>
 8009226:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	2b09      	cmp	r3, #9
 800922c:	f200 809b 	bhi.w	8009366 <prvProcessReceivedCommands+0x16e>
 8009230:	a201      	add	r2, pc, #4	; (adr r2, 8009238 <prvProcessReceivedCommands+0x40>)
 8009232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009236:	bf00      	nop
 8009238:	08009261 	.word	0x08009261
 800923c:	08009261 	.word	0x08009261
 8009240:	08009261 	.word	0x08009261
 8009244:	080092d9 	.word	0x080092d9
 8009248:	080092ed 	.word	0x080092ed
 800924c:	0800933b 	.word	0x0800933b
 8009250:	08009261 	.word	0x08009261
 8009254:	08009261 	.word	0x08009261
 8009258:	080092d9 	.word	0x080092d9
 800925c:	080092ed 	.word	0x080092ed
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009262:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009266:	f043 0301 	orr.w	r3, r3, #1
 800926a:	b2da      	uxtb	r2, r3
 800926c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009272:	68fa      	ldr	r2, [r7, #12]
 8009274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009276:	699b      	ldr	r3, [r3, #24]
 8009278:	18d1      	adds	r1, r2, r3
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	6a3a      	ldr	r2, [r7, #32]
 800927e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009280:	f7ff ff78 	bl	8009174 <prvInsertTimerInActiveList>
 8009284:	4603      	mov	r3, r0
 8009286:	2b00      	cmp	r3, #0
 8009288:	d06d      	beq.n	8009366 <prvProcessReceivedCommands+0x16e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800928a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800928c:	6a1b      	ldr	r3, [r3, #32]
 800928e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009290:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009294:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009298:	f003 0304 	and.w	r3, r3, #4
 800929c:	2b00      	cmp	r3, #0
 800929e:	d062      	beq.n	8009366 <prvProcessReceivedCommands+0x16e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80092a0:	68fa      	ldr	r2, [r7, #12]
 80092a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a4:	699b      	ldr	r3, [r3, #24]
 80092a6:	441a      	add	r2, r3
 80092a8:	2300      	movs	r3, #0
 80092aa:	9300      	str	r3, [sp, #0]
 80092ac:	2300      	movs	r3, #0
 80092ae:	2100      	movs	r1, #0
 80092b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80092b2:	f7ff fe1d 	bl	8008ef0 <xTimerGenericCommand>
 80092b6:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80092b8:	69fb      	ldr	r3, [r7, #28]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d153      	bne.n	8009366 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 80092be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c2:	b672      	cpsid	i
 80092c4:	f383 8811 	msr	BASEPRI, r3
 80092c8:	f3bf 8f6f 	isb	sy
 80092cc:	f3bf 8f4f 	dsb	sy
 80092d0:	b662      	cpsie	i
 80092d2:	61bb      	str	r3, [r7, #24]
}
 80092d4:	bf00      	nop
 80092d6:	e7fe      	b.n	80092d6 <prvProcessReceivedCommands+0xde>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80092d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80092de:	f023 0301 	bic.w	r3, r3, #1
 80092e2:	b2da      	uxtb	r2, r3
 80092e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 80092ea:	e03c      	b.n	8009366 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80092ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80092f2:	f043 0301 	orr.w	r3, r3, #1
 80092f6:	b2da      	uxtb	r2, r3
 80092f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80092fe:	68fa      	ldr	r2, [r7, #12]
 8009300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009302:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009306:	699b      	ldr	r3, [r3, #24]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d10c      	bne.n	8009326 <prvProcessReceivedCommands+0x12e>
	__asm volatile
 800930c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009310:	b672      	cpsid	i
 8009312:	f383 8811 	msr	BASEPRI, r3
 8009316:	f3bf 8f6f 	isb	sy
 800931a:	f3bf 8f4f 	dsb	sy
 800931e:	b662      	cpsie	i
 8009320:	617b      	str	r3, [r7, #20]
}
 8009322:	bf00      	nop
 8009324:	e7fe      	b.n	8009324 <prvProcessReceivedCommands+0x12c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009328:	699a      	ldr	r2, [r3, #24]
 800932a:	6a3b      	ldr	r3, [r7, #32]
 800932c:	18d1      	adds	r1, r2, r3
 800932e:	6a3b      	ldr	r3, [r7, #32]
 8009330:	6a3a      	ldr	r2, [r7, #32]
 8009332:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009334:	f7ff ff1e 	bl	8009174 <prvInsertTimerInActiveList>
					break;
 8009338:	e015      	b.n	8009366 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800933a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800933c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009340:	f003 0302 	and.w	r3, r3, #2
 8009344:	2b00      	cmp	r3, #0
 8009346:	d103      	bne.n	8009350 <prvProcessReceivedCommands+0x158>
						{
							vPortFree( pxTimer );
 8009348:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800934a:	f000 fbcd 	bl	8009ae8 <vPortFree>
 800934e:	e00a      	b.n	8009366 <prvProcessReceivedCommands+0x16e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009352:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009356:	f023 0301 	bic.w	r3, r3, #1
 800935a:	b2da      	uxtb	r2, r3
 800935c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800935e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009362:	e000      	b.n	8009366 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009364:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009366:	4b08      	ldr	r3, [pc, #32]	; (8009388 <prvProcessReceivedCommands+0x190>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f107 0108 	add.w	r1, r7, #8
 800936e:	2200      	movs	r2, #0
 8009370:	4618      	mov	r0, r3
 8009372:	f7fd fd81 	bl	8006e78 <xQueueReceive>
 8009376:	4603      	mov	r3, r0
 8009378:	2b00      	cmp	r3, #0
 800937a:	f47f af41 	bne.w	8009200 <prvProcessReceivedCommands+0x8>
	}
}
 800937e:	bf00      	nop
 8009380:	bf00      	nop
 8009382:	3728      	adds	r7, #40	; 0x28
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}
 8009388:	20000ccc 	.word	0x20000ccc

0800938c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b088      	sub	sp, #32
 8009390:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009392:	e04a      	b.n	800942a <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009394:	4b2e      	ldr	r3, [pc, #184]	; (8009450 <prvSwitchTimerLists+0xc4>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	68db      	ldr	r3, [r3, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800939e:	4b2c      	ldr	r3, [pc, #176]	; (8009450 <prvSwitchTimerLists+0xc4>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	68db      	ldr	r3, [r3, #12]
 80093a4:	68db      	ldr	r3, [r3, #12]
 80093a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	3304      	adds	r3, #4
 80093ac:	4618      	mov	r0, r3
 80093ae:	f7fd f959 	bl	8006664 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	6a1b      	ldr	r3, [r3, #32]
 80093b6:	68f8      	ldr	r0, [r7, #12]
 80093b8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80093c0:	f003 0304 	and.w	r3, r3, #4
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d030      	beq.n	800942a <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	699b      	ldr	r3, [r3, #24]
 80093cc:	693a      	ldr	r2, [r7, #16]
 80093ce:	4413      	add	r3, r2
 80093d0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80093d2:	68ba      	ldr	r2, [r7, #8]
 80093d4:	693b      	ldr	r3, [r7, #16]
 80093d6:	429a      	cmp	r2, r3
 80093d8:	d90e      	bls.n	80093f8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	68ba      	ldr	r2, [r7, #8]
 80093de:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	68fa      	ldr	r2, [r7, #12]
 80093e4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80093e6:	4b1a      	ldr	r3, [pc, #104]	; (8009450 <prvSwitchTimerLists+0xc4>)
 80093e8:	681a      	ldr	r2, [r3, #0]
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	3304      	adds	r3, #4
 80093ee:	4619      	mov	r1, r3
 80093f0:	4610      	mov	r0, r2
 80093f2:	f7fd f8fe 	bl	80065f2 <vListInsert>
 80093f6:	e018      	b.n	800942a <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80093f8:	2300      	movs	r3, #0
 80093fa:	9300      	str	r3, [sp, #0]
 80093fc:	2300      	movs	r3, #0
 80093fe:	693a      	ldr	r2, [r7, #16]
 8009400:	2100      	movs	r1, #0
 8009402:	68f8      	ldr	r0, [r7, #12]
 8009404:	f7ff fd74 	bl	8008ef0 <xTimerGenericCommand>
 8009408:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d10c      	bne.n	800942a <prvSwitchTimerLists+0x9e>
	__asm volatile
 8009410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009414:	b672      	cpsid	i
 8009416:	f383 8811 	msr	BASEPRI, r3
 800941a:	f3bf 8f6f 	isb	sy
 800941e:	f3bf 8f4f 	dsb	sy
 8009422:	b662      	cpsie	i
 8009424:	603b      	str	r3, [r7, #0]
}
 8009426:	bf00      	nop
 8009428:	e7fe      	b.n	8009428 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800942a:	4b09      	ldr	r3, [pc, #36]	; (8009450 <prvSwitchTimerLists+0xc4>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d1af      	bne.n	8009394 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009434:	4b06      	ldr	r3, [pc, #24]	; (8009450 <prvSwitchTimerLists+0xc4>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800943a:	4b06      	ldr	r3, [pc, #24]	; (8009454 <prvSwitchTimerLists+0xc8>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	4a04      	ldr	r2, [pc, #16]	; (8009450 <prvSwitchTimerLists+0xc4>)
 8009440:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009442:	4a04      	ldr	r2, [pc, #16]	; (8009454 <prvSwitchTimerLists+0xc8>)
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	6013      	str	r3, [r2, #0]
}
 8009448:	bf00      	nop
 800944a:	3718      	adds	r7, #24
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}
 8009450:	20000cc4 	.word	0x20000cc4
 8009454:	20000cc8 	.word	0x20000cc8

08009458 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b082      	sub	sp, #8
 800945c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800945e:	f000 f945 	bl	80096ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009462:	4b15      	ldr	r3, [pc, #84]	; (80094b8 <prvCheckForValidListAndQueue+0x60>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d120      	bne.n	80094ac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800946a:	4814      	ldr	r0, [pc, #80]	; (80094bc <prvCheckForValidListAndQueue+0x64>)
 800946c:	f7fd f870 	bl	8006550 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009470:	4813      	ldr	r0, [pc, #76]	; (80094c0 <prvCheckForValidListAndQueue+0x68>)
 8009472:	f7fd f86d 	bl	8006550 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009476:	4b13      	ldr	r3, [pc, #76]	; (80094c4 <prvCheckForValidListAndQueue+0x6c>)
 8009478:	4a10      	ldr	r2, [pc, #64]	; (80094bc <prvCheckForValidListAndQueue+0x64>)
 800947a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800947c:	4b12      	ldr	r3, [pc, #72]	; (80094c8 <prvCheckForValidListAndQueue+0x70>)
 800947e:	4a10      	ldr	r2, [pc, #64]	; (80094c0 <prvCheckForValidListAndQueue+0x68>)
 8009480:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009482:	2300      	movs	r3, #0
 8009484:	9300      	str	r3, [sp, #0]
 8009486:	4b11      	ldr	r3, [pc, #68]	; (80094cc <prvCheckForValidListAndQueue+0x74>)
 8009488:	4a11      	ldr	r2, [pc, #68]	; (80094d0 <prvCheckForValidListAndQueue+0x78>)
 800948a:	210c      	movs	r1, #12
 800948c:	200a      	movs	r0, #10
 800948e:	f7fd f97d 	bl	800678c <xQueueGenericCreateStatic>
 8009492:	4603      	mov	r3, r0
 8009494:	4a08      	ldr	r2, [pc, #32]	; (80094b8 <prvCheckForValidListAndQueue+0x60>)
 8009496:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009498:	4b07      	ldr	r3, [pc, #28]	; (80094b8 <prvCheckForValidListAndQueue+0x60>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d005      	beq.n	80094ac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80094a0:	4b05      	ldr	r3, [pc, #20]	; (80094b8 <prvCheckForValidListAndQueue+0x60>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	490b      	ldr	r1, [pc, #44]	; (80094d4 <prvCheckForValidListAndQueue+0x7c>)
 80094a6:	4618      	mov	r0, r3
 80094a8:	f7fe f932 	bl	8007710 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80094ac:	f000 f952 	bl	8009754 <vPortExitCritical>
}
 80094b0:	bf00      	nop
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}
 80094b6:	bf00      	nop
 80094b8:	20000ccc 	.word	0x20000ccc
 80094bc:	20000c9c 	.word	0x20000c9c
 80094c0:	20000cb0 	.word	0x20000cb0
 80094c4:	20000cc4 	.word	0x20000cc4
 80094c8:	20000cc8 	.word	0x20000cc8
 80094cc:	20000d50 	.word	0x20000d50
 80094d0:	20000cd8 	.word	0x20000cd8
 80094d4:	08010470 	.word	0x08010470

080094d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80094d8:	b480      	push	{r7}
 80094da:	b085      	sub	sp, #20
 80094dc:	af00      	add	r7, sp, #0
 80094de:	60f8      	str	r0, [r7, #12]
 80094e0:	60b9      	str	r1, [r7, #8]
 80094e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	3b04      	subs	r3, #4
 80094e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80094f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	3b04      	subs	r3, #4
 80094f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	f023 0201 	bic.w	r2, r3, #1
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	3b04      	subs	r3, #4
 8009506:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009508:	4a0c      	ldr	r2, [pc, #48]	; (800953c <pxPortInitialiseStack+0x64>)
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	3b14      	subs	r3, #20
 8009512:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009514:	687a      	ldr	r2, [r7, #4]
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	3b04      	subs	r3, #4
 800951e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	f06f 0202 	mvn.w	r2, #2
 8009526:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	3b20      	subs	r3, #32
 800952c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800952e:	68fb      	ldr	r3, [r7, #12]
}
 8009530:	4618      	mov	r0, r3
 8009532:	3714      	adds	r7, #20
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr
 800953c:	08009541 	.word	0x08009541

08009540 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009540:	b480      	push	{r7}
 8009542:	b085      	sub	sp, #20
 8009544:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009546:	2300      	movs	r3, #0
 8009548:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800954a:	4b14      	ldr	r3, [pc, #80]	; (800959c <prvTaskExitError+0x5c>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009552:	d00c      	beq.n	800956e <prvTaskExitError+0x2e>
	__asm volatile
 8009554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009558:	b672      	cpsid	i
 800955a:	f383 8811 	msr	BASEPRI, r3
 800955e:	f3bf 8f6f 	isb	sy
 8009562:	f3bf 8f4f 	dsb	sy
 8009566:	b662      	cpsie	i
 8009568:	60fb      	str	r3, [r7, #12]
}
 800956a:	bf00      	nop
 800956c:	e7fe      	b.n	800956c <prvTaskExitError+0x2c>
	__asm volatile
 800956e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009572:	b672      	cpsid	i
 8009574:	f383 8811 	msr	BASEPRI, r3
 8009578:	f3bf 8f6f 	isb	sy
 800957c:	f3bf 8f4f 	dsb	sy
 8009580:	b662      	cpsie	i
 8009582:	60bb      	str	r3, [r7, #8]
}
 8009584:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009586:	bf00      	nop
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d0fc      	beq.n	8009588 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800958e:	bf00      	nop
 8009590:	bf00      	nop
 8009592:	3714      	adds	r7, #20
 8009594:	46bd      	mov	sp, r7
 8009596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959a:	4770      	bx	lr
 800959c:	2000000c 	.word	0x2000000c

080095a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80095a0:	4b07      	ldr	r3, [pc, #28]	; (80095c0 <pxCurrentTCBConst2>)
 80095a2:	6819      	ldr	r1, [r3, #0]
 80095a4:	6808      	ldr	r0, [r1, #0]
 80095a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095aa:	f380 8809 	msr	PSP, r0
 80095ae:	f3bf 8f6f 	isb	sy
 80095b2:	f04f 0000 	mov.w	r0, #0
 80095b6:	f380 8811 	msr	BASEPRI, r0
 80095ba:	4770      	bx	lr
 80095bc:	f3af 8000 	nop.w

080095c0 <pxCurrentTCBConst2>:
 80095c0:	20000b70 	.word	0x20000b70
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80095c4:	bf00      	nop
 80095c6:	bf00      	nop

080095c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80095c8:	4808      	ldr	r0, [pc, #32]	; (80095ec <prvPortStartFirstTask+0x24>)
 80095ca:	6800      	ldr	r0, [r0, #0]
 80095cc:	6800      	ldr	r0, [r0, #0]
 80095ce:	f380 8808 	msr	MSP, r0
 80095d2:	f04f 0000 	mov.w	r0, #0
 80095d6:	f380 8814 	msr	CONTROL, r0
 80095da:	b662      	cpsie	i
 80095dc:	b661      	cpsie	f
 80095de:	f3bf 8f4f 	dsb	sy
 80095e2:	f3bf 8f6f 	isb	sy
 80095e6:	df00      	svc	0
 80095e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80095ea:	bf00      	nop
 80095ec:	e000ed08 	.word	0xe000ed08

080095f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b084      	sub	sp, #16
 80095f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80095f6:	4b37      	ldr	r3, [pc, #220]	; (80096d4 <xPortStartScheduler+0xe4>)
 80095f8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	781b      	ldrb	r3, [r3, #0]
 80095fe:	b2db      	uxtb	r3, r3
 8009600:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	22ff      	movs	r2, #255	; 0xff
 8009606:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	781b      	ldrb	r3, [r3, #0]
 800960c:	b2db      	uxtb	r3, r3
 800960e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009610:	78fb      	ldrb	r3, [r7, #3]
 8009612:	b2db      	uxtb	r3, r3
 8009614:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009618:	b2da      	uxtb	r2, r3
 800961a:	4b2f      	ldr	r3, [pc, #188]	; (80096d8 <xPortStartScheduler+0xe8>)
 800961c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800961e:	4b2f      	ldr	r3, [pc, #188]	; (80096dc <xPortStartScheduler+0xec>)
 8009620:	2207      	movs	r2, #7
 8009622:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009624:	e009      	b.n	800963a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009626:	4b2d      	ldr	r3, [pc, #180]	; (80096dc <xPortStartScheduler+0xec>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	3b01      	subs	r3, #1
 800962c:	4a2b      	ldr	r2, [pc, #172]	; (80096dc <xPortStartScheduler+0xec>)
 800962e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009630:	78fb      	ldrb	r3, [r7, #3]
 8009632:	b2db      	uxtb	r3, r3
 8009634:	005b      	lsls	r3, r3, #1
 8009636:	b2db      	uxtb	r3, r3
 8009638:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800963a:	78fb      	ldrb	r3, [r7, #3]
 800963c:	b2db      	uxtb	r3, r3
 800963e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009642:	2b80      	cmp	r3, #128	; 0x80
 8009644:	d0ef      	beq.n	8009626 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009646:	4b25      	ldr	r3, [pc, #148]	; (80096dc <xPortStartScheduler+0xec>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f1c3 0307 	rsb	r3, r3, #7
 800964e:	2b04      	cmp	r3, #4
 8009650:	d00c      	beq.n	800966c <xPortStartScheduler+0x7c>
	__asm volatile
 8009652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009656:	b672      	cpsid	i
 8009658:	f383 8811 	msr	BASEPRI, r3
 800965c:	f3bf 8f6f 	isb	sy
 8009660:	f3bf 8f4f 	dsb	sy
 8009664:	b662      	cpsie	i
 8009666:	60bb      	str	r3, [r7, #8]
}
 8009668:	bf00      	nop
 800966a:	e7fe      	b.n	800966a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800966c:	4b1b      	ldr	r3, [pc, #108]	; (80096dc <xPortStartScheduler+0xec>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	021b      	lsls	r3, r3, #8
 8009672:	4a1a      	ldr	r2, [pc, #104]	; (80096dc <xPortStartScheduler+0xec>)
 8009674:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009676:	4b19      	ldr	r3, [pc, #100]	; (80096dc <xPortStartScheduler+0xec>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800967e:	4a17      	ldr	r2, [pc, #92]	; (80096dc <xPortStartScheduler+0xec>)
 8009680:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	b2da      	uxtb	r2, r3
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800968a:	4b15      	ldr	r3, [pc, #84]	; (80096e0 <xPortStartScheduler+0xf0>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	4a14      	ldr	r2, [pc, #80]	; (80096e0 <xPortStartScheduler+0xf0>)
 8009690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009694:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009696:	4b12      	ldr	r3, [pc, #72]	; (80096e0 <xPortStartScheduler+0xf0>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	4a11      	ldr	r2, [pc, #68]	; (80096e0 <xPortStartScheduler+0xf0>)
 800969c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80096a0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80096a2:	f000 f8e5 	bl	8009870 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80096a6:	4b0f      	ldr	r3, [pc, #60]	; (80096e4 <xPortStartScheduler+0xf4>)
 80096a8:	2200      	movs	r2, #0
 80096aa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80096ac:	f000 f904 	bl	80098b8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80096b0:	4b0d      	ldr	r3, [pc, #52]	; (80096e8 <xPortStartScheduler+0xf8>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4a0c      	ldr	r2, [pc, #48]	; (80096e8 <xPortStartScheduler+0xf8>)
 80096b6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80096ba:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80096bc:	f7ff ff84 	bl	80095c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80096c0:	f7fe fe32 	bl	8008328 <vTaskSwitchContext>
	prvTaskExitError();
 80096c4:	f7ff ff3c 	bl	8009540 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80096c8:	2300      	movs	r3, #0
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3710      	adds	r7, #16
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}
 80096d2:	bf00      	nop
 80096d4:	e000e400 	.word	0xe000e400
 80096d8:	20000d98 	.word	0x20000d98
 80096dc:	20000d9c 	.word	0x20000d9c
 80096e0:	e000ed20 	.word	0xe000ed20
 80096e4:	2000000c 	.word	0x2000000c
 80096e8:	e000ef34 	.word	0xe000ef34

080096ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80096ec:	b480      	push	{r7}
 80096ee:	b083      	sub	sp, #12
 80096f0:	af00      	add	r7, sp, #0
	__asm volatile
 80096f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f6:	b672      	cpsid	i
 80096f8:	f383 8811 	msr	BASEPRI, r3
 80096fc:	f3bf 8f6f 	isb	sy
 8009700:	f3bf 8f4f 	dsb	sy
 8009704:	b662      	cpsie	i
 8009706:	607b      	str	r3, [r7, #4]
}
 8009708:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800970a:	4b10      	ldr	r3, [pc, #64]	; (800974c <vPortEnterCritical+0x60>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	3301      	adds	r3, #1
 8009710:	4a0e      	ldr	r2, [pc, #56]	; (800974c <vPortEnterCritical+0x60>)
 8009712:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009714:	4b0d      	ldr	r3, [pc, #52]	; (800974c <vPortEnterCritical+0x60>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	2b01      	cmp	r3, #1
 800971a:	d111      	bne.n	8009740 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800971c:	4b0c      	ldr	r3, [pc, #48]	; (8009750 <vPortEnterCritical+0x64>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	b2db      	uxtb	r3, r3
 8009722:	2b00      	cmp	r3, #0
 8009724:	d00c      	beq.n	8009740 <vPortEnterCritical+0x54>
	__asm volatile
 8009726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800972a:	b672      	cpsid	i
 800972c:	f383 8811 	msr	BASEPRI, r3
 8009730:	f3bf 8f6f 	isb	sy
 8009734:	f3bf 8f4f 	dsb	sy
 8009738:	b662      	cpsie	i
 800973a:	603b      	str	r3, [r7, #0]
}
 800973c:	bf00      	nop
 800973e:	e7fe      	b.n	800973e <vPortEnterCritical+0x52>
	}
}
 8009740:	bf00      	nop
 8009742:	370c      	adds	r7, #12
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr
 800974c:	2000000c 	.word	0x2000000c
 8009750:	e000ed04 	.word	0xe000ed04

08009754 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009754:	b480      	push	{r7}
 8009756:	b083      	sub	sp, #12
 8009758:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800975a:	4b13      	ldr	r3, [pc, #76]	; (80097a8 <vPortExitCritical+0x54>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d10c      	bne.n	800977c <vPortExitCritical+0x28>
	__asm volatile
 8009762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009766:	b672      	cpsid	i
 8009768:	f383 8811 	msr	BASEPRI, r3
 800976c:	f3bf 8f6f 	isb	sy
 8009770:	f3bf 8f4f 	dsb	sy
 8009774:	b662      	cpsie	i
 8009776:	607b      	str	r3, [r7, #4]
}
 8009778:	bf00      	nop
 800977a:	e7fe      	b.n	800977a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800977c:	4b0a      	ldr	r3, [pc, #40]	; (80097a8 <vPortExitCritical+0x54>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	3b01      	subs	r3, #1
 8009782:	4a09      	ldr	r2, [pc, #36]	; (80097a8 <vPortExitCritical+0x54>)
 8009784:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009786:	4b08      	ldr	r3, [pc, #32]	; (80097a8 <vPortExitCritical+0x54>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d105      	bne.n	800979a <vPortExitCritical+0x46>
 800978e:	2300      	movs	r3, #0
 8009790:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	f383 8811 	msr	BASEPRI, r3
}
 8009798:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800979a:	bf00      	nop
 800979c:	370c      	adds	r7, #12
 800979e:	46bd      	mov	sp, r7
 80097a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a4:	4770      	bx	lr
 80097a6:	bf00      	nop
 80097a8:	2000000c 	.word	0x2000000c
 80097ac:	00000000 	.word	0x00000000

080097b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80097b0:	f3ef 8009 	mrs	r0, PSP
 80097b4:	f3bf 8f6f 	isb	sy
 80097b8:	4b15      	ldr	r3, [pc, #84]	; (8009810 <pxCurrentTCBConst>)
 80097ba:	681a      	ldr	r2, [r3, #0]
 80097bc:	f01e 0f10 	tst.w	lr, #16
 80097c0:	bf08      	it	eq
 80097c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80097c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097ca:	6010      	str	r0, [r2, #0]
 80097cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80097d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80097d4:	b672      	cpsid	i
 80097d6:	f380 8811 	msr	BASEPRI, r0
 80097da:	f3bf 8f4f 	dsb	sy
 80097de:	f3bf 8f6f 	isb	sy
 80097e2:	b662      	cpsie	i
 80097e4:	f7fe fda0 	bl	8008328 <vTaskSwitchContext>
 80097e8:	f04f 0000 	mov.w	r0, #0
 80097ec:	f380 8811 	msr	BASEPRI, r0
 80097f0:	bc09      	pop	{r0, r3}
 80097f2:	6819      	ldr	r1, [r3, #0]
 80097f4:	6808      	ldr	r0, [r1, #0]
 80097f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097fa:	f01e 0f10 	tst.w	lr, #16
 80097fe:	bf08      	it	eq
 8009800:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009804:	f380 8809 	msr	PSP, r0
 8009808:	f3bf 8f6f 	isb	sy
 800980c:	4770      	bx	lr
 800980e:	bf00      	nop

08009810 <pxCurrentTCBConst>:
 8009810:	20000b70 	.word	0x20000b70
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009814:	bf00      	nop
 8009816:	bf00      	nop

08009818 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b082      	sub	sp, #8
 800981c:	af00      	add	r7, sp, #0
	__asm volatile
 800981e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009822:	b672      	cpsid	i
 8009824:	f383 8811 	msr	BASEPRI, r3
 8009828:	f3bf 8f6f 	isb	sy
 800982c:	f3bf 8f4f 	dsb	sy
 8009830:	b662      	cpsie	i
 8009832:	607b      	str	r3, [r7, #4]
}
 8009834:	bf00      	nop
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
 8009836:	f001 fd95 	bl	800b364 <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800983a:	f7fe fcb7 	bl	80081ac <xTaskIncrementTick>
 800983e:	4603      	mov	r3, r0
 8009840:	2b00      	cmp	r3, #0
 8009842:	d006      	beq.n	8009852 <SysTick_Handler+0x3a>
		{
			traceISR_EXIT_TO_SCHEDULER();
 8009844:	f001 fdec 	bl	800b420 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009848:	4b08      	ldr	r3, [pc, #32]	; (800986c <SysTick_Handler+0x54>)
 800984a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800984e:	601a      	str	r2, [r3, #0]
 8009850:	e001      	b.n	8009856 <SysTick_Handler+0x3e>
		}
		else
		{
			traceISR_EXIT();
 8009852:	f001 fdc9 	bl	800b3e8 <SEGGER_SYSVIEW_RecordExitISR>
 8009856:	2300      	movs	r3, #0
 8009858:	603b      	str	r3, [r7, #0]
	__asm volatile
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	f383 8811 	msr	BASEPRI, r3
}
 8009860:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009862:	bf00      	nop
 8009864:	3708      	adds	r7, #8
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}
 800986a:	bf00      	nop
 800986c:	e000ed04 	.word	0xe000ed04

08009870 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009870:	b480      	push	{r7}
 8009872:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009874:	4b0b      	ldr	r3, [pc, #44]	; (80098a4 <vPortSetupTimerInterrupt+0x34>)
 8009876:	2200      	movs	r2, #0
 8009878:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800987a:	4b0b      	ldr	r3, [pc, #44]	; (80098a8 <vPortSetupTimerInterrupt+0x38>)
 800987c:	2200      	movs	r2, #0
 800987e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009880:	4b0a      	ldr	r3, [pc, #40]	; (80098ac <vPortSetupTimerInterrupt+0x3c>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	4a0a      	ldr	r2, [pc, #40]	; (80098b0 <vPortSetupTimerInterrupt+0x40>)
 8009886:	fba2 2303 	umull	r2, r3, r2, r3
 800988a:	099b      	lsrs	r3, r3, #6
 800988c:	4a09      	ldr	r2, [pc, #36]	; (80098b4 <vPortSetupTimerInterrupt+0x44>)
 800988e:	3b01      	subs	r3, #1
 8009890:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009892:	4b04      	ldr	r3, [pc, #16]	; (80098a4 <vPortSetupTimerInterrupt+0x34>)
 8009894:	2207      	movs	r2, #7
 8009896:	601a      	str	r2, [r3, #0]
}
 8009898:	bf00      	nop
 800989a:	46bd      	mov	sp, r7
 800989c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a0:	4770      	bx	lr
 80098a2:	bf00      	nop
 80098a4:	e000e010 	.word	0xe000e010
 80098a8:	e000e018 	.word	0xe000e018
 80098ac:	20000000 	.word	0x20000000
 80098b0:	10624dd3 	.word	0x10624dd3
 80098b4:	e000e014 	.word	0xe000e014

080098b8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80098b8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80098c8 <vPortEnableVFP+0x10>
 80098bc:	6801      	ldr	r1, [r0, #0]
 80098be:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80098c2:	6001      	str	r1, [r0, #0]
 80098c4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80098c6:	bf00      	nop
 80098c8:	e000ed88 	.word	0xe000ed88

080098cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80098cc:	b480      	push	{r7}
 80098ce:	b085      	sub	sp, #20
 80098d0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80098d2:	f3ef 8305 	mrs	r3, IPSR
 80098d6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	2b0f      	cmp	r3, #15
 80098dc:	d916      	bls.n	800990c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80098de:	4a19      	ldr	r2, [pc, #100]	; (8009944 <vPortValidateInterruptPriority+0x78>)
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	4413      	add	r3, r2
 80098e4:	781b      	ldrb	r3, [r3, #0]
 80098e6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80098e8:	4b17      	ldr	r3, [pc, #92]	; (8009948 <vPortValidateInterruptPriority+0x7c>)
 80098ea:	781b      	ldrb	r3, [r3, #0]
 80098ec:	7afa      	ldrb	r2, [r7, #11]
 80098ee:	429a      	cmp	r2, r3
 80098f0:	d20c      	bcs.n	800990c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80098f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f6:	b672      	cpsid	i
 80098f8:	f383 8811 	msr	BASEPRI, r3
 80098fc:	f3bf 8f6f 	isb	sy
 8009900:	f3bf 8f4f 	dsb	sy
 8009904:	b662      	cpsie	i
 8009906:	607b      	str	r3, [r7, #4]
}
 8009908:	bf00      	nop
 800990a:	e7fe      	b.n	800990a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800990c:	4b0f      	ldr	r3, [pc, #60]	; (800994c <vPortValidateInterruptPriority+0x80>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009914:	4b0e      	ldr	r3, [pc, #56]	; (8009950 <vPortValidateInterruptPriority+0x84>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	429a      	cmp	r2, r3
 800991a:	d90c      	bls.n	8009936 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800991c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009920:	b672      	cpsid	i
 8009922:	f383 8811 	msr	BASEPRI, r3
 8009926:	f3bf 8f6f 	isb	sy
 800992a:	f3bf 8f4f 	dsb	sy
 800992e:	b662      	cpsie	i
 8009930:	603b      	str	r3, [r7, #0]
}
 8009932:	bf00      	nop
 8009934:	e7fe      	b.n	8009934 <vPortValidateInterruptPriority+0x68>
	}
 8009936:	bf00      	nop
 8009938:	3714      	adds	r7, #20
 800993a:	46bd      	mov	sp, r7
 800993c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009940:	4770      	bx	lr
 8009942:	bf00      	nop
 8009944:	e000e3f0 	.word	0xe000e3f0
 8009948:	20000d98 	.word	0x20000d98
 800994c:	e000ed0c 	.word	0xe000ed0c
 8009950:	20000d9c 	.word	0x20000d9c

08009954 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b08a      	sub	sp, #40	; 0x28
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800995c:	2300      	movs	r3, #0
 800995e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009960:	f7fe fb52 	bl	8008008 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009964:	4b5b      	ldr	r3, [pc, #364]	; (8009ad4 <pvPortMalloc+0x180>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d101      	bne.n	8009970 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800996c:	f000 f91a 	bl	8009ba4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009970:	4b59      	ldr	r3, [pc, #356]	; (8009ad8 <pvPortMalloc+0x184>)
 8009972:	681a      	ldr	r2, [r3, #0]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	4013      	ands	r3, r2
 8009978:	2b00      	cmp	r3, #0
 800997a:	f040 8092 	bne.w	8009aa2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d01f      	beq.n	80099c4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8009984:	2208      	movs	r2, #8
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	4413      	add	r3, r2
 800998a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f003 0307 	and.w	r3, r3, #7
 8009992:	2b00      	cmp	r3, #0
 8009994:	d016      	beq.n	80099c4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f023 0307 	bic.w	r3, r3, #7
 800999c:	3308      	adds	r3, #8
 800999e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f003 0307 	and.w	r3, r3, #7
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d00c      	beq.n	80099c4 <pvPortMalloc+0x70>
	__asm volatile
 80099aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ae:	b672      	cpsid	i
 80099b0:	f383 8811 	msr	BASEPRI, r3
 80099b4:	f3bf 8f6f 	isb	sy
 80099b8:	f3bf 8f4f 	dsb	sy
 80099bc:	b662      	cpsie	i
 80099be:	617b      	str	r3, [r7, #20]
}
 80099c0:	bf00      	nop
 80099c2:	e7fe      	b.n	80099c2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d06b      	beq.n	8009aa2 <pvPortMalloc+0x14e>
 80099ca:	4b44      	ldr	r3, [pc, #272]	; (8009adc <pvPortMalloc+0x188>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	687a      	ldr	r2, [r7, #4]
 80099d0:	429a      	cmp	r2, r3
 80099d2:	d866      	bhi.n	8009aa2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80099d4:	4b42      	ldr	r3, [pc, #264]	; (8009ae0 <pvPortMalloc+0x18c>)
 80099d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80099d8:	4b41      	ldr	r3, [pc, #260]	; (8009ae0 <pvPortMalloc+0x18c>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80099de:	e004      	b.n	80099ea <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80099e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80099e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80099ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ec:	685b      	ldr	r3, [r3, #4]
 80099ee:	687a      	ldr	r2, [r7, #4]
 80099f0:	429a      	cmp	r2, r3
 80099f2:	d903      	bls.n	80099fc <pvPortMalloc+0xa8>
 80099f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d1f1      	bne.n	80099e0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80099fc:	4b35      	ldr	r3, [pc, #212]	; (8009ad4 <pvPortMalloc+0x180>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a02:	429a      	cmp	r2, r3
 8009a04:	d04d      	beq.n	8009aa2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009a06:	6a3b      	ldr	r3, [r7, #32]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	2208      	movs	r2, #8
 8009a0c:	4413      	add	r3, r2
 8009a0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a12:	681a      	ldr	r2, [r3, #0]
 8009a14:	6a3b      	ldr	r3, [r7, #32]
 8009a16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a1a:	685a      	ldr	r2, [r3, #4]
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	1ad2      	subs	r2, r2, r3
 8009a20:	2308      	movs	r3, #8
 8009a22:	005b      	lsls	r3, r3, #1
 8009a24:	429a      	cmp	r2, r3
 8009a26:	d921      	bls.n	8009a6c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	4413      	add	r3, r2
 8009a2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a30:	69bb      	ldr	r3, [r7, #24]
 8009a32:	f003 0307 	and.w	r3, r3, #7
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d00c      	beq.n	8009a54 <pvPortMalloc+0x100>
	__asm volatile
 8009a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a3e:	b672      	cpsid	i
 8009a40:	f383 8811 	msr	BASEPRI, r3
 8009a44:	f3bf 8f6f 	isb	sy
 8009a48:	f3bf 8f4f 	dsb	sy
 8009a4c:	b662      	cpsie	i
 8009a4e:	613b      	str	r3, [r7, #16]
}
 8009a50:	bf00      	nop
 8009a52:	e7fe      	b.n	8009a52 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a56:	685a      	ldr	r2, [r3, #4]
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	1ad2      	subs	r2, r2, r3
 8009a5c:	69bb      	ldr	r3, [r7, #24]
 8009a5e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009a66:	69b8      	ldr	r0, [r7, #24]
 8009a68:	f000 f8fe 	bl	8009c68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009a6c:	4b1b      	ldr	r3, [pc, #108]	; (8009adc <pvPortMalloc+0x188>)
 8009a6e:	681a      	ldr	r2, [r3, #0]
 8009a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a72:	685b      	ldr	r3, [r3, #4]
 8009a74:	1ad3      	subs	r3, r2, r3
 8009a76:	4a19      	ldr	r2, [pc, #100]	; (8009adc <pvPortMalloc+0x188>)
 8009a78:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009a7a:	4b18      	ldr	r3, [pc, #96]	; (8009adc <pvPortMalloc+0x188>)
 8009a7c:	681a      	ldr	r2, [r3, #0]
 8009a7e:	4b19      	ldr	r3, [pc, #100]	; (8009ae4 <pvPortMalloc+0x190>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	429a      	cmp	r2, r3
 8009a84:	d203      	bcs.n	8009a8e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009a86:	4b15      	ldr	r3, [pc, #84]	; (8009adc <pvPortMalloc+0x188>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4a16      	ldr	r2, [pc, #88]	; (8009ae4 <pvPortMalloc+0x190>)
 8009a8c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a90:	685a      	ldr	r2, [r3, #4]
 8009a92:	4b11      	ldr	r3, [pc, #68]	; (8009ad8 <pvPortMalloc+0x184>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	431a      	orrs	r2, r3
 8009a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a9a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009aa2:	f7fe fabf 	bl	8008024 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009aa6:	69fb      	ldr	r3, [r7, #28]
 8009aa8:	f003 0307 	and.w	r3, r3, #7
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d00c      	beq.n	8009aca <pvPortMalloc+0x176>
	__asm volatile
 8009ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab4:	b672      	cpsid	i
 8009ab6:	f383 8811 	msr	BASEPRI, r3
 8009aba:	f3bf 8f6f 	isb	sy
 8009abe:	f3bf 8f4f 	dsb	sy
 8009ac2:	b662      	cpsie	i
 8009ac4:	60fb      	str	r3, [r7, #12]
}
 8009ac6:	bf00      	nop
 8009ac8:	e7fe      	b.n	8009ac8 <pvPortMalloc+0x174>
	return pvReturn;
 8009aca:	69fb      	ldr	r3, [r7, #28]
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	3728      	adds	r7, #40	; 0x28
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}
 8009ad4:	200049a8 	.word	0x200049a8
 8009ad8:	200049b4 	.word	0x200049b4
 8009adc:	200049ac 	.word	0x200049ac
 8009ae0:	200049a0 	.word	0x200049a0
 8009ae4:	200049b0 	.word	0x200049b0

08009ae8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b086      	sub	sp, #24
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d04c      	beq.n	8009b94 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009afa:	2308      	movs	r3, #8
 8009afc:	425b      	negs	r3, r3
 8009afe:	697a      	ldr	r2, [r7, #20]
 8009b00:	4413      	add	r3, r2
 8009b02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	685a      	ldr	r2, [r3, #4]
 8009b0c:	4b23      	ldr	r3, [pc, #140]	; (8009b9c <vPortFree+0xb4>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	4013      	ands	r3, r2
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d10c      	bne.n	8009b30 <vPortFree+0x48>
	__asm volatile
 8009b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b1a:	b672      	cpsid	i
 8009b1c:	f383 8811 	msr	BASEPRI, r3
 8009b20:	f3bf 8f6f 	isb	sy
 8009b24:	f3bf 8f4f 	dsb	sy
 8009b28:	b662      	cpsie	i
 8009b2a:	60fb      	str	r3, [r7, #12]
}
 8009b2c:	bf00      	nop
 8009b2e:	e7fe      	b.n	8009b2e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d00c      	beq.n	8009b52 <vPortFree+0x6a>
	__asm volatile
 8009b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b3c:	b672      	cpsid	i
 8009b3e:	f383 8811 	msr	BASEPRI, r3
 8009b42:	f3bf 8f6f 	isb	sy
 8009b46:	f3bf 8f4f 	dsb	sy
 8009b4a:	b662      	cpsie	i
 8009b4c:	60bb      	str	r3, [r7, #8]
}
 8009b4e:	bf00      	nop
 8009b50:	e7fe      	b.n	8009b50 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009b52:	693b      	ldr	r3, [r7, #16]
 8009b54:	685a      	ldr	r2, [r3, #4]
 8009b56:	4b11      	ldr	r3, [pc, #68]	; (8009b9c <vPortFree+0xb4>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4013      	ands	r3, r2
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d019      	beq.n	8009b94 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d115      	bne.n	8009b94 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	685a      	ldr	r2, [r3, #4]
 8009b6c:	4b0b      	ldr	r3, [pc, #44]	; (8009b9c <vPortFree+0xb4>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	43db      	mvns	r3, r3
 8009b72:	401a      	ands	r2, r3
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009b78:	f7fe fa46 	bl	8008008 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	685a      	ldr	r2, [r3, #4]
 8009b80:	4b07      	ldr	r3, [pc, #28]	; (8009ba0 <vPortFree+0xb8>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	4413      	add	r3, r2
 8009b86:	4a06      	ldr	r2, [pc, #24]	; (8009ba0 <vPortFree+0xb8>)
 8009b88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009b8a:	6938      	ldr	r0, [r7, #16]
 8009b8c:	f000 f86c 	bl	8009c68 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009b90:	f7fe fa48 	bl	8008024 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009b94:	bf00      	nop
 8009b96:	3718      	adds	r7, #24
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}
 8009b9c:	200049b4 	.word	0x200049b4
 8009ba0:	200049ac 	.word	0x200049ac

08009ba4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b085      	sub	sp, #20
 8009ba8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009baa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009bae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009bb0:	4b27      	ldr	r3, [pc, #156]	; (8009c50 <prvHeapInit+0xac>)
 8009bb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	f003 0307 	and.w	r3, r3, #7
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d00c      	beq.n	8009bd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	3307      	adds	r3, #7
 8009bc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	f023 0307 	bic.w	r3, r3, #7
 8009bca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009bcc:	68ba      	ldr	r2, [r7, #8]
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	1ad3      	subs	r3, r2, r3
 8009bd2:	4a1f      	ldr	r2, [pc, #124]	; (8009c50 <prvHeapInit+0xac>)
 8009bd4:	4413      	add	r3, r2
 8009bd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009bdc:	4a1d      	ldr	r2, [pc, #116]	; (8009c54 <prvHeapInit+0xb0>)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009be2:	4b1c      	ldr	r3, [pc, #112]	; (8009c54 <prvHeapInit+0xb0>)
 8009be4:	2200      	movs	r2, #0
 8009be6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	68ba      	ldr	r2, [r7, #8]
 8009bec:	4413      	add	r3, r2
 8009bee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009bf0:	2208      	movs	r2, #8
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	1a9b      	subs	r3, r3, r2
 8009bf6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	f023 0307 	bic.w	r3, r3, #7
 8009bfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	4a15      	ldr	r2, [pc, #84]	; (8009c58 <prvHeapInit+0xb4>)
 8009c04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009c06:	4b14      	ldr	r3, [pc, #80]	; (8009c58 <prvHeapInit+0xb4>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009c0e:	4b12      	ldr	r3, [pc, #72]	; (8009c58 <prvHeapInit+0xb4>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	2200      	movs	r2, #0
 8009c14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	68fa      	ldr	r2, [r7, #12]
 8009c1e:	1ad2      	subs	r2, r2, r3
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009c24:	4b0c      	ldr	r3, [pc, #48]	; (8009c58 <prvHeapInit+0xb4>)
 8009c26:	681a      	ldr	r2, [r3, #0]
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	685b      	ldr	r3, [r3, #4]
 8009c30:	4a0a      	ldr	r2, [pc, #40]	; (8009c5c <prvHeapInit+0xb8>)
 8009c32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	685b      	ldr	r3, [r3, #4]
 8009c38:	4a09      	ldr	r2, [pc, #36]	; (8009c60 <prvHeapInit+0xbc>)
 8009c3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009c3c:	4b09      	ldr	r3, [pc, #36]	; (8009c64 <prvHeapInit+0xc0>)
 8009c3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009c42:	601a      	str	r2, [r3, #0]
}
 8009c44:	bf00      	nop
 8009c46:	3714      	adds	r7, #20
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4e:	4770      	bx	lr
 8009c50:	20000da0 	.word	0x20000da0
 8009c54:	200049a0 	.word	0x200049a0
 8009c58:	200049a8 	.word	0x200049a8
 8009c5c:	200049b0 	.word	0x200049b0
 8009c60:	200049ac 	.word	0x200049ac
 8009c64:	200049b4 	.word	0x200049b4

08009c68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b085      	sub	sp, #20
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009c70:	4b28      	ldr	r3, [pc, #160]	; (8009d14 <prvInsertBlockIntoFreeList+0xac>)
 8009c72:	60fb      	str	r3, [r7, #12]
 8009c74:	e002      	b.n	8009c7c <prvInsertBlockIntoFreeList+0x14>
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	60fb      	str	r3, [r7, #12]
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	687a      	ldr	r2, [r7, #4]
 8009c82:	429a      	cmp	r2, r3
 8009c84:	d8f7      	bhi.n	8009c76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	685b      	ldr	r3, [r3, #4]
 8009c8e:	68ba      	ldr	r2, [r7, #8]
 8009c90:	4413      	add	r3, r2
 8009c92:	687a      	ldr	r2, [r7, #4]
 8009c94:	429a      	cmp	r2, r3
 8009c96:	d108      	bne.n	8009caa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	685a      	ldr	r2, [r3, #4]
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	441a      	add	r2, r3
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	685b      	ldr	r3, [r3, #4]
 8009cb2:	68ba      	ldr	r2, [r7, #8]
 8009cb4:	441a      	add	r2, r3
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	429a      	cmp	r2, r3
 8009cbc:	d118      	bne.n	8009cf0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681a      	ldr	r2, [r3, #0]
 8009cc2:	4b15      	ldr	r3, [pc, #84]	; (8009d18 <prvInsertBlockIntoFreeList+0xb0>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	d00d      	beq.n	8009ce6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	685a      	ldr	r2, [r3, #4]
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	685b      	ldr	r3, [r3, #4]
 8009cd4:	441a      	add	r2, r3
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	681a      	ldr	r2, [r3, #0]
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	601a      	str	r2, [r3, #0]
 8009ce4:	e008      	b.n	8009cf8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009ce6:	4b0c      	ldr	r3, [pc, #48]	; (8009d18 <prvInsertBlockIntoFreeList+0xb0>)
 8009ce8:	681a      	ldr	r2, [r3, #0]
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	601a      	str	r2, [r3, #0]
 8009cee:	e003      	b.n	8009cf8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681a      	ldr	r2, [r3, #0]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009cf8:	68fa      	ldr	r2, [r7, #12]
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	d002      	beq.n	8009d06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	687a      	ldr	r2, [r7, #4]
 8009d04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009d06:	bf00      	nop
 8009d08:	3714      	adds	r7, #20
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d10:	4770      	bx	lr
 8009d12:	bf00      	nop
 8009d14:	200049a0 	.word	0x200049a0
 8009d18:	200049a8 	.word	0x200049a8

08009d1c <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8009d20:	4803      	ldr	r0, [pc, #12]	; (8009d30 <_cbSendSystemDesc+0x14>)
 8009d22:	f001 fac9 	bl	800b2b8 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8009d26:	4803      	ldr	r0, [pc, #12]	; (8009d34 <_cbSendSystemDesc+0x18>)
 8009d28:	f001 fac6 	bl	800b2b8 <SEGGER_SYSVIEW_SendSysDesc>
}
 8009d2c:	bf00      	nop
 8009d2e:	bd80      	pop	{r7, pc}
 8009d30:	08010478 	.word	0x08010478
 8009d34:	080104a4 	.word	0x080104a4

08009d38 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8009d3c:	4b06      	ldr	r3, [pc, #24]	; (8009d58 <SEGGER_SYSVIEW_Conf+0x20>)
 8009d3e:	6818      	ldr	r0, [r3, #0]
 8009d40:	4b05      	ldr	r3, [pc, #20]	; (8009d58 <SEGGER_SYSVIEW_Conf+0x20>)
 8009d42:	6819      	ldr	r1, [r3, #0]
 8009d44:	4b05      	ldr	r3, [pc, #20]	; (8009d5c <SEGGER_SYSVIEW_Conf+0x24>)
 8009d46:	4a06      	ldr	r2, [pc, #24]	; (8009d60 <SEGGER_SYSVIEW_Conf+0x28>)
 8009d48:	f000 fe34 	bl	800a9b4 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8009d4c:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8009d50:	f000 fe74 	bl	800aa3c <SEGGER_SYSVIEW_SetRAMBase>
}
 8009d54:	bf00      	nop
 8009d56:	bd80      	pop	{r7, pc}
 8009d58:	20000000 	.word	0x20000000
 8009d5c:	08009d1d 	.word	0x08009d1d
 8009d60:	08010544 	.word	0x08010544

08009d64 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8009d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d66:	b085      	sub	sp, #20
 8009d68:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	607b      	str	r3, [r7, #4]
 8009d6e:	e033      	b.n	8009dd8 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8009d70:	491e      	ldr	r1, [pc, #120]	; (8009dec <_cbSendTaskList+0x88>)
 8009d72:	687a      	ldr	r2, [r7, #4]
 8009d74:	4613      	mov	r3, r2
 8009d76:	009b      	lsls	r3, r3, #2
 8009d78:	4413      	add	r3, r2
 8009d7a:	009b      	lsls	r3, r3, #2
 8009d7c:	440b      	add	r3, r1
 8009d7e:	6818      	ldr	r0, [r3, #0]
 8009d80:	491a      	ldr	r1, [pc, #104]	; (8009dec <_cbSendTaskList+0x88>)
 8009d82:	687a      	ldr	r2, [r7, #4]
 8009d84:	4613      	mov	r3, r2
 8009d86:	009b      	lsls	r3, r3, #2
 8009d88:	4413      	add	r3, r2
 8009d8a:	009b      	lsls	r3, r3, #2
 8009d8c:	440b      	add	r3, r1
 8009d8e:	3304      	adds	r3, #4
 8009d90:	6819      	ldr	r1, [r3, #0]
 8009d92:	4c16      	ldr	r4, [pc, #88]	; (8009dec <_cbSendTaskList+0x88>)
 8009d94:	687a      	ldr	r2, [r7, #4]
 8009d96:	4613      	mov	r3, r2
 8009d98:	009b      	lsls	r3, r3, #2
 8009d9a:	4413      	add	r3, r2
 8009d9c:	009b      	lsls	r3, r3, #2
 8009d9e:	4423      	add	r3, r4
 8009da0:	3308      	adds	r3, #8
 8009da2:	681c      	ldr	r4, [r3, #0]
 8009da4:	4d11      	ldr	r5, [pc, #68]	; (8009dec <_cbSendTaskList+0x88>)
 8009da6:	687a      	ldr	r2, [r7, #4]
 8009da8:	4613      	mov	r3, r2
 8009daa:	009b      	lsls	r3, r3, #2
 8009dac:	4413      	add	r3, r2
 8009dae:	009b      	lsls	r3, r3, #2
 8009db0:	442b      	add	r3, r5
 8009db2:	330c      	adds	r3, #12
 8009db4:	681d      	ldr	r5, [r3, #0]
 8009db6:	4e0d      	ldr	r6, [pc, #52]	; (8009dec <_cbSendTaskList+0x88>)
 8009db8:	687a      	ldr	r2, [r7, #4]
 8009dba:	4613      	mov	r3, r2
 8009dbc:	009b      	lsls	r3, r3, #2
 8009dbe:	4413      	add	r3, r2
 8009dc0:	009b      	lsls	r3, r3, #2
 8009dc2:	4433      	add	r3, r6
 8009dc4:	3310      	adds	r3, #16
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	9300      	str	r3, [sp, #0]
 8009dca:	462b      	mov	r3, r5
 8009dcc:	4622      	mov	r2, r4
 8009dce:	f000 f8bd 	bl	8009f4c <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	3301      	adds	r3, #1
 8009dd6:	607b      	str	r3, [r7, #4]
 8009dd8:	4b05      	ldr	r3, [pc, #20]	; (8009df0 <_cbSendTaskList+0x8c>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	687a      	ldr	r2, [r7, #4]
 8009dde:	429a      	cmp	r2, r3
 8009de0:	d3c6      	bcc.n	8009d70 <_cbSendTaskList+0xc>
  }
}
 8009de2:	bf00      	nop
 8009de4:	bf00      	nop
 8009de6:	370c      	adds	r7, #12
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009dec:	200049b8 	.word	0x200049b8
 8009df0:	20004a58 	.word	0x20004a58

08009df4 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8009df4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009df8:	b082      	sub	sp, #8
 8009dfa:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8009dfc:	f7fe f9c4 	bl	8008188 <xTaskGetTickCountFromISR>
 8009e00:	4603      	mov	r3, r0
 8009e02:	2200      	movs	r2, #0
 8009e04:	469a      	mov	sl, r3
 8009e06:	4693      	mov	fp, r2
 8009e08:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8009e0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e10:	4602      	mov	r2, r0
 8009e12:	460b      	mov	r3, r1
 8009e14:	f04f 0a00 	mov.w	sl, #0
 8009e18:	f04f 0b00 	mov.w	fp, #0
 8009e1c:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8009e20:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8009e24:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8009e28:	4652      	mov	r2, sl
 8009e2a:	465b      	mov	r3, fp
 8009e2c:	1a14      	subs	r4, r2, r0
 8009e2e:	eb63 0501 	sbc.w	r5, r3, r1
 8009e32:	f04f 0200 	mov.w	r2, #0
 8009e36:	f04f 0300 	mov.w	r3, #0
 8009e3a:	00ab      	lsls	r3, r5, #2
 8009e3c:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8009e40:	00a2      	lsls	r2, r4, #2
 8009e42:	4614      	mov	r4, r2
 8009e44:	461d      	mov	r5, r3
 8009e46:	eb14 0800 	adds.w	r8, r4, r0
 8009e4a:	eb45 0901 	adc.w	r9, r5, r1
 8009e4e:	f04f 0200 	mov.w	r2, #0
 8009e52:	f04f 0300 	mov.w	r3, #0
 8009e56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009e5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009e5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009e62:	4690      	mov	r8, r2
 8009e64:	4699      	mov	r9, r3
 8009e66:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8009e6a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8009e6e:	4610      	mov	r0, r2
 8009e70:	4619      	mov	r1, r3
 8009e72:	3708      	adds	r7, #8
 8009e74:	46bd      	mov	sp, r7
 8009e76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08009e7c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b086      	sub	sp, #24
 8009e80:	af02      	add	r7, sp, #8
 8009e82:	60f8      	str	r0, [r7, #12]
 8009e84:	60b9      	str	r1, [r7, #8]
 8009e86:	607a      	str	r2, [r7, #4]
 8009e88:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8009e8a:	2205      	movs	r2, #5
 8009e8c:	492b      	ldr	r1, [pc, #172]	; (8009f3c <SYSVIEW_AddTask+0xc0>)
 8009e8e:	68b8      	ldr	r0, [r7, #8]
 8009e90:	f001 fea3 	bl	800bbda <memcmp>
 8009e94:	4603      	mov	r3, r0
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d04b      	beq.n	8009f32 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8009e9a:	4b29      	ldr	r3, [pc, #164]	; (8009f40 <SYSVIEW_AddTask+0xc4>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	2b07      	cmp	r3, #7
 8009ea0:	d903      	bls.n	8009eaa <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8009ea2:	4828      	ldr	r0, [pc, #160]	; (8009f44 <SYSVIEW_AddTask+0xc8>)
 8009ea4:	f001 fd06 	bl	800b8b4 <SEGGER_SYSVIEW_Warn>
    return;
 8009ea8:	e044      	b.n	8009f34 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8009eaa:	4b25      	ldr	r3, [pc, #148]	; (8009f40 <SYSVIEW_AddTask+0xc4>)
 8009eac:	681a      	ldr	r2, [r3, #0]
 8009eae:	4926      	ldr	r1, [pc, #152]	; (8009f48 <SYSVIEW_AddTask+0xcc>)
 8009eb0:	4613      	mov	r3, r2
 8009eb2:	009b      	lsls	r3, r3, #2
 8009eb4:	4413      	add	r3, r2
 8009eb6:	009b      	lsls	r3, r3, #2
 8009eb8:	440b      	add	r3, r1
 8009eba:	68fa      	ldr	r2, [r7, #12]
 8009ebc:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8009ebe:	4b20      	ldr	r3, [pc, #128]	; (8009f40 <SYSVIEW_AddTask+0xc4>)
 8009ec0:	681a      	ldr	r2, [r3, #0]
 8009ec2:	4921      	ldr	r1, [pc, #132]	; (8009f48 <SYSVIEW_AddTask+0xcc>)
 8009ec4:	4613      	mov	r3, r2
 8009ec6:	009b      	lsls	r3, r3, #2
 8009ec8:	4413      	add	r3, r2
 8009eca:	009b      	lsls	r3, r3, #2
 8009ecc:	440b      	add	r3, r1
 8009ece:	3304      	adds	r3, #4
 8009ed0:	68ba      	ldr	r2, [r7, #8]
 8009ed2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8009ed4:	4b1a      	ldr	r3, [pc, #104]	; (8009f40 <SYSVIEW_AddTask+0xc4>)
 8009ed6:	681a      	ldr	r2, [r3, #0]
 8009ed8:	491b      	ldr	r1, [pc, #108]	; (8009f48 <SYSVIEW_AddTask+0xcc>)
 8009eda:	4613      	mov	r3, r2
 8009edc:	009b      	lsls	r3, r3, #2
 8009ede:	4413      	add	r3, r2
 8009ee0:	009b      	lsls	r3, r3, #2
 8009ee2:	440b      	add	r3, r1
 8009ee4:	3308      	adds	r3, #8
 8009ee6:	687a      	ldr	r2, [r7, #4]
 8009ee8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8009eea:	4b15      	ldr	r3, [pc, #84]	; (8009f40 <SYSVIEW_AddTask+0xc4>)
 8009eec:	681a      	ldr	r2, [r3, #0]
 8009eee:	4916      	ldr	r1, [pc, #88]	; (8009f48 <SYSVIEW_AddTask+0xcc>)
 8009ef0:	4613      	mov	r3, r2
 8009ef2:	009b      	lsls	r3, r3, #2
 8009ef4:	4413      	add	r3, r2
 8009ef6:	009b      	lsls	r3, r3, #2
 8009ef8:	440b      	add	r3, r1
 8009efa:	330c      	adds	r3, #12
 8009efc:	683a      	ldr	r2, [r7, #0]
 8009efe:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8009f00:	4b0f      	ldr	r3, [pc, #60]	; (8009f40 <SYSVIEW_AddTask+0xc4>)
 8009f02:	681a      	ldr	r2, [r3, #0]
 8009f04:	4910      	ldr	r1, [pc, #64]	; (8009f48 <SYSVIEW_AddTask+0xcc>)
 8009f06:	4613      	mov	r3, r2
 8009f08:	009b      	lsls	r3, r3, #2
 8009f0a:	4413      	add	r3, r2
 8009f0c:	009b      	lsls	r3, r3, #2
 8009f0e:	440b      	add	r3, r1
 8009f10:	3310      	adds	r3, #16
 8009f12:	69ba      	ldr	r2, [r7, #24]
 8009f14:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8009f16:	4b0a      	ldr	r3, [pc, #40]	; (8009f40 <SYSVIEW_AddTask+0xc4>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	3301      	adds	r3, #1
 8009f1c:	4a08      	ldr	r2, [pc, #32]	; (8009f40 <SYSVIEW_AddTask+0xc4>)
 8009f1e:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8009f20:	69bb      	ldr	r3, [r7, #24]
 8009f22:	9300      	str	r3, [sp, #0]
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	687a      	ldr	r2, [r7, #4]
 8009f28:	68b9      	ldr	r1, [r7, #8]
 8009f2a:	68f8      	ldr	r0, [r7, #12]
 8009f2c:	f000 f80e 	bl	8009f4c <SYSVIEW_SendTaskInfo>
 8009f30:	e000      	b.n	8009f34 <SYSVIEW_AddTask+0xb8>
    return;
 8009f32:	bf00      	nop

}
 8009f34:	3710      	adds	r7, #16
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}
 8009f3a:	bf00      	nop
 8009f3c:	080104b4 	.word	0x080104b4
 8009f40:	20004a58 	.word	0x20004a58
 8009f44:	080104bc 	.word	0x080104bc
 8009f48:	200049b8 	.word	0x200049b8

08009f4c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b08a      	sub	sp, #40	; 0x28
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	60f8      	str	r0, [r7, #12]
 8009f54:	60b9      	str	r1, [r7, #8]
 8009f56:	607a      	str	r2, [r7, #4]
 8009f58:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8009f5a:	f107 0314 	add.w	r3, r7, #20
 8009f5e:	2214      	movs	r2, #20
 8009f60:	2100      	movs	r1, #0
 8009f62:	4618      	mov	r0, r3
 8009f64:	f001 fe57 	bl	800bc16 <memset>
  TaskInfo.TaskID     = TaskID;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8009f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f7a:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8009f7c:	f107 0314 	add.w	r3, r7, #20
 8009f80:	4618      	mov	r0, r3
 8009f82:	f001 f8a1 	bl	800b0c8 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8009f86:	bf00      	nop
 8009f88:	3728      	adds	r7, #40	; 0x28
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}
	...

08009f90 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8009f90:	b480      	push	{r7}
 8009f92:	b083      	sub	sp, #12
 8009f94:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8009f96:	4b24      	ldr	r3, [pc, #144]	; (800a028 <_DoInit+0x98>)
 8009f98:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2203      	movs	r2, #3
 8009f9e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2203      	movs	r2, #3
 8009fa4:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	4a20      	ldr	r2, [pc, #128]	; (800a02c <_DoInit+0x9c>)
 8009faa:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	4a20      	ldr	r2, [pc, #128]	; (800a030 <_DoInit+0xa0>)
 8009fb0:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009fb8:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2200      	movs	r2, #0
 8009fca:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	4a17      	ldr	r2, [pc, #92]	; (800a02c <_DoInit+0x9c>)
 8009fd0:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	4a17      	ldr	r2, [pc, #92]	; (800a034 <_DoInit+0xa4>)
 8009fd6:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2210      	movs	r2, #16
 8009fdc:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2200      	movs	r2, #0
 8009fee:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	3307      	adds	r3, #7
 8009ff4:	4a10      	ldr	r2, [pc, #64]	; (800a038 <_DoInit+0xa8>)
 8009ff6:	6810      	ldr	r0, [r2, #0]
 8009ff8:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8009ffa:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	4a0e      	ldr	r2, [pc, #56]	; (800a03c <_DoInit+0xac>)
 800a002:	6810      	ldr	r0, [r2, #0]
 800a004:	6018      	str	r0, [r3, #0]
 800a006:	8891      	ldrh	r1, [r2, #4]
 800a008:	7992      	ldrb	r2, [r2, #6]
 800a00a:	8099      	strh	r1, [r3, #4]
 800a00c:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800a00e:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2220      	movs	r2, #32
 800a016:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800a018:	f3bf 8f5f 	dmb	sy
}
 800a01c:	bf00      	nop
 800a01e:	370c      	adds	r7, #12
 800a020:	46bd      	mov	sp, r7
 800a022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a026:	4770      	bx	lr
 800a028:	20004a5c 	.word	0x20004a5c
 800a02c:	0801050c 	.word	0x0801050c
 800a030:	20004b04 	.word	0x20004b04
 800a034:	20004f04 	.word	0x20004f04
 800a038:	08010518 	.word	0x08010518
 800a03c:	0801051c 	.word	0x0801051c

0800a040 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800a040:	b580      	push	{r7, lr}
 800a042:	b08a      	sub	sp, #40	; 0x28
 800a044:	af00      	add	r7, sp, #0
 800a046:	60f8      	str	r0, [r7, #12]
 800a048:	60b9      	str	r1, [r7, #8]
 800a04a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800a04c:	2300      	movs	r3, #0
 800a04e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	68db      	ldr	r3, [r3, #12]
 800a054:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	691b      	ldr	r3, [r3, #16]
 800a05a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 800a05c:	69ba      	ldr	r2, [r7, #24]
 800a05e:	69fb      	ldr	r3, [r7, #28]
 800a060:	429a      	cmp	r2, r3
 800a062:	d905      	bls.n	800a070 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 800a064:	69ba      	ldr	r2, [r7, #24]
 800a066:	69fb      	ldr	r3, [r7, #28]
 800a068:	1ad3      	subs	r3, r2, r3
 800a06a:	3b01      	subs	r3, #1
 800a06c:	627b      	str	r3, [r7, #36]	; 0x24
 800a06e:	e007      	b.n	800a080 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	689a      	ldr	r2, [r3, #8]
 800a074:	69b9      	ldr	r1, [r7, #24]
 800a076:	69fb      	ldr	r3, [r7, #28]
 800a078:	1acb      	subs	r3, r1, r3
 800a07a:	4413      	add	r3, r2
 800a07c:	3b01      	subs	r3, #1
 800a07e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	689a      	ldr	r2, [r3, #8]
 800a084:	69fb      	ldr	r3, [r7, #28]
 800a086:	1ad3      	subs	r3, r2, r3
 800a088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a08a:	4293      	cmp	r3, r2
 800a08c:	bf28      	it	cs
 800a08e:	4613      	movcs	r3, r2
 800a090:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800a092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	4293      	cmp	r3, r2
 800a098:	bf28      	it	cs
 800a09a:	4613      	movcs	r3, r2
 800a09c:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	685a      	ldr	r2, [r3, #4]
 800a0a2:	69fb      	ldr	r3, [r7, #28]
 800a0a4:	4413      	add	r3, r2
 800a0a6:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 800a0a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0aa:	68b9      	ldr	r1, [r7, #8]
 800a0ac:	6978      	ldr	r0, [r7, #20]
 800a0ae:	f001 fda4 	bl	800bbfa <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800a0b2:	6a3a      	ldr	r2, [r7, #32]
 800a0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b6:	4413      	add	r3, r2
 800a0b8:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800a0ba:	68ba      	ldr	r2, [r7, #8]
 800a0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0be:	4413      	add	r3, r2
 800a0c0:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800a0c2:	687a      	ldr	r2, [r7, #4]
 800a0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c6:	1ad3      	subs	r3, r2, r3
 800a0c8:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800a0ca:	69fa      	ldr	r2, [r7, #28]
 800a0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ce:	4413      	add	r3, r2
 800a0d0:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	689b      	ldr	r3, [r3, #8]
 800a0d6:	69fa      	ldr	r2, [r7, #28]
 800a0d8:	429a      	cmp	r2, r3
 800a0da:	d101      	bne.n	800a0e0 <_WriteBlocking+0xa0>
      WrOff = 0u;
 800a0dc:	2300      	movs	r3, #0
 800a0de:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800a0e0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	69fa      	ldr	r2, [r7, #28]
 800a0e8:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d1b2      	bne.n	800a056 <_WriteBlocking+0x16>
  return NumBytesWritten;
 800a0f0:	6a3b      	ldr	r3, [r7, #32]
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3728      	adds	r7, #40	; 0x28
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}

0800a0fa <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800a0fa:	b580      	push	{r7, lr}
 800a0fc:	b088      	sub	sp, #32
 800a0fe:	af00      	add	r7, sp, #0
 800a100:	60f8      	str	r0, [r7, #12]
 800a102:	60b9      	str	r1, [r7, #8]
 800a104:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	68db      	ldr	r3, [r3, #12]
 800a10a:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	689a      	ldr	r2, [r3, #8]
 800a110:	69fb      	ldr	r3, [r7, #28]
 800a112:	1ad3      	subs	r3, r2, r3
 800a114:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800a116:	69ba      	ldr	r2, [r7, #24]
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	429a      	cmp	r2, r3
 800a11c:	d911      	bls.n	800a142 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	685a      	ldr	r2, [r3, #4]
 800a122:	69fb      	ldr	r3, [r7, #28]
 800a124:	4413      	add	r3, r2
 800a126:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 800a128:	687a      	ldr	r2, [r7, #4]
 800a12a:	68b9      	ldr	r1, [r7, #8]
 800a12c:	6938      	ldr	r0, [r7, #16]
 800a12e:	f001 fd64 	bl	800bbfa <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800a132:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800a136:	69fa      	ldr	r2, [r7, #28]
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	441a      	add	r2, r3
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800a140:	e01f      	b.n	800a182 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800a142:	69bb      	ldr	r3, [r7, #24]
 800a144:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	685a      	ldr	r2, [r3, #4]
 800a14a:	69fb      	ldr	r3, [r7, #28]
 800a14c:	4413      	add	r3, r2
 800a14e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800a150:	697a      	ldr	r2, [r7, #20]
 800a152:	68b9      	ldr	r1, [r7, #8]
 800a154:	6938      	ldr	r0, [r7, #16]
 800a156:	f001 fd50 	bl	800bbfa <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800a15a:	687a      	ldr	r2, [r7, #4]
 800a15c:	69bb      	ldr	r3, [r7, #24]
 800a15e:	1ad3      	subs	r3, r2, r3
 800a160:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	685b      	ldr	r3, [r3, #4]
 800a166:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 800a168:	68ba      	ldr	r2, [r7, #8]
 800a16a:	69bb      	ldr	r3, [r7, #24]
 800a16c:	4413      	add	r3, r2
 800a16e:	697a      	ldr	r2, [r7, #20]
 800a170:	4619      	mov	r1, r3
 800a172:	6938      	ldr	r0, [r7, #16]
 800a174:	f001 fd41 	bl	800bbfa <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800a178:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	697a      	ldr	r2, [r7, #20]
 800a180:	60da      	str	r2, [r3, #12]
}
 800a182:	bf00      	nop
 800a184:	3720      	adds	r7, #32
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}

0800a18a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800a18a:	b480      	push	{r7}
 800a18c:	b087      	sub	sp, #28
 800a18e:	af00      	add	r7, sp, #0
 800a190:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	691b      	ldr	r3, [r3, #16]
 800a196:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	68db      	ldr	r3, [r3, #12]
 800a19c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800a19e:	693a      	ldr	r2, [r7, #16]
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	d808      	bhi.n	800a1b8 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	689a      	ldr	r2, [r3, #8]
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	1ad2      	subs	r2, r2, r3
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	4413      	add	r3, r2
 800a1b2:	3b01      	subs	r3, #1
 800a1b4:	617b      	str	r3, [r7, #20]
 800a1b6:	e004      	b.n	800a1c2 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 800a1b8:	693a      	ldr	r2, [r7, #16]
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	1ad3      	subs	r3, r2, r3
 800a1be:	3b01      	subs	r3, #1
 800a1c0:	617b      	str	r3, [r7, #20]
  }
  return r;
 800a1c2:	697b      	ldr	r3, [r7, #20]
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	371c      	adds	r7, #28
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ce:	4770      	bx	lr

0800a1d0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b08c      	sub	sp, #48	; 0x30
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	60f8      	str	r0, [r7, #12]
 800a1d8:	60b9      	str	r1, [r7, #8]
 800a1da:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800a1dc:	4b3e      	ldr	r3, [pc, #248]	; (800a2d8 <SEGGER_RTT_ReadNoLock+0x108>)
 800a1de:	623b      	str	r3, [r7, #32]
 800a1e0:	6a3b      	ldr	r3, [r7, #32]
 800a1e2:	781b      	ldrb	r3, [r3, #0]
 800a1e4:	b2db      	uxtb	r3, r3
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d101      	bne.n	800a1ee <SEGGER_RTT_ReadNoLock+0x1e>
 800a1ea:	f7ff fed1 	bl	8009f90 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800a1ee:	68fa      	ldr	r2, [r7, #12]
 800a1f0:	4613      	mov	r3, r2
 800a1f2:	005b      	lsls	r3, r3, #1
 800a1f4:	4413      	add	r3, r2
 800a1f6:	00db      	lsls	r3, r3, #3
 800a1f8:	3360      	adds	r3, #96	; 0x60
 800a1fa:	4a37      	ldr	r2, [pc, #220]	; (800a2d8 <SEGGER_RTT_ReadNoLock+0x108>)
 800a1fc:	4413      	add	r3, r2
 800a1fe:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800a204:	69fb      	ldr	r3, [r7, #28]
 800a206:	691b      	ldr	r3, [r3, #16]
 800a208:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800a20a:	69fb      	ldr	r3, [r7, #28]
 800a20c:	68db      	ldr	r3, [r3, #12]
 800a20e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800a210:	2300      	movs	r3, #0
 800a212:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800a214:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a216:	69bb      	ldr	r3, [r7, #24]
 800a218:	429a      	cmp	r2, r3
 800a21a:	d92b      	bls.n	800a274 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800a21c:	69fb      	ldr	r3, [r7, #28]
 800a21e:	689a      	ldr	r2, [r3, #8]
 800a220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a222:	1ad3      	subs	r3, r2, r3
 800a224:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800a226:	697a      	ldr	r2, [r7, #20]
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	4293      	cmp	r3, r2
 800a22c:	bf28      	it	cs
 800a22e:	4613      	movcs	r3, r2
 800a230:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800a232:	69fb      	ldr	r3, [r7, #28]
 800a234:	685a      	ldr	r2, [r3, #4]
 800a236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a238:	4413      	add	r3, r2
 800a23a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800a23c:	697a      	ldr	r2, [r7, #20]
 800a23e:	6939      	ldr	r1, [r7, #16]
 800a240:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a242:	f001 fcda 	bl	800bbfa <memcpy>
    NumBytesRead += NumBytesRem;
 800a246:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	4413      	add	r3, r2
 800a24c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800a24e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a250:	697b      	ldr	r3, [r7, #20]
 800a252:	4413      	add	r3, r2
 800a254:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800a256:	687a      	ldr	r2, [r7, #4]
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	1ad3      	subs	r3, r2, r3
 800a25c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800a25e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	4413      	add	r3, r2
 800a264:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800a266:	69fb      	ldr	r3, [r7, #28]
 800a268:	689b      	ldr	r3, [r3, #8]
 800a26a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a26c:	429a      	cmp	r2, r3
 800a26e:	d101      	bne.n	800a274 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800a270:	2300      	movs	r3, #0
 800a272:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800a274:	69ba      	ldr	r2, [r7, #24]
 800a276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a278:	1ad3      	subs	r3, r2, r3
 800a27a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800a27c:	697a      	ldr	r2, [r7, #20]
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	4293      	cmp	r3, r2
 800a282:	bf28      	it	cs
 800a284:	4613      	movcs	r3, r2
 800a286:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800a288:	697b      	ldr	r3, [r7, #20]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d019      	beq.n	800a2c2 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800a28e:	69fb      	ldr	r3, [r7, #28]
 800a290:	685a      	ldr	r2, [r3, #4]
 800a292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a294:	4413      	add	r3, r2
 800a296:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800a298:	697a      	ldr	r2, [r7, #20]
 800a29a:	6939      	ldr	r1, [r7, #16]
 800a29c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a29e:	f001 fcac 	bl	800bbfa <memcpy>
    NumBytesRead += NumBytesRem;
 800a2a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	4413      	add	r3, r2
 800a2a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800a2aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	4413      	add	r3, r2
 800a2b0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800a2b2:	687a      	ldr	r2, [r7, #4]
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	1ad3      	subs	r3, r2, r3
 800a2b8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800a2ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2bc:	697b      	ldr	r3, [r7, #20]
 800a2be:	4413      	add	r3, r2
 800a2c0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800a2c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d002      	beq.n	800a2ce <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800a2c8:	69fb      	ldr	r3, [r7, #28]
 800a2ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2cc:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800a2ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	3730      	adds	r7, #48	; 0x30
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}
 800a2d8:	20004a5c 	.word	0x20004a5c

0800a2dc <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b088      	sub	sp, #32
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	60f8      	str	r0, [r7, #12]
 800a2e4:	60b9      	str	r1, [r7, #8]
 800a2e6:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	1c5a      	adds	r2, r3, #1
 800a2f0:	4613      	mov	r3, r2
 800a2f2:	005b      	lsls	r3, r3, #1
 800a2f4:	4413      	add	r3, r2
 800a2f6:	00db      	lsls	r3, r3, #3
 800a2f8:	4a1f      	ldr	r2, [pc, #124]	; (800a378 <SEGGER_RTT_WriteNoLock+0x9c>)
 800a2fa:	4413      	add	r3, r2
 800a2fc:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800a2fe:	697b      	ldr	r3, [r7, #20]
 800a300:	695b      	ldr	r3, [r3, #20]
 800a302:	2b02      	cmp	r3, #2
 800a304:	d029      	beq.n	800a35a <SEGGER_RTT_WriteNoLock+0x7e>
 800a306:	2b02      	cmp	r3, #2
 800a308:	d82e      	bhi.n	800a368 <SEGGER_RTT_WriteNoLock+0x8c>
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d002      	beq.n	800a314 <SEGGER_RTT_WriteNoLock+0x38>
 800a30e:	2b01      	cmp	r3, #1
 800a310:	d013      	beq.n	800a33a <SEGGER_RTT_WriteNoLock+0x5e>
 800a312:	e029      	b.n	800a368 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800a314:	6978      	ldr	r0, [r7, #20]
 800a316:	f7ff ff38 	bl	800a18a <_GetAvailWriteSpace>
 800a31a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800a31c:	693a      	ldr	r2, [r7, #16]
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	429a      	cmp	r2, r3
 800a322:	d202      	bcs.n	800a32a <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 800a324:	2300      	movs	r3, #0
 800a326:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 800a328:	e021      	b.n	800a36e <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800a32e:	687a      	ldr	r2, [r7, #4]
 800a330:	69b9      	ldr	r1, [r7, #24]
 800a332:	6978      	ldr	r0, [r7, #20]
 800a334:	f7ff fee1 	bl	800a0fa <_WriteNoCheck>
    break;
 800a338:	e019      	b.n	800a36e <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800a33a:	6978      	ldr	r0, [r7, #20]
 800a33c:	f7ff ff25 	bl	800a18a <_GetAvailWriteSpace>
 800a340:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800a342:	687a      	ldr	r2, [r7, #4]
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	4293      	cmp	r3, r2
 800a348:	bf28      	it	cs
 800a34a:	4613      	movcs	r3, r2
 800a34c:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800a34e:	69fa      	ldr	r2, [r7, #28]
 800a350:	69b9      	ldr	r1, [r7, #24]
 800a352:	6978      	ldr	r0, [r7, #20]
 800a354:	f7ff fed1 	bl	800a0fa <_WriteNoCheck>
    break;
 800a358:	e009      	b.n	800a36e <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800a35a:	687a      	ldr	r2, [r7, #4]
 800a35c:	69b9      	ldr	r1, [r7, #24]
 800a35e:	6978      	ldr	r0, [r7, #20]
 800a360:	f7ff fe6e 	bl	800a040 <_WriteBlocking>
 800a364:	61f8      	str	r0, [r7, #28]
    break;
 800a366:	e002      	b.n	800a36e <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 800a368:	2300      	movs	r3, #0
 800a36a:	61fb      	str	r3, [r7, #28]
    break;
 800a36c:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800a36e:	69fb      	ldr	r3, [r7, #28]
}
 800a370:	4618      	mov	r0, r3
 800a372:	3720      	adds	r7, #32
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}
 800a378:	20004a5c 	.word	0x20004a5c

0800a37c <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b088      	sub	sp, #32
 800a380:	af00      	add	r7, sp, #0
 800a382:	60f8      	str	r0, [r7, #12]
 800a384:	60b9      	str	r1, [r7, #8]
 800a386:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 800a388:	4b0e      	ldr	r3, [pc, #56]	; (800a3c4 <SEGGER_RTT_Write+0x48>)
 800a38a:	61fb      	str	r3, [r7, #28]
 800a38c:	69fb      	ldr	r3, [r7, #28]
 800a38e:	781b      	ldrb	r3, [r3, #0]
 800a390:	b2db      	uxtb	r3, r3
 800a392:	2b00      	cmp	r3, #0
 800a394:	d101      	bne.n	800a39a <SEGGER_RTT_Write+0x1e>
 800a396:	f7ff fdfb 	bl	8009f90 <_DoInit>
  SEGGER_RTT_LOCK();
 800a39a:	f3ef 8311 	mrs	r3, BASEPRI
 800a39e:	f04f 0120 	mov.w	r1, #32
 800a3a2:	f381 8811 	msr	BASEPRI, r1
 800a3a6:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 800a3a8:	687a      	ldr	r2, [r7, #4]
 800a3aa:	68b9      	ldr	r1, [r7, #8]
 800a3ac:	68f8      	ldr	r0, [r7, #12]
 800a3ae:	f7ff ff95 	bl	800a2dc <SEGGER_RTT_WriteNoLock>
 800a3b2:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800a3b4:	69bb      	ldr	r3, [r7, #24]
 800a3b6:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800a3ba:	697b      	ldr	r3, [r7, #20]
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3720      	adds	r7, #32
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}
 800a3c4:	20004a5c 	.word	0x20004a5c

0800a3c8 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b088      	sub	sp, #32
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	60f8      	str	r0, [r7, #12]
 800a3d0:	60b9      	str	r1, [r7, #8]
 800a3d2:	607a      	str	r2, [r7, #4]
 800a3d4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800a3d6:	4b3d      	ldr	r3, [pc, #244]	; (800a4cc <SEGGER_RTT_AllocUpBuffer+0x104>)
 800a3d8:	61bb      	str	r3, [r7, #24]
 800a3da:	69bb      	ldr	r3, [r7, #24]
 800a3dc:	781b      	ldrb	r3, [r3, #0]
 800a3de:	b2db      	uxtb	r3, r3
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d101      	bne.n	800a3e8 <SEGGER_RTT_AllocUpBuffer+0x20>
 800a3e4:	f7ff fdd4 	bl	8009f90 <_DoInit>
  SEGGER_RTT_LOCK();
 800a3e8:	f3ef 8311 	mrs	r3, BASEPRI
 800a3ec:	f04f 0120 	mov.w	r1, #32
 800a3f0:	f381 8811 	msr	BASEPRI, r1
 800a3f4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800a3f6:	4b35      	ldr	r3, [pc, #212]	; (800a4cc <SEGGER_RTT_AllocUpBuffer+0x104>)
 800a3f8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800a3fe:	6939      	ldr	r1, [r7, #16]
 800a400:	69fb      	ldr	r3, [r7, #28]
 800a402:	1c5a      	adds	r2, r3, #1
 800a404:	4613      	mov	r3, r2
 800a406:	005b      	lsls	r3, r3, #1
 800a408:	4413      	add	r3, r2
 800a40a:	00db      	lsls	r3, r3, #3
 800a40c:	440b      	add	r3, r1
 800a40e:	3304      	adds	r3, #4
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d008      	beq.n	800a428 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800a416:	69fb      	ldr	r3, [r7, #28]
 800a418:	3301      	adds	r3, #1
 800a41a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	691b      	ldr	r3, [r3, #16]
 800a420:	69fa      	ldr	r2, [r7, #28]
 800a422:	429a      	cmp	r2, r3
 800a424:	dbeb      	blt.n	800a3fe <SEGGER_RTT_AllocUpBuffer+0x36>
 800a426:	e000      	b.n	800a42a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800a428:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800a42a:	693b      	ldr	r3, [r7, #16]
 800a42c:	691b      	ldr	r3, [r3, #16]
 800a42e:	69fa      	ldr	r2, [r7, #28]
 800a430:	429a      	cmp	r2, r3
 800a432:	da3f      	bge.n	800a4b4 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800a434:	6939      	ldr	r1, [r7, #16]
 800a436:	69fb      	ldr	r3, [r7, #28]
 800a438:	1c5a      	adds	r2, r3, #1
 800a43a:	4613      	mov	r3, r2
 800a43c:	005b      	lsls	r3, r3, #1
 800a43e:	4413      	add	r3, r2
 800a440:	00db      	lsls	r3, r3, #3
 800a442:	440b      	add	r3, r1
 800a444:	68fa      	ldr	r2, [r7, #12]
 800a446:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800a448:	6939      	ldr	r1, [r7, #16]
 800a44a:	69fb      	ldr	r3, [r7, #28]
 800a44c:	1c5a      	adds	r2, r3, #1
 800a44e:	4613      	mov	r3, r2
 800a450:	005b      	lsls	r3, r3, #1
 800a452:	4413      	add	r3, r2
 800a454:	00db      	lsls	r3, r3, #3
 800a456:	440b      	add	r3, r1
 800a458:	3304      	adds	r3, #4
 800a45a:	68ba      	ldr	r2, [r7, #8]
 800a45c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800a45e:	6939      	ldr	r1, [r7, #16]
 800a460:	69fa      	ldr	r2, [r7, #28]
 800a462:	4613      	mov	r3, r2
 800a464:	005b      	lsls	r3, r3, #1
 800a466:	4413      	add	r3, r2
 800a468:	00db      	lsls	r3, r3, #3
 800a46a:	440b      	add	r3, r1
 800a46c:	3320      	adds	r3, #32
 800a46e:	687a      	ldr	r2, [r7, #4]
 800a470:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800a472:	6939      	ldr	r1, [r7, #16]
 800a474:	69fa      	ldr	r2, [r7, #28]
 800a476:	4613      	mov	r3, r2
 800a478:	005b      	lsls	r3, r3, #1
 800a47a:	4413      	add	r3, r2
 800a47c:	00db      	lsls	r3, r3, #3
 800a47e:	440b      	add	r3, r1
 800a480:	3328      	adds	r3, #40	; 0x28
 800a482:	2200      	movs	r2, #0
 800a484:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800a486:	6939      	ldr	r1, [r7, #16]
 800a488:	69fa      	ldr	r2, [r7, #28]
 800a48a:	4613      	mov	r3, r2
 800a48c:	005b      	lsls	r3, r3, #1
 800a48e:	4413      	add	r3, r2
 800a490:	00db      	lsls	r3, r3, #3
 800a492:	440b      	add	r3, r1
 800a494:	3324      	adds	r3, #36	; 0x24
 800a496:	2200      	movs	r2, #0
 800a498:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800a49a:	6939      	ldr	r1, [r7, #16]
 800a49c:	69fa      	ldr	r2, [r7, #28]
 800a49e:	4613      	mov	r3, r2
 800a4a0:	005b      	lsls	r3, r3, #1
 800a4a2:	4413      	add	r3, r2
 800a4a4:	00db      	lsls	r3, r3, #3
 800a4a6:	440b      	add	r3, r1
 800a4a8:	332c      	adds	r3, #44	; 0x2c
 800a4aa:	683a      	ldr	r2, [r7, #0]
 800a4ac:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800a4ae:	f3bf 8f5f 	dmb	sy
 800a4b2:	e002      	b.n	800a4ba <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800a4b4:	f04f 33ff 	mov.w	r3, #4294967295
 800a4b8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800a4c0:	69fb      	ldr	r3, [r7, #28]
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3720      	adds	r7, #32
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}
 800a4ca:	bf00      	nop
 800a4cc:	20004a5c 	.word	0x20004a5c

0800a4d0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b08a      	sub	sp, #40	; 0x28
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	60f8      	str	r0, [r7, #12]
 800a4d8:	60b9      	str	r1, [r7, #8]
 800a4da:	607a      	str	r2, [r7, #4]
 800a4dc:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800a4de:	4b21      	ldr	r3, [pc, #132]	; (800a564 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800a4e0:	623b      	str	r3, [r7, #32]
 800a4e2:	6a3b      	ldr	r3, [r7, #32]
 800a4e4:	781b      	ldrb	r3, [r3, #0]
 800a4e6:	b2db      	uxtb	r3, r3
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d101      	bne.n	800a4f0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800a4ec:	f7ff fd50 	bl	8009f90 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800a4f0:	4b1c      	ldr	r3, [pc, #112]	; (800a564 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800a4f2:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	2b02      	cmp	r3, #2
 800a4f8:	d82c      	bhi.n	800a554 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800a4fa:	f3ef 8311 	mrs	r3, BASEPRI
 800a4fe:	f04f 0120 	mov.w	r1, #32
 800a502:	f381 8811 	msr	BASEPRI, r1
 800a506:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 800a508:	68fa      	ldr	r2, [r7, #12]
 800a50a:	4613      	mov	r3, r2
 800a50c:	005b      	lsls	r3, r3, #1
 800a50e:	4413      	add	r3, r2
 800a510:	00db      	lsls	r3, r3, #3
 800a512:	3360      	adds	r3, #96	; 0x60
 800a514:	69fa      	ldr	r2, [r7, #28]
 800a516:	4413      	add	r3, r2
 800a518:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d00e      	beq.n	800a53e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800a520:	697b      	ldr	r3, [r7, #20]
 800a522:	68ba      	ldr	r2, [r7, #8]
 800a524:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	687a      	ldr	r2, [r7, #4]
 800a52a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	683a      	ldr	r2, [r7, #0]
 800a530:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800a532:	697b      	ldr	r3, [r7, #20]
 800a534:	2200      	movs	r2, #0
 800a536:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 800a538:	697b      	ldr	r3, [r7, #20]
 800a53a:	2200      	movs	r2, #0
 800a53c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a542:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800a544:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800a548:	69bb      	ldr	r3, [r7, #24]
 800a54a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800a54e:	2300      	movs	r3, #0
 800a550:	627b      	str	r3, [r7, #36]	; 0x24
 800a552:	e002      	b.n	800a55a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800a554:	f04f 33ff 	mov.w	r3, #4294967295
 800a558:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800a55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	3728      	adds	r7, #40	; 0x28
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}
 800a564:	20004a5c 	.word	0x20004a5c

0800a568 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800a568:	b480      	push	{r7}
 800a56a:	b087      	sub	sp, #28
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	60f8      	str	r0, [r7, #12]
 800a570:	60b9      	str	r1, [r7, #8]
 800a572:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800a574:	2300      	movs	r3, #0
 800a576:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d00f      	beq.n	800a59e <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 800a57e:	e002      	b.n	800a586 <_EncodeStr+0x1e>
      Len++;
 800a580:	693b      	ldr	r3, [r7, #16]
 800a582:	3301      	adds	r3, #1
 800a584:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 800a586:	68ba      	ldr	r2, [r7, #8]
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	4413      	add	r3, r2
 800a58c:	781b      	ldrb	r3, [r3, #0]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d1f6      	bne.n	800a580 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 800a592:	693a      	ldr	r2, [r7, #16]
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	429a      	cmp	r2, r3
 800a598:	d901      	bls.n	800a59e <_EncodeStr+0x36>
      Len = Limit;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	2bfe      	cmp	r3, #254	; 0xfe
 800a5a2:	d806      	bhi.n	800a5b2 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	1c5a      	adds	r2, r3, #1
 800a5a8:	60fa      	str	r2, [r7, #12]
 800a5aa:	693a      	ldr	r2, [r7, #16]
 800a5ac:	b2d2      	uxtb	r2, r2
 800a5ae:	701a      	strb	r2, [r3, #0]
 800a5b0:	e011      	b.n	800a5d6 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	1c5a      	adds	r2, r3, #1
 800a5b6:	60fa      	str	r2, [r7, #12]
 800a5b8:	22ff      	movs	r2, #255	; 0xff
 800a5ba:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	1c5a      	adds	r2, r3, #1
 800a5c0:	60fa      	str	r2, [r7, #12]
 800a5c2:	693a      	ldr	r2, [r7, #16]
 800a5c4:	b2d2      	uxtb	r2, r2
 800a5c6:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800a5c8:	693b      	ldr	r3, [r7, #16]
 800a5ca:	0a19      	lsrs	r1, r3, #8
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	1c5a      	adds	r2, r3, #1
 800a5d0:	60fa      	str	r2, [r7, #12]
 800a5d2:	b2ca      	uxtb	r2, r1
 800a5d4:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800a5da:	e00a      	b.n	800a5f2 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 800a5dc:	68ba      	ldr	r2, [r7, #8]
 800a5de:	1c53      	adds	r3, r2, #1
 800a5e0:	60bb      	str	r3, [r7, #8]
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	1c59      	adds	r1, r3, #1
 800a5e6:	60f9      	str	r1, [r7, #12]
 800a5e8:	7812      	ldrb	r2, [r2, #0]
 800a5ea:	701a      	strb	r2, [r3, #0]
    n++;
 800a5ec:	697b      	ldr	r3, [r7, #20]
 800a5ee:	3301      	adds	r3, #1
 800a5f0:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800a5f2:	697a      	ldr	r2, [r7, #20]
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	429a      	cmp	r2, r3
 800a5f8:	d3f0      	bcc.n	800a5dc <_EncodeStr+0x74>
  }
  return pPayload;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	371c      	adds	r7, #28
 800a600:	46bd      	mov	sp, r7
 800a602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a606:	4770      	bx	lr

0800a608 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800a608:	b480      	push	{r7}
 800a60a:	b083      	sub	sp, #12
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	3304      	adds	r3, #4
}
 800a614:	4618      	mov	r0, r3
 800a616:	370c      	adds	r7, #12
 800a618:	46bd      	mov	sp, r7
 800a61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61e:	4770      	bx	lr

0800a620 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800a620:	b580      	push	{r7, lr}
 800a622:	b082      	sub	sp, #8
 800a624:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800a626:	4b36      	ldr	r3, [pc, #216]	; (800a700 <_HandleIncomingPacket+0xe0>)
 800a628:	7e1b      	ldrb	r3, [r3, #24]
 800a62a:	4618      	mov	r0, r3
 800a62c:	1cfb      	adds	r3, r7, #3
 800a62e:	2201      	movs	r2, #1
 800a630:	4619      	mov	r1, r3
 800a632:	f7ff fdcd 	bl	800a1d0 <SEGGER_RTT_ReadNoLock>
 800a636:	4603      	mov	r3, r0
 800a638:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	dd54      	ble.n	800a6ea <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 800a640:	78fb      	ldrb	r3, [r7, #3]
 800a642:	2b80      	cmp	r3, #128	; 0x80
 800a644:	d032      	beq.n	800a6ac <_HandleIncomingPacket+0x8c>
 800a646:	2b80      	cmp	r3, #128	; 0x80
 800a648:	dc42      	bgt.n	800a6d0 <_HandleIncomingPacket+0xb0>
 800a64a:	2b07      	cmp	r3, #7
 800a64c:	dc16      	bgt.n	800a67c <_HandleIncomingPacket+0x5c>
 800a64e:	2b00      	cmp	r3, #0
 800a650:	dd3e      	ble.n	800a6d0 <_HandleIncomingPacket+0xb0>
 800a652:	3b01      	subs	r3, #1
 800a654:	2b06      	cmp	r3, #6
 800a656:	d83b      	bhi.n	800a6d0 <_HandleIncomingPacket+0xb0>
 800a658:	a201      	add	r2, pc, #4	; (adr r2, 800a660 <_HandleIncomingPacket+0x40>)
 800a65a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a65e:	bf00      	nop
 800a660:	0800a683 	.word	0x0800a683
 800a664:	0800a689 	.word	0x0800a689
 800a668:	0800a68f 	.word	0x0800a68f
 800a66c:	0800a695 	.word	0x0800a695
 800a670:	0800a69b 	.word	0x0800a69b
 800a674:	0800a6a1 	.word	0x0800a6a1
 800a678:	0800a6a7 	.word	0x0800a6a7
 800a67c:	2b7f      	cmp	r3, #127	; 0x7f
 800a67e:	d036      	beq.n	800a6ee <_HandleIncomingPacket+0xce>
 800a680:	e026      	b.n	800a6d0 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800a682:	f000 fba7 	bl	800add4 <SEGGER_SYSVIEW_Start>
      break;
 800a686:	e037      	b.n	800a6f8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800a688:	f000 fc5e 	bl	800af48 <SEGGER_SYSVIEW_Stop>
      break;
 800a68c:	e034      	b.n	800a6f8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800a68e:	f000 fe37 	bl	800b300 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800a692:	e031      	b.n	800a6f8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800a694:	f000 fdfc 	bl	800b290 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800a698:	e02e      	b.n	800a6f8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800a69a:	f000 fc7b 	bl	800af94 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800a69e:	e02b      	b.n	800a6f8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800a6a0:	f001 f8ca 	bl	800b838 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800a6a4:	e028      	b.n	800a6f8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800a6a6:	f001 f8a9 	bl	800b7fc <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800a6aa:	e025      	b.n	800a6f8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800a6ac:	4b14      	ldr	r3, [pc, #80]	; (800a700 <_HandleIncomingPacket+0xe0>)
 800a6ae:	7e1b      	ldrb	r3, [r3, #24]
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	1cfb      	adds	r3, r7, #3
 800a6b4:	2201      	movs	r2, #1
 800a6b6:	4619      	mov	r1, r3
 800a6b8:	f7ff fd8a 	bl	800a1d0 <SEGGER_RTT_ReadNoLock>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	dd15      	ble.n	800a6f2 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800a6c6:	78fb      	ldrb	r3, [r7, #3]
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f001 f817 	bl	800b6fc <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800a6ce:	e010      	b.n	800a6f2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800a6d0:	78fb      	ldrb	r3, [r7, #3]
 800a6d2:	b25b      	sxtb	r3, r3
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	da0e      	bge.n	800a6f6 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800a6d8:	4b09      	ldr	r3, [pc, #36]	; (800a700 <_HandleIncomingPacket+0xe0>)
 800a6da:	7e1b      	ldrb	r3, [r3, #24]
 800a6dc:	4618      	mov	r0, r3
 800a6de:	1cfb      	adds	r3, r7, #3
 800a6e0:	2201      	movs	r2, #1
 800a6e2:	4619      	mov	r1, r3
 800a6e4:	f7ff fd74 	bl	800a1d0 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800a6e8:	e005      	b.n	800a6f6 <_HandleIncomingPacket+0xd6>
    }
  }
 800a6ea:	bf00      	nop
 800a6ec:	e004      	b.n	800a6f8 <_HandleIncomingPacket+0xd8>
      break;
 800a6ee:	bf00      	nop
 800a6f0:	e002      	b.n	800a6f8 <_HandleIncomingPacket+0xd8>
      break;
 800a6f2:	bf00      	nop
 800a6f4:	e000      	b.n	800a6f8 <_HandleIncomingPacket+0xd8>
      break;
 800a6f6:	bf00      	nop
}
 800a6f8:	bf00      	nop
 800a6fa:	3708      	adds	r7, #8
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}
 800a700:	2000771c 	.word	0x2000771c

0800a704 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800a704:	b580      	push	{r7, lr}
 800a706:	b08c      	sub	sp, #48	; 0x30
 800a708:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800a70a:	2301      	movs	r3, #1
 800a70c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800a70e:	1d3b      	adds	r3, r7, #4
 800a710:	3301      	adds	r3, #1
 800a712:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800a714:	69fb      	ldr	r3, [r7, #28]
 800a716:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a718:	4b31      	ldr	r3, [pc, #196]	; (800a7e0 <_TrySendOverflowPacket+0xdc>)
 800a71a:	695b      	ldr	r3, [r3, #20]
 800a71c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a71e:	e00b      	b.n	800a738 <_TrySendOverflowPacket+0x34>
 800a720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a722:	b2da      	uxtb	r2, r3
 800a724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a726:	1c59      	adds	r1, r3, #1
 800a728:	62f9      	str	r1, [r7, #44]	; 0x2c
 800a72a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a72e:	b2d2      	uxtb	r2, r2
 800a730:	701a      	strb	r2, [r3, #0]
 800a732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a734:	09db      	lsrs	r3, r3, #7
 800a736:	62bb      	str	r3, [r7, #40]	; 0x28
 800a738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a73a:	2b7f      	cmp	r3, #127	; 0x7f
 800a73c:	d8f0      	bhi.n	800a720 <_TrySendOverflowPacket+0x1c>
 800a73e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a740:	1c5a      	adds	r2, r3, #1
 800a742:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a744:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a746:	b2d2      	uxtb	r2, r2
 800a748:	701a      	strb	r2, [r3, #0]
 800a74a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a74c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800a74e:	4b25      	ldr	r3, [pc, #148]	; (800a7e4 <_TrySendOverflowPacket+0xe0>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800a754:	4b22      	ldr	r3, [pc, #136]	; (800a7e0 <_TrySendOverflowPacket+0xdc>)
 800a756:	68db      	ldr	r3, [r3, #12]
 800a758:	69ba      	ldr	r2, [r7, #24]
 800a75a:	1ad3      	subs	r3, r2, r3
 800a75c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800a75e:	69fb      	ldr	r3, [r7, #28]
 800a760:	627b      	str	r3, [r7, #36]	; 0x24
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	623b      	str	r3, [r7, #32]
 800a766:	e00b      	b.n	800a780 <_TrySendOverflowPacket+0x7c>
 800a768:	6a3b      	ldr	r3, [r7, #32]
 800a76a:	b2da      	uxtb	r2, r3
 800a76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a76e:	1c59      	adds	r1, r3, #1
 800a770:	6279      	str	r1, [r7, #36]	; 0x24
 800a772:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a776:	b2d2      	uxtb	r2, r2
 800a778:	701a      	strb	r2, [r3, #0]
 800a77a:	6a3b      	ldr	r3, [r7, #32]
 800a77c:	09db      	lsrs	r3, r3, #7
 800a77e:	623b      	str	r3, [r7, #32]
 800a780:	6a3b      	ldr	r3, [r7, #32]
 800a782:	2b7f      	cmp	r3, #127	; 0x7f
 800a784:	d8f0      	bhi.n	800a768 <_TrySendOverflowPacket+0x64>
 800a786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a788:	1c5a      	adds	r2, r3, #1
 800a78a:	627a      	str	r2, [r7, #36]	; 0x24
 800a78c:	6a3a      	ldr	r2, [r7, #32]
 800a78e:	b2d2      	uxtb	r2, r2
 800a790:	701a      	strb	r2, [r3, #0]
 800a792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a794:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800a796:	4b12      	ldr	r3, [pc, #72]	; (800a7e0 <_TrySendOverflowPacket+0xdc>)
 800a798:	785b      	ldrb	r3, [r3, #1]
 800a79a:	4618      	mov	r0, r3
 800a79c:	1d3b      	adds	r3, r7, #4
 800a79e:	69fa      	ldr	r2, [r7, #28]
 800a7a0:	1ad3      	subs	r3, r2, r3
 800a7a2:	461a      	mov	r2, r3
 800a7a4:	1d3b      	adds	r3, r7, #4
 800a7a6:	4619      	mov	r1, r3
 800a7a8:	f7f5 fd3a 	bl	8000220 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800a7b0:	693b      	ldr	r3, [r7, #16]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d009      	beq.n	800a7ca <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800a7b6:	4a0a      	ldr	r2, [pc, #40]	; (800a7e0 <_TrySendOverflowPacket+0xdc>)
 800a7b8:	69bb      	ldr	r3, [r7, #24]
 800a7ba:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800a7bc:	4b08      	ldr	r3, [pc, #32]	; (800a7e0 <_TrySendOverflowPacket+0xdc>)
 800a7be:	781b      	ldrb	r3, [r3, #0]
 800a7c0:	3b01      	subs	r3, #1
 800a7c2:	b2da      	uxtb	r2, r3
 800a7c4:	4b06      	ldr	r3, [pc, #24]	; (800a7e0 <_TrySendOverflowPacket+0xdc>)
 800a7c6:	701a      	strb	r2, [r3, #0]
 800a7c8:	e004      	b.n	800a7d4 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800a7ca:	4b05      	ldr	r3, [pc, #20]	; (800a7e0 <_TrySendOverflowPacket+0xdc>)
 800a7cc:	695b      	ldr	r3, [r3, #20]
 800a7ce:	3301      	adds	r3, #1
 800a7d0:	4a03      	ldr	r2, [pc, #12]	; (800a7e0 <_TrySendOverflowPacket+0xdc>)
 800a7d2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800a7d4:	693b      	ldr	r3, [r7, #16]
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	3730      	adds	r7, #48	; 0x30
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}
 800a7de:	bf00      	nop
 800a7e0:	2000771c 	.word	0x2000771c
 800a7e4:	e0001004 	.word	0xe0001004

0800a7e8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b08a      	sub	sp, #40	; 0x28
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	60f8      	str	r0, [r7, #12]
 800a7f0:	60b9      	str	r1, [r7, #8]
 800a7f2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800a7f4:	4b6c      	ldr	r3, [pc, #432]	; (800a9a8 <_SendPacket+0x1c0>)
 800a7f6:	781b      	ldrb	r3, [r3, #0]
 800a7f8:	2b01      	cmp	r3, #1
 800a7fa:	d010      	beq.n	800a81e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800a7fc:	4b6a      	ldr	r3, [pc, #424]	; (800a9a8 <_SendPacket+0x1c0>)
 800a7fe:	781b      	ldrb	r3, [r3, #0]
 800a800:	2b00      	cmp	r3, #0
 800a802:	f000 80a3 	beq.w	800a94c <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800a806:	4b68      	ldr	r3, [pc, #416]	; (800a9a8 <_SendPacket+0x1c0>)
 800a808:	781b      	ldrb	r3, [r3, #0]
 800a80a:	2b02      	cmp	r3, #2
 800a80c:	d109      	bne.n	800a822 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800a80e:	f7ff ff79 	bl	800a704 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800a812:	4b65      	ldr	r3, [pc, #404]	; (800a9a8 <_SendPacket+0x1c0>)
 800a814:	781b      	ldrb	r3, [r3, #0]
 800a816:	2b01      	cmp	r3, #1
 800a818:	f040 809a 	bne.w	800a950 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 800a81c:	e001      	b.n	800a822 <_SendPacket+0x3a>
    goto Send;
 800a81e:	bf00      	nop
 800a820:	e000      	b.n	800a824 <_SendPacket+0x3c>
Send:
 800a822:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2b1f      	cmp	r3, #31
 800a828:	d809      	bhi.n	800a83e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800a82a:	4b5f      	ldr	r3, [pc, #380]	; (800a9a8 <_SendPacket+0x1c0>)
 800a82c:	69da      	ldr	r2, [r3, #28]
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	fa22 f303 	lsr.w	r3, r2, r3
 800a834:	f003 0301 	and.w	r3, r3, #1
 800a838:	2b00      	cmp	r3, #0
 800a83a:	f040 808b 	bne.w	800a954 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2b17      	cmp	r3, #23
 800a842:	d807      	bhi.n	800a854 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	3b01      	subs	r3, #1
 800a848:	60fb      	str	r3, [r7, #12]
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	b2da      	uxtb	r2, r3
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	701a      	strb	r2, [r3, #0]
 800a852:	e03d      	b.n	800a8d0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 800a854:	68ba      	ldr	r2, [r7, #8]
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	1ad3      	subs	r3, r2, r3
 800a85a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800a85c:	69fb      	ldr	r3, [r7, #28]
 800a85e:	2b7f      	cmp	r3, #127	; 0x7f
 800a860:	d912      	bls.n	800a888 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800a862:	69fb      	ldr	r3, [r7, #28]
 800a864:	09da      	lsrs	r2, r3, #7
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	3b01      	subs	r3, #1
 800a86a:	60fb      	str	r3, [r7, #12]
 800a86c:	b2d2      	uxtb	r2, r2
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800a872:	69fb      	ldr	r3, [r7, #28]
 800a874:	b2db      	uxtb	r3, r3
 800a876:	68fa      	ldr	r2, [r7, #12]
 800a878:	3a01      	subs	r2, #1
 800a87a:	60fa      	str	r2, [r7, #12]
 800a87c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a880:	b2da      	uxtb	r2, r3
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	701a      	strb	r2, [r3, #0]
 800a886:	e006      	b.n	800a896 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	3b01      	subs	r3, #1
 800a88c:	60fb      	str	r3, [r7, #12]
 800a88e:	69fb      	ldr	r3, [r7, #28]
 800a890:	b2da      	uxtb	r2, r3
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2b7f      	cmp	r3, #127	; 0x7f
 800a89a:	d912      	bls.n	800a8c2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	09da      	lsrs	r2, r3, #7
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	3b01      	subs	r3, #1
 800a8a4:	60fb      	str	r3, [r7, #12]
 800a8a6:	b2d2      	uxtb	r2, r2
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	b2db      	uxtb	r3, r3
 800a8b0:	68fa      	ldr	r2, [r7, #12]
 800a8b2:	3a01      	subs	r2, #1
 800a8b4:	60fa      	str	r2, [r7, #12]
 800a8b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a8ba:	b2da      	uxtb	r2, r3
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	701a      	strb	r2, [r3, #0]
 800a8c0:	e006      	b.n	800a8d0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	3b01      	subs	r3, #1
 800a8c6:	60fb      	str	r3, [r7, #12]
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	b2da      	uxtb	r2, r3
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800a8d0:	4b36      	ldr	r3, [pc, #216]	; (800a9ac <_SendPacket+0x1c4>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800a8d6:	4b34      	ldr	r3, [pc, #208]	; (800a9a8 <_SendPacket+0x1c0>)
 800a8d8:	68db      	ldr	r3, [r3, #12]
 800a8da:	69ba      	ldr	r2, [r7, #24]
 800a8dc:	1ad3      	subs	r3, r2, r3
 800a8de:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	627b      	str	r3, [r7, #36]	; 0x24
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	623b      	str	r3, [r7, #32]
 800a8e8:	e00b      	b.n	800a902 <_SendPacket+0x11a>
 800a8ea:	6a3b      	ldr	r3, [r7, #32]
 800a8ec:	b2da      	uxtb	r2, r3
 800a8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8f0:	1c59      	adds	r1, r3, #1
 800a8f2:	6279      	str	r1, [r7, #36]	; 0x24
 800a8f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a8f8:	b2d2      	uxtb	r2, r2
 800a8fa:	701a      	strb	r2, [r3, #0]
 800a8fc:	6a3b      	ldr	r3, [r7, #32]
 800a8fe:	09db      	lsrs	r3, r3, #7
 800a900:	623b      	str	r3, [r7, #32]
 800a902:	6a3b      	ldr	r3, [r7, #32]
 800a904:	2b7f      	cmp	r3, #127	; 0x7f
 800a906:	d8f0      	bhi.n	800a8ea <_SendPacket+0x102>
 800a908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a90a:	1c5a      	adds	r2, r3, #1
 800a90c:	627a      	str	r2, [r7, #36]	; 0x24
 800a90e:	6a3a      	ldr	r2, [r7, #32]
 800a910:	b2d2      	uxtb	r2, r2
 800a912:	701a      	strb	r2, [r3, #0]
 800a914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a916:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800a918:	4b23      	ldr	r3, [pc, #140]	; (800a9a8 <_SendPacket+0x1c0>)
 800a91a:	785b      	ldrb	r3, [r3, #1]
 800a91c:	4618      	mov	r0, r3
 800a91e:	68ba      	ldr	r2, [r7, #8]
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	1ad3      	subs	r3, r2, r3
 800a924:	461a      	mov	r2, r3
 800a926:	68f9      	ldr	r1, [r7, #12]
 800a928:	f7f5 fc7a 	bl	8000220 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800a92c:	4603      	mov	r3, r0
 800a92e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800a930:	693b      	ldr	r3, [r7, #16]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d003      	beq.n	800a93e <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800a936:	4a1c      	ldr	r2, [pc, #112]	; (800a9a8 <_SendPacket+0x1c0>)
 800a938:	69bb      	ldr	r3, [r7, #24]
 800a93a:	60d3      	str	r3, [r2, #12]
 800a93c:	e00b      	b.n	800a956 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800a93e:	4b1a      	ldr	r3, [pc, #104]	; (800a9a8 <_SendPacket+0x1c0>)
 800a940:	781b      	ldrb	r3, [r3, #0]
 800a942:	3301      	adds	r3, #1
 800a944:	b2da      	uxtb	r2, r3
 800a946:	4b18      	ldr	r3, [pc, #96]	; (800a9a8 <_SendPacket+0x1c0>)
 800a948:	701a      	strb	r2, [r3, #0]
 800a94a:	e004      	b.n	800a956 <_SendPacket+0x16e>
    goto SendDone;
 800a94c:	bf00      	nop
 800a94e:	e002      	b.n	800a956 <_SendPacket+0x16e>
      goto SendDone;
 800a950:	bf00      	nop
 800a952:	e000      	b.n	800a956 <_SendPacket+0x16e>
      goto SendDone;
 800a954:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800a956:	4b14      	ldr	r3, [pc, #80]	; (800a9a8 <_SendPacket+0x1c0>)
 800a958:	7e1b      	ldrb	r3, [r3, #24]
 800a95a:	4619      	mov	r1, r3
 800a95c:	4a14      	ldr	r2, [pc, #80]	; (800a9b0 <_SendPacket+0x1c8>)
 800a95e:	460b      	mov	r3, r1
 800a960:	005b      	lsls	r3, r3, #1
 800a962:	440b      	add	r3, r1
 800a964:	00db      	lsls	r3, r3, #3
 800a966:	4413      	add	r3, r2
 800a968:	336c      	adds	r3, #108	; 0x6c
 800a96a:	681a      	ldr	r2, [r3, #0]
 800a96c:	4b0e      	ldr	r3, [pc, #56]	; (800a9a8 <_SendPacket+0x1c0>)
 800a96e:	7e1b      	ldrb	r3, [r3, #24]
 800a970:	4618      	mov	r0, r3
 800a972:	490f      	ldr	r1, [pc, #60]	; (800a9b0 <_SendPacket+0x1c8>)
 800a974:	4603      	mov	r3, r0
 800a976:	005b      	lsls	r3, r3, #1
 800a978:	4403      	add	r3, r0
 800a97a:	00db      	lsls	r3, r3, #3
 800a97c:	440b      	add	r3, r1
 800a97e:	3370      	adds	r3, #112	; 0x70
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	429a      	cmp	r2, r3
 800a984:	d00b      	beq.n	800a99e <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800a986:	4b08      	ldr	r3, [pc, #32]	; (800a9a8 <_SendPacket+0x1c0>)
 800a988:	789b      	ldrb	r3, [r3, #2]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d107      	bne.n	800a99e <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800a98e:	4b06      	ldr	r3, [pc, #24]	; (800a9a8 <_SendPacket+0x1c0>)
 800a990:	2201      	movs	r2, #1
 800a992:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800a994:	f7ff fe44 	bl	800a620 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800a998:	4b03      	ldr	r3, [pc, #12]	; (800a9a8 <_SendPacket+0x1c0>)
 800a99a:	2200      	movs	r2, #0
 800a99c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800a99e:	bf00      	nop
 800a9a0:	3728      	adds	r7, #40	; 0x28
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}
 800a9a6:	bf00      	nop
 800a9a8:	2000771c 	.word	0x2000771c
 800a9ac:	e0001004 	.word	0xe0001004
 800a9b0:	20004a5c 	.word	0x20004a5c

0800a9b4 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b086      	sub	sp, #24
 800a9b8:	af02      	add	r7, sp, #8
 800a9ba:	60f8      	str	r0, [r7, #12]
 800a9bc:	60b9      	str	r1, [r7, #8]
 800a9be:	607a      	str	r2, [r7, #4]
 800a9c0:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800a9c8:	4917      	ldr	r1, [pc, #92]	; (800aa28 <SEGGER_SYSVIEW_Init+0x74>)
 800a9ca:	4818      	ldr	r0, [pc, #96]	; (800aa2c <SEGGER_SYSVIEW_Init+0x78>)
 800a9cc:	f7ff fcfc 	bl	800a3c8 <SEGGER_RTT_AllocUpBuffer>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	b2da      	uxtb	r2, r3
 800a9d4:	4b16      	ldr	r3, [pc, #88]	; (800aa30 <SEGGER_SYSVIEW_Init+0x7c>)
 800a9d6:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800a9d8:	4b15      	ldr	r3, [pc, #84]	; (800aa30 <SEGGER_SYSVIEW_Init+0x7c>)
 800a9da:	785a      	ldrb	r2, [r3, #1]
 800a9dc:	4b14      	ldr	r3, [pc, #80]	; (800aa30 <SEGGER_SYSVIEW_Init+0x7c>)
 800a9de:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800a9e0:	4b13      	ldr	r3, [pc, #76]	; (800aa30 <SEGGER_SYSVIEW_Init+0x7c>)
 800a9e2:	7e1b      	ldrb	r3, [r3, #24]
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	9300      	str	r3, [sp, #0]
 800a9ea:	2308      	movs	r3, #8
 800a9ec:	4a11      	ldr	r2, [pc, #68]	; (800aa34 <SEGGER_SYSVIEW_Init+0x80>)
 800a9ee:	490f      	ldr	r1, [pc, #60]	; (800aa2c <SEGGER_SYSVIEW_Init+0x78>)
 800a9f0:	f7ff fd6e 	bl	800a4d0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800a9f4:	4b0e      	ldr	r3, [pc, #56]	; (800aa30 <SEGGER_SYSVIEW_Init+0x7c>)
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800a9fa:	4b0f      	ldr	r3, [pc, #60]	; (800aa38 <SEGGER_SYSVIEW_Init+0x84>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	4a0c      	ldr	r2, [pc, #48]	; (800aa30 <SEGGER_SYSVIEW_Init+0x7c>)
 800aa00:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800aa02:	4a0b      	ldr	r2, [pc, #44]	; (800aa30 <SEGGER_SYSVIEW_Init+0x7c>)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800aa08:	4a09      	ldr	r2, [pc, #36]	; (800aa30 <SEGGER_SYSVIEW_Init+0x7c>)
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800aa0e:	4a08      	ldr	r2, [pc, #32]	; (800aa30 <SEGGER_SYSVIEW_Init+0x7c>)
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800aa14:	4a06      	ldr	r2, [pc, #24]	; (800aa30 <SEGGER_SYSVIEW_Init+0x7c>)
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800aa1a:	4b05      	ldr	r3, [pc, #20]	; (800aa30 <SEGGER_SYSVIEW_Init+0x7c>)
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800aa20:	bf00      	nop
 800aa22:	3710      	adds	r7, #16
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}
 800aa28:	20004f14 	.word	0x20004f14
 800aa2c:	08010524 	.word	0x08010524
 800aa30:	2000771c 	.word	0x2000771c
 800aa34:	20007714 	.word	0x20007714
 800aa38:	e0001004 	.word	0xe0001004

0800aa3c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800aa3c:	b480      	push	{r7}
 800aa3e:	b083      	sub	sp, #12
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800aa44:	4a04      	ldr	r2, [pc, #16]	; (800aa58 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6113      	str	r3, [r2, #16]
}
 800aa4a:	bf00      	nop
 800aa4c:	370c      	adds	r7, #12
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa54:	4770      	bx	lr
 800aa56:	bf00      	nop
 800aa58:	2000771c 	.word	0x2000771c

0800aa5c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b084      	sub	sp, #16
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800aa64:	f3ef 8311 	mrs	r3, BASEPRI
 800aa68:	f04f 0120 	mov.w	r1, #32
 800aa6c:	f381 8811 	msr	BASEPRI, r1
 800aa70:	60fb      	str	r3, [r7, #12]
 800aa72:	4808      	ldr	r0, [pc, #32]	; (800aa94 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800aa74:	f7ff fdc8 	bl	800a608 <_PreparePacket>
 800aa78:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800aa7a:	687a      	ldr	r2, [r7, #4]
 800aa7c:	68b9      	ldr	r1, [r7, #8]
 800aa7e:	68b8      	ldr	r0, [r7, #8]
 800aa80:	f7ff feb2 	bl	800a7e8 <_SendPacket>
  RECORD_END();
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	f383 8811 	msr	BASEPRI, r3
}
 800aa8a:	bf00      	nop
 800aa8c:	3710      	adds	r7, #16
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}
 800aa92:	bf00      	nop
 800aa94:	2000774c 	.word	0x2000774c

0800aa98 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b088      	sub	sp, #32
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
 800aaa0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800aaa2:	f3ef 8311 	mrs	r3, BASEPRI
 800aaa6:	f04f 0120 	mov.w	r1, #32
 800aaaa:	f381 8811 	msr	BASEPRI, r1
 800aaae:	617b      	str	r3, [r7, #20]
 800aab0:	4816      	ldr	r0, [pc, #88]	; (800ab0c <SEGGER_SYSVIEW_RecordU32+0x74>)
 800aab2:	f7ff fda9 	bl	800a608 <_PreparePacket>
 800aab6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800aab8:	693b      	ldr	r3, [r7, #16]
 800aaba:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	61fb      	str	r3, [r7, #28]
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	61bb      	str	r3, [r7, #24]
 800aac4:	e00b      	b.n	800aade <SEGGER_SYSVIEW_RecordU32+0x46>
 800aac6:	69bb      	ldr	r3, [r7, #24]
 800aac8:	b2da      	uxtb	r2, r3
 800aaca:	69fb      	ldr	r3, [r7, #28]
 800aacc:	1c59      	adds	r1, r3, #1
 800aace:	61f9      	str	r1, [r7, #28]
 800aad0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800aad4:	b2d2      	uxtb	r2, r2
 800aad6:	701a      	strb	r2, [r3, #0]
 800aad8:	69bb      	ldr	r3, [r7, #24]
 800aada:	09db      	lsrs	r3, r3, #7
 800aadc:	61bb      	str	r3, [r7, #24]
 800aade:	69bb      	ldr	r3, [r7, #24]
 800aae0:	2b7f      	cmp	r3, #127	; 0x7f
 800aae2:	d8f0      	bhi.n	800aac6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 800aae4:	69fb      	ldr	r3, [r7, #28]
 800aae6:	1c5a      	adds	r2, r3, #1
 800aae8:	61fa      	str	r2, [r7, #28]
 800aaea:	69ba      	ldr	r2, [r7, #24]
 800aaec:	b2d2      	uxtb	r2, r2
 800aaee:	701a      	strb	r2, [r3, #0]
 800aaf0:	69fb      	ldr	r3, [r7, #28]
 800aaf2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800aaf4:	687a      	ldr	r2, [r7, #4]
 800aaf6:	68f9      	ldr	r1, [r7, #12]
 800aaf8:	6938      	ldr	r0, [r7, #16]
 800aafa:	f7ff fe75 	bl	800a7e8 <_SendPacket>
  RECORD_END();
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	f383 8811 	msr	BASEPRI, r3
}
 800ab04:	bf00      	nop
 800ab06:	3720      	adds	r7, #32
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}
 800ab0c:	2000774c 	.word	0x2000774c

0800ab10 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b08c      	sub	sp, #48	; 0x30
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	60f8      	str	r0, [r7, #12]
 800ab18:	60b9      	str	r1, [r7, #8]
 800ab1a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800ab1c:	f3ef 8311 	mrs	r3, BASEPRI
 800ab20:	f04f 0120 	mov.w	r1, #32
 800ab24:	f381 8811 	msr	BASEPRI, r1
 800ab28:	61fb      	str	r3, [r7, #28]
 800ab2a:	4825      	ldr	r0, [pc, #148]	; (800abc0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800ab2c:	f7ff fd6c 	bl	800a608 <_PreparePacket>
 800ab30:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800ab32:	69bb      	ldr	r3, [r7, #24]
 800ab34:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800ab36:	697b      	ldr	r3, [r7, #20]
 800ab38:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab3e:	e00b      	b.n	800ab58 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800ab40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab42:	b2da      	uxtb	r2, r3
 800ab44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab46:	1c59      	adds	r1, r3, #1
 800ab48:	62f9      	str	r1, [r7, #44]	; 0x2c
 800ab4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ab4e:	b2d2      	uxtb	r2, r2
 800ab50:	701a      	strb	r2, [r3, #0]
 800ab52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab54:	09db      	lsrs	r3, r3, #7
 800ab56:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab5a:	2b7f      	cmp	r3, #127	; 0x7f
 800ab5c:	d8f0      	bhi.n	800ab40 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800ab5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab60:	1c5a      	adds	r2, r3, #1
 800ab62:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ab64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab66:	b2d2      	uxtb	r2, r2
 800ab68:	701a      	strb	r2, [r3, #0]
 800ab6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab6c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800ab6e:	697b      	ldr	r3, [r7, #20]
 800ab70:	627b      	str	r3, [r7, #36]	; 0x24
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	623b      	str	r3, [r7, #32]
 800ab76:	e00b      	b.n	800ab90 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800ab78:	6a3b      	ldr	r3, [r7, #32]
 800ab7a:	b2da      	uxtb	r2, r3
 800ab7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab7e:	1c59      	adds	r1, r3, #1
 800ab80:	6279      	str	r1, [r7, #36]	; 0x24
 800ab82:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ab86:	b2d2      	uxtb	r2, r2
 800ab88:	701a      	strb	r2, [r3, #0]
 800ab8a:	6a3b      	ldr	r3, [r7, #32]
 800ab8c:	09db      	lsrs	r3, r3, #7
 800ab8e:	623b      	str	r3, [r7, #32]
 800ab90:	6a3b      	ldr	r3, [r7, #32]
 800ab92:	2b7f      	cmp	r3, #127	; 0x7f
 800ab94:	d8f0      	bhi.n	800ab78 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800ab96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab98:	1c5a      	adds	r2, r3, #1
 800ab9a:	627a      	str	r2, [r7, #36]	; 0x24
 800ab9c:	6a3a      	ldr	r2, [r7, #32]
 800ab9e:	b2d2      	uxtb	r2, r2
 800aba0:	701a      	strb	r2, [r3, #0]
 800aba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aba4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800aba6:	68fa      	ldr	r2, [r7, #12]
 800aba8:	6979      	ldr	r1, [r7, #20]
 800abaa:	69b8      	ldr	r0, [r7, #24]
 800abac:	f7ff fe1c 	bl	800a7e8 <_SendPacket>
  RECORD_END();
 800abb0:	69fb      	ldr	r3, [r7, #28]
 800abb2:	f383 8811 	msr	BASEPRI, r3
}
 800abb6:	bf00      	nop
 800abb8:	3730      	adds	r7, #48	; 0x30
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}
 800abbe:	bf00      	nop
 800abc0:	2000774c 	.word	0x2000774c

0800abc4 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b08e      	sub	sp, #56	; 0x38
 800abc8:	af00      	add	r7, sp, #0
 800abca:	60f8      	str	r0, [r7, #12]
 800abcc:	60b9      	str	r1, [r7, #8]
 800abce:	607a      	str	r2, [r7, #4]
 800abd0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800abd2:	f3ef 8311 	mrs	r3, BASEPRI
 800abd6:	f04f 0120 	mov.w	r1, #32
 800abda:	f381 8811 	msr	BASEPRI, r1
 800abde:	61fb      	str	r3, [r7, #28]
 800abe0:	4832      	ldr	r0, [pc, #200]	; (800acac <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800abe2:	f7ff fd11 	bl	800a608 <_PreparePacket>
 800abe6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800abe8:	69bb      	ldr	r3, [r7, #24]
 800abea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800abec:	697b      	ldr	r3, [r7, #20]
 800abee:	637b      	str	r3, [r7, #52]	; 0x34
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	633b      	str	r3, [r7, #48]	; 0x30
 800abf4:	e00b      	b.n	800ac0e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800abf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf8:	b2da      	uxtb	r2, r3
 800abfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abfc:	1c59      	adds	r1, r3, #1
 800abfe:	6379      	str	r1, [r7, #52]	; 0x34
 800ac00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ac04:	b2d2      	uxtb	r2, r2
 800ac06:	701a      	strb	r2, [r3, #0]
 800ac08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac0a:	09db      	lsrs	r3, r3, #7
 800ac0c:	633b      	str	r3, [r7, #48]	; 0x30
 800ac0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac10:	2b7f      	cmp	r3, #127	; 0x7f
 800ac12:	d8f0      	bhi.n	800abf6 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800ac14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac16:	1c5a      	adds	r2, r3, #1
 800ac18:	637a      	str	r2, [r7, #52]	; 0x34
 800ac1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac1c:	b2d2      	uxtb	r2, r2
 800ac1e:	701a      	strb	r2, [r3, #0]
 800ac20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac22:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800ac24:	697b      	ldr	r3, [r7, #20]
 800ac26:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ac2c:	e00b      	b.n	800ac46 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800ac2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac30:	b2da      	uxtb	r2, r3
 800ac32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac34:	1c59      	adds	r1, r3, #1
 800ac36:	62f9      	str	r1, [r7, #44]	; 0x2c
 800ac38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ac3c:	b2d2      	uxtb	r2, r2
 800ac3e:	701a      	strb	r2, [r3, #0]
 800ac40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac42:	09db      	lsrs	r3, r3, #7
 800ac44:	62bb      	str	r3, [r7, #40]	; 0x28
 800ac46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac48:	2b7f      	cmp	r3, #127	; 0x7f
 800ac4a:	d8f0      	bhi.n	800ac2e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800ac4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac4e:	1c5a      	adds	r2, r3, #1
 800ac50:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ac52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac54:	b2d2      	uxtb	r2, r2
 800ac56:	701a      	strb	r2, [r3, #0]
 800ac58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac5a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	627b      	str	r3, [r7, #36]	; 0x24
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	623b      	str	r3, [r7, #32]
 800ac64:	e00b      	b.n	800ac7e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800ac66:	6a3b      	ldr	r3, [r7, #32]
 800ac68:	b2da      	uxtb	r2, r3
 800ac6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac6c:	1c59      	adds	r1, r3, #1
 800ac6e:	6279      	str	r1, [r7, #36]	; 0x24
 800ac70:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ac74:	b2d2      	uxtb	r2, r2
 800ac76:	701a      	strb	r2, [r3, #0]
 800ac78:	6a3b      	ldr	r3, [r7, #32]
 800ac7a:	09db      	lsrs	r3, r3, #7
 800ac7c:	623b      	str	r3, [r7, #32]
 800ac7e:	6a3b      	ldr	r3, [r7, #32]
 800ac80:	2b7f      	cmp	r3, #127	; 0x7f
 800ac82:	d8f0      	bhi.n	800ac66 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800ac84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac86:	1c5a      	adds	r2, r3, #1
 800ac88:	627a      	str	r2, [r7, #36]	; 0x24
 800ac8a:	6a3a      	ldr	r2, [r7, #32]
 800ac8c:	b2d2      	uxtb	r2, r2
 800ac8e:	701a      	strb	r2, [r3, #0]
 800ac90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac92:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800ac94:	68fa      	ldr	r2, [r7, #12]
 800ac96:	6979      	ldr	r1, [r7, #20]
 800ac98:	69b8      	ldr	r0, [r7, #24]
 800ac9a:	f7ff fda5 	bl	800a7e8 <_SendPacket>
  RECORD_END();
 800ac9e:	69fb      	ldr	r3, [r7, #28]
 800aca0:	f383 8811 	msr	BASEPRI, r3
}
 800aca4:	bf00      	nop
 800aca6:	3738      	adds	r7, #56	; 0x38
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}
 800acac:	2000774c 	.word	0x2000774c

0800acb0 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b090      	sub	sp, #64	; 0x40
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	60f8      	str	r0, [r7, #12]
 800acb8:	60b9      	str	r1, [r7, #8]
 800acba:	607a      	str	r2, [r7, #4]
 800acbc:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800acbe:	f3ef 8311 	mrs	r3, BASEPRI
 800acc2:	f04f 0120 	mov.w	r1, #32
 800acc6:	f381 8811 	msr	BASEPRI, r1
 800acca:	61fb      	str	r3, [r7, #28]
 800accc:	4840      	ldr	r0, [pc, #256]	; (800add0 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800acce:	f7ff fc9b 	bl	800a608 <_PreparePacket>
 800acd2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800acd4:	69bb      	ldr	r3, [r7, #24]
 800acd6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800acd8:	697b      	ldr	r3, [r7, #20]
 800acda:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	63bb      	str	r3, [r7, #56]	; 0x38
 800ace0:	e00b      	b.n	800acfa <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800ace2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ace4:	b2da      	uxtb	r2, r3
 800ace6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ace8:	1c59      	adds	r1, r3, #1
 800acea:	63f9      	str	r1, [r7, #60]	; 0x3c
 800acec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800acf0:	b2d2      	uxtb	r2, r2
 800acf2:	701a      	strb	r2, [r3, #0]
 800acf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acf6:	09db      	lsrs	r3, r3, #7
 800acf8:	63bb      	str	r3, [r7, #56]	; 0x38
 800acfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acfc:	2b7f      	cmp	r3, #127	; 0x7f
 800acfe:	d8f0      	bhi.n	800ace2 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800ad00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad02:	1c5a      	adds	r2, r3, #1
 800ad04:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ad06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad08:	b2d2      	uxtb	r2, r2
 800ad0a:	701a      	strb	r2, [r3, #0]
 800ad0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad0e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800ad10:	697b      	ldr	r3, [r7, #20]
 800ad12:	637b      	str	r3, [r7, #52]	; 0x34
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	633b      	str	r3, [r7, #48]	; 0x30
 800ad18:	e00b      	b.n	800ad32 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800ad1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad1c:	b2da      	uxtb	r2, r3
 800ad1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad20:	1c59      	adds	r1, r3, #1
 800ad22:	6379      	str	r1, [r7, #52]	; 0x34
 800ad24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ad28:	b2d2      	uxtb	r2, r2
 800ad2a:	701a      	strb	r2, [r3, #0]
 800ad2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad2e:	09db      	lsrs	r3, r3, #7
 800ad30:	633b      	str	r3, [r7, #48]	; 0x30
 800ad32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad34:	2b7f      	cmp	r3, #127	; 0x7f
 800ad36:	d8f0      	bhi.n	800ad1a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800ad38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad3a:	1c5a      	adds	r2, r3, #1
 800ad3c:	637a      	str	r2, [r7, #52]	; 0x34
 800ad3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad40:	b2d2      	uxtb	r2, r2
 800ad42:	701a      	strb	r2, [r3, #0]
 800ad44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad46:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800ad48:	697b      	ldr	r3, [r7, #20]
 800ad4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ad50:	e00b      	b.n	800ad6a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800ad52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad54:	b2da      	uxtb	r2, r3
 800ad56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad58:	1c59      	adds	r1, r3, #1
 800ad5a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800ad5c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ad60:	b2d2      	uxtb	r2, r2
 800ad62:	701a      	strb	r2, [r3, #0]
 800ad64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad66:	09db      	lsrs	r3, r3, #7
 800ad68:	62bb      	str	r3, [r7, #40]	; 0x28
 800ad6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad6c:	2b7f      	cmp	r3, #127	; 0x7f
 800ad6e:	d8f0      	bhi.n	800ad52 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800ad70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad72:	1c5a      	adds	r2, r3, #1
 800ad74:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ad76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad78:	b2d2      	uxtb	r2, r2
 800ad7a:	701a      	strb	r2, [r3, #0]
 800ad7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad7e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800ad80:	697b      	ldr	r3, [r7, #20]
 800ad82:	627b      	str	r3, [r7, #36]	; 0x24
 800ad84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad86:	623b      	str	r3, [r7, #32]
 800ad88:	e00b      	b.n	800ada2 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800ad8a:	6a3b      	ldr	r3, [r7, #32]
 800ad8c:	b2da      	uxtb	r2, r3
 800ad8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad90:	1c59      	adds	r1, r3, #1
 800ad92:	6279      	str	r1, [r7, #36]	; 0x24
 800ad94:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ad98:	b2d2      	uxtb	r2, r2
 800ad9a:	701a      	strb	r2, [r3, #0]
 800ad9c:	6a3b      	ldr	r3, [r7, #32]
 800ad9e:	09db      	lsrs	r3, r3, #7
 800ada0:	623b      	str	r3, [r7, #32]
 800ada2:	6a3b      	ldr	r3, [r7, #32]
 800ada4:	2b7f      	cmp	r3, #127	; 0x7f
 800ada6:	d8f0      	bhi.n	800ad8a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800ada8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adaa:	1c5a      	adds	r2, r3, #1
 800adac:	627a      	str	r2, [r7, #36]	; 0x24
 800adae:	6a3a      	ldr	r2, [r7, #32]
 800adb0:	b2d2      	uxtb	r2, r2
 800adb2:	701a      	strb	r2, [r3, #0]
 800adb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adb6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800adb8:	68fa      	ldr	r2, [r7, #12]
 800adba:	6979      	ldr	r1, [r7, #20]
 800adbc:	69b8      	ldr	r0, [r7, #24]
 800adbe:	f7ff fd13 	bl	800a7e8 <_SendPacket>
  RECORD_END();
 800adc2:	69fb      	ldr	r3, [r7, #28]
 800adc4:	f383 8811 	msr	BASEPRI, r3
}
 800adc8:	bf00      	nop
 800adca:	3740      	adds	r7, #64	; 0x40
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}
 800add0:	2000774c 	.word	0x2000774c

0800add4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800add4:	b580      	push	{r7, lr}
 800add6:	b08c      	sub	sp, #48	; 0x30
 800add8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800adda:	4b58      	ldr	r3, [pc, #352]	; (800af3c <SEGGER_SYSVIEW_Start+0x168>)
 800addc:	2201      	movs	r2, #1
 800adde:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800ade0:	f3ef 8311 	mrs	r3, BASEPRI
 800ade4:	f04f 0120 	mov.w	r1, #32
 800ade8:	f381 8811 	msr	BASEPRI, r1
 800adec:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800adee:	4b53      	ldr	r3, [pc, #332]	; (800af3c <SEGGER_SYSVIEW_Start+0x168>)
 800adf0:	785b      	ldrb	r3, [r3, #1]
 800adf2:	220a      	movs	r2, #10
 800adf4:	4952      	ldr	r1, [pc, #328]	; (800af40 <SEGGER_SYSVIEW_Start+0x16c>)
 800adf6:	4618      	mov	r0, r3
 800adf8:	f7f5 fa12 	bl	8000220 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800ae02:	200a      	movs	r0, #10
 800ae04:	f7ff fe2a 	bl	800aa5c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800ae08:	f3ef 8311 	mrs	r3, BASEPRI
 800ae0c:	f04f 0120 	mov.w	r1, #32
 800ae10:	f381 8811 	msr	BASEPRI, r1
 800ae14:	60bb      	str	r3, [r7, #8]
 800ae16:	484b      	ldr	r0, [pc, #300]	; (800af44 <SEGGER_SYSVIEW_Start+0x170>)
 800ae18:	f7ff fbf6 	bl	800a608 <_PreparePacket>
 800ae1c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ae26:	4b45      	ldr	r3, [pc, #276]	; (800af3c <SEGGER_SYSVIEW_Start+0x168>)
 800ae28:	685b      	ldr	r3, [r3, #4]
 800ae2a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae2c:	e00b      	b.n	800ae46 <SEGGER_SYSVIEW_Start+0x72>
 800ae2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae30:	b2da      	uxtb	r2, r3
 800ae32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae34:	1c59      	adds	r1, r3, #1
 800ae36:	62f9      	str	r1, [r7, #44]	; 0x2c
 800ae38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ae3c:	b2d2      	uxtb	r2, r2
 800ae3e:	701a      	strb	r2, [r3, #0]
 800ae40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae42:	09db      	lsrs	r3, r3, #7
 800ae44:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae48:	2b7f      	cmp	r3, #127	; 0x7f
 800ae4a:	d8f0      	bhi.n	800ae2e <SEGGER_SYSVIEW_Start+0x5a>
 800ae4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae4e:	1c5a      	adds	r2, r3, #1
 800ae50:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ae52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae54:	b2d2      	uxtb	r2, r2
 800ae56:	701a      	strb	r2, [r3, #0]
 800ae58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae5a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	627b      	str	r3, [r7, #36]	; 0x24
 800ae60:	4b36      	ldr	r3, [pc, #216]	; (800af3c <SEGGER_SYSVIEW_Start+0x168>)
 800ae62:	689b      	ldr	r3, [r3, #8]
 800ae64:	623b      	str	r3, [r7, #32]
 800ae66:	e00b      	b.n	800ae80 <SEGGER_SYSVIEW_Start+0xac>
 800ae68:	6a3b      	ldr	r3, [r7, #32]
 800ae6a:	b2da      	uxtb	r2, r3
 800ae6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae6e:	1c59      	adds	r1, r3, #1
 800ae70:	6279      	str	r1, [r7, #36]	; 0x24
 800ae72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ae76:	b2d2      	uxtb	r2, r2
 800ae78:	701a      	strb	r2, [r3, #0]
 800ae7a:	6a3b      	ldr	r3, [r7, #32]
 800ae7c:	09db      	lsrs	r3, r3, #7
 800ae7e:	623b      	str	r3, [r7, #32]
 800ae80:	6a3b      	ldr	r3, [r7, #32]
 800ae82:	2b7f      	cmp	r3, #127	; 0x7f
 800ae84:	d8f0      	bhi.n	800ae68 <SEGGER_SYSVIEW_Start+0x94>
 800ae86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae88:	1c5a      	adds	r2, r3, #1
 800ae8a:	627a      	str	r2, [r7, #36]	; 0x24
 800ae8c:	6a3a      	ldr	r2, [r7, #32]
 800ae8e:	b2d2      	uxtb	r2, r2
 800ae90:	701a      	strb	r2, [r3, #0]
 800ae92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae94:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	61fb      	str	r3, [r7, #28]
 800ae9a:	4b28      	ldr	r3, [pc, #160]	; (800af3c <SEGGER_SYSVIEW_Start+0x168>)
 800ae9c:	691b      	ldr	r3, [r3, #16]
 800ae9e:	61bb      	str	r3, [r7, #24]
 800aea0:	e00b      	b.n	800aeba <SEGGER_SYSVIEW_Start+0xe6>
 800aea2:	69bb      	ldr	r3, [r7, #24]
 800aea4:	b2da      	uxtb	r2, r3
 800aea6:	69fb      	ldr	r3, [r7, #28]
 800aea8:	1c59      	adds	r1, r3, #1
 800aeaa:	61f9      	str	r1, [r7, #28]
 800aeac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800aeb0:	b2d2      	uxtb	r2, r2
 800aeb2:	701a      	strb	r2, [r3, #0]
 800aeb4:	69bb      	ldr	r3, [r7, #24]
 800aeb6:	09db      	lsrs	r3, r3, #7
 800aeb8:	61bb      	str	r3, [r7, #24]
 800aeba:	69bb      	ldr	r3, [r7, #24]
 800aebc:	2b7f      	cmp	r3, #127	; 0x7f
 800aebe:	d8f0      	bhi.n	800aea2 <SEGGER_SYSVIEW_Start+0xce>
 800aec0:	69fb      	ldr	r3, [r7, #28]
 800aec2:	1c5a      	adds	r2, r3, #1
 800aec4:	61fa      	str	r2, [r7, #28]
 800aec6:	69ba      	ldr	r2, [r7, #24]
 800aec8:	b2d2      	uxtb	r2, r2
 800aeca:	701a      	strb	r2, [r3, #0]
 800aecc:	69fb      	ldr	r3, [r7, #28]
 800aece:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	617b      	str	r3, [r7, #20]
 800aed4:	2300      	movs	r3, #0
 800aed6:	613b      	str	r3, [r7, #16]
 800aed8:	e00b      	b.n	800aef2 <SEGGER_SYSVIEW_Start+0x11e>
 800aeda:	693b      	ldr	r3, [r7, #16]
 800aedc:	b2da      	uxtb	r2, r3
 800aede:	697b      	ldr	r3, [r7, #20]
 800aee0:	1c59      	adds	r1, r3, #1
 800aee2:	6179      	str	r1, [r7, #20]
 800aee4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800aee8:	b2d2      	uxtb	r2, r2
 800aeea:	701a      	strb	r2, [r3, #0]
 800aeec:	693b      	ldr	r3, [r7, #16]
 800aeee:	09db      	lsrs	r3, r3, #7
 800aef0:	613b      	str	r3, [r7, #16]
 800aef2:	693b      	ldr	r3, [r7, #16]
 800aef4:	2b7f      	cmp	r3, #127	; 0x7f
 800aef6:	d8f0      	bhi.n	800aeda <SEGGER_SYSVIEW_Start+0x106>
 800aef8:	697b      	ldr	r3, [r7, #20]
 800aefa:	1c5a      	adds	r2, r3, #1
 800aefc:	617a      	str	r2, [r7, #20]
 800aefe:	693a      	ldr	r2, [r7, #16]
 800af00:	b2d2      	uxtb	r2, r2
 800af02:	701a      	strb	r2, [r3, #0]
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800af08:	2218      	movs	r2, #24
 800af0a:	6839      	ldr	r1, [r7, #0]
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f7ff fc6b 	bl	800a7e8 <_SendPacket>
      RECORD_END();
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800af18:	4b08      	ldr	r3, [pc, #32]	; (800af3c <SEGGER_SYSVIEW_Start+0x168>)
 800af1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d002      	beq.n	800af26 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800af20:	4b06      	ldr	r3, [pc, #24]	; (800af3c <SEGGER_SYSVIEW_Start+0x168>)
 800af22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af24:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800af26:	f000 f9eb 	bl	800b300 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800af2a:	f000 f9b1 	bl	800b290 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800af2e:	f000 fc83 	bl	800b838 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800af32:	bf00      	nop
 800af34:	3730      	adds	r7, #48	; 0x30
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}
 800af3a:	bf00      	nop
 800af3c:	2000771c 	.word	0x2000771c
 800af40:	0801054c 	.word	0x0801054c
 800af44:	2000774c 	.word	0x2000774c

0800af48 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800af48:	b580      	push	{r7, lr}
 800af4a:	b082      	sub	sp, #8
 800af4c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800af4e:	f3ef 8311 	mrs	r3, BASEPRI
 800af52:	f04f 0120 	mov.w	r1, #32
 800af56:	f381 8811 	msr	BASEPRI, r1
 800af5a:	607b      	str	r3, [r7, #4]
 800af5c:	480b      	ldr	r0, [pc, #44]	; (800af8c <SEGGER_SYSVIEW_Stop+0x44>)
 800af5e:	f7ff fb53 	bl	800a608 <_PreparePacket>
 800af62:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800af64:	4b0a      	ldr	r3, [pc, #40]	; (800af90 <SEGGER_SYSVIEW_Stop+0x48>)
 800af66:	781b      	ldrb	r3, [r3, #0]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d007      	beq.n	800af7c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800af6c:	220b      	movs	r2, #11
 800af6e:	6839      	ldr	r1, [r7, #0]
 800af70:	6838      	ldr	r0, [r7, #0]
 800af72:	f7ff fc39 	bl	800a7e8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800af76:	4b06      	ldr	r3, [pc, #24]	; (800af90 <SEGGER_SYSVIEW_Stop+0x48>)
 800af78:	2200      	movs	r2, #0
 800af7a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f383 8811 	msr	BASEPRI, r3
}
 800af82:	bf00      	nop
 800af84:	3708      	adds	r7, #8
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}
 800af8a:	bf00      	nop
 800af8c:	2000774c 	.word	0x2000774c
 800af90:	2000771c 	.word	0x2000771c

0800af94 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800af94:	b580      	push	{r7, lr}
 800af96:	b08c      	sub	sp, #48	; 0x30
 800af98:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800af9a:	f3ef 8311 	mrs	r3, BASEPRI
 800af9e:	f04f 0120 	mov.w	r1, #32
 800afa2:	f381 8811 	msr	BASEPRI, r1
 800afa6:	60fb      	str	r3, [r7, #12]
 800afa8:	4845      	ldr	r0, [pc, #276]	; (800b0c0 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800afaa:	f7ff fb2d 	bl	800a608 <_PreparePacket>
 800afae:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800afb8:	4b42      	ldr	r3, [pc, #264]	; (800b0c4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800afba:	685b      	ldr	r3, [r3, #4]
 800afbc:	62bb      	str	r3, [r7, #40]	; 0x28
 800afbe:	e00b      	b.n	800afd8 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800afc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afc2:	b2da      	uxtb	r2, r3
 800afc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afc6:	1c59      	adds	r1, r3, #1
 800afc8:	62f9      	str	r1, [r7, #44]	; 0x2c
 800afca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800afce:	b2d2      	uxtb	r2, r2
 800afd0:	701a      	strb	r2, [r3, #0]
 800afd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afd4:	09db      	lsrs	r3, r3, #7
 800afd6:	62bb      	str	r3, [r7, #40]	; 0x28
 800afd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afda:	2b7f      	cmp	r3, #127	; 0x7f
 800afdc:	d8f0      	bhi.n	800afc0 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800afde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afe0:	1c5a      	adds	r2, r3, #1
 800afe2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800afe4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800afe6:	b2d2      	uxtb	r2, r2
 800afe8:	701a      	strb	r2, [r3, #0]
 800afea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afec:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	627b      	str	r3, [r7, #36]	; 0x24
 800aff2:	4b34      	ldr	r3, [pc, #208]	; (800b0c4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800aff4:	689b      	ldr	r3, [r3, #8]
 800aff6:	623b      	str	r3, [r7, #32]
 800aff8:	e00b      	b.n	800b012 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800affa:	6a3b      	ldr	r3, [r7, #32]
 800affc:	b2da      	uxtb	r2, r3
 800affe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b000:	1c59      	adds	r1, r3, #1
 800b002:	6279      	str	r1, [r7, #36]	; 0x24
 800b004:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b008:	b2d2      	uxtb	r2, r2
 800b00a:	701a      	strb	r2, [r3, #0]
 800b00c:	6a3b      	ldr	r3, [r7, #32]
 800b00e:	09db      	lsrs	r3, r3, #7
 800b010:	623b      	str	r3, [r7, #32]
 800b012:	6a3b      	ldr	r3, [r7, #32]
 800b014:	2b7f      	cmp	r3, #127	; 0x7f
 800b016:	d8f0      	bhi.n	800affa <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800b018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b01a:	1c5a      	adds	r2, r3, #1
 800b01c:	627a      	str	r2, [r7, #36]	; 0x24
 800b01e:	6a3a      	ldr	r2, [r7, #32]
 800b020:	b2d2      	uxtb	r2, r2
 800b022:	701a      	strb	r2, [r3, #0]
 800b024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b026:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	61fb      	str	r3, [r7, #28]
 800b02c:	4b25      	ldr	r3, [pc, #148]	; (800b0c4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800b02e:	691b      	ldr	r3, [r3, #16]
 800b030:	61bb      	str	r3, [r7, #24]
 800b032:	e00b      	b.n	800b04c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800b034:	69bb      	ldr	r3, [r7, #24]
 800b036:	b2da      	uxtb	r2, r3
 800b038:	69fb      	ldr	r3, [r7, #28]
 800b03a:	1c59      	adds	r1, r3, #1
 800b03c:	61f9      	str	r1, [r7, #28]
 800b03e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b042:	b2d2      	uxtb	r2, r2
 800b044:	701a      	strb	r2, [r3, #0]
 800b046:	69bb      	ldr	r3, [r7, #24]
 800b048:	09db      	lsrs	r3, r3, #7
 800b04a:	61bb      	str	r3, [r7, #24]
 800b04c:	69bb      	ldr	r3, [r7, #24]
 800b04e:	2b7f      	cmp	r3, #127	; 0x7f
 800b050:	d8f0      	bhi.n	800b034 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800b052:	69fb      	ldr	r3, [r7, #28]
 800b054:	1c5a      	adds	r2, r3, #1
 800b056:	61fa      	str	r2, [r7, #28]
 800b058:	69ba      	ldr	r2, [r7, #24]
 800b05a:	b2d2      	uxtb	r2, r2
 800b05c:	701a      	strb	r2, [r3, #0]
 800b05e:	69fb      	ldr	r3, [r7, #28]
 800b060:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	617b      	str	r3, [r7, #20]
 800b066:	2300      	movs	r3, #0
 800b068:	613b      	str	r3, [r7, #16]
 800b06a:	e00b      	b.n	800b084 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800b06c:	693b      	ldr	r3, [r7, #16]
 800b06e:	b2da      	uxtb	r2, r3
 800b070:	697b      	ldr	r3, [r7, #20]
 800b072:	1c59      	adds	r1, r3, #1
 800b074:	6179      	str	r1, [r7, #20]
 800b076:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b07a:	b2d2      	uxtb	r2, r2
 800b07c:	701a      	strb	r2, [r3, #0]
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	09db      	lsrs	r3, r3, #7
 800b082:	613b      	str	r3, [r7, #16]
 800b084:	693b      	ldr	r3, [r7, #16]
 800b086:	2b7f      	cmp	r3, #127	; 0x7f
 800b088:	d8f0      	bhi.n	800b06c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800b08a:	697b      	ldr	r3, [r7, #20]
 800b08c:	1c5a      	adds	r2, r3, #1
 800b08e:	617a      	str	r2, [r7, #20]
 800b090:	693a      	ldr	r2, [r7, #16]
 800b092:	b2d2      	uxtb	r2, r2
 800b094:	701a      	strb	r2, [r3, #0]
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800b09a:	2218      	movs	r2, #24
 800b09c:	6879      	ldr	r1, [r7, #4]
 800b09e:	68b8      	ldr	r0, [r7, #8]
 800b0a0:	f7ff fba2 	bl	800a7e8 <_SendPacket>
  RECORD_END();
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800b0aa:	4b06      	ldr	r3, [pc, #24]	; (800b0c4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800b0ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d002      	beq.n	800b0b8 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800b0b2:	4b04      	ldr	r3, [pc, #16]	; (800b0c4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800b0b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0b6:	4798      	blx	r3
  }
}
 800b0b8:	bf00      	nop
 800b0ba:	3730      	adds	r7, #48	; 0x30
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bd80      	pop	{r7, pc}
 800b0c0:	2000774c 	.word	0x2000774c
 800b0c4:	2000771c 	.word	0x2000771c

0800b0c8 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b092      	sub	sp, #72	; 0x48
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800b0d0:	f3ef 8311 	mrs	r3, BASEPRI
 800b0d4:	f04f 0120 	mov.w	r1, #32
 800b0d8:	f381 8811 	msr	BASEPRI, r1
 800b0dc:	617b      	str	r3, [r7, #20]
 800b0de:	486a      	ldr	r0, [pc, #424]	; (800b288 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800b0e0:	f7ff fa92 	bl	800a608 <_PreparePacket>
 800b0e4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800b0e6:	693b      	ldr	r3, [r7, #16]
 800b0e8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	647b      	str	r3, [r7, #68]	; 0x44
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681a      	ldr	r2, [r3, #0]
 800b0f2:	4b66      	ldr	r3, [pc, #408]	; (800b28c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800b0f4:	691b      	ldr	r3, [r3, #16]
 800b0f6:	1ad3      	subs	r3, r2, r3
 800b0f8:	643b      	str	r3, [r7, #64]	; 0x40
 800b0fa:	e00b      	b.n	800b114 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800b0fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0fe:	b2da      	uxtb	r2, r3
 800b100:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b102:	1c59      	adds	r1, r3, #1
 800b104:	6479      	str	r1, [r7, #68]	; 0x44
 800b106:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b10a:	b2d2      	uxtb	r2, r2
 800b10c:	701a      	strb	r2, [r3, #0]
 800b10e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b110:	09db      	lsrs	r3, r3, #7
 800b112:	643b      	str	r3, [r7, #64]	; 0x40
 800b114:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b116:	2b7f      	cmp	r3, #127	; 0x7f
 800b118:	d8f0      	bhi.n	800b0fc <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800b11a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b11c:	1c5a      	adds	r2, r3, #1
 800b11e:	647a      	str	r2, [r7, #68]	; 0x44
 800b120:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b122:	b2d2      	uxtb	r2, r2
 800b124:	701a      	strb	r2, [r3, #0]
 800b126:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b128:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	689b      	ldr	r3, [r3, #8]
 800b132:	63bb      	str	r3, [r7, #56]	; 0x38
 800b134:	e00b      	b.n	800b14e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800b136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b138:	b2da      	uxtb	r2, r3
 800b13a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b13c:	1c59      	adds	r1, r3, #1
 800b13e:	63f9      	str	r1, [r7, #60]	; 0x3c
 800b140:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b144:	b2d2      	uxtb	r2, r2
 800b146:	701a      	strb	r2, [r3, #0]
 800b148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b14a:	09db      	lsrs	r3, r3, #7
 800b14c:	63bb      	str	r3, [r7, #56]	; 0x38
 800b14e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b150:	2b7f      	cmp	r3, #127	; 0x7f
 800b152:	d8f0      	bhi.n	800b136 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800b154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b156:	1c5a      	adds	r2, r3, #1
 800b158:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b15a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b15c:	b2d2      	uxtb	r2, r2
 800b15e:	701a      	strb	r2, [r3, #0]
 800b160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b162:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	685b      	ldr	r3, [r3, #4]
 800b168:	2220      	movs	r2, #32
 800b16a:	4619      	mov	r1, r3
 800b16c:	68f8      	ldr	r0, [r7, #12]
 800b16e:	f7ff f9fb 	bl	800a568 <_EncodeStr>
 800b172:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800b174:	2209      	movs	r2, #9
 800b176:	68f9      	ldr	r1, [r7, #12]
 800b178:	6938      	ldr	r0, [r7, #16]
 800b17a:	f7ff fb35 	bl	800a7e8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800b17e:	693b      	ldr	r3, [r7, #16]
 800b180:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	637b      	str	r3, [r7, #52]	; 0x34
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681a      	ldr	r2, [r3, #0]
 800b18a:	4b40      	ldr	r3, [pc, #256]	; (800b28c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800b18c:	691b      	ldr	r3, [r3, #16]
 800b18e:	1ad3      	subs	r3, r2, r3
 800b190:	633b      	str	r3, [r7, #48]	; 0x30
 800b192:	e00b      	b.n	800b1ac <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800b194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b196:	b2da      	uxtb	r2, r3
 800b198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b19a:	1c59      	adds	r1, r3, #1
 800b19c:	6379      	str	r1, [r7, #52]	; 0x34
 800b19e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b1a2:	b2d2      	uxtb	r2, r2
 800b1a4:	701a      	strb	r2, [r3, #0]
 800b1a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1a8:	09db      	lsrs	r3, r3, #7
 800b1aa:	633b      	str	r3, [r7, #48]	; 0x30
 800b1ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ae:	2b7f      	cmp	r3, #127	; 0x7f
 800b1b0:	d8f0      	bhi.n	800b194 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800b1b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1b4:	1c5a      	adds	r2, r3, #1
 800b1b6:	637a      	str	r2, [r7, #52]	; 0x34
 800b1b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1ba:	b2d2      	uxtb	r2, r2
 800b1bc:	701a      	strb	r2, [r3, #0]
 800b1be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1c0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	68db      	ldr	r3, [r3, #12]
 800b1ca:	62bb      	str	r3, [r7, #40]	; 0x28
 800b1cc:	e00b      	b.n	800b1e6 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800b1ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1d0:	b2da      	uxtb	r2, r3
 800b1d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1d4:	1c59      	adds	r1, r3, #1
 800b1d6:	62f9      	str	r1, [r7, #44]	; 0x2c
 800b1d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b1dc:	b2d2      	uxtb	r2, r2
 800b1de:	701a      	strb	r2, [r3, #0]
 800b1e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1e2:	09db      	lsrs	r3, r3, #7
 800b1e4:	62bb      	str	r3, [r7, #40]	; 0x28
 800b1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1e8:	2b7f      	cmp	r3, #127	; 0x7f
 800b1ea:	d8f0      	bhi.n	800b1ce <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800b1ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1ee:	1c5a      	adds	r2, r3, #1
 800b1f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b1f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1f4:	b2d2      	uxtb	r2, r2
 800b1f6:	701a      	strb	r2, [r3, #0]
 800b1f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1fa:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	627b      	str	r3, [r7, #36]	; 0x24
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	691b      	ldr	r3, [r3, #16]
 800b204:	623b      	str	r3, [r7, #32]
 800b206:	e00b      	b.n	800b220 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800b208:	6a3b      	ldr	r3, [r7, #32]
 800b20a:	b2da      	uxtb	r2, r3
 800b20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b20e:	1c59      	adds	r1, r3, #1
 800b210:	6279      	str	r1, [r7, #36]	; 0x24
 800b212:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b216:	b2d2      	uxtb	r2, r2
 800b218:	701a      	strb	r2, [r3, #0]
 800b21a:	6a3b      	ldr	r3, [r7, #32]
 800b21c:	09db      	lsrs	r3, r3, #7
 800b21e:	623b      	str	r3, [r7, #32]
 800b220:	6a3b      	ldr	r3, [r7, #32]
 800b222:	2b7f      	cmp	r3, #127	; 0x7f
 800b224:	d8f0      	bhi.n	800b208 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800b226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b228:	1c5a      	adds	r2, r3, #1
 800b22a:	627a      	str	r2, [r7, #36]	; 0x24
 800b22c:	6a3a      	ldr	r2, [r7, #32]
 800b22e:	b2d2      	uxtb	r2, r2
 800b230:	701a      	strb	r2, [r3, #0]
 800b232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b234:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	61fb      	str	r3, [r7, #28]
 800b23a:	2300      	movs	r3, #0
 800b23c:	61bb      	str	r3, [r7, #24]
 800b23e:	e00b      	b.n	800b258 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800b240:	69bb      	ldr	r3, [r7, #24]
 800b242:	b2da      	uxtb	r2, r3
 800b244:	69fb      	ldr	r3, [r7, #28]
 800b246:	1c59      	adds	r1, r3, #1
 800b248:	61f9      	str	r1, [r7, #28]
 800b24a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b24e:	b2d2      	uxtb	r2, r2
 800b250:	701a      	strb	r2, [r3, #0]
 800b252:	69bb      	ldr	r3, [r7, #24]
 800b254:	09db      	lsrs	r3, r3, #7
 800b256:	61bb      	str	r3, [r7, #24]
 800b258:	69bb      	ldr	r3, [r7, #24]
 800b25a:	2b7f      	cmp	r3, #127	; 0x7f
 800b25c:	d8f0      	bhi.n	800b240 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800b25e:	69fb      	ldr	r3, [r7, #28]
 800b260:	1c5a      	adds	r2, r3, #1
 800b262:	61fa      	str	r2, [r7, #28]
 800b264:	69ba      	ldr	r2, [r7, #24]
 800b266:	b2d2      	uxtb	r2, r2
 800b268:	701a      	strb	r2, [r3, #0]
 800b26a:	69fb      	ldr	r3, [r7, #28]
 800b26c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800b26e:	2215      	movs	r2, #21
 800b270:	68f9      	ldr	r1, [r7, #12]
 800b272:	6938      	ldr	r0, [r7, #16]
 800b274:	f7ff fab8 	bl	800a7e8 <_SendPacket>
  RECORD_END();
 800b278:	697b      	ldr	r3, [r7, #20]
 800b27a:	f383 8811 	msr	BASEPRI, r3
}
 800b27e:	bf00      	nop
 800b280:	3748      	adds	r7, #72	; 0x48
 800b282:	46bd      	mov	sp, r7
 800b284:	bd80      	pop	{r7, pc}
 800b286:	bf00      	nop
 800b288:	2000774c 	.word	0x2000774c
 800b28c:	2000771c 	.word	0x2000771c

0800b290 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800b290:	b580      	push	{r7, lr}
 800b292:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800b294:	4b07      	ldr	r3, [pc, #28]	; (800b2b4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800b296:	6a1b      	ldr	r3, [r3, #32]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d008      	beq.n	800b2ae <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800b29c:	4b05      	ldr	r3, [pc, #20]	; (800b2b4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800b29e:	6a1b      	ldr	r3, [r3, #32]
 800b2a0:	685b      	ldr	r3, [r3, #4]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d003      	beq.n	800b2ae <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800b2a6:	4b03      	ldr	r3, [pc, #12]	; (800b2b4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800b2a8:	6a1b      	ldr	r3, [r3, #32]
 800b2aa:	685b      	ldr	r3, [r3, #4]
 800b2ac:	4798      	blx	r3
  }
}
 800b2ae:	bf00      	nop
 800b2b0:	bd80      	pop	{r7, pc}
 800b2b2:	bf00      	nop
 800b2b4:	2000771c 	.word	0x2000771c

0800b2b8 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b086      	sub	sp, #24
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800b2c0:	f3ef 8311 	mrs	r3, BASEPRI
 800b2c4:	f04f 0120 	mov.w	r1, #32
 800b2c8:	f381 8811 	msr	BASEPRI, r1
 800b2cc:	617b      	str	r3, [r7, #20]
 800b2ce:	480b      	ldr	r0, [pc, #44]	; (800b2fc <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800b2d0:	f7ff f99a 	bl	800a608 <_PreparePacket>
 800b2d4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800b2d6:	2280      	movs	r2, #128	; 0x80
 800b2d8:	6879      	ldr	r1, [r7, #4]
 800b2da:	6938      	ldr	r0, [r7, #16]
 800b2dc:	f7ff f944 	bl	800a568 <_EncodeStr>
 800b2e0:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800b2e2:	220e      	movs	r2, #14
 800b2e4:	68f9      	ldr	r1, [r7, #12]
 800b2e6:	6938      	ldr	r0, [r7, #16]
 800b2e8:	f7ff fa7e 	bl	800a7e8 <_SendPacket>
  RECORD_END();
 800b2ec:	697b      	ldr	r3, [r7, #20]
 800b2ee:	f383 8811 	msr	BASEPRI, r3
}
 800b2f2:	bf00      	nop
 800b2f4:	3718      	adds	r7, #24
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}
 800b2fa:	bf00      	nop
 800b2fc:	2000774c 	.word	0x2000774c

0800b300 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800b300:	b590      	push	{r4, r7, lr}
 800b302:	b083      	sub	sp, #12
 800b304:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800b306:	4b15      	ldr	r3, [pc, #84]	; (800b35c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800b308:	6a1b      	ldr	r3, [r3, #32]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d01a      	beq.n	800b344 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800b30e:	4b13      	ldr	r3, [pc, #76]	; (800b35c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800b310:	6a1b      	ldr	r3, [r3, #32]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d015      	beq.n	800b344 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800b318:	4b10      	ldr	r3, [pc, #64]	; (800b35c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800b31a:	6a1b      	ldr	r3, [r3, #32]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	4798      	blx	r3
 800b320:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800b324:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800b326:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b32a:	f04f 0200 	mov.w	r2, #0
 800b32e:	f04f 0300 	mov.w	r3, #0
 800b332:	000a      	movs	r2, r1
 800b334:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800b336:	4613      	mov	r3, r2
 800b338:	461a      	mov	r2, r3
 800b33a:	4621      	mov	r1, r4
 800b33c:	200d      	movs	r0, #13
 800b33e:	f7ff fbe7 	bl	800ab10 <SEGGER_SYSVIEW_RecordU32x2>
 800b342:	e006      	b.n	800b352 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800b344:	4b06      	ldr	r3, [pc, #24]	; (800b360 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	4619      	mov	r1, r3
 800b34a:	200c      	movs	r0, #12
 800b34c:	f7ff fba4 	bl	800aa98 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800b350:	bf00      	nop
 800b352:	bf00      	nop
 800b354:	370c      	adds	r7, #12
 800b356:	46bd      	mov	sp, r7
 800b358:	bd90      	pop	{r4, r7, pc}
 800b35a:	bf00      	nop
 800b35c:	2000771c 	.word	0x2000771c
 800b360:	e0001004 	.word	0xe0001004

0800b364 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800b364:	b580      	push	{r7, lr}
 800b366:	b086      	sub	sp, #24
 800b368:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800b36a:	f3ef 8311 	mrs	r3, BASEPRI
 800b36e:	f04f 0120 	mov.w	r1, #32
 800b372:	f381 8811 	msr	BASEPRI, r1
 800b376:	60fb      	str	r3, [r7, #12]
 800b378:	4819      	ldr	r0, [pc, #100]	; (800b3e0 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800b37a:	f7ff f945 	bl	800a608 <_PreparePacket>
 800b37e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800b384:	4b17      	ldr	r3, [pc, #92]	; (800b3e4 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b38c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	617b      	str	r3, [r7, #20]
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	613b      	str	r3, [r7, #16]
 800b396:	e00b      	b.n	800b3b0 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800b398:	693b      	ldr	r3, [r7, #16]
 800b39a:	b2da      	uxtb	r2, r3
 800b39c:	697b      	ldr	r3, [r7, #20]
 800b39e:	1c59      	adds	r1, r3, #1
 800b3a0:	6179      	str	r1, [r7, #20]
 800b3a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b3a6:	b2d2      	uxtb	r2, r2
 800b3a8:	701a      	strb	r2, [r3, #0]
 800b3aa:	693b      	ldr	r3, [r7, #16]
 800b3ac:	09db      	lsrs	r3, r3, #7
 800b3ae:	613b      	str	r3, [r7, #16]
 800b3b0:	693b      	ldr	r3, [r7, #16]
 800b3b2:	2b7f      	cmp	r3, #127	; 0x7f
 800b3b4:	d8f0      	bhi.n	800b398 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800b3b6:	697b      	ldr	r3, [r7, #20]
 800b3b8:	1c5a      	adds	r2, r3, #1
 800b3ba:	617a      	str	r2, [r7, #20]
 800b3bc:	693a      	ldr	r2, [r7, #16]
 800b3be:	b2d2      	uxtb	r2, r2
 800b3c0:	701a      	strb	r2, [r3, #0]
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800b3c6:	2202      	movs	r2, #2
 800b3c8:	6879      	ldr	r1, [r7, #4]
 800b3ca:	68b8      	ldr	r0, [r7, #8]
 800b3cc:	f7ff fa0c 	bl	800a7e8 <_SendPacket>
  RECORD_END();
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	f383 8811 	msr	BASEPRI, r3
}
 800b3d6:	bf00      	nop
 800b3d8:	3718      	adds	r7, #24
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}
 800b3de:	bf00      	nop
 800b3e0:	2000774c 	.word	0x2000774c
 800b3e4:	e000ed04 	.word	0xe000ed04

0800b3e8 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b082      	sub	sp, #8
 800b3ec:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800b3ee:	f3ef 8311 	mrs	r3, BASEPRI
 800b3f2:	f04f 0120 	mov.w	r1, #32
 800b3f6:	f381 8811 	msr	BASEPRI, r1
 800b3fa:	607b      	str	r3, [r7, #4]
 800b3fc:	4807      	ldr	r0, [pc, #28]	; (800b41c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800b3fe:	f7ff f903 	bl	800a608 <_PreparePacket>
 800b402:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800b404:	2203      	movs	r2, #3
 800b406:	6839      	ldr	r1, [r7, #0]
 800b408:	6838      	ldr	r0, [r7, #0]
 800b40a:	f7ff f9ed 	bl	800a7e8 <_SendPacket>
  RECORD_END();
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	f383 8811 	msr	BASEPRI, r3
}
 800b414:	bf00      	nop
 800b416:	3708      	adds	r7, #8
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}
 800b41c:	2000774c 	.word	0x2000774c

0800b420 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800b420:	b580      	push	{r7, lr}
 800b422:	b082      	sub	sp, #8
 800b424:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800b426:	f3ef 8311 	mrs	r3, BASEPRI
 800b42a:	f04f 0120 	mov.w	r1, #32
 800b42e:	f381 8811 	msr	BASEPRI, r1
 800b432:	607b      	str	r3, [r7, #4]
 800b434:	4807      	ldr	r0, [pc, #28]	; (800b454 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800b436:	f7ff f8e7 	bl	800a608 <_PreparePacket>
 800b43a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800b43c:	2212      	movs	r2, #18
 800b43e:	6839      	ldr	r1, [r7, #0]
 800b440:	6838      	ldr	r0, [r7, #0]
 800b442:	f7ff f9d1 	bl	800a7e8 <_SendPacket>
  RECORD_END();
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f383 8811 	msr	BASEPRI, r3
}
 800b44c:	bf00      	nop
 800b44e:	3708      	adds	r7, #8
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}
 800b454:	2000774c 	.word	0x2000774c

0800b458 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800b458:	b580      	push	{r7, lr}
 800b45a:	b082      	sub	sp, #8
 800b45c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800b45e:	f3ef 8311 	mrs	r3, BASEPRI
 800b462:	f04f 0120 	mov.w	r1, #32
 800b466:	f381 8811 	msr	BASEPRI, r1
 800b46a:	607b      	str	r3, [r7, #4]
 800b46c:	4807      	ldr	r0, [pc, #28]	; (800b48c <SEGGER_SYSVIEW_OnIdle+0x34>)
 800b46e:	f7ff f8cb 	bl	800a608 <_PreparePacket>
 800b472:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800b474:	2211      	movs	r2, #17
 800b476:	6839      	ldr	r1, [r7, #0]
 800b478:	6838      	ldr	r0, [r7, #0]
 800b47a:	f7ff f9b5 	bl	800a7e8 <_SendPacket>
  RECORD_END();
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	f383 8811 	msr	BASEPRI, r3
}
 800b484:	bf00      	nop
 800b486:	3708      	adds	r7, #8
 800b488:	46bd      	mov	sp, r7
 800b48a:	bd80      	pop	{r7, pc}
 800b48c:	2000774c 	.word	0x2000774c

0800b490 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800b490:	b580      	push	{r7, lr}
 800b492:	b088      	sub	sp, #32
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800b498:	f3ef 8311 	mrs	r3, BASEPRI
 800b49c:	f04f 0120 	mov.w	r1, #32
 800b4a0:	f381 8811 	msr	BASEPRI, r1
 800b4a4:	617b      	str	r3, [r7, #20]
 800b4a6:	4819      	ldr	r0, [pc, #100]	; (800b50c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800b4a8:	f7ff f8ae 	bl	800a608 <_PreparePacket>
 800b4ac:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800b4ae:	693b      	ldr	r3, [r7, #16]
 800b4b0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800b4b2:	4b17      	ldr	r3, [pc, #92]	; (800b510 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800b4b4:	691b      	ldr	r3, [r3, #16]
 800b4b6:	687a      	ldr	r2, [r7, #4]
 800b4b8:	1ad3      	subs	r3, r2, r3
 800b4ba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	61fb      	str	r3, [r7, #28]
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	61bb      	str	r3, [r7, #24]
 800b4c4:	e00b      	b.n	800b4de <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800b4c6:	69bb      	ldr	r3, [r7, #24]
 800b4c8:	b2da      	uxtb	r2, r3
 800b4ca:	69fb      	ldr	r3, [r7, #28]
 800b4cc:	1c59      	adds	r1, r3, #1
 800b4ce:	61f9      	str	r1, [r7, #28]
 800b4d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b4d4:	b2d2      	uxtb	r2, r2
 800b4d6:	701a      	strb	r2, [r3, #0]
 800b4d8:	69bb      	ldr	r3, [r7, #24]
 800b4da:	09db      	lsrs	r3, r3, #7
 800b4dc:	61bb      	str	r3, [r7, #24]
 800b4de:	69bb      	ldr	r3, [r7, #24]
 800b4e0:	2b7f      	cmp	r3, #127	; 0x7f
 800b4e2:	d8f0      	bhi.n	800b4c6 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800b4e4:	69fb      	ldr	r3, [r7, #28]
 800b4e6:	1c5a      	adds	r2, r3, #1
 800b4e8:	61fa      	str	r2, [r7, #28]
 800b4ea:	69ba      	ldr	r2, [r7, #24]
 800b4ec:	b2d2      	uxtb	r2, r2
 800b4ee:	701a      	strb	r2, [r3, #0]
 800b4f0:	69fb      	ldr	r3, [r7, #28]
 800b4f2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800b4f4:	2208      	movs	r2, #8
 800b4f6:	68f9      	ldr	r1, [r7, #12]
 800b4f8:	6938      	ldr	r0, [r7, #16]
 800b4fa:	f7ff f975 	bl	800a7e8 <_SendPacket>
  RECORD_END();
 800b4fe:	697b      	ldr	r3, [r7, #20]
 800b500:	f383 8811 	msr	BASEPRI, r3
}
 800b504:	bf00      	nop
 800b506:	3720      	adds	r7, #32
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}
 800b50c:	2000774c 	.word	0x2000774c
 800b510:	2000771c 	.word	0x2000771c

0800b514 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800b514:	b580      	push	{r7, lr}
 800b516:	b088      	sub	sp, #32
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800b51c:	f3ef 8311 	mrs	r3, BASEPRI
 800b520:	f04f 0120 	mov.w	r1, #32
 800b524:	f381 8811 	msr	BASEPRI, r1
 800b528:	617b      	str	r3, [r7, #20]
 800b52a:	4819      	ldr	r0, [pc, #100]	; (800b590 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800b52c:	f7ff f86c 	bl	800a608 <_PreparePacket>
 800b530:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800b532:	693b      	ldr	r3, [r7, #16]
 800b534:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800b536:	4b17      	ldr	r3, [pc, #92]	; (800b594 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800b538:	691b      	ldr	r3, [r3, #16]
 800b53a:	687a      	ldr	r2, [r7, #4]
 800b53c:	1ad3      	subs	r3, r2, r3
 800b53e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	61fb      	str	r3, [r7, #28]
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	61bb      	str	r3, [r7, #24]
 800b548:	e00b      	b.n	800b562 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800b54a:	69bb      	ldr	r3, [r7, #24]
 800b54c:	b2da      	uxtb	r2, r3
 800b54e:	69fb      	ldr	r3, [r7, #28]
 800b550:	1c59      	adds	r1, r3, #1
 800b552:	61f9      	str	r1, [r7, #28]
 800b554:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b558:	b2d2      	uxtb	r2, r2
 800b55a:	701a      	strb	r2, [r3, #0]
 800b55c:	69bb      	ldr	r3, [r7, #24]
 800b55e:	09db      	lsrs	r3, r3, #7
 800b560:	61bb      	str	r3, [r7, #24]
 800b562:	69bb      	ldr	r3, [r7, #24]
 800b564:	2b7f      	cmp	r3, #127	; 0x7f
 800b566:	d8f0      	bhi.n	800b54a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800b568:	69fb      	ldr	r3, [r7, #28]
 800b56a:	1c5a      	adds	r2, r3, #1
 800b56c:	61fa      	str	r2, [r7, #28]
 800b56e:	69ba      	ldr	r2, [r7, #24]
 800b570:	b2d2      	uxtb	r2, r2
 800b572:	701a      	strb	r2, [r3, #0]
 800b574:	69fb      	ldr	r3, [r7, #28]
 800b576:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800b578:	2204      	movs	r2, #4
 800b57a:	68f9      	ldr	r1, [r7, #12]
 800b57c:	6938      	ldr	r0, [r7, #16]
 800b57e:	f7ff f933 	bl	800a7e8 <_SendPacket>
  RECORD_END();
 800b582:	697b      	ldr	r3, [r7, #20]
 800b584:	f383 8811 	msr	BASEPRI, r3
}
 800b588:	bf00      	nop
 800b58a:	3720      	adds	r7, #32
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}
 800b590:	2000774c 	.word	0x2000774c
 800b594:	2000771c 	.word	0x2000771c

0800b598 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800b598:	b580      	push	{r7, lr}
 800b59a:	b088      	sub	sp, #32
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800b5a0:	f3ef 8311 	mrs	r3, BASEPRI
 800b5a4:	f04f 0120 	mov.w	r1, #32
 800b5a8:	f381 8811 	msr	BASEPRI, r1
 800b5ac:	617b      	str	r3, [r7, #20]
 800b5ae:	4819      	ldr	r0, [pc, #100]	; (800b614 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800b5b0:	f7ff f82a 	bl	800a608 <_PreparePacket>
 800b5b4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800b5b6:	693b      	ldr	r3, [r7, #16]
 800b5b8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800b5ba:	4b17      	ldr	r3, [pc, #92]	; (800b618 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800b5bc:	691b      	ldr	r3, [r3, #16]
 800b5be:	687a      	ldr	r2, [r7, #4]
 800b5c0:	1ad3      	subs	r3, r2, r3
 800b5c2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	61fb      	str	r3, [r7, #28]
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	61bb      	str	r3, [r7, #24]
 800b5cc:	e00b      	b.n	800b5e6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800b5ce:	69bb      	ldr	r3, [r7, #24]
 800b5d0:	b2da      	uxtb	r2, r3
 800b5d2:	69fb      	ldr	r3, [r7, #28]
 800b5d4:	1c59      	adds	r1, r3, #1
 800b5d6:	61f9      	str	r1, [r7, #28]
 800b5d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b5dc:	b2d2      	uxtb	r2, r2
 800b5de:	701a      	strb	r2, [r3, #0]
 800b5e0:	69bb      	ldr	r3, [r7, #24]
 800b5e2:	09db      	lsrs	r3, r3, #7
 800b5e4:	61bb      	str	r3, [r7, #24]
 800b5e6:	69bb      	ldr	r3, [r7, #24]
 800b5e8:	2b7f      	cmp	r3, #127	; 0x7f
 800b5ea:	d8f0      	bhi.n	800b5ce <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800b5ec:	69fb      	ldr	r3, [r7, #28]
 800b5ee:	1c5a      	adds	r2, r3, #1
 800b5f0:	61fa      	str	r2, [r7, #28]
 800b5f2:	69ba      	ldr	r2, [r7, #24]
 800b5f4:	b2d2      	uxtb	r2, r2
 800b5f6:	701a      	strb	r2, [r3, #0]
 800b5f8:	69fb      	ldr	r3, [r7, #28]
 800b5fa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800b5fc:	2206      	movs	r2, #6
 800b5fe:	68f9      	ldr	r1, [r7, #12]
 800b600:	6938      	ldr	r0, [r7, #16]
 800b602:	f7ff f8f1 	bl	800a7e8 <_SendPacket>
  RECORD_END();
 800b606:	697b      	ldr	r3, [r7, #20]
 800b608:	f383 8811 	msr	BASEPRI, r3
}
 800b60c:	bf00      	nop
 800b60e:	3720      	adds	r7, #32
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}
 800b614:	2000774c 	.word	0x2000774c
 800b618:	2000771c 	.word	0x2000771c

0800b61c <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b08a      	sub	sp, #40	; 0x28
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
 800b624:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800b626:	f3ef 8311 	mrs	r3, BASEPRI
 800b62a:	f04f 0120 	mov.w	r1, #32
 800b62e:	f381 8811 	msr	BASEPRI, r1
 800b632:	617b      	str	r3, [r7, #20]
 800b634:	4827      	ldr	r0, [pc, #156]	; (800b6d4 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800b636:	f7fe ffe7 	bl	800a608 <_PreparePacket>
 800b63a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800b63c:	693b      	ldr	r3, [r7, #16]
 800b63e:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800b640:	4b25      	ldr	r3, [pc, #148]	; (800b6d8 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800b642:	691b      	ldr	r3, [r3, #16]
 800b644:	687a      	ldr	r2, [r7, #4]
 800b646:	1ad3      	subs	r3, r2, r3
 800b648:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	627b      	str	r3, [r7, #36]	; 0x24
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	623b      	str	r3, [r7, #32]
 800b652:	e00b      	b.n	800b66c <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800b654:	6a3b      	ldr	r3, [r7, #32]
 800b656:	b2da      	uxtb	r2, r3
 800b658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b65a:	1c59      	adds	r1, r3, #1
 800b65c:	6279      	str	r1, [r7, #36]	; 0x24
 800b65e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b662:	b2d2      	uxtb	r2, r2
 800b664:	701a      	strb	r2, [r3, #0]
 800b666:	6a3b      	ldr	r3, [r7, #32]
 800b668:	09db      	lsrs	r3, r3, #7
 800b66a:	623b      	str	r3, [r7, #32]
 800b66c:	6a3b      	ldr	r3, [r7, #32]
 800b66e:	2b7f      	cmp	r3, #127	; 0x7f
 800b670:	d8f0      	bhi.n	800b654 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800b672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b674:	1c5a      	adds	r2, r3, #1
 800b676:	627a      	str	r2, [r7, #36]	; 0x24
 800b678:	6a3a      	ldr	r2, [r7, #32]
 800b67a:	b2d2      	uxtb	r2, r2
 800b67c:	701a      	strb	r2, [r3, #0]
 800b67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b680:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	61fb      	str	r3, [r7, #28]
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	61bb      	str	r3, [r7, #24]
 800b68a:	e00b      	b.n	800b6a4 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800b68c:	69bb      	ldr	r3, [r7, #24]
 800b68e:	b2da      	uxtb	r2, r3
 800b690:	69fb      	ldr	r3, [r7, #28]
 800b692:	1c59      	adds	r1, r3, #1
 800b694:	61f9      	str	r1, [r7, #28]
 800b696:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b69a:	b2d2      	uxtb	r2, r2
 800b69c:	701a      	strb	r2, [r3, #0]
 800b69e:	69bb      	ldr	r3, [r7, #24]
 800b6a0:	09db      	lsrs	r3, r3, #7
 800b6a2:	61bb      	str	r3, [r7, #24]
 800b6a4:	69bb      	ldr	r3, [r7, #24]
 800b6a6:	2b7f      	cmp	r3, #127	; 0x7f
 800b6a8:	d8f0      	bhi.n	800b68c <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800b6aa:	69fb      	ldr	r3, [r7, #28]
 800b6ac:	1c5a      	adds	r2, r3, #1
 800b6ae:	61fa      	str	r2, [r7, #28]
 800b6b0:	69ba      	ldr	r2, [r7, #24]
 800b6b2:	b2d2      	uxtb	r2, r2
 800b6b4:	701a      	strb	r2, [r3, #0]
 800b6b6:	69fb      	ldr	r3, [r7, #28]
 800b6b8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800b6ba:	2207      	movs	r2, #7
 800b6bc:	68f9      	ldr	r1, [r7, #12]
 800b6be:	6938      	ldr	r0, [r7, #16]
 800b6c0:	f7ff f892 	bl	800a7e8 <_SendPacket>
  RECORD_END();
 800b6c4:	697b      	ldr	r3, [r7, #20]
 800b6c6:	f383 8811 	msr	BASEPRI, r3
}
 800b6ca:	bf00      	nop
 800b6cc:	3728      	adds	r7, #40	; 0x28
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd80      	pop	{r7, pc}
 800b6d2:	bf00      	nop
 800b6d4:	2000774c 	.word	0x2000774c
 800b6d8:	2000771c 	.word	0x2000771c

0800b6dc <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800b6dc:	b480      	push	{r7}
 800b6de:	b083      	sub	sp, #12
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800b6e4:	4b04      	ldr	r3, [pc, #16]	; (800b6f8 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800b6e6:	691b      	ldr	r3, [r3, #16]
 800b6e8:	687a      	ldr	r2, [r7, #4]
 800b6ea:	1ad3      	subs	r3, r2, r3
}
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	370c      	adds	r7, #12
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f6:	4770      	bx	lr
 800b6f8:	2000771c 	.word	0x2000771c

0800b6fc <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b08c      	sub	sp, #48	; 0x30
 800b700:	af00      	add	r7, sp, #0
 800b702:	4603      	mov	r3, r0
 800b704:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800b706:	4b3b      	ldr	r3, [pc, #236]	; (800b7f4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d06d      	beq.n	800b7ea <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800b70e:	4b39      	ldr	r3, [pc, #228]	; (800b7f4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800b714:	2300      	movs	r3, #0
 800b716:	62bb      	str	r3, [r7, #40]	; 0x28
 800b718:	e008      	b.n	800b72c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800b71a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b71c:	691b      	ldr	r3, [r3, #16]
 800b71e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800b720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b722:	2b00      	cmp	r3, #0
 800b724:	d007      	beq.n	800b736 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800b726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b728:	3301      	adds	r3, #1
 800b72a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b72c:	79fb      	ldrb	r3, [r7, #7]
 800b72e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b730:	429a      	cmp	r2, r3
 800b732:	d3f2      	bcc.n	800b71a <SEGGER_SYSVIEW_SendModule+0x1e>
 800b734:	e000      	b.n	800b738 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800b736:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800b738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d055      	beq.n	800b7ea <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800b73e:	f3ef 8311 	mrs	r3, BASEPRI
 800b742:	f04f 0120 	mov.w	r1, #32
 800b746:	f381 8811 	msr	BASEPRI, r1
 800b74a:	617b      	str	r3, [r7, #20]
 800b74c:	482a      	ldr	r0, [pc, #168]	; (800b7f8 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800b74e:	f7fe ff5b 	bl	800a608 <_PreparePacket>
 800b752:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800b754:	693b      	ldr	r3, [r7, #16]
 800b756:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	627b      	str	r3, [r7, #36]	; 0x24
 800b75c:	79fb      	ldrb	r3, [r7, #7]
 800b75e:	623b      	str	r3, [r7, #32]
 800b760:	e00b      	b.n	800b77a <SEGGER_SYSVIEW_SendModule+0x7e>
 800b762:	6a3b      	ldr	r3, [r7, #32]
 800b764:	b2da      	uxtb	r2, r3
 800b766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b768:	1c59      	adds	r1, r3, #1
 800b76a:	6279      	str	r1, [r7, #36]	; 0x24
 800b76c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b770:	b2d2      	uxtb	r2, r2
 800b772:	701a      	strb	r2, [r3, #0]
 800b774:	6a3b      	ldr	r3, [r7, #32]
 800b776:	09db      	lsrs	r3, r3, #7
 800b778:	623b      	str	r3, [r7, #32]
 800b77a:	6a3b      	ldr	r3, [r7, #32]
 800b77c:	2b7f      	cmp	r3, #127	; 0x7f
 800b77e:	d8f0      	bhi.n	800b762 <SEGGER_SYSVIEW_SendModule+0x66>
 800b780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b782:	1c5a      	adds	r2, r3, #1
 800b784:	627a      	str	r2, [r7, #36]	; 0x24
 800b786:	6a3a      	ldr	r2, [r7, #32]
 800b788:	b2d2      	uxtb	r2, r2
 800b78a:	701a      	strb	r2, [r3, #0]
 800b78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b78e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	61fb      	str	r3, [r7, #28]
 800b794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b796:	689b      	ldr	r3, [r3, #8]
 800b798:	61bb      	str	r3, [r7, #24]
 800b79a:	e00b      	b.n	800b7b4 <SEGGER_SYSVIEW_SendModule+0xb8>
 800b79c:	69bb      	ldr	r3, [r7, #24]
 800b79e:	b2da      	uxtb	r2, r3
 800b7a0:	69fb      	ldr	r3, [r7, #28]
 800b7a2:	1c59      	adds	r1, r3, #1
 800b7a4:	61f9      	str	r1, [r7, #28]
 800b7a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b7aa:	b2d2      	uxtb	r2, r2
 800b7ac:	701a      	strb	r2, [r3, #0]
 800b7ae:	69bb      	ldr	r3, [r7, #24]
 800b7b0:	09db      	lsrs	r3, r3, #7
 800b7b2:	61bb      	str	r3, [r7, #24]
 800b7b4:	69bb      	ldr	r3, [r7, #24]
 800b7b6:	2b7f      	cmp	r3, #127	; 0x7f
 800b7b8:	d8f0      	bhi.n	800b79c <SEGGER_SYSVIEW_SendModule+0xa0>
 800b7ba:	69fb      	ldr	r3, [r7, #28]
 800b7bc:	1c5a      	adds	r2, r3, #1
 800b7be:	61fa      	str	r2, [r7, #28]
 800b7c0:	69ba      	ldr	r2, [r7, #24]
 800b7c2:	b2d2      	uxtb	r2, r2
 800b7c4:	701a      	strb	r2, [r3, #0]
 800b7c6:	69fb      	ldr	r3, [r7, #28]
 800b7c8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800b7ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	2280      	movs	r2, #128	; 0x80
 800b7d0:	4619      	mov	r1, r3
 800b7d2:	68f8      	ldr	r0, [r7, #12]
 800b7d4:	f7fe fec8 	bl	800a568 <_EncodeStr>
 800b7d8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800b7da:	2216      	movs	r2, #22
 800b7dc:	68f9      	ldr	r1, [r7, #12]
 800b7de:	6938      	ldr	r0, [r7, #16]
 800b7e0:	f7ff f802 	bl	800a7e8 <_SendPacket>
      RECORD_END();
 800b7e4:	697b      	ldr	r3, [r7, #20]
 800b7e6:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800b7ea:	bf00      	nop
 800b7ec:	3730      	adds	r7, #48	; 0x30
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}
 800b7f2:	bf00      	nop
 800b7f4:	20007744 	.word	0x20007744
 800b7f8:	2000774c 	.word	0x2000774c

0800b7fc <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b082      	sub	sp, #8
 800b800:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800b802:	4b0c      	ldr	r3, [pc, #48]	; (800b834 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d00f      	beq.n	800b82a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800b80a:	4b0a      	ldr	r3, [pc, #40]	; (800b834 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	68db      	ldr	r3, [r3, #12]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d002      	beq.n	800b81e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	68db      	ldr	r3, [r3, #12]
 800b81c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	691b      	ldr	r3, [r3, #16]
 800b822:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d1f2      	bne.n	800b810 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800b82a:	bf00      	nop
 800b82c:	3708      	adds	r7, #8
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd80      	pop	{r7, pc}
 800b832:	bf00      	nop
 800b834:	20007744 	.word	0x20007744

0800b838 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800b838:	b580      	push	{r7, lr}
 800b83a:	b086      	sub	sp, #24
 800b83c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800b83e:	f3ef 8311 	mrs	r3, BASEPRI
 800b842:	f04f 0120 	mov.w	r1, #32
 800b846:	f381 8811 	msr	BASEPRI, r1
 800b84a:	60fb      	str	r3, [r7, #12]
 800b84c:	4817      	ldr	r0, [pc, #92]	; (800b8ac <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800b84e:	f7fe fedb 	bl	800a608 <_PreparePacket>
 800b852:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	617b      	str	r3, [r7, #20]
 800b85c:	4b14      	ldr	r3, [pc, #80]	; (800b8b0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800b85e:	781b      	ldrb	r3, [r3, #0]
 800b860:	613b      	str	r3, [r7, #16]
 800b862:	e00b      	b.n	800b87c <SEGGER_SYSVIEW_SendNumModules+0x44>
 800b864:	693b      	ldr	r3, [r7, #16]
 800b866:	b2da      	uxtb	r2, r3
 800b868:	697b      	ldr	r3, [r7, #20]
 800b86a:	1c59      	adds	r1, r3, #1
 800b86c:	6179      	str	r1, [r7, #20]
 800b86e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b872:	b2d2      	uxtb	r2, r2
 800b874:	701a      	strb	r2, [r3, #0]
 800b876:	693b      	ldr	r3, [r7, #16]
 800b878:	09db      	lsrs	r3, r3, #7
 800b87a:	613b      	str	r3, [r7, #16]
 800b87c:	693b      	ldr	r3, [r7, #16]
 800b87e:	2b7f      	cmp	r3, #127	; 0x7f
 800b880:	d8f0      	bhi.n	800b864 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800b882:	697b      	ldr	r3, [r7, #20]
 800b884:	1c5a      	adds	r2, r3, #1
 800b886:	617a      	str	r2, [r7, #20]
 800b888:	693a      	ldr	r2, [r7, #16]
 800b88a:	b2d2      	uxtb	r2, r2
 800b88c:	701a      	strb	r2, [r3, #0]
 800b88e:	697b      	ldr	r3, [r7, #20]
 800b890:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800b892:	221b      	movs	r2, #27
 800b894:	6879      	ldr	r1, [r7, #4]
 800b896:	68b8      	ldr	r0, [r7, #8]
 800b898:	f7fe ffa6 	bl	800a7e8 <_SendPacket>
  RECORD_END();
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	f383 8811 	msr	BASEPRI, r3
}
 800b8a2:	bf00      	nop
 800b8a4:	3718      	adds	r7, #24
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bd80      	pop	{r7, pc}
 800b8aa:	bf00      	nop
 800b8ac:	2000774c 	.word	0x2000774c
 800b8b0:	20007748 	.word	0x20007748

0800b8b4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b08a      	sub	sp, #40	; 0x28
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800b8bc:	f3ef 8311 	mrs	r3, BASEPRI
 800b8c0:	f04f 0120 	mov.w	r1, #32
 800b8c4:	f381 8811 	msr	BASEPRI, r1
 800b8c8:	617b      	str	r3, [r7, #20]
 800b8ca:	4827      	ldr	r0, [pc, #156]	; (800b968 <SEGGER_SYSVIEW_Warn+0xb4>)
 800b8cc:	f7fe fe9c 	bl	800a608 <_PreparePacket>
 800b8d0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800b8d2:	2280      	movs	r2, #128	; 0x80
 800b8d4:	6879      	ldr	r1, [r7, #4]
 800b8d6:	6938      	ldr	r0, [r7, #16]
 800b8d8:	f7fe fe46 	bl	800a568 <_EncodeStr>
 800b8dc:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	627b      	str	r3, [r7, #36]	; 0x24
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	623b      	str	r3, [r7, #32]
 800b8e6:	e00b      	b.n	800b900 <SEGGER_SYSVIEW_Warn+0x4c>
 800b8e8:	6a3b      	ldr	r3, [r7, #32]
 800b8ea:	b2da      	uxtb	r2, r3
 800b8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ee:	1c59      	adds	r1, r3, #1
 800b8f0:	6279      	str	r1, [r7, #36]	; 0x24
 800b8f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b8f6:	b2d2      	uxtb	r2, r2
 800b8f8:	701a      	strb	r2, [r3, #0]
 800b8fa:	6a3b      	ldr	r3, [r7, #32]
 800b8fc:	09db      	lsrs	r3, r3, #7
 800b8fe:	623b      	str	r3, [r7, #32]
 800b900:	6a3b      	ldr	r3, [r7, #32]
 800b902:	2b7f      	cmp	r3, #127	; 0x7f
 800b904:	d8f0      	bhi.n	800b8e8 <SEGGER_SYSVIEW_Warn+0x34>
 800b906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b908:	1c5a      	adds	r2, r3, #1
 800b90a:	627a      	str	r2, [r7, #36]	; 0x24
 800b90c:	6a3a      	ldr	r2, [r7, #32]
 800b90e:	b2d2      	uxtb	r2, r2
 800b910:	701a      	strb	r2, [r3, #0]
 800b912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b914:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	61fb      	str	r3, [r7, #28]
 800b91a:	2300      	movs	r3, #0
 800b91c:	61bb      	str	r3, [r7, #24]
 800b91e:	e00b      	b.n	800b938 <SEGGER_SYSVIEW_Warn+0x84>
 800b920:	69bb      	ldr	r3, [r7, #24]
 800b922:	b2da      	uxtb	r2, r3
 800b924:	69fb      	ldr	r3, [r7, #28]
 800b926:	1c59      	adds	r1, r3, #1
 800b928:	61f9      	str	r1, [r7, #28]
 800b92a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b92e:	b2d2      	uxtb	r2, r2
 800b930:	701a      	strb	r2, [r3, #0]
 800b932:	69bb      	ldr	r3, [r7, #24]
 800b934:	09db      	lsrs	r3, r3, #7
 800b936:	61bb      	str	r3, [r7, #24]
 800b938:	69bb      	ldr	r3, [r7, #24]
 800b93a:	2b7f      	cmp	r3, #127	; 0x7f
 800b93c:	d8f0      	bhi.n	800b920 <SEGGER_SYSVIEW_Warn+0x6c>
 800b93e:	69fb      	ldr	r3, [r7, #28]
 800b940:	1c5a      	adds	r2, r3, #1
 800b942:	61fa      	str	r2, [r7, #28]
 800b944:	69ba      	ldr	r2, [r7, #24]
 800b946:	b2d2      	uxtb	r2, r2
 800b948:	701a      	strb	r2, [r3, #0]
 800b94a:	69fb      	ldr	r3, [r7, #28]
 800b94c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800b94e:	221a      	movs	r2, #26
 800b950:	68f9      	ldr	r1, [r7, #12]
 800b952:	6938      	ldr	r0, [r7, #16]
 800b954:	f7fe ff48 	bl	800a7e8 <_SendPacket>
  RECORD_END();
 800b958:	697b      	ldr	r3, [r7, #20]
 800b95a:	f383 8811 	msr	BASEPRI, r3
}
 800b95e:	bf00      	nop
 800b960:	3728      	adds	r7, #40	; 0x28
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}
 800b966:	bf00      	nop
 800b968:	2000774c 	.word	0x2000774c

0800b96c <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b084      	sub	sp, #16
 800b970:	af00      	add	r7, sp, #0
 800b972:	60f8      	str	r0, [r7, #12]
 800b974:	60b9      	str	r1, [r7, #8]
 800b976:	607a      	str	r2, [r7, #4]
 800b978:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 800b97a:	683a      	ldr	r2, [r7, #0]
 800b97c:	6879      	ldr	r1, [r7, #4]
 800b97e:	2000      	movs	r0, #0
 800b980:	f7fe fcfc 	bl	800a37c <SEGGER_RTT_Write>
  return len;
 800b984:	683b      	ldr	r3, [r7, #0]
}
 800b986:	4618      	mov	r0, r3
 800b988:	3710      	adds	r7, #16
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}

0800b98e <atof>:
 800b98e:	2100      	movs	r1, #0
 800b990:	f001 bf66 	b.w	800d860 <strtod>

0800b994 <__errno>:
 800b994:	4b01      	ldr	r3, [pc, #4]	; (800b99c <__errno+0x8>)
 800b996:	6818      	ldr	r0, [r3, #0]
 800b998:	4770      	bx	lr
 800b99a:	bf00      	nop
 800b99c:	20000010 	.word	0x20000010

0800b9a0 <std>:
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	b510      	push	{r4, lr}
 800b9a4:	4604      	mov	r4, r0
 800b9a6:	e9c0 3300 	strd	r3, r3, [r0]
 800b9aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b9ae:	6083      	str	r3, [r0, #8]
 800b9b0:	8181      	strh	r1, [r0, #12]
 800b9b2:	6643      	str	r3, [r0, #100]	; 0x64
 800b9b4:	81c2      	strh	r2, [r0, #14]
 800b9b6:	6183      	str	r3, [r0, #24]
 800b9b8:	4619      	mov	r1, r3
 800b9ba:	2208      	movs	r2, #8
 800b9bc:	305c      	adds	r0, #92	; 0x5c
 800b9be:	f000 f92a 	bl	800bc16 <memset>
 800b9c2:	4b05      	ldr	r3, [pc, #20]	; (800b9d8 <std+0x38>)
 800b9c4:	6263      	str	r3, [r4, #36]	; 0x24
 800b9c6:	4b05      	ldr	r3, [pc, #20]	; (800b9dc <std+0x3c>)
 800b9c8:	62a3      	str	r3, [r4, #40]	; 0x28
 800b9ca:	4b05      	ldr	r3, [pc, #20]	; (800b9e0 <std+0x40>)
 800b9cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b9ce:	4b05      	ldr	r3, [pc, #20]	; (800b9e4 <std+0x44>)
 800b9d0:	6224      	str	r4, [r4, #32]
 800b9d2:	6323      	str	r3, [r4, #48]	; 0x30
 800b9d4:	bd10      	pop	{r4, pc}
 800b9d6:	bf00      	nop
 800b9d8:	0800cb85 	.word	0x0800cb85
 800b9dc:	0800cba7 	.word	0x0800cba7
 800b9e0:	0800cbdf 	.word	0x0800cbdf
 800b9e4:	0800cc03 	.word	0x0800cc03

0800b9e8 <_cleanup_r>:
 800b9e8:	4901      	ldr	r1, [pc, #4]	; (800b9f0 <_cleanup_r+0x8>)
 800b9ea:	f000 b8af 	b.w	800bb4c <_fwalk_reent>
 800b9ee:	bf00      	nop
 800b9f0:	0800e7a1 	.word	0x0800e7a1

0800b9f4 <__sfmoreglue>:
 800b9f4:	b570      	push	{r4, r5, r6, lr}
 800b9f6:	2268      	movs	r2, #104	; 0x68
 800b9f8:	1e4d      	subs	r5, r1, #1
 800b9fa:	4355      	muls	r5, r2
 800b9fc:	460e      	mov	r6, r1
 800b9fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ba02:	f000 f931 	bl	800bc68 <_malloc_r>
 800ba06:	4604      	mov	r4, r0
 800ba08:	b140      	cbz	r0, 800ba1c <__sfmoreglue+0x28>
 800ba0a:	2100      	movs	r1, #0
 800ba0c:	e9c0 1600 	strd	r1, r6, [r0]
 800ba10:	300c      	adds	r0, #12
 800ba12:	60a0      	str	r0, [r4, #8]
 800ba14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ba18:	f000 f8fd 	bl	800bc16 <memset>
 800ba1c:	4620      	mov	r0, r4
 800ba1e:	bd70      	pop	{r4, r5, r6, pc}

0800ba20 <__sfp_lock_acquire>:
 800ba20:	4801      	ldr	r0, [pc, #4]	; (800ba28 <__sfp_lock_acquire+0x8>)
 800ba22:	f000 b8d8 	b.w	800bbd6 <__retarget_lock_acquire_recursive>
 800ba26:	bf00      	nop
 800ba28:	20007830 	.word	0x20007830

0800ba2c <__sfp_lock_release>:
 800ba2c:	4801      	ldr	r0, [pc, #4]	; (800ba34 <__sfp_lock_release+0x8>)
 800ba2e:	f000 b8d3 	b.w	800bbd8 <__retarget_lock_release_recursive>
 800ba32:	bf00      	nop
 800ba34:	20007830 	.word	0x20007830

0800ba38 <__sinit_lock_acquire>:
 800ba38:	4801      	ldr	r0, [pc, #4]	; (800ba40 <__sinit_lock_acquire+0x8>)
 800ba3a:	f000 b8cc 	b.w	800bbd6 <__retarget_lock_acquire_recursive>
 800ba3e:	bf00      	nop
 800ba40:	20007831 	.word	0x20007831

0800ba44 <__sinit_lock_release>:
 800ba44:	4801      	ldr	r0, [pc, #4]	; (800ba4c <__sinit_lock_release+0x8>)
 800ba46:	f000 b8c7 	b.w	800bbd8 <__retarget_lock_release_recursive>
 800ba4a:	bf00      	nop
 800ba4c:	20007831 	.word	0x20007831

0800ba50 <__sinit>:
 800ba50:	b510      	push	{r4, lr}
 800ba52:	4604      	mov	r4, r0
 800ba54:	f7ff fff0 	bl	800ba38 <__sinit_lock_acquire>
 800ba58:	69a3      	ldr	r3, [r4, #24]
 800ba5a:	b11b      	cbz	r3, 800ba64 <__sinit+0x14>
 800ba5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba60:	f7ff bff0 	b.w	800ba44 <__sinit_lock_release>
 800ba64:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ba68:	6523      	str	r3, [r4, #80]	; 0x50
 800ba6a:	4b13      	ldr	r3, [pc, #76]	; (800bab8 <__sinit+0x68>)
 800ba6c:	4a13      	ldr	r2, [pc, #76]	; (800babc <__sinit+0x6c>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	62a2      	str	r2, [r4, #40]	; 0x28
 800ba72:	42a3      	cmp	r3, r4
 800ba74:	bf04      	itt	eq
 800ba76:	2301      	moveq	r3, #1
 800ba78:	61a3      	streq	r3, [r4, #24]
 800ba7a:	4620      	mov	r0, r4
 800ba7c:	f000 f820 	bl	800bac0 <__sfp>
 800ba80:	6060      	str	r0, [r4, #4]
 800ba82:	4620      	mov	r0, r4
 800ba84:	f000 f81c 	bl	800bac0 <__sfp>
 800ba88:	60a0      	str	r0, [r4, #8]
 800ba8a:	4620      	mov	r0, r4
 800ba8c:	f000 f818 	bl	800bac0 <__sfp>
 800ba90:	2200      	movs	r2, #0
 800ba92:	60e0      	str	r0, [r4, #12]
 800ba94:	2104      	movs	r1, #4
 800ba96:	6860      	ldr	r0, [r4, #4]
 800ba98:	f7ff ff82 	bl	800b9a0 <std>
 800ba9c:	68a0      	ldr	r0, [r4, #8]
 800ba9e:	2201      	movs	r2, #1
 800baa0:	2109      	movs	r1, #9
 800baa2:	f7ff ff7d 	bl	800b9a0 <std>
 800baa6:	68e0      	ldr	r0, [r4, #12]
 800baa8:	2202      	movs	r2, #2
 800baaa:	2112      	movs	r1, #18
 800baac:	f7ff ff78 	bl	800b9a0 <std>
 800bab0:	2301      	movs	r3, #1
 800bab2:	61a3      	str	r3, [r4, #24]
 800bab4:	e7d2      	b.n	800ba5c <__sinit+0xc>
 800bab6:	bf00      	nop
 800bab8:	080105b8 	.word	0x080105b8
 800babc:	0800b9e9 	.word	0x0800b9e9

0800bac0 <__sfp>:
 800bac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bac2:	4607      	mov	r7, r0
 800bac4:	f7ff ffac 	bl	800ba20 <__sfp_lock_acquire>
 800bac8:	4b1e      	ldr	r3, [pc, #120]	; (800bb44 <__sfp+0x84>)
 800baca:	681e      	ldr	r6, [r3, #0]
 800bacc:	69b3      	ldr	r3, [r6, #24]
 800bace:	b913      	cbnz	r3, 800bad6 <__sfp+0x16>
 800bad0:	4630      	mov	r0, r6
 800bad2:	f7ff ffbd 	bl	800ba50 <__sinit>
 800bad6:	3648      	adds	r6, #72	; 0x48
 800bad8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800badc:	3b01      	subs	r3, #1
 800bade:	d503      	bpl.n	800bae8 <__sfp+0x28>
 800bae0:	6833      	ldr	r3, [r6, #0]
 800bae2:	b30b      	cbz	r3, 800bb28 <__sfp+0x68>
 800bae4:	6836      	ldr	r6, [r6, #0]
 800bae6:	e7f7      	b.n	800bad8 <__sfp+0x18>
 800bae8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800baec:	b9d5      	cbnz	r5, 800bb24 <__sfp+0x64>
 800baee:	4b16      	ldr	r3, [pc, #88]	; (800bb48 <__sfp+0x88>)
 800baf0:	60e3      	str	r3, [r4, #12]
 800baf2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800baf6:	6665      	str	r5, [r4, #100]	; 0x64
 800baf8:	f000 f86c 	bl	800bbd4 <__retarget_lock_init_recursive>
 800bafc:	f7ff ff96 	bl	800ba2c <__sfp_lock_release>
 800bb00:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bb04:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bb08:	6025      	str	r5, [r4, #0]
 800bb0a:	61a5      	str	r5, [r4, #24]
 800bb0c:	2208      	movs	r2, #8
 800bb0e:	4629      	mov	r1, r5
 800bb10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bb14:	f000 f87f 	bl	800bc16 <memset>
 800bb18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bb1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bb20:	4620      	mov	r0, r4
 800bb22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb24:	3468      	adds	r4, #104	; 0x68
 800bb26:	e7d9      	b.n	800badc <__sfp+0x1c>
 800bb28:	2104      	movs	r1, #4
 800bb2a:	4638      	mov	r0, r7
 800bb2c:	f7ff ff62 	bl	800b9f4 <__sfmoreglue>
 800bb30:	4604      	mov	r4, r0
 800bb32:	6030      	str	r0, [r6, #0]
 800bb34:	2800      	cmp	r0, #0
 800bb36:	d1d5      	bne.n	800bae4 <__sfp+0x24>
 800bb38:	f7ff ff78 	bl	800ba2c <__sfp_lock_release>
 800bb3c:	230c      	movs	r3, #12
 800bb3e:	603b      	str	r3, [r7, #0]
 800bb40:	e7ee      	b.n	800bb20 <__sfp+0x60>
 800bb42:	bf00      	nop
 800bb44:	080105b8 	.word	0x080105b8
 800bb48:	ffff0001 	.word	0xffff0001

0800bb4c <_fwalk_reent>:
 800bb4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb50:	4606      	mov	r6, r0
 800bb52:	4688      	mov	r8, r1
 800bb54:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bb58:	2700      	movs	r7, #0
 800bb5a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bb5e:	f1b9 0901 	subs.w	r9, r9, #1
 800bb62:	d505      	bpl.n	800bb70 <_fwalk_reent+0x24>
 800bb64:	6824      	ldr	r4, [r4, #0]
 800bb66:	2c00      	cmp	r4, #0
 800bb68:	d1f7      	bne.n	800bb5a <_fwalk_reent+0xe>
 800bb6a:	4638      	mov	r0, r7
 800bb6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb70:	89ab      	ldrh	r3, [r5, #12]
 800bb72:	2b01      	cmp	r3, #1
 800bb74:	d907      	bls.n	800bb86 <_fwalk_reent+0x3a>
 800bb76:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bb7a:	3301      	adds	r3, #1
 800bb7c:	d003      	beq.n	800bb86 <_fwalk_reent+0x3a>
 800bb7e:	4629      	mov	r1, r5
 800bb80:	4630      	mov	r0, r6
 800bb82:	47c0      	blx	r8
 800bb84:	4307      	orrs	r7, r0
 800bb86:	3568      	adds	r5, #104	; 0x68
 800bb88:	e7e9      	b.n	800bb5e <_fwalk_reent+0x12>
	...

0800bb8c <__libc_init_array>:
 800bb8c:	b570      	push	{r4, r5, r6, lr}
 800bb8e:	4d0d      	ldr	r5, [pc, #52]	; (800bbc4 <__libc_init_array+0x38>)
 800bb90:	4c0d      	ldr	r4, [pc, #52]	; (800bbc8 <__libc_init_array+0x3c>)
 800bb92:	1b64      	subs	r4, r4, r5
 800bb94:	10a4      	asrs	r4, r4, #2
 800bb96:	2600      	movs	r6, #0
 800bb98:	42a6      	cmp	r6, r4
 800bb9a:	d109      	bne.n	800bbb0 <__libc_init_array+0x24>
 800bb9c:	4d0b      	ldr	r5, [pc, #44]	; (800bbcc <__libc_init_array+0x40>)
 800bb9e:	4c0c      	ldr	r4, [pc, #48]	; (800bbd0 <__libc_init_array+0x44>)
 800bba0:	f004 fc10 	bl	80103c4 <_init>
 800bba4:	1b64      	subs	r4, r4, r5
 800bba6:	10a4      	asrs	r4, r4, #2
 800bba8:	2600      	movs	r6, #0
 800bbaa:	42a6      	cmp	r6, r4
 800bbac:	d105      	bne.n	800bbba <__libc_init_array+0x2e>
 800bbae:	bd70      	pop	{r4, r5, r6, pc}
 800bbb0:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbb4:	4798      	blx	r3
 800bbb6:	3601      	adds	r6, #1
 800bbb8:	e7ee      	b.n	800bb98 <__libc_init_array+0xc>
 800bbba:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbbe:	4798      	blx	r3
 800bbc0:	3601      	adds	r6, #1
 800bbc2:	e7f2      	b.n	800bbaa <__libc_init_array+0x1e>
 800bbc4:	08010a04 	.word	0x08010a04
 800bbc8:	08010a04 	.word	0x08010a04
 800bbcc:	08010a04 	.word	0x08010a04
 800bbd0:	08010a08 	.word	0x08010a08

0800bbd4 <__retarget_lock_init_recursive>:
 800bbd4:	4770      	bx	lr

0800bbd6 <__retarget_lock_acquire_recursive>:
 800bbd6:	4770      	bx	lr

0800bbd8 <__retarget_lock_release_recursive>:
 800bbd8:	4770      	bx	lr

0800bbda <memcmp>:
 800bbda:	b510      	push	{r4, lr}
 800bbdc:	3901      	subs	r1, #1
 800bbde:	4402      	add	r2, r0
 800bbe0:	4290      	cmp	r0, r2
 800bbe2:	d101      	bne.n	800bbe8 <memcmp+0xe>
 800bbe4:	2000      	movs	r0, #0
 800bbe6:	e005      	b.n	800bbf4 <memcmp+0x1a>
 800bbe8:	7803      	ldrb	r3, [r0, #0]
 800bbea:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800bbee:	42a3      	cmp	r3, r4
 800bbf0:	d001      	beq.n	800bbf6 <memcmp+0x1c>
 800bbf2:	1b18      	subs	r0, r3, r4
 800bbf4:	bd10      	pop	{r4, pc}
 800bbf6:	3001      	adds	r0, #1
 800bbf8:	e7f2      	b.n	800bbe0 <memcmp+0x6>

0800bbfa <memcpy>:
 800bbfa:	440a      	add	r2, r1
 800bbfc:	4291      	cmp	r1, r2
 800bbfe:	f100 33ff 	add.w	r3, r0, #4294967295
 800bc02:	d100      	bne.n	800bc06 <memcpy+0xc>
 800bc04:	4770      	bx	lr
 800bc06:	b510      	push	{r4, lr}
 800bc08:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bc10:	4291      	cmp	r1, r2
 800bc12:	d1f9      	bne.n	800bc08 <memcpy+0xe>
 800bc14:	bd10      	pop	{r4, pc}

0800bc16 <memset>:
 800bc16:	4402      	add	r2, r0
 800bc18:	4603      	mov	r3, r0
 800bc1a:	4293      	cmp	r3, r2
 800bc1c:	d100      	bne.n	800bc20 <memset+0xa>
 800bc1e:	4770      	bx	lr
 800bc20:	f803 1b01 	strb.w	r1, [r3], #1
 800bc24:	e7f9      	b.n	800bc1a <memset+0x4>
	...

0800bc28 <sbrk_aligned>:
 800bc28:	b570      	push	{r4, r5, r6, lr}
 800bc2a:	4e0e      	ldr	r6, [pc, #56]	; (800bc64 <sbrk_aligned+0x3c>)
 800bc2c:	460c      	mov	r4, r1
 800bc2e:	6831      	ldr	r1, [r6, #0]
 800bc30:	4605      	mov	r5, r0
 800bc32:	b911      	cbnz	r1, 800bc3a <sbrk_aligned+0x12>
 800bc34:	f000 ff70 	bl	800cb18 <_sbrk_r>
 800bc38:	6030      	str	r0, [r6, #0]
 800bc3a:	4621      	mov	r1, r4
 800bc3c:	4628      	mov	r0, r5
 800bc3e:	f000 ff6b 	bl	800cb18 <_sbrk_r>
 800bc42:	1c43      	adds	r3, r0, #1
 800bc44:	d00a      	beq.n	800bc5c <sbrk_aligned+0x34>
 800bc46:	1cc4      	adds	r4, r0, #3
 800bc48:	f024 0403 	bic.w	r4, r4, #3
 800bc4c:	42a0      	cmp	r0, r4
 800bc4e:	d007      	beq.n	800bc60 <sbrk_aligned+0x38>
 800bc50:	1a21      	subs	r1, r4, r0
 800bc52:	4628      	mov	r0, r5
 800bc54:	f000 ff60 	bl	800cb18 <_sbrk_r>
 800bc58:	3001      	adds	r0, #1
 800bc5a:	d101      	bne.n	800bc60 <sbrk_aligned+0x38>
 800bc5c:	f04f 34ff 	mov.w	r4, #4294967295
 800bc60:	4620      	mov	r0, r4
 800bc62:	bd70      	pop	{r4, r5, r6, pc}
 800bc64:	20007838 	.word	0x20007838

0800bc68 <_malloc_r>:
 800bc68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc6c:	1ccd      	adds	r5, r1, #3
 800bc6e:	f025 0503 	bic.w	r5, r5, #3
 800bc72:	3508      	adds	r5, #8
 800bc74:	2d0c      	cmp	r5, #12
 800bc76:	bf38      	it	cc
 800bc78:	250c      	movcc	r5, #12
 800bc7a:	2d00      	cmp	r5, #0
 800bc7c:	4607      	mov	r7, r0
 800bc7e:	db01      	blt.n	800bc84 <_malloc_r+0x1c>
 800bc80:	42a9      	cmp	r1, r5
 800bc82:	d905      	bls.n	800bc90 <_malloc_r+0x28>
 800bc84:	230c      	movs	r3, #12
 800bc86:	603b      	str	r3, [r7, #0]
 800bc88:	2600      	movs	r6, #0
 800bc8a:	4630      	mov	r0, r6
 800bc8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc90:	4e2e      	ldr	r6, [pc, #184]	; (800bd4c <_malloc_r+0xe4>)
 800bc92:	f003 f961 	bl	800ef58 <__malloc_lock>
 800bc96:	6833      	ldr	r3, [r6, #0]
 800bc98:	461c      	mov	r4, r3
 800bc9a:	bb34      	cbnz	r4, 800bcea <_malloc_r+0x82>
 800bc9c:	4629      	mov	r1, r5
 800bc9e:	4638      	mov	r0, r7
 800bca0:	f7ff ffc2 	bl	800bc28 <sbrk_aligned>
 800bca4:	1c43      	adds	r3, r0, #1
 800bca6:	4604      	mov	r4, r0
 800bca8:	d14d      	bne.n	800bd46 <_malloc_r+0xde>
 800bcaa:	6834      	ldr	r4, [r6, #0]
 800bcac:	4626      	mov	r6, r4
 800bcae:	2e00      	cmp	r6, #0
 800bcb0:	d140      	bne.n	800bd34 <_malloc_r+0xcc>
 800bcb2:	6823      	ldr	r3, [r4, #0]
 800bcb4:	4631      	mov	r1, r6
 800bcb6:	4638      	mov	r0, r7
 800bcb8:	eb04 0803 	add.w	r8, r4, r3
 800bcbc:	f000 ff2c 	bl	800cb18 <_sbrk_r>
 800bcc0:	4580      	cmp	r8, r0
 800bcc2:	d13a      	bne.n	800bd3a <_malloc_r+0xd2>
 800bcc4:	6821      	ldr	r1, [r4, #0]
 800bcc6:	3503      	adds	r5, #3
 800bcc8:	1a6d      	subs	r5, r5, r1
 800bcca:	f025 0503 	bic.w	r5, r5, #3
 800bcce:	3508      	adds	r5, #8
 800bcd0:	2d0c      	cmp	r5, #12
 800bcd2:	bf38      	it	cc
 800bcd4:	250c      	movcc	r5, #12
 800bcd6:	4629      	mov	r1, r5
 800bcd8:	4638      	mov	r0, r7
 800bcda:	f7ff ffa5 	bl	800bc28 <sbrk_aligned>
 800bcde:	3001      	adds	r0, #1
 800bce0:	d02b      	beq.n	800bd3a <_malloc_r+0xd2>
 800bce2:	6823      	ldr	r3, [r4, #0]
 800bce4:	442b      	add	r3, r5
 800bce6:	6023      	str	r3, [r4, #0]
 800bce8:	e00e      	b.n	800bd08 <_malloc_r+0xa0>
 800bcea:	6822      	ldr	r2, [r4, #0]
 800bcec:	1b52      	subs	r2, r2, r5
 800bcee:	d41e      	bmi.n	800bd2e <_malloc_r+0xc6>
 800bcf0:	2a0b      	cmp	r2, #11
 800bcf2:	d916      	bls.n	800bd22 <_malloc_r+0xba>
 800bcf4:	1961      	adds	r1, r4, r5
 800bcf6:	42a3      	cmp	r3, r4
 800bcf8:	6025      	str	r5, [r4, #0]
 800bcfa:	bf18      	it	ne
 800bcfc:	6059      	strne	r1, [r3, #4]
 800bcfe:	6863      	ldr	r3, [r4, #4]
 800bd00:	bf08      	it	eq
 800bd02:	6031      	streq	r1, [r6, #0]
 800bd04:	5162      	str	r2, [r4, r5]
 800bd06:	604b      	str	r3, [r1, #4]
 800bd08:	4638      	mov	r0, r7
 800bd0a:	f104 060b 	add.w	r6, r4, #11
 800bd0e:	f003 f929 	bl	800ef64 <__malloc_unlock>
 800bd12:	f026 0607 	bic.w	r6, r6, #7
 800bd16:	1d23      	adds	r3, r4, #4
 800bd18:	1af2      	subs	r2, r6, r3
 800bd1a:	d0b6      	beq.n	800bc8a <_malloc_r+0x22>
 800bd1c:	1b9b      	subs	r3, r3, r6
 800bd1e:	50a3      	str	r3, [r4, r2]
 800bd20:	e7b3      	b.n	800bc8a <_malloc_r+0x22>
 800bd22:	6862      	ldr	r2, [r4, #4]
 800bd24:	42a3      	cmp	r3, r4
 800bd26:	bf0c      	ite	eq
 800bd28:	6032      	streq	r2, [r6, #0]
 800bd2a:	605a      	strne	r2, [r3, #4]
 800bd2c:	e7ec      	b.n	800bd08 <_malloc_r+0xa0>
 800bd2e:	4623      	mov	r3, r4
 800bd30:	6864      	ldr	r4, [r4, #4]
 800bd32:	e7b2      	b.n	800bc9a <_malloc_r+0x32>
 800bd34:	4634      	mov	r4, r6
 800bd36:	6876      	ldr	r6, [r6, #4]
 800bd38:	e7b9      	b.n	800bcae <_malloc_r+0x46>
 800bd3a:	230c      	movs	r3, #12
 800bd3c:	603b      	str	r3, [r7, #0]
 800bd3e:	4638      	mov	r0, r7
 800bd40:	f003 f910 	bl	800ef64 <__malloc_unlock>
 800bd44:	e7a1      	b.n	800bc8a <_malloc_r+0x22>
 800bd46:	6025      	str	r5, [r4, #0]
 800bd48:	e7de      	b.n	800bd08 <_malloc_r+0xa0>
 800bd4a:	bf00      	nop
 800bd4c:	20007834 	.word	0x20007834

0800bd50 <__cvt>:
 800bd50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd54:	ec55 4b10 	vmov	r4, r5, d0
 800bd58:	2d00      	cmp	r5, #0
 800bd5a:	460e      	mov	r6, r1
 800bd5c:	4619      	mov	r1, r3
 800bd5e:	462b      	mov	r3, r5
 800bd60:	bfbb      	ittet	lt
 800bd62:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bd66:	461d      	movlt	r5, r3
 800bd68:	2300      	movge	r3, #0
 800bd6a:	232d      	movlt	r3, #45	; 0x2d
 800bd6c:	700b      	strb	r3, [r1, #0]
 800bd6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd70:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bd74:	4691      	mov	r9, r2
 800bd76:	f023 0820 	bic.w	r8, r3, #32
 800bd7a:	bfbc      	itt	lt
 800bd7c:	4622      	movlt	r2, r4
 800bd7e:	4614      	movlt	r4, r2
 800bd80:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bd84:	d005      	beq.n	800bd92 <__cvt+0x42>
 800bd86:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bd8a:	d100      	bne.n	800bd8e <__cvt+0x3e>
 800bd8c:	3601      	adds	r6, #1
 800bd8e:	2102      	movs	r1, #2
 800bd90:	e000      	b.n	800bd94 <__cvt+0x44>
 800bd92:	2103      	movs	r1, #3
 800bd94:	ab03      	add	r3, sp, #12
 800bd96:	9301      	str	r3, [sp, #4]
 800bd98:	ab02      	add	r3, sp, #8
 800bd9a:	9300      	str	r3, [sp, #0]
 800bd9c:	ec45 4b10 	vmov	d0, r4, r5
 800bda0:	4653      	mov	r3, sl
 800bda2:	4632      	mov	r2, r6
 800bda4:	f001 fe88 	bl	800dab8 <_dtoa_r>
 800bda8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bdac:	4607      	mov	r7, r0
 800bdae:	d102      	bne.n	800bdb6 <__cvt+0x66>
 800bdb0:	f019 0f01 	tst.w	r9, #1
 800bdb4:	d022      	beq.n	800bdfc <__cvt+0xac>
 800bdb6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bdba:	eb07 0906 	add.w	r9, r7, r6
 800bdbe:	d110      	bne.n	800bde2 <__cvt+0x92>
 800bdc0:	783b      	ldrb	r3, [r7, #0]
 800bdc2:	2b30      	cmp	r3, #48	; 0x30
 800bdc4:	d10a      	bne.n	800bddc <__cvt+0x8c>
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	2300      	movs	r3, #0
 800bdca:	4620      	mov	r0, r4
 800bdcc:	4629      	mov	r1, r5
 800bdce:	f7f4 fef3 	bl	8000bb8 <__aeabi_dcmpeq>
 800bdd2:	b918      	cbnz	r0, 800bddc <__cvt+0x8c>
 800bdd4:	f1c6 0601 	rsb	r6, r6, #1
 800bdd8:	f8ca 6000 	str.w	r6, [sl]
 800bddc:	f8da 3000 	ldr.w	r3, [sl]
 800bde0:	4499      	add	r9, r3
 800bde2:	2200      	movs	r2, #0
 800bde4:	2300      	movs	r3, #0
 800bde6:	4620      	mov	r0, r4
 800bde8:	4629      	mov	r1, r5
 800bdea:	f7f4 fee5 	bl	8000bb8 <__aeabi_dcmpeq>
 800bdee:	b108      	cbz	r0, 800bdf4 <__cvt+0xa4>
 800bdf0:	f8cd 900c 	str.w	r9, [sp, #12]
 800bdf4:	2230      	movs	r2, #48	; 0x30
 800bdf6:	9b03      	ldr	r3, [sp, #12]
 800bdf8:	454b      	cmp	r3, r9
 800bdfa:	d307      	bcc.n	800be0c <__cvt+0xbc>
 800bdfc:	9b03      	ldr	r3, [sp, #12]
 800bdfe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800be00:	1bdb      	subs	r3, r3, r7
 800be02:	4638      	mov	r0, r7
 800be04:	6013      	str	r3, [r2, #0]
 800be06:	b004      	add	sp, #16
 800be08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be0c:	1c59      	adds	r1, r3, #1
 800be0e:	9103      	str	r1, [sp, #12]
 800be10:	701a      	strb	r2, [r3, #0]
 800be12:	e7f0      	b.n	800bdf6 <__cvt+0xa6>

0800be14 <__exponent>:
 800be14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be16:	4603      	mov	r3, r0
 800be18:	2900      	cmp	r1, #0
 800be1a:	bfb8      	it	lt
 800be1c:	4249      	neglt	r1, r1
 800be1e:	f803 2b02 	strb.w	r2, [r3], #2
 800be22:	bfb4      	ite	lt
 800be24:	222d      	movlt	r2, #45	; 0x2d
 800be26:	222b      	movge	r2, #43	; 0x2b
 800be28:	2909      	cmp	r1, #9
 800be2a:	7042      	strb	r2, [r0, #1]
 800be2c:	dd2a      	ble.n	800be84 <__exponent+0x70>
 800be2e:	f10d 0407 	add.w	r4, sp, #7
 800be32:	46a4      	mov	ip, r4
 800be34:	270a      	movs	r7, #10
 800be36:	46a6      	mov	lr, r4
 800be38:	460a      	mov	r2, r1
 800be3a:	fb91 f6f7 	sdiv	r6, r1, r7
 800be3e:	fb07 1516 	mls	r5, r7, r6, r1
 800be42:	3530      	adds	r5, #48	; 0x30
 800be44:	2a63      	cmp	r2, #99	; 0x63
 800be46:	f104 34ff 	add.w	r4, r4, #4294967295
 800be4a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800be4e:	4631      	mov	r1, r6
 800be50:	dcf1      	bgt.n	800be36 <__exponent+0x22>
 800be52:	3130      	adds	r1, #48	; 0x30
 800be54:	f1ae 0502 	sub.w	r5, lr, #2
 800be58:	f804 1c01 	strb.w	r1, [r4, #-1]
 800be5c:	1c44      	adds	r4, r0, #1
 800be5e:	4629      	mov	r1, r5
 800be60:	4561      	cmp	r1, ip
 800be62:	d30a      	bcc.n	800be7a <__exponent+0x66>
 800be64:	f10d 0209 	add.w	r2, sp, #9
 800be68:	eba2 020e 	sub.w	r2, r2, lr
 800be6c:	4565      	cmp	r5, ip
 800be6e:	bf88      	it	hi
 800be70:	2200      	movhi	r2, #0
 800be72:	4413      	add	r3, r2
 800be74:	1a18      	subs	r0, r3, r0
 800be76:	b003      	add	sp, #12
 800be78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be7e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800be82:	e7ed      	b.n	800be60 <__exponent+0x4c>
 800be84:	2330      	movs	r3, #48	; 0x30
 800be86:	3130      	adds	r1, #48	; 0x30
 800be88:	7083      	strb	r3, [r0, #2]
 800be8a:	70c1      	strb	r1, [r0, #3]
 800be8c:	1d03      	adds	r3, r0, #4
 800be8e:	e7f1      	b.n	800be74 <__exponent+0x60>

0800be90 <_printf_float>:
 800be90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be94:	ed2d 8b02 	vpush	{d8}
 800be98:	b08d      	sub	sp, #52	; 0x34
 800be9a:	460c      	mov	r4, r1
 800be9c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bea0:	4616      	mov	r6, r2
 800bea2:	461f      	mov	r7, r3
 800bea4:	4605      	mov	r5, r0
 800bea6:	f003 f827 	bl	800eef8 <_localeconv_r>
 800beaa:	f8d0 a000 	ldr.w	sl, [r0]
 800beae:	4650      	mov	r0, sl
 800beb0:	f7f4 fa00 	bl	80002b4 <strlen>
 800beb4:	2300      	movs	r3, #0
 800beb6:	930a      	str	r3, [sp, #40]	; 0x28
 800beb8:	6823      	ldr	r3, [r4, #0]
 800beba:	9305      	str	r3, [sp, #20]
 800bebc:	f8d8 3000 	ldr.w	r3, [r8]
 800bec0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800bec4:	3307      	adds	r3, #7
 800bec6:	f023 0307 	bic.w	r3, r3, #7
 800beca:	f103 0208 	add.w	r2, r3, #8
 800bece:	f8c8 2000 	str.w	r2, [r8]
 800bed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bed6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800beda:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800bede:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bee2:	9307      	str	r3, [sp, #28]
 800bee4:	f8cd 8018 	str.w	r8, [sp, #24]
 800bee8:	ee08 0a10 	vmov	s16, r0
 800beec:	4b9f      	ldr	r3, [pc, #636]	; (800c16c <_printf_float+0x2dc>)
 800beee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bef2:	f04f 32ff 	mov.w	r2, #4294967295
 800bef6:	f7f4 fe91 	bl	8000c1c <__aeabi_dcmpun>
 800befa:	bb88      	cbnz	r0, 800bf60 <_printf_float+0xd0>
 800befc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bf00:	4b9a      	ldr	r3, [pc, #616]	; (800c16c <_printf_float+0x2dc>)
 800bf02:	f04f 32ff 	mov.w	r2, #4294967295
 800bf06:	f7f4 fe6b 	bl	8000be0 <__aeabi_dcmple>
 800bf0a:	bb48      	cbnz	r0, 800bf60 <_printf_float+0xd0>
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	2300      	movs	r3, #0
 800bf10:	4640      	mov	r0, r8
 800bf12:	4649      	mov	r1, r9
 800bf14:	f7f4 fe5a 	bl	8000bcc <__aeabi_dcmplt>
 800bf18:	b110      	cbz	r0, 800bf20 <_printf_float+0x90>
 800bf1a:	232d      	movs	r3, #45	; 0x2d
 800bf1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf20:	4b93      	ldr	r3, [pc, #588]	; (800c170 <_printf_float+0x2e0>)
 800bf22:	4894      	ldr	r0, [pc, #592]	; (800c174 <_printf_float+0x2e4>)
 800bf24:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800bf28:	bf94      	ite	ls
 800bf2a:	4698      	movls	r8, r3
 800bf2c:	4680      	movhi	r8, r0
 800bf2e:	2303      	movs	r3, #3
 800bf30:	6123      	str	r3, [r4, #16]
 800bf32:	9b05      	ldr	r3, [sp, #20]
 800bf34:	f023 0204 	bic.w	r2, r3, #4
 800bf38:	6022      	str	r2, [r4, #0]
 800bf3a:	f04f 0900 	mov.w	r9, #0
 800bf3e:	9700      	str	r7, [sp, #0]
 800bf40:	4633      	mov	r3, r6
 800bf42:	aa0b      	add	r2, sp, #44	; 0x2c
 800bf44:	4621      	mov	r1, r4
 800bf46:	4628      	mov	r0, r5
 800bf48:	f000 f9d8 	bl	800c2fc <_printf_common>
 800bf4c:	3001      	adds	r0, #1
 800bf4e:	f040 8090 	bne.w	800c072 <_printf_float+0x1e2>
 800bf52:	f04f 30ff 	mov.w	r0, #4294967295
 800bf56:	b00d      	add	sp, #52	; 0x34
 800bf58:	ecbd 8b02 	vpop	{d8}
 800bf5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf60:	4642      	mov	r2, r8
 800bf62:	464b      	mov	r3, r9
 800bf64:	4640      	mov	r0, r8
 800bf66:	4649      	mov	r1, r9
 800bf68:	f7f4 fe58 	bl	8000c1c <__aeabi_dcmpun>
 800bf6c:	b140      	cbz	r0, 800bf80 <_printf_float+0xf0>
 800bf6e:	464b      	mov	r3, r9
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	bfbc      	itt	lt
 800bf74:	232d      	movlt	r3, #45	; 0x2d
 800bf76:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bf7a:	487f      	ldr	r0, [pc, #508]	; (800c178 <_printf_float+0x2e8>)
 800bf7c:	4b7f      	ldr	r3, [pc, #508]	; (800c17c <_printf_float+0x2ec>)
 800bf7e:	e7d1      	b.n	800bf24 <_printf_float+0x94>
 800bf80:	6863      	ldr	r3, [r4, #4]
 800bf82:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800bf86:	9206      	str	r2, [sp, #24]
 800bf88:	1c5a      	adds	r2, r3, #1
 800bf8a:	d13f      	bne.n	800c00c <_printf_float+0x17c>
 800bf8c:	2306      	movs	r3, #6
 800bf8e:	6063      	str	r3, [r4, #4]
 800bf90:	9b05      	ldr	r3, [sp, #20]
 800bf92:	6861      	ldr	r1, [r4, #4]
 800bf94:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bf98:	2300      	movs	r3, #0
 800bf9a:	9303      	str	r3, [sp, #12]
 800bf9c:	ab0a      	add	r3, sp, #40	; 0x28
 800bf9e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bfa2:	ab09      	add	r3, sp, #36	; 0x24
 800bfa4:	ec49 8b10 	vmov	d0, r8, r9
 800bfa8:	9300      	str	r3, [sp, #0]
 800bfaa:	6022      	str	r2, [r4, #0]
 800bfac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bfb0:	4628      	mov	r0, r5
 800bfb2:	f7ff fecd 	bl	800bd50 <__cvt>
 800bfb6:	9b06      	ldr	r3, [sp, #24]
 800bfb8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bfba:	2b47      	cmp	r3, #71	; 0x47
 800bfbc:	4680      	mov	r8, r0
 800bfbe:	d108      	bne.n	800bfd2 <_printf_float+0x142>
 800bfc0:	1cc8      	adds	r0, r1, #3
 800bfc2:	db02      	blt.n	800bfca <_printf_float+0x13a>
 800bfc4:	6863      	ldr	r3, [r4, #4]
 800bfc6:	4299      	cmp	r1, r3
 800bfc8:	dd41      	ble.n	800c04e <_printf_float+0x1be>
 800bfca:	f1ab 0b02 	sub.w	fp, fp, #2
 800bfce:	fa5f fb8b 	uxtb.w	fp, fp
 800bfd2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bfd6:	d820      	bhi.n	800c01a <_printf_float+0x18a>
 800bfd8:	3901      	subs	r1, #1
 800bfda:	465a      	mov	r2, fp
 800bfdc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bfe0:	9109      	str	r1, [sp, #36]	; 0x24
 800bfe2:	f7ff ff17 	bl	800be14 <__exponent>
 800bfe6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bfe8:	1813      	adds	r3, r2, r0
 800bfea:	2a01      	cmp	r2, #1
 800bfec:	4681      	mov	r9, r0
 800bfee:	6123      	str	r3, [r4, #16]
 800bff0:	dc02      	bgt.n	800bff8 <_printf_float+0x168>
 800bff2:	6822      	ldr	r2, [r4, #0]
 800bff4:	07d2      	lsls	r2, r2, #31
 800bff6:	d501      	bpl.n	800bffc <_printf_float+0x16c>
 800bff8:	3301      	adds	r3, #1
 800bffa:	6123      	str	r3, [r4, #16]
 800bffc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c000:	2b00      	cmp	r3, #0
 800c002:	d09c      	beq.n	800bf3e <_printf_float+0xae>
 800c004:	232d      	movs	r3, #45	; 0x2d
 800c006:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c00a:	e798      	b.n	800bf3e <_printf_float+0xae>
 800c00c:	9a06      	ldr	r2, [sp, #24]
 800c00e:	2a47      	cmp	r2, #71	; 0x47
 800c010:	d1be      	bne.n	800bf90 <_printf_float+0x100>
 800c012:	2b00      	cmp	r3, #0
 800c014:	d1bc      	bne.n	800bf90 <_printf_float+0x100>
 800c016:	2301      	movs	r3, #1
 800c018:	e7b9      	b.n	800bf8e <_printf_float+0xfe>
 800c01a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c01e:	d118      	bne.n	800c052 <_printf_float+0x1c2>
 800c020:	2900      	cmp	r1, #0
 800c022:	6863      	ldr	r3, [r4, #4]
 800c024:	dd0b      	ble.n	800c03e <_printf_float+0x1ae>
 800c026:	6121      	str	r1, [r4, #16]
 800c028:	b913      	cbnz	r3, 800c030 <_printf_float+0x1a0>
 800c02a:	6822      	ldr	r2, [r4, #0]
 800c02c:	07d0      	lsls	r0, r2, #31
 800c02e:	d502      	bpl.n	800c036 <_printf_float+0x1a6>
 800c030:	3301      	adds	r3, #1
 800c032:	440b      	add	r3, r1
 800c034:	6123      	str	r3, [r4, #16]
 800c036:	65a1      	str	r1, [r4, #88]	; 0x58
 800c038:	f04f 0900 	mov.w	r9, #0
 800c03c:	e7de      	b.n	800bffc <_printf_float+0x16c>
 800c03e:	b913      	cbnz	r3, 800c046 <_printf_float+0x1b6>
 800c040:	6822      	ldr	r2, [r4, #0]
 800c042:	07d2      	lsls	r2, r2, #31
 800c044:	d501      	bpl.n	800c04a <_printf_float+0x1ba>
 800c046:	3302      	adds	r3, #2
 800c048:	e7f4      	b.n	800c034 <_printf_float+0x1a4>
 800c04a:	2301      	movs	r3, #1
 800c04c:	e7f2      	b.n	800c034 <_printf_float+0x1a4>
 800c04e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c052:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c054:	4299      	cmp	r1, r3
 800c056:	db05      	blt.n	800c064 <_printf_float+0x1d4>
 800c058:	6823      	ldr	r3, [r4, #0]
 800c05a:	6121      	str	r1, [r4, #16]
 800c05c:	07d8      	lsls	r0, r3, #31
 800c05e:	d5ea      	bpl.n	800c036 <_printf_float+0x1a6>
 800c060:	1c4b      	adds	r3, r1, #1
 800c062:	e7e7      	b.n	800c034 <_printf_float+0x1a4>
 800c064:	2900      	cmp	r1, #0
 800c066:	bfd4      	ite	le
 800c068:	f1c1 0202 	rsble	r2, r1, #2
 800c06c:	2201      	movgt	r2, #1
 800c06e:	4413      	add	r3, r2
 800c070:	e7e0      	b.n	800c034 <_printf_float+0x1a4>
 800c072:	6823      	ldr	r3, [r4, #0]
 800c074:	055a      	lsls	r2, r3, #21
 800c076:	d407      	bmi.n	800c088 <_printf_float+0x1f8>
 800c078:	6923      	ldr	r3, [r4, #16]
 800c07a:	4642      	mov	r2, r8
 800c07c:	4631      	mov	r1, r6
 800c07e:	4628      	mov	r0, r5
 800c080:	47b8      	blx	r7
 800c082:	3001      	adds	r0, #1
 800c084:	d12c      	bne.n	800c0e0 <_printf_float+0x250>
 800c086:	e764      	b.n	800bf52 <_printf_float+0xc2>
 800c088:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c08c:	f240 80e0 	bls.w	800c250 <_printf_float+0x3c0>
 800c090:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c094:	2200      	movs	r2, #0
 800c096:	2300      	movs	r3, #0
 800c098:	f7f4 fd8e 	bl	8000bb8 <__aeabi_dcmpeq>
 800c09c:	2800      	cmp	r0, #0
 800c09e:	d034      	beq.n	800c10a <_printf_float+0x27a>
 800c0a0:	4a37      	ldr	r2, [pc, #220]	; (800c180 <_printf_float+0x2f0>)
 800c0a2:	2301      	movs	r3, #1
 800c0a4:	4631      	mov	r1, r6
 800c0a6:	4628      	mov	r0, r5
 800c0a8:	47b8      	blx	r7
 800c0aa:	3001      	adds	r0, #1
 800c0ac:	f43f af51 	beq.w	800bf52 <_printf_float+0xc2>
 800c0b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c0b4:	429a      	cmp	r2, r3
 800c0b6:	db02      	blt.n	800c0be <_printf_float+0x22e>
 800c0b8:	6823      	ldr	r3, [r4, #0]
 800c0ba:	07d8      	lsls	r0, r3, #31
 800c0bc:	d510      	bpl.n	800c0e0 <_printf_float+0x250>
 800c0be:	ee18 3a10 	vmov	r3, s16
 800c0c2:	4652      	mov	r2, sl
 800c0c4:	4631      	mov	r1, r6
 800c0c6:	4628      	mov	r0, r5
 800c0c8:	47b8      	blx	r7
 800c0ca:	3001      	adds	r0, #1
 800c0cc:	f43f af41 	beq.w	800bf52 <_printf_float+0xc2>
 800c0d0:	f04f 0800 	mov.w	r8, #0
 800c0d4:	f104 091a 	add.w	r9, r4, #26
 800c0d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0da:	3b01      	subs	r3, #1
 800c0dc:	4543      	cmp	r3, r8
 800c0de:	dc09      	bgt.n	800c0f4 <_printf_float+0x264>
 800c0e0:	6823      	ldr	r3, [r4, #0]
 800c0e2:	079b      	lsls	r3, r3, #30
 800c0e4:	f100 8105 	bmi.w	800c2f2 <_printf_float+0x462>
 800c0e8:	68e0      	ldr	r0, [r4, #12]
 800c0ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0ec:	4298      	cmp	r0, r3
 800c0ee:	bfb8      	it	lt
 800c0f0:	4618      	movlt	r0, r3
 800c0f2:	e730      	b.n	800bf56 <_printf_float+0xc6>
 800c0f4:	2301      	movs	r3, #1
 800c0f6:	464a      	mov	r2, r9
 800c0f8:	4631      	mov	r1, r6
 800c0fa:	4628      	mov	r0, r5
 800c0fc:	47b8      	blx	r7
 800c0fe:	3001      	adds	r0, #1
 800c100:	f43f af27 	beq.w	800bf52 <_printf_float+0xc2>
 800c104:	f108 0801 	add.w	r8, r8, #1
 800c108:	e7e6      	b.n	800c0d8 <_printf_float+0x248>
 800c10a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	dc39      	bgt.n	800c184 <_printf_float+0x2f4>
 800c110:	4a1b      	ldr	r2, [pc, #108]	; (800c180 <_printf_float+0x2f0>)
 800c112:	2301      	movs	r3, #1
 800c114:	4631      	mov	r1, r6
 800c116:	4628      	mov	r0, r5
 800c118:	47b8      	blx	r7
 800c11a:	3001      	adds	r0, #1
 800c11c:	f43f af19 	beq.w	800bf52 <_printf_float+0xc2>
 800c120:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c124:	4313      	orrs	r3, r2
 800c126:	d102      	bne.n	800c12e <_printf_float+0x29e>
 800c128:	6823      	ldr	r3, [r4, #0]
 800c12a:	07d9      	lsls	r1, r3, #31
 800c12c:	d5d8      	bpl.n	800c0e0 <_printf_float+0x250>
 800c12e:	ee18 3a10 	vmov	r3, s16
 800c132:	4652      	mov	r2, sl
 800c134:	4631      	mov	r1, r6
 800c136:	4628      	mov	r0, r5
 800c138:	47b8      	blx	r7
 800c13a:	3001      	adds	r0, #1
 800c13c:	f43f af09 	beq.w	800bf52 <_printf_float+0xc2>
 800c140:	f04f 0900 	mov.w	r9, #0
 800c144:	f104 0a1a 	add.w	sl, r4, #26
 800c148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c14a:	425b      	negs	r3, r3
 800c14c:	454b      	cmp	r3, r9
 800c14e:	dc01      	bgt.n	800c154 <_printf_float+0x2c4>
 800c150:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c152:	e792      	b.n	800c07a <_printf_float+0x1ea>
 800c154:	2301      	movs	r3, #1
 800c156:	4652      	mov	r2, sl
 800c158:	4631      	mov	r1, r6
 800c15a:	4628      	mov	r0, r5
 800c15c:	47b8      	blx	r7
 800c15e:	3001      	adds	r0, #1
 800c160:	f43f aef7 	beq.w	800bf52 <_printf_float+0xc2>
 800c164:	f109 0901 	add.w	r9, r9, #1
 800c168:	e7ee      	b.n	800c148 <_printf_float+0x2b8>
 800c16a:	bf00      	nop
 800c16c:	7fefffff 	.word	0x7fefffff
 800c170:	080105bc 	.word	0x080105bc
 800c174:	080105c0 	.word	0x080105c0
 800c178:	080105c8 	.word	0x080105c8
 800c17c:	080105c4 	.word	0x080105c4
 800c180:	080105cc 	.word	0x080105cc
 800c184:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c186:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c188:	429a      	cmp	r2, r3
 800c18a:	bfa8      	it	ge
 800c18c:	461a      	movge	r2, r3
 800c18e:	2a00      	cmp	r2, #0
 800c190:	4691      	mov	r9, r2
 800c192:	dc37      	bgt.n	800c204 <_printf_float+0x374>
 800c194:	f04f 0b00 	mov.w	fp, #0
 800c198:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c19c:	f104 021a 	add.w	r2, r4, #26
 800c1a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c1a2:	9305      	str	r3, [sp, #20]
 800c1a4:	eba3 0309 	sub.w	r3, r3, r9
 800c1a8:	455b      	cmp	r3, fp
 800c1aa:	dc33      	bgt.n	800c214 <_printf_float+0x384>
 800c1ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c1b0:	429a      	cmp	r2, r3
 800c1b2:	db3b      	blt.n	800c22c <_printf_float+0x39c>
 800c1b4:	6823      	ldr	r3, [r4, #0]
 800c1b6:	07da      	lsls	r2, r3, #31
 800c1b8:	d438      	bmi.n	800c22c <_printf_float+0x39c>
 800c1ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1bc:	9a05      	ldr	r2, [sp, #20]
 800c1be:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c1c0:	1a9a      	subs	r2, r3, r2
 800c1c2:	eba3 0901 	sub.w	r9, r3, r1
 800c1c6:	4591      	cmp	r9, r2
 800c1c8:	bfa8      	it	ge
 800c1ca:	4691      	movge	r9, r2
 800c1cc:	f1b9 0f00 	cmp.w	r9, #0
 800c1d0:	dc35      	bgt.n	800c23e <_printf_float+0x3ae>
 800c1d2:	f04f 0800 	mov.w	r8, #0
 800c1d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c1da:	f104 0a1a 	add.w	sl, r4, #26
 800c1de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c1e2:	1a9b      	subs	r3, r3, r2
 800c1e4:	eba3 0309 	sub.w	r3, r3, r9
 800c1e8:	4543      	cmp	r3, r8
 800c1ea:	f77f af79 	ble.w	800c0e0 <_printf_float+0x250>
 800c1ee:	2301      	movs	r3, #1
 800c1f0:	4652      	mov	r2, sl
 800c1f2:	4631      	mov	r1, r6
 800c1f4:	4628      	mov	r0, r5
 800c1f6:	47b8      	blx	r7
 800c1f8:	3001      	adds	r0, #1
 800c1fa:	f43f aeaa 	beq.w	800bf52 <_printf_float+0xc2>
 800c1fe:	f108 0801 	add.w	r8, r8, #1
 800c202:	e7ec      	b.n	800c1de <_printf_float+0x34e>
 800c204:	4613      	mov	r3, r2
 800c206:	4631      	mov	r1, r6
 800c208:	4642      	mov	r2, r8
 800c20a:	4628      	mov	r0, r5
 800c20c:	47b8      	blx	r7
 800c20e:	3001      	adds	r0, #1
 800c210:	d1c0      	bne.n	800c194 <_printf_float+0x304>
 800c212:	e69e      	b.n	800bf52 <_printf_float+0xc2>
 800c214:	2301      	movs	r3, #1
 800c216:	4631      	mov	r1, r6
 800c218:	4628      	mov	r0, r5
 800c21a:	9205      	str	r2, [sp, #20]
 800c21c:	47b8      	blx	r7
 800c21e:	3001      	adds	r0, #1
 800c220:	f43f ae97 	beq.w	800bf52 <_printf_float+0xc2>
 800c224:	9a05      	ldr	r2, [sp, #20]
 800c226:	f10b 0b01 	add.w	fp, fp, #1
 800c22a:	e7b9      	b.n	800c1a0 <_printf_float+0x310>
 800c22c:	ee18 3a10 	vmov	r3, s16
 800c230:	4652      	mov	r2, sl
 800c232:	4631      	mov	r1, r6
 800c234:	4628      	mov	r0, r5
 800c236:	47b8      	blx	r7
 800c238:	3001      	adds	r0, #1
 800c23a:	d1be      	bne.n	800c1ba <_printf_float+0x32a>
 800c23c:	e689      	b.n	800bf52 <_printf_float+0xc2>
 800c23e:	9a05      	ldr	r2, [sp, #20]
 800c240:	464b      	mov	r3, r9
 800c242:	4442      	add	r2, r8
 800c244:	4631      	mov	r1, r6
 800c246:	4628      	mov	r0, r5
 800c248:	47b8      	blx	r7
 800c24a:	3001      	adds	r0, #1
 800c24c:	d1c1      	bne.n	800c1d2 <_printf_float+0x342>
 800c24e:	e680      	b.n	800bf52 <_printf_float+0xc2>
 800c250:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c252:	2a01      	cmp	r2, #1
 800c254:	dc01      	bgt.n	800c25a <_printf_float+0x3ca>
 800c256:	07db      	lsls	r3, r3, #31
 800c258:	d538      	bpl.n	800c2cc <_printf_float+0x43c>
 800c25a:	2301      	movs	r3, #1
 800c25c:	4642      	mov	r2, r8
 800c25e:	4631      	mov	r1, r6
 800c260:	4628      	mov	r0, r5
 800c262:	47b8      	blx	r7
 800c264:	3001      	adds	r0, #1
 800c266:	f43f ae74 	beq.w	800bf52 <_printf_float+0xc2>
 800c26a:	ee18 3a10 	vmov	r3, s16
 800c26e:	4652      	mov	r2, sl
 800c270:	4631      	mov	r1, r6
 800c272:	4628      	mov	r0, r5
 800c274:	47b8      	blx	r7
 800c276:	3001      	adds	r0, #1
 800c278:	f43f ae6b 	beq.w	800bf52 <_printf_float+0xc2>
 800c27c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c280:	2200      	movs	r2, #0
 800c282:	2300      	movs	r3, #0
 800c284:	f7f4 fc98 	bl	8000bb8 <__aeabi_dcmpeq>
 800c288:	b9d8      	cbnz	r0, 800c2c2 <_printf_float+0x432>
 800c28a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c28c:	f108 0201 	add.w	r2, r8, #1
 800c290:	3b01      	subs	r3, #1
 800c292:	4631      	mov	r1, r6
 800c294:	4628      	mov	r0, r5
 800c296:	47b8      	blx	r7
 800c298:	3001      	adds	r0, #1
 800c29a:	d10e      	bne.n	800c2ba <_printf_float+0x42a>
 800c29c:	e659      	b.n	800bf52 <_printf_float+0xc2>
 800c29e:	2301      	movs	r3, #1
 800c2a0:	4652      	mov	r2, sl
 800c2a2:	4631      	mov	r1, r6
 800c2a4:	4628      	mov	r0, r5
 800c2a6:	47b8      	blx	r7
 800c2a8:	3001      	adds	r0, #1
 800c2aa:	f43f ae52 	beq.w	800bf52 <_printf_float+0xc2>
 800c2ae:	f108 0801 	add.w	r8, r8, #1
 800c2b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2b4:	3b01      	subs	r3, #1
 800c2b6:	4543      	cmp	r3, r8
 800c2b8:	dcf1      	bgt.n	800c29e <_printf_float+0x40e>
 800c2ba:	464b      	mov	r3, r9
 800c2bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c2c0:	e6dc      	b.n	800c07c <_printf_float+0x1ec>
 800c2c2:	f04f 0800 	mov.w	r8, #0
 800c2c6:	f104 0a1a 	add.w	sl, r4, #26
 800c2ca:	e7f2      	b.n	800c2b2 <_printf_float+0x422>
 800c2cc:	2301      	movs	r3, #1
 800c2ce:	4642      	mov	r2, r8
 800c2d0:	e7df      	b.n	800c292 <_printf_float+0x402>
 800c2d2:	2301      	movs	r3, #1
 800c2d4:	464a      	mov	r2, r9
 800c2d6:	4631      	mov	r1, r6
 800c2d8:	4628      	mov	r0, r5
 800c2da:	47b8      	blx	r7
 800c2dc:	3001      	adds	r0, #1
 800c2de:	f43f ae38 	beq.w	800bf52 <_printf_float+0xc2>
 800c2e2:	f108 0801 	add.w	r8, r8, #1
 800c2e6:	68e3      	ldr	r3, [r4, #12]
 800c2e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c2ea:	1a5b      	subs	r3, r3, r1
 800c2ec:	4543      	cmp	r3, r8
 800c2ee:	dcf0      	bgt.n	800c2d2 <_printf_float+0x442>
 800c2f0:	e6fa      	b.n	800c0e8 <_printf_float+0x258>
 800c2f2:	f04f 0800 	mov.w	r8, #0
 800c2f6:	f104 0919 	add.w	r9, r4, #25
 800c2fa:	e7f4      	b.n	800c2e6 <_printf_float+0x456>

0800c2fc <_printf_common>:
 800c2fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c300:	4616      	mov	r6, r2
 800c302:	4699      	mov	r9, r3
 800c304:	688a      	ldr	r2, [r1, #8]
 800c306:	690b      	ldr	r3, [r1, #16]
 800c308:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c30c:	4293      	cmp	r3, r2
 800c30e:	bfb8      	it	lt
 800c310:	4613      	movlt	r3, r2
 800c312:	6033      	str	r3, [r6, #0]
 800c314:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c318:	4607      	mov	r7, r0
 800c31a:	460c      	mov	r4, r1
 800c31c:	b10a      	cbz	r2, 800c322 <_printf_common+0x26>
 800c31e:	3301      	adds	r3, #1
 800c320:	6033      	str	r3, [r6, #0]
 800c322:	6823      	ldr	r3, [r4, #0]
 800c324:	0699      	lsls	r1, r3, #26
 800c326:	bf42      	ittt	mi
 800c328:	6833      	ldrmi	r3, [r6, #0]
 800c32a:	3302      	addmi	r3, #2
 800c32c:	6033      	strmi	r3, [r6, #0]
 800c32e:	6825      	ldr	r5, [r4, #0]
 800c330:	f015 0506 	ands.w	r5, r5, #6
 800c334:	d106      	bne.n	800c344 <_printf_common+0x48>
 800c336:	f104 0a19 	add.w	sl, r4, #25
 800c33a:	68e3      	ldr	r3, [r4, #12]
 800c33c:	6832      	ldr	r2, [r6, #0]
 800c33e:	1a9b      	subs	r3, r3, r2
 800c340:	42ab      	cmp	r3, r5
 800c342:	dc26      	bgt.n	800c392 <_printf_common+0x96>
 800c344:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c348:	1e13      	subs	r3, r2, #0
 800c34a:	6822      	ldr	r2, [r4, #0]
 800c34c:	bf18      	it	ne
 800c34e:	2301      	movne	r3, #1
 800c350:	0692      	lsls	r2, r2, #26
 800c352:	d42b      	bmi.n	800c3ac <_printf_common+0xb0>
 800c354:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c358:	4649      	mov	r1, r9
 800c35a:	4638      	mov	r0, r7
 800c35c:	47c0      	blx	r8
 800c35e:	3001      	adds	r0, #1
 800c360:	d01e      	beq.n	800c3a0 <_printf_common+0xa4>
 800c362:	6823      	ldr	r3, [r4, #0]
 800c364:	68e5      	ldr	r5, [r4, #12]
 800c366:	6832      	ldr	r2, [r6, #0]
 800c368:	f003 0306 	and.w	r3, r3, #6
 800c36c:	2b04      	cmp	r3, #4
 800c36e:	bf08      	it	eq
 800c370:	1aad      	subeq	r5, r5, r2
 800c372:	68a3      	ldr	r3, [r4, #8]
 800c374:	6922      	ldr	r2, [r4, #16]
 800c376:	bf0c      	ite	eq
 800c378:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c37c:	2500      	movne	r5, #0
 800c37e:	4293      	cmp	r3, r2
 800c380:	bfc4      	itt	gt
 800c382:	1a9b      	subgt	r3, r3, r2
 800c384:	18ed      	addgt	r5, r5, r3
 800c386:	2600      	movs	r6, #0
 800c388:	341a      	adds	r4, #26
 800c38a:	42b5      	cmp	r5, r6
 800c38c:	d11a      	bne.n	800c3c4 <_printf_common+0xc8>
 800c38e:	2000      	movs	r0, #0
 800c390:	e008      	b.n	800c3a4 <_printf_common+0xa8>
 800c392:	2301      	movs	r3, #1
 800c394:	4652      	mov	r2, sl
 800c396:	4649      	mov	r1, r9
 800c398:	4638      	mov	r0, r7
 800c39a:	47c0      	blx	r8
 800c39c:	3001      	adds	r0, #1
 800c39e:	d103      	bne.n	800c3a8 <_printf_common+0xac>
 800c3a0:	f04f 30ff 	mov.w	r0, #4294967295
 800c3a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3a8:	3501      	adds	r5, #1
 800c3aa:	e7c6      	b.n	800c33a <_printf_common+0x3e>
 800c3ac:	18e1      	adds	r1, r4, r3
 800c3ae:	1c5a      	adds	r2, r3, #1
 800c3b0:	2030      	movs	r0, #48	; 0x30
 800c3b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c3b6:	4422      	add	r2, r4
 800c3b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c3bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c3c0:	3302      	adds	r3, #2
 800c3c2:	e7c7      	b.n	800c354 <_printf_common+0x58>
 800c3c4:	2301      	movs	r3, #1
 800c3c6:	4622      	mov	r2, r4
 800c3c8:	4649      	mov	r1, r9
 800c3ca:	4638      	mov	r0, r7
 800c3cc:	47c0      	blx	r8
 800c3ce:	3001      	adds	r0, #1
 800c3d0:	d0e6      	beq.n	800c3a0 <_printf_common+0xa4>
 800c3d2:	3601      	adds	r6, #1
 800c3d4:	e7d9      	b.n	800c38a <_printf_common+0x8e>
	...

0800c3d8 <_printf_i>:
 800c3d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c3dc:	7e0f      	ldrb	r7, [r1, #24]
 800c3de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c3e0:	2f78      	cmp	r7, #120	; 0x78
 800c3e2:	4691      	mov	r9, r2
 800c3e4:	4680      	mov	r8, r0
 800c3e6:	460c      	mov	r4, r1
 800c3e8:	469a      	mov	sl, r3
 800c3ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c3ee:	d807      	bhi.n	800c400 <_printf_i+0x28>
 800c3f0:	2f62      	cmp	r7, #98	; 0x62
 800c3f2:	d80a      	bhi.n	800c40a <_printf_i+0x32>
 800c3f4:	2f00      	cmp	r7, #0
 800c3f6:	f000 80d8 	beq.w	800c5aa <_printf_i+0x1d2>
 800c3fa:	2f58      	cmp	r7, #88	; 0x58
 800c3fc:	f000 80a3 	beq.w	800c546 <_printf_i+0x16e>
 800c400:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c404:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c408:	e03a      	b.n	800c480 <_printf_i+0xa8>
 800c40a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c40e:	2b15      	cmp	r3, #21
 800c410:	d8f6      	bhi.n	800c400 <_printf_i+0x28>
 800c412:	a101      	add	r1, pc, #4	; (adr r1, 800c418 <_printf_i+0x40>)
 800c414:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c418:	0800c471 	.word	0x0800c471
 800c41c:	0800c485 	.word	0x0800c485
 800c420:	0800c401 	.word	0x0800c401
 800c424:	0800c401 	.word	0x0800c401
 800c428:	0800c401 	.word	0x0800c401
 800c42c:	0800c401 	.word	0x0800c401
 800c430:	0800c485 	.word	0x0800c485
 800c434:	0800c401 	.word	0x0800c401
 800c438:	0800c401 	.word	0x0800c401
 800c43c:	0800c401 	.word	0x0800c401
 800c440:	0800c401 	.word	0x0800c401
 800c444:	0800c591 	.word	0x0800c591
 800c448:	0800c4b5 	.word	0x0800c4b5
 800c44c:	0800c573 	.word	0x0800c573
 800c450:	0800c401 	.word	0x0800c401
 800c454:	0800c401 	.word	0x0800c401
 800c458:	0800c5b3 	.word	0x0800c5b3
 800c45c:	0800c401 	.word	0x0800c401
 800c460:	0800c4b5 	.word	0x0800c4b5
 800c464:	0800c401 	.word	0x0800c401
 800c468:	0800c401 	.word	0x0800c401
 800c46c:	0800c57b 	.word	0x0800c57b
 800c470:	682b      	ldr	r3, [r5, #0]
 800c472:	1d1a      	adds	r2, r3, #4
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	602a      	str	r2, [r5, #0]
 800c478:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c47c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c480:	2301      	movs	r3, #1
 800c482:	e0a3      	b.n	800c5cc <_printf_i+0x1f4>
 800c484:	6820      	ldr	r0, [r4, #0]
 800c486:	6829      	ldr	r1, [r5, #0]
 800c488:	0606      	lsls	r6, r0, #24
 800c48a:	f101 0304 	add.w	r3, r1, #4
 800c48e:	d50a      	bpl.n	800c4a6 <_printf_i+0xce>
 800c490:	680e      	ldr	r6, [r1, #0]
 800c492:	602b      	str	r3, [r5, #0]
 800c494:	2e00      	cmp	r6, #0
 800c496:	da03      	bge.n	800c4a0 <_printf_i+0xc8>
 800c498:	232d      	movs	r3, #45	; 0x2d
 800c49a:	4276      	negs	r6, r6
 800c49c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c4a0:	485e      	ldr	r0, [pc, #376]	; (800c61c <_printf_i+0x244>)
 800c4a2:	230a      	movs	r3, #10
 800c4a4:	e019      	b.n	800c4da <_printf_i+0x102>
 800c4a6:	680e      	ldr	r6, [r1, #0]
 800c4a8:	602b      	str	r3, [r5, #0]
 800c4aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c4ae:	bf18      	it	ne
 800c4b0:	b236      	sxthne	r6, r6
 800c4b2:	e7ef      	b.n	800c494 <_printf_i+0xbc>
 800c4b4:	682b      	ldr	r3, [r5, #0]
 800c4b6:	6820      	ldr	r0, [r4, #0]
 800c4b8:	1d19      	adds	r1, r3, #4
 800c4ba:	6029      	str	r1, [r5, #0]
 800c4bc:	0601      	lsls	r1, r0, #24
 800c4be:	d501      	bpl.n	800c4c4 <_printf_i+0xec>
 800c4c0:	681e      	ldr	r6, [r3, #0]
 800c4c2:	e002      	b.n	800c4ca <_printf_i+0xf2>
 800c4c4:	0646      	lsls	r6, r0, #25
 800c4c6:	d5fb      	bpl.n	800c4c0 <_printf_i+0xe8>
 800c4c8:	881e      	ldrh	r6, [r3, #0]
 800c4ca:	4854      	ldr	r0, [pc, #336]	; (800c61c <_printf_i+0x244>)
 800c4cc:	2f6f      	cmp	r7, #111	; 0x6f
 800c4ce:	bf0c      	ite	eq
 800c4d0:	2308      	moveq	r3, #8
 800c4d2:	230a      	movne	r3, #10
 800c4d4:	2100      	movs	r1, #0
 800c4d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c4da:	6865      	ldr	r5, [r4, #4]
 800c4dc:	60a5      	str	r5, [r4, #8]
 800c4de:	2d00      	cmp	r5, #0
 800c4e0:	bfa2      	ittt	ge
 800c4e2:	6821      	ldrge	r1, [r4, #0]
 800c4e4:	f021 0104 	bicge.w	r1, r1, #4
 800c4e8:	6021      	strge	r1, [r4, #0]
 800c4ea:	b90e      	cbnz	r6, 800c4f0 <_printf_i+0x118>
 800c4ec:	2d00      	cmp	r5, #0
 800c4ee:	d04d      	beq.n	800c58c <_printf_i+0x1b4>
 800c4f0:	4615      	mov	r5, r2
 800c4f2:	fbb6 f1f3 	udiv	r1, r6, r3
 800c4f6:	fb03 6711 	mls	r7, r3, r1, r6
 800c4fa:	5dc7      	ldrb	r7, [r0, r7]
 800c4fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c500:	4637      	mov	r7, r6
 800c502:	42bb      	cmp	r3, r7
 800c504:	460e      	mov	r6, r1
 800c506:	d9f4      	bls.n	800c4f2 <_printf_i+0x11a>
 800c508:	2b08      	cmp	r3, #8
 800c50a:	d10b      	bne.n	800c524 <_printf_i+0x14c>
 800c50c:	6823      	ldr	r3, [r4, #0]
 800c50e:	07de      	lsls	r6, r3, #31
 800c510:	d508      	bpl.n	800c524 <_printf_i+0x14c>
 800c512:	6923      	ldr	r3, [r4, #16]
 800c514:	6861      	ldr	r1, [r4, #4]
 800c516:	4299      	cmp	r1, r3
 800c518:	bfde      	ittt	le
 800c51a:	2330      	movle	r3, #48	; 0x30
 800c51c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c520:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c524:	1b52      	subs	r2, r2, r5
 800c526:	6122      	str	r2, [r4, #16]
 800c528:	f8cd a000 	str.w	sl, [sp]
 800c52c:	464b      	mov	r3, r9
 800c52e:	aa03      	add	r2, sp, #12
 800c530:	4621      	mov	r1, r4
 800c532:	4640      	mov	r0, r8
 800c534:	f7ff fee2 	bl	800c2fc <_printf_common>
 800c538:	3001      	adds	r0, #1
 800c53a:	d14c      	bne.n	800c5d6 <_printf_i+0x1fe>
 800c53c:	f04f 30ff 	mov.w	r0, #4294967295
 800c540:	b004      	add	sp, #16
 800c542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c546:	4835      	ldr	r0, [pc, #212]	; (800c61c <_printf_i+0x244>)
 800c548:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c54c:	6829      	ldr	r1, [r5, #0]
 800c54e:	6823      	ldr	r3, [r4, #0]
 800c550:	f851 6b04 	ldr.w	r6, [r1], #4
 800c554:	6029      	str	r1, [r5, #0]
 800c556:	061d      	lsls	r5, r3, #24
 800c558:	d514      	bpl.n	800c584 <_printf_i+0x1ac>
 800c55a:	07df      	lsls	r7, r3, #31
 800c55c:	bf44      	itt	mi
 800c55e:	f043 0320 	orrmi.w	r3, r3, #32
 800c562:	6023      	strmi	r3, [r4, #0]
 800c564:	b91e      	cbnz	r6, 800c56e <_printf_i+0x196>
 800c566:	6823      	ldr	r3, [r4, #0]
 800c568:	f023 0320 	bic.w	r3, r3, #32
 800c56c:	6023      	str	r3, [r4, #0]
 800c56e:	2310      	movs	r3, #16
 800c570:	e7b0      	b.n	800c4d4 <_printf_i+0xfc>
 800c572:	6823      	ldr	r3, [r4, #0]
 800c574:	f043 0320 	orr.w	r3, r3, #32
 800c578:	6023      	str	r3, [r4, #0]
 800c57a:	2378      	movs	r3, #120	; 0x78
 800c57c:	4828      	ldr	r0, [pc, #160]	; (800c620 <_printf_i+0x248>)
 800c57e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c582:	e7e3      	b.n	800c54c <_printf_i+0x174>
 800c584:	0659      	lsls	r1, r3, #25
 800c586:	bf48      	it	mi
 800c588:	b2b6      	uxthmi	r6, r6
 800c58a:	e7e6      	b.n	800c55a <_printf_i+0x182>
 800c58c:	4615      	mov	r5, r2
 800c58e:	e7bb      	b.n	800c508 <_printf_i+0x130>
 800c590:	682b      	ldr	r3, [r5, #0]
 800c592:	6826      	ldr	r6, [r4, #0]
 800c594:	6961      	ldr	r1, [r4, #20]
 800c596:	1d18      	adds	r0, r3, #4
 800c598:	6028      	str	r0, [r5, #0]
 800c59a:	0635      	lsls	r5, r6, #24
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	d501      	bpl.n	800c5a4 <_printf_i+0x1cc>
 800c5a0:	6019      	str	r1, [r3, #0]
 800c5a2:	e002      	b.n	800c5aa <_printf_i+0x1d2>
 800c5a4:	0670      	lsls	r0, r6, #25
 800c5a6:	d5fb      	bpl.n	800c5a0 <_printf_i+0x1c8>
 800c5a8:	8019      	strh	r1, [r3, #0]
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	6123      	str	r3, [r4, #16]
 800c5ae:	4615      	mov	r5, r2
 800c5b0:	e7ba      	b.n	800c528 <_printf_i+0x150>
 800c5b2:	682b      	ldr	r3, [r5, #0]
 800c5b4:	1d1a      	adds	r2, r3, #4
 800c5b6:	602a      	str	r2, [r5, #0]
 800c5b8:	681d      	ldr	r5, [r3, #0]
 800c5ba:	6862      	ldr	r2, [r4, #4]
 800c5bc:	2100      	movs	r1, #0
 800c5be:	4628      	mov	r0, r5
 800c5c0:	f7f3 fe86 	bl	80002d0 <memchr>
 800c5c4:	b108      	cbz	r0, 800c5ca <_printf_i+0x1f2>
 800c5c6:	1b40      	subs	r0, r0, r5
 800c5c8:	6060      	str	r0, [r4, #4]
 800c5ca:	6863      	ldr	r3, [r4, #4]
 800c5cc:	6123      	str	r3, [r4, #16]
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c5d4:	e7a8      	b.n	800c528 <_printf_i+0x150>
 800c5d6:	6923      	ldr	r3, [r4, #16]
 800c5d8:	462a      	mov	r2, r5
 800c5da:	4649      	mov	r1, r9
 800c5dc:	4640      	mov	r0, r8
 800c5de:	47d0      	blx	sl
 800c5e0:	3001      	adds	r0, #1
 800c5e2:	d0ab      	beq.n	800c53c <_printf_i+0x164>
 800c5e4:	6823      	ldr	r3, [r4, #0]
 800c5e6:	079b      	lsls	r3, r3, #30
 800c5e8:	d413      	bmi.n	800c612 <_printf_i+0x23a>
 800c5ea:	68e0      	ldr	r0, [r4, #12]
 800c5ec:	9b03      	ldr	r3, [sp, #12]
 800c5ee:	4298      	cmp	r0, r3
 800c5f0:	bfb8      	it	lt
 800c5f2:	4618      	movlt	r0, r3
 800c5f4:	e7a4      	b.n	800c540 <_printf_i+0x168>
 800c5f6:	2301      	movs	r3, #1
 800c5f8:	4632      	mov	r2, r6
 800c5fa:	4649      	mov	r1, r9
 800c5fc:	4640      	mov	r0, r8
 800c5fe:	47d0      	blx	sl
 800c600:	3001      	adds	r0, #1
 800c602:	d09b      	beq.n	800c53c <_printf_i+0x164>
 800c604:	3501      	adds	r5, #1
 800c606:	68e3      	ldr	r3, [r4, #12]
 800c608:	9903      	ldr	r1, [sp, #12]
 800c60a:	1a5b      	subs	r3, r3, r1
 800c60c:	42ab      	cmp	r3, r5
 800c60e:	dcf2      	bgt.n	800c5f6 <_printf_i+0x21e>
 800c610:	e7eb      	b.n	800c5ea <_printf_i+0x212>
 800c612:	2500      	movs	r5, #0
 800c614:	f104 0619 	add.w	r6, r4, #25
 800c618:	e7f5      	b.n	800c606 <_printf_i+0x22e>
 800c61a:	bf00      	nop
 800c61c:	080105ce 	.word	0x080105ce
 800c620:	080105df 	.word	0x080105df

0800c624 <_scanf_float>:
 800c624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c628:	b087      	sub	sp, #28
 800c62a:	4617      	mov	r7, r2
 800c62c:	9303      	str	r3, [sp, #12]
 800c62e:	688b      	ldr	r3, [r1, #8]
 800c630:	1e5a      	subs	r2, r3, #1
 800c632:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c636:	bf83      	ittte	hi
 800c638:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c63c:	195b      	addhi	r3, r3, r5
 800c63e:	9302      	strhi	r3, [sp, #8]
 800c640:	2300      	movls	r3, #0
 800c642:	bf86      	itte	hi
 800c644:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c648:	608b      	strhi	r3, [r1, #8]
 800c64a:	9302      	strls	r3, [sp, #8]
 800c64c:	680b      	ldr	r3, [r1, #0]
 800c64e:	468b      	mov	fp, r1
 800c650:	2500      	movs	r5, #0
 800c652:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800c656:	f84b 3b1c 	str.w	r3, [fp], #28
 800c65a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c65e:	4680      	mov	r8, r0
 800c660:	460c      	mov	r4, r1
 800c662:	465e      	mov	r6, fp
 800c664:	46aa      	mov	sl, r5
 800c666:	46a9      	mov	r9, r5
 800c668:	9501      	str	r5, [sp, #4]
 800c66a:	68a2      	ldr	r2, [r4, #8]
 800c66c:	b152      	cbz	r2, 800c684 <_scanf_float+0x60>
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	781b      	ldrb	r3, [r3, #0]
 800c672:	2b4e      	cmp	r3, #78	; 0x4e
 800c674:	d864      	bhi.n	800c740 <_scanf_float+0x11c>
 800c676:	2b40      	cmp	r3, #64	; 0x40
 800c678:	d83c      	bhi.n	800c6f4 <_scanf_float+0xd0>
 800c67a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800c67e:	b2c8      	uxtb	r0, r1
 800c680:	280e      	cmp	r0, #14
 800c682:	d93a      	bls.n	800c6fa <_scanf_float+0xd6>
 800c684:	f1b9 0f00 	cmp.w	r9, #0
 800c688:	d003      	beq.n	800c692 <_scanf_float+0x6e>
 800c68a:	6823      	ldr	r3, [r4, #0]
 800c68c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c690:	6023      	str	r3, [r4, #0]
 800c692:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c696:	f1ba 0f01 	cmp.w	sl, #1
 800c69a:	f200 8113 	bhi.w	800c8c4 <_scanf_float+0x2a0>
 800c69e:	455e      	cmp	r6, fp
 800c6a0:	f200 8105 	bhi.w	800c8ae <_scanf_float+0x28a>
 800c6a4:	2501      	movs	r5, #1
 800c6a6:	4628      	mov	r0, r5
 800c6a8:	b007      	add	sp, #28
 800c6aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6ae:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800c6b2:	2a0d      	cmp	r2, #13
 800c6b4:	d8e6      	bhi.n	800c684 <_scanf_float+0x60>
 800c6b6:	a101      	add	r1, pc, #4	; (adr r1, 800c6bc <_scanf_float+0x98>)
 800c6b8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c6bc:	0800c7fb 	.word	0x0800c7fb
 800c6c0:	0800c685 	.word	0x0800c685
 800c6c4:	0800c685 	.word	0x0800c685
 800c6c8:	0800c685 	.word	0x0800c685
 800c6cc:	0800c85b 	.word	0x0800c85b
 800c6d0:	0800c833 	.word	0x0800c833
 800c6d4:	0800c685 	.word	0x0800c685
 800c6d8:	0800c685 	.word	0x0800c685
 800c6dc:	0800c809 	.word	0x0800c809
 800c6e0:	0800c685 	.word	0x0800c685
 800c6e4:	0800c685 	.word	0x0800c685
 800c6e8:	0800c685 	.word	0x0800c685
 800c6ec:	0800c685 	.word	0x0800c685
 800c6f0:	0800c7c1 	.word	0x0800c7c1
 800c6f4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800c6f8:	e7db      	b.n	800c6b2 <_scanf_float+0x8e>
 800c6fa:	290e      	cmp	r1, #14
 800c6fc:	d8c2      	bhi.n	800c684 <_scanf_float+0x60>
 800c6fe:	a001      	add	r0, pc, #4	; (adr r0, 800c704 <_scanf_float+0xe0>)
 800c700:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c704:	0800c7b3 	.word	0x0800c7b3
 800c708:	0800c685 	.word	0x0800c685
 800c70c:	0800c7b3 	.word	0x0800c7b3
 800c710:	0800c847 	.word	0x0800c847
 800c714:	0800c685 	.word	0x0800c685
 800c718:	0800c761 	.word	0x0800c761
 800c71c:	0800c79d 	.word	0x0800c79d
 800c720:	0800c79d 	.word	0x0800c79d
 800c724:	0800c79d 	.word	0x0800c79d
 800c728:	0800c79d 	.word	0x0800c79d
 800c72c:	0800c79d 	.word	0x0800c79d
 800c730:	0800c79d 	.word	0x0800c79d
 800c734:	0800c79d 	.word	0x0800c79d
 800c738:	0800c79d 	.word	0x0800c79d
 800c73c:	0800c79d 	.word	0x0800c79d
 800c740:	2b6e      	cmp	r3, #110	; 0x6e
 800c742:	d809      	bhi.n	800c758 <_scanf_float+0x134>
 800c744:	2b60      	cmp	r3, #96	; 0x60
 800c746:	d8b2      	bhi.n	800c6ae <_scanf_float+0x8a>
 800c748:	2b54      	cmp	r3, #84	; 0x54
 800c74a:	d077      	beq.n	800c83c <_scanf_float+0x218>
 800c74c:	2b59      	cmp	r3, #89	; 0x59
 800c74e:	d199      	bne.n	800c684 <_scanf_float+0x60>
 800c750:	2d07      	cmp	r5, #7
 800c752:	d197      	bne.n	800c684 <_scanf_float+0x60>
 800c754:	2508      	movs	r5, #8
 800c756:	e029      	b.n	800c7ac <_scanf_float+0x188>
 800c758:	2b74      	cmp	r3, #116	; 0x74
 800c75a:	d06f      	beq.n	800c83c <_scanf_float+0x218>
 800c75c:	2b79      	cmp	r3, #121	; 0x79
 800c75e:	e7f6      	b.n	800c74e <_scanf_float+0x12a>
 800c760:	6821      	ldr	r1, [r4, #0]
 800c762:	05c8      	lsls	r0, r1, #23
 800c764:	d51a      	bpl.n	800c79c <_scanf_float+0x178>
 800c766:	9b02      	ldr	r3, [sp, #8]
 800c768:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c76c:	6021      	str	r1, [r4, #0]
 800c76e:	f109 0901 	add.w	r9, r9, #1
 800c772:	b11b      	cbz	r3, 800c77c <_scanf_float+0x158>
 800c774:	3b01      	subs	r3, #1
 800c776:	3201      	adds	r2, #1
 800c778:	9302      	str	r3, [sp, #8]
 800c77a:	60a2      	str	r2, [r4, #8]
 800c77c:	68a3      	ldr	r3, [r4, #8]
 800c77e:	3b01      	subs	r3, #1
 800c780:	60a3      	str	r3, [r4, #8]
 800c782:	6923      	ldr	r3, [r4, #16]
 800c784:	3301      	adds	r3, #1
 800c786:	6123      	str	r3, [r4, #16]
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	3b01      	subs	r3, #1
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	607b      	str	r3, [r7, #4]
 800c790:	f340 8084 	ble.w	800c89c <_scanf_float+0x278>
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	3301      	adds	r3, #1
 800c798:	603b      	str	r3, [r7, #0]
 800c79a:	e766      	b.n	800c66a <_scanf_float+0x46>
 800c79c:	eb1a 0f05 	cmn.w	sl, r5
 800c7a0:	f47f af70 	bne.w	800c684 <_scanf_float+0x60>
 800c7a4:	6822      	ldr	r2, [r4, #0]
 800c7a6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800c7aa:	6022      	str	r2, [r4, #0]
 800c7ac:	f806 3b01 	strb.w	r3, [r6], #1
 800c7b0:	e7e4      	b.n	800c77c <_scanf_float+0x158>
 800c7b2:	6822      	ldr	r2, [r4, #0]
 800c7b4:	0610      	lsls	r0, r2, #24
 800c7b6:	f57f af65 	bpl.w	800c684 <_scanf_float+0x60>
 800c7ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c7be:	e7f4      	b.n	800c7aa <_scanf_float+0x186>
 800c7c0:	f1ba 0f00 	cmp.w	sl, #0
 800c7c4:	d10e      	bne.n	800c7e4 <_scanf_float+0x1c0>
 800c7c6:	f1b9 0f00 	cmp.w	r9, #0
 800c7ca:	d10e      	bne.n	800c7ea <_scanf_float+0x1c6>
 800c7cc:	6822      	ldr	r2, [r4, #0]
 800c7ce:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c7d2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c7d6:	d108      	bne.n	800c7ea <_scanf_float+0x1c6>
 800c7d8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c7dc:	6022      	str	r2, [r4, #0]
 800c7de:	f04f 0a01 	mov.w	sl, #1
 800c7e2:	e7e3      	b.n	800c7ac <_scanf_float+0x188>
 800c7e4:	f1ba 0f02 	cmp.w	sl, #2
 800c7e8:	d055      	beq.n	800c896 <_scanf_float+0x272>
 800c7ea:	2d01      	cmp	r5, #1
 800c7ec:	d002      	beq.n	800c7f4 <_scanf_float+0x1d0>
 800c7ee:	2d04      	cmp	r5, #4
 800c7f0:	f47f af48 	bne.w	800c684 <_scanf_float+0x60>
 800c7f4:	3501      	adds	r5, #1
 800c7f6:	b2ed      	uxtb	r5, r5
 800c7f8:	e7d8      	b.n	800c7ac <_scanf_float+0x188>
 800c7fa:	f1ba 0f01 	cmp.w	sl, #1
 800c7fe:	f47f af41 	bne.w	800c684 <_scanf_float+0x60>
 800c802:	f04f 0a02 	mov.w	sl, #2
 800c806:	e7d1      	b.n	800c7ac <_scanf_float+0x188>
 800c808:	b97d      	cbnz	r5, 800c82a <_scanf_float+0x206>
 800c80a:	f1b9 0f00 	cmp.w	r9, #0
 800c80e:	f47f af3c 	bne.w	800c68a <_scanf_float+0x66>
 800c812:	6822      	ldr	r2, [r4, #0]
 800c814:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c818:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c81c:	f47f af39 	bne.w	800c692 <_scanf_float+0x6e>
 800c820:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c824:	6022      	str	r2, [r4, #0]
 800c826:	2501      	movs	r5, #1
 800c828:	e7c0      	b.n	800c7ac <_scanf_float+0x188>
 800c82a:	2d03      	cmp	r5, #3
 800c82c:	d0e2      	beq.n	800c7f4 <_scanf_float+0x1d0>
 800c82e:	2d05      	cmp	r5, #5
 800c830:	e7de      	b.n	800c7f0 <_scanf_float+0x1cc>
 800c832:	2d02      	cmp	r5, #2
 800c834:	f47f af26 	bne.w	800c684 <_scanf_float+0x60>
 800c838:	2503      	movs	r5, #3
 800c83a:	e7b7      	b.n	800c7ac <_scanf_float+0x188>
 800c83c:	2d06      	cmp	r5, #6
 800c83e:	f47f af21 	bne.w	800c684 <_scanf_float+0x60>
 800c842:	2507      	movs	r5, #7
 800c844:	e7b2      	b.n	800c7ac <_scanf_float+0x188>
 800c846:	6822      	ldr	r2, [r4, #0]
 800c848:	0591      	lsls	r1, r2, #22
 800c84a:	f57f af1b 	bpl.w	800c684 <_scanf_float+0x60>
 800c84e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800c852:	6022      	str	r2, [r4, #0]
 800c854:	f8cd 9004 	str.w	r9, [sp, #4]
 800c858:	e7a8      	b.n	800c7ac <_scanf_float+0x188>
 800c85a:	6822      	ldr	r2, [r4, #0]
 800c85c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800c860:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c864:	d006      	beq.n	800c874 <_scanf_float+0x250>
 800c866:	0550      	lsls	r0, r2, #21
 800c868:	f57f af0c 	bpl.w	800c684 <_scanf_float+0x60>
 800c86c:	f1b9 0f00 	cmp.w	r9, #0
 800c870:	f43f af0f 	beq.w	800c692 <_scanf_float+0x6e>
 800c874:	0591      	lsls	r1, r2, #22
 800c876:	bf58      	it	pl
 800c878:	9901      	ldrpl	r1, [sp, #4]
 800c87a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c87e:	bf58      	it	pl
 800c880:	eba9 0101 	subpl.w	r1, r9, r1
 800c884:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800c888:	bf58      	it	pl
 800c88a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c88e:	6022      	str	r2, [r4, #0]
 800c890:	f04f 0900 	mov.w	r9, #0
 800c894:	e78a      	b.n	800c7ac <_scanf_float+0x188>
 800c896:	f04f 0a03 	mov.w	sl, #3
 800c89a:	e787      	b.n	800c7ac <_scanf_float+0x188>
 800c89c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c8a0:	4639      	mov	r1, r7
 800c8a2:	4640      	mov	r0, r8
 800c8a4:	4798      	blx	r3
 800c8a6:	2800      	cmp	r0, #0
 800c8a8:	f43f aedf 	beq.w	800c66a <_scanf_float+0x46>
 800c8ac:	e6ea      	b.n	800c684 <_scanf_float+0x60>
 800c8ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c8b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c8b6:	463a      	mov	r2, r7
 800c8b8:	4640      	mov	r0, r8
 800c8ba:	4798      	blx	r3
 800c8bc:	6923      	ldr	r3, [r4, #16]
 800c8be:	3b01      	subs	r3, #1
 800c8c0:	6123      	str	r3, [r4, #16]
 800c8c2:	e6ec      	b.n	800c69e <_scanf_float+0x7a>
 800c8c4:	1e6b      	subs	r3, r5, #1
 800c8c6:	2b06      	cmp	r3, #6
 800c8c8:	d825      	bhi.n	800c916 <_scanf_float+0x2f2>
 800c8ca:	2d02      	cmp	r5, #2
 800c8cc:	d836      	bhi.n	800c93c <_scanf_float+0x318>
 800c8ce:	455e      	cmp	r6, fp
 800c8d0:	f67f aee8 	bls.w	800c6a4 <_scanf_float+0x80>
 800c8d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c8d8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c8dc:	463a      	mov	r2, r7
 800c8de:	4640      	mov	r0, r8
 800c8e0:	4798      	blx	r3
 800c8e2:	6923      	ldr	r3, [r4, #16]
 800c8e4:	3b01      	subs	r3, #1
 800c8e6:	6123      	str	r3, [r4, #16]
 800c8e8:	e7f1      	b.n	800c8ce <_scanf_float+0x2aa>
 800c8ea:	9802      	ldr	r0, [sp, #8]
 800c8ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c8f0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800c8f4:	9002      	str	r0, [sp, #8]
 800c8f6:	463a      	mov	r2, r7
 800c8f8:	4640      	mov	r0, r8
 800c8fa:	4798      	blx	r3
 800c8fc:	6923      	ldr	r3, [r4, #16]
 800c8fe:	3b01      	subs	r3, #1
 800c900:	6123      	str	r3, [r4, #16]
 800c902:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c906:	fa5f fa8a 	uxtb.w	sl, sl
 800c90a:	f1ba 0f02 	cmp.w	sl, #2
 800c90e:	d1ec      	bne.n	800c8ea <_scanf_float+0x2c6>
 800c910:	3d03      	subs	r5, #3
 800c912:	b2ed      	uxtb	r5, r5
 800c914:	1b76      	subs	r6, r6, r5
 800c916:	6823      	ldr	r3, [r4, #0]
 800c918:	05da      	lsls	r2, r3, #23
 800c91a:	d52f      	bpl.n	800c97c <_scanf_float+0x358>
 800c91c:	055b      	lsls	r3, r3, #21
 800c91e:	d510      	bpl.n	800c942 <_scanf_float+0x31e>
 800c920:	455e      	cmp	r6, fp
 800c922:	f67f aebf 	bls.w	800c6a4 <_scanf_float+0x80>
 800c926:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c92a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c92e:	463a      	mov	r2, r7
 800c930:	4640      	mov	r0, r8
 800c932:	4798      	blx	r3
 800c934:	6923      	ldr	r3, [r4, #16]
 800c936:	3b01      	subs	r3, #1
 800c938:	6123      	str	r3, [r4, #16]
 800c93a:	e7f1      	b.n	800c920 <_scanf_float+0x2fc>
 800c93c:	46aa      	mov	sl, r5
 800c93e:	9602      	str	r6, [sp, #8]
 800c940:	e7df      	b.n	800c902 <_scanf_float+0x2de>
 800c942:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c946:	6923      	ldr	r3, [r4, #16]
 800c948:	2965      	cmp	r1, #101	; 0x65
 800c94a:	f103 33ff 	add.w	r3, r3, #4294967295
 800c94e:	f106 35ff 	add.w	r5, r6, #4294967295
 800c952:	6123      	str	r3, [r4, #16]
 800c954:	d00c      	beq.n	800c970 <_scanf_float+0x34c>
 800c956:	2945      	cmp	r1, #69	; 0x45
 800c958:	d00a      	beq.n	800c970 <_scanf_float+0x34c>
 800c95a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c95e:	463a      	mov	r2, r7
 800c960:	4640      	mov	r0, r8
 800c962:	4798      	blx	r3
 800c964:	6923      	ldr	r3, [r4, #16]
 800c966:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c96a:	3b01      	subs	r3, #1
 800c96c:	1eb5      	subs	r5, r6, #2
 800c96e:	6123      	str	r3, [r4, #16]
 800c970:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c974:	463a      	mov	r2, r7
 800c976:	4640      	mov	r0, r8
 800c978:	4798      	blx	r3
 800c97a:	462e      	mov	r6, r5
 800c97c:	6825      	ldr	r5, [r4, #0]
 800c97e:	f015 0510 	ands.w	r5, r5, #16
 800c982:	d159      	bne.n	800ca38 <_scanf_float+0x414>
 800c984:	7035      	strb	r5, [r6, #0]
 800c986:	6823      	ldr	r3, [r4, #0]
 800c988:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c98c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c990:	d11b      	bne.n	800c9ca <_scanf_float+0x3a6>
 800c992:	9b01      	ldr	r3, [sp, #4]
 800c994:	454b      	cmp	r3, r9
 800c996:	eba3 0209 	sub.w	r2, r3, r9
 800c99a:	d123      	bne.n	800c9e4 <_scanf_float+0x3c0>
 800c99c:	2200      	movs	r2, #0
 800c99e:	4659      	mov	r1, fp
 800c9a0:	4640      	mov	r0, r8
 800c9a2:	f000 ff57 	bl	800d854 <_strtod_r>
 800c9a6:	6822      	ldr	r2, [r4, #0]
 800c9a8:	9b03      	ldr	r3, [sp, #12]
 800c9aa:	f012 0f02 	tst.w	r2, #2
 800c9ae:	ec57 6b10 	vmov	r6, r7, d0
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	d021      	beq.n	800c9fa <_scanf_float+0x3d6>
 800c9b6:	9903      	ldr	r1, [sp, #12]
 800c9b8:	1d1a      	adds	r2, r3, #4
 800c9ba:	600a      	str	r2, [r1, #0]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	e9c3 6700 	strd	r6, r7, [r3]
 800c9c2:	68e3      	ldr	r3, [r4, #12]
 800c9c4:	3301      	adds	r3, #1
 800c9c6:	60e3      	str	r3, [r4, #12]
 800c9c8:	e66d      	b.n	800c6a6 <_scanf_float+0x82>
 800c9ca:	9b04      	ldr	r3, [sp, #16]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d0e5      	beq.n	800c99c <_scanf_float+0x378>
 800c9d0:	9905      	ldr	r1, [sp, #20]
 800c9d2:	230a      	movs	r3, #10
 800c9d4:	462a      	mov	r2, r5
 800c9d6:	3101      	adds	r1, #1
 800c9d8:	4640      	mov	r0, r8
 800c9da:	f000 ffcf 	bl	800d97c <_strtol_r>
 800c9de:	9b04      	ldr	r3, [sp, #16]
 800c9e0:	9e05      	ldr	r6, [sp, #20]
 800c9e2:	1ac2      	subs	r2, r0, r3
 800c9e4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800c9e8:	429e      	cmp	r6, r3
 800c9ea:	bf28      	it	cs
 800c9ec:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800c9f0:	4912      	ldr	r1, [pc, #72]	; (800ca3c <_scanf_float+0x418>)
 800c9f2:	4630      	mov	r0, r6
 800c9f4:	f000 f8a6 	bl	800cb44 <siprintf>
 800c9f8:	e7d0      	b.n	800c99c <_scanf_float+0x378>
 800c9fa:	9903      	ldr	r1, [sp, #12]
 800c9fc:	f012 0f04 	tst.w	r2, #4
 800ca00:	f103 0204 	add.w	r2, r3, #4
 800ca04:	600a      	str	r2, [r1, #0]
 800ca06:	d1d9      	bne.n	800c9bc <_scanf_float+0x398>
 800ca08:	f8d3 8000 	ldr.w	r8, [r3]
 800ca0c:	ee10 2a10 	vmov	r2, s0
 800ca10:	ee10 0a10 	vmov	r0, s0
 800ca14:	463b      	mov	r3, r7
 800ca16:	4639      	mov	r1, r7
 800ca18:	f7f4 f900 	bl	8000c1c <__aeabi_dcmpun>
 800ca1c:	b128      	cbz	r0, 800ca2a <_scanf_float+0x406>
 800ca1e:	4808      	ldr	r0, [pc, #32]	; (800ca40 <_scanf_float+0x41c>)
 800ca20:	f000 f88a 	bl	800cb38 <nanf>
 800ca24:	ed88 0a00 	vstr	s0, [r8]
 800ca28:	e7cb      	b.n	800c9c2 <_scanf_float+0x39e>
 800ca2a:	4630      	mov	r0, r6
 800ca2c:	4639      	mov	r1, r7
 800ca2e:	f7f4 f953 	bl	8000cd8 <__aeabi_d2f>
 800ca32:	f8c8 0000 	str.w	r0, [r8]
 800ca36:	e7c4      	b.n	800c9c2 <_scanf_float+0x39e>
 800ca38:	2500      	movs	r5, #0
 800ca3a:	e634      	b.n	800c6a6 <_scanf_float+0x82>
 800ca3c:	080105f0 	.word	0x080105f0
 800ca40:	080109f8 	.word	0x080109f8

0800ca44 <cleanup_glue>:
 800ca44:	b538      	push	{r3, r4, r5, lr}
 800ca46:	460c      	mov	r4, r1
 800ca48:	6809      	ldr	r1, [r1, #0]
 800ca4a:	4605      	mov	r5, r0
 800ca4c:	b109      	cbz	r1, 800ca52 <cleanup_glue+0xe>
 800ca4e:	f7ff fff9 	bl	800ca44 <cleanup_glue>
 800ca52:	4621      	mov	r1, r4
 800ca54:	4628      	mov	r0, r5
 800ca56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca5a:	f002 bf61 	b.w	800f920 <_free_r>
	...

0800ca60 <_reclaim_reent>:
 800ca60:	4b2c      	ldr	r3, [pc, #176]	; (800cb14 <_reclaim_reent+0xb4>)
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	4283      	cmp	r3, r0
 800ca66:	b570      	push	{r4, r5, r6, lr}
 800ca68:	4604      	mov	r4, r0
 800ca6a:	d051      	beq.n	800cb10 <_reclaim_reent+0xb0>
 800ca6c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ca6e:	b143      	cbz	r3, 800ca82 <_reclaim_reent+0x22>
 800ca70:	68db      	ldr	r3, [r3, #12]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d14a      	bne.n	800cb0c <_reclaim_reent+0xac>
 800ca76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca78:	6819      	ldr	r1, [r3, #0]
 800ca7a:	b111      	cbz	r1, 800ca82 <_reclaim_reent+0x22>
 800ca7c:	4620      	mov	r0, r4
 800ca7e:	f002 ff4f 	bl	800f920 <_free_r>
 800ca82:	6961      	ldr	r1, [r4, #20]
 800ca84:	b111      	cbz	r1, 800ca8c <_reclaim_reent+0x2c>
 800ca86:	4620      	mov	r0, r4
 800ca88:	f002 ff4a 	bl	800f920 <_free_r>
 800ca8c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ca8e:	b111      	cbz	r1, 800ca96 <_reclaim_reent+0x36>
 800ca90:	4620      	mov	r0, r4
 800ca92:	f002 ff45 	bl	800f920 <_free_r>
 800ca96:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ca98:	b111      	cbz	r1, 800caa0 <_reclaim_reent+0x40>
 800ca9a:	4620      	mov	r0, r4
 800ca9c:	f002 ff40 	bl	800f920 <_free_r>
 800caa0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800caa2:	b111      	cbz	r1, 800caaa <_reclaim_reent+0x4a>
 800caa4:	4620      	mov	r0, r4
 800caa6:	f002 ff3b 	bl	800f920 <_free_r>
 800caaa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800caac:	b111      	cbz	r1, 800cab4 <_reclaim_reent+0x54>
 800caae:	4620      	mov	r0, r4
 800cab0:	f002 ff36 	bl	800f920 <_free_r>
 800cab4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800cab6:	b111      	cbz	r1, 800cabe <_reclaim_reent+0x5e>
 800cab8:	4620      	mov	r0, r4
 800caba:	f002 ff31 	bl	800f920 <_free_r>
 800cabe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800cac0:	b111      	cbz	r1, 800cac8 <_reclaim_reent+0x68>
 800cac2:	4620      	mov	r0, r4
 800cac4:	f002 ff2c 	bl	800f920 <_free_r>
 800cac8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800caca:	b111      	cbz	r1, 800cad2 <_reclaim_reent+0x72>
 800cacc:	4620      	mov	r0, r4
 800cace:	f002 ff27 	bl	800f920 <_free_r>
 800cad2:	69a3      	ldr	r3, [r4, #24]
 800cad4:	b1e3      	cbz	r3, 800cb10 <_reclaim_reent+0xb0>
 800cad6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cad8:	4620      	mov	r0, r4
 800cada:	4798      	blx	r3
 800cadc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800cade:	b1b9      	cbz	r1, 800cb10 <_reclaim_reent+0xb0>
 800cae0:	4620      	mov	r0, r4
 800cae2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cae6:	f7ff bfad 	b.w	800ca44 <cleanup_glue>
 800caea:	5949      	ldr	r1, [r1, r5]
 800caec:	b941      	cbnz	r1, 800cb00 <_reclaim_reent+0xa0>
 800caee:	3504      	adds	r5, #4
 800caf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800caf2:	2d80      	cmp	r5, #128	; 0x80
 800caf4:	68d9      	ldr	r1, [r3, #12]
 800caf6:	d1f8      	bne.n	800caea <_reclaim_reent+0x8a>
 800caf8:	4620      	mov	r0, r4
 800cafa:	f002 ff11 	bl	800f920 <_free_r>
 800cafe:	e7ba      	b.n	800ca76 <_reclaim_reent+0x16>
 800cb00:	680e      	ldr	r6, [r1, #0]
 800cb02:	4620      	mov	r0, r4
 800cb04:	f002 ff0c 	bl	800f920 <_free_r>
 800cb08:	4631      	mov	r1, r6
 800cb0a:	e7ef      	b.n	800caec <_reclaim_reent+0x8c>
 800cb0c:	2500      	movs	r5, #0
 800cb0e:	e7ef      	b.n	800caf0 <_reclaim_reent+0x90>
 800cb10:	bd70      	pop	{r4, r5, r6, pc}
 800cb12:	bf00      	nop
 800cb14:	20000010 	.word	0x20000010

0800cb18 <_sbrk_r>:
 800cb18:	b538      	push	{r3, r4, r5, lr}
 800cb1a:	4d06      	ldr	r5, [pc, #24]	; (800cb34 <_sbrk_r+0x1c>)
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	4604      	mov	r4, r0
 800cb20:	4608      	mov	r0, r1
 800cb22:	602b      	str	r3, [r5, #0]
 800cb24:	f7f5 f94c 	bl	8001dc0 <_sbrk>
 800cb28:	1c43      	adds	r3, r0, #1
 800cb2a:	d102      	bne.n	800cb32 <_sbrk_r+0x1a>
 800cb2c:	682b      	ldr	r3, [r5, #0]
 800cb2e:	b103      	cbz	r3, 800cb32 <_sbrk_r+0x1a>
 800cb30:	6023      	str	r3, [r4, #0]
 800cb32:	bd38      	pop	{r3, r4, r5, pc}
 800cb34:	2000783c 	.word	0x2000783c

0800cb38 <nanf>:
 800cb38:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cb40 <nanf+0x8>
 800cb3c:	4770      	bx	lr
 800cb3e:	bf00      	nop
 800cb40:	7fc00000 	.word	0x7fc00000

0800cb44 <siprintf>:
 800cb44:	b40e      	push	{r1, r2, r3}
 800cb46:	b500      	push	{lr}
 800cb48:	b09c      	sub	sp, #112	; 0x70
 800cb4a:	ab1d      	add	r3, sp, #116	; 0x74
 800cb4c:	9002      	str	r0, [sp, #8]
 800cb4e:	9006      	str	r0, [sp, #24]
 800cb50:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cb54:	4809      	ldr	r0, [pc, #36]	; (800cb7c <siprintf+0x38>)
 800cb56:	9107      	str	r1, [sp, #28]
 800cb58:	9104      	str	r1, [sp, #16]
 800cb5a:	4909      	ldr	r1, [pc, #36]	; (800cb80 <siprintf+0x3c>)
 800cb5c:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb60:	9105      	str	r1, [sp, #20]
 800cb62:	6800      	ldr	r0, [r0, #0]
 800cb64:	9301      	str	r3, [sp, #4]
 800cb66:	a902      	add	r1, sp, #8
 800cb68:	f002 ff82 	bl	800fa70 <_svfiprintf_r>
 800cb6c:	9b02      	ldr	r3, [sp, #8]
 800cb6e:	2200      	movs	r2, #0
 800cb70:	701a      	strb	r2, [r3, #0]
 800cb72:	b01c      	add	sp, #112	; 0x70
 800cb74:	f85d eb04 	ldr.w	lr, [sp], #4
 800cb78:	b003      	add	sp, #12
 800cb7a:	4770      	bx	lr
 800cb7c:	20000010 	.word	0x20000010
 800cb80:	ffff0208 	.word	0xffff0208

0800cb84 <__sread>:
 800cb84:	b510      	push	{r4, lr}
 800cb86:	460c      	mov	r4, r1
 800cb88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb8c:	f003 f870 	bl	800fc70 <_read_r>
 800cb90:	2800      	cmp	r0, #0
 800cb92:	bfab      	itete	ge
 800cb94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cb96:	89a3      	ldrhlt	r3, [r4, #12]
 800cb98:	181b      	addge	r3, r3, r0
 800cb9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cb9e:	bfac      	ite	ge
 800cba0:	6563      	strge	r3, [r4, #84]	; 0x54
 800cba2:	81a3      	strhlt	r3, [r4, #12]
 800cba4:	bd10      	pop	{r4, pc}

0800cba6 <__swrite>:
 800cba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbaa:	461f      	mov	r7, r3
 800cbac:	898b      	ldrh	r3, [r1, #12]
 800cbae:	05db      	lsls	r3, r3, #23
 800cbb0:	4605      	mov	r5, r0
 800cbb2:	460c      	mov	r4, r1
 800cbb4:	4616      	mov	r6, r2
 800cbb6:	d505      	bpl.n	800cbc4 <__swrite+0x1e>
 800cbb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbbc:	2302      	movs	r3, #2
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	f002 f99e 	bl	800ef00 <_lseek_r>
 800cbc4:	89a3      	ldrh	r3, [r4, #12]
 800cbc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cbca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cbce:	81a3      	strh	r3, [r4, #12]
 800cbd0:	4632      	mov	r2, r6
 800cbd2:	463b      	mov	r3, r7
 800cbd4:	4628      	mov	r0, r5
 800cbd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cbda:	f7fe bec7 	b.w	800b96c <_write_r>

0800cbde <__sseek>:
 800cbde:	b510      	push	{r4, lr}
 800cbe0:	460c      	mov	r4, r1
 800cbe2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbe6:	f002 f98b 	bl	800ef00 <_lseek_r>
 800cbea:	1c43      	adds	r3, r0, #1
 800cbec:	89a3      	ldrh	r3, [r4, #12]
 800cbee:	bf15      	itete	ne
 800cbf0:	6560      	strne	r0, [r4, #84]	; 0x54
 800cbf2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cbf6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cbfa:	81a3      	strheq	r3, [r4, #12]
 800cbfc:	bf18      	it	ne
 800cbfe:	81a3      	strhne	r3, [r4, #12]
 800cc00:	bd10      	pop	{r4, pc}

0800cc02 <__sclose>:
 800cc02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc06:	f000 bebb 	b.w	800d980 <_close_r>

0800cc0a <sulp>:
 800cc0a:	b570      	push	{r4, r5, r6, lr}
 800cc0c:	4604      	mov	r4, r0
 800cc0e:	460d      	mov	r5, r1
 800cc10:	ec45 4b10 	vmov	d0, r4, r5
 800cc14:	4616      	mov	r6, r2
 800cc16:	f002 fd1d 	bl	800f654 <__ulp>
 800cc1a:	ec51 0b10 	vmov	r0, r1, d0
 800cc1e:	b17e      	cbz	r6, 800cc40 <sulp+0x36>
 800cc20:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cc24:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	dd09      	ble.n	800cc40 <sulp+0x36>
 800cc2c:	051b      	lsls	r3, r3, #20
 800cc2e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800cc32:	2400      	movs	r4, #0
 800cc34:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800cc38:	4622      	mov	r2, r4
 800cc3a:	462b      	mov	r3, r5
 800cc3c:	f7f3 fd54 	bl	80006e8 <__aeabi_dmul>
 800cc40:	bd70      	pop	{r4, r5, r6, pc}
 800cc42:	0000      	movs	r0, r0
 800cc44:	0000      	movs	r0, r0
	...

0800cc48 <_strtod_l>:
 800cc48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc4c:	ed2d 8b02 	vpush	{d8}
 800cc50:	b09d      	sub	sp, #116	; 0x74
 800cc52:	461f      	mov	r7, r3
 800cc54:	2300      	movs	r3, #0
 800cc56:	9318      	str	r3, [sp, #96]	; 0x60
 800cc58:	4ba2      	ldr	r3, [pc, #648]	; (800cee4 <_strtod_l+0x29c>)
 800cc5a:	9213      	str	r2, [sp, #76]	; 0x4c
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	9305      	str	r3, [sp, #20]
 800cc60:	4604      	mov	r4, r0
 800cc62:	4618      	mov	r0, r3
 800cc64:	4688      	mov	r8, r1
 800cc66:	f7f3 fb25 	bl	80002b4 <strlen>
 800cc6a:	f04f 0a00 	mov.w	sl, #0
 800cc6e:	4605      	mov	r5, r0
 800cc70:	f04f 0b00 	mov.w	fp, #0
 800cc74:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800cc78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cc7a:	781a      	ldrb	r2, [r3, #0]
 800cc7c:	2a2b      	cmp	r2, #43	; 0x2b
 800cc7e:	d04e      	beq.n	800cd1e <_strtod_l+0xd6>
 800cc80:	d83b      	bhi.n	800ccfa <_strtod_l+0xb2>
 800cc82:	2a0d      	cmp	r2, #13
 800cc84:	d834      	bhi.n	800ccf0 <_strtod_l+0xa8>
 800cc86:	2a08      	cmp	r2, #8
 800cc88:	d834      	bhi.n	800ccf4 <_strtod_l+0xac>
 800cc8a:	2a00      	cmp	r2, #0
 800cc8c:	d03e      	beq.n	800cd0c <_strtod_l+0xc4>
 800cc8e:	2300      	movs	r3, #0
 800cc90:	930a      	str	r3, [sp, #40]	; 0x28
 800cc92:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800cc94:	7833      	ldrb	r3, [r6, #0]
 800cc96:	2b30      	cmp	r3, #48	; 0x30
 800cc98:	f040 80b0 	bne.w	800cdfc <_strtod_l+0x1b4>
 800cc9c:	7873      	ldrb	r3, [r6, #1]
 800cc9e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cca2:	2b58      	cmp	r3, #88	; 0x58
 800cca4:	d168      	bne.n	800cd78 <_strtod_l+0x130>
 800cca6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cca8:	9301      	str	r3, [sp, #4]
 800ccaa:	ab18      	add	r3, sp, #96	; 0x60
 800ccac:	9702      	str	r7, [sp, #8]
 800ccae:	9300      	str	r3, [sp, #0]
 800ccb0:	4a8d      	ldr	r2, [pc, #564]	; (800cee8 <_strtod_l+0x2a0>)
 800ccb2:	ab19      	add	r3, sp, #100	; 0x64
 800ccb4:	a917      	add	r1, sp, #92	; 0x5c
 800ccb6:	4620      	mov	r0, r4
 800ccb8:	f001 fe16 	bl	800e8e8 <__gethex>
 800ccbc:	f010 0707 	ands.w	r7, r0, #7
 800ccc0:	4605      	mov	r5, r0
 800ccc2:	d005      	beq.n	800ccd0 <_strtod_l+0x88>
 800ccc4:	2f06      	cmp	r7, #6
 800ccc6:	d12c      	bne.n	800cd22 <_strtod_l+0xda>
 800ccc8:	3601      	adds	r6, #1
 800ccca:	2300      	movs	r3, #0
 800cccc:	9617      	str	r6, [sp, #92]	; 0x5c
 800ccce:	930a      	str	r3, [sp, #40]	; 0x28
 800ccd0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	f040 8590 	bne.w	800d7f8 <_strtod_l+0xbb0>
 800ccd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccda:	b1eb      	cbz	r3, 800cd18 <_strtod_l+0xd0>
 800ccdc:	4652      	mov	r2, sl
 800ccde:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800cce2:	ec43 2b10 	vmov	d0, r2, r3
 800cce6:	b01d      	add	sp, #116	; 0x74
 800cce8:	ecbd 8b02 	vpop	{d8}
 800ccec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccf0:	2a20      	cmp	r2, #32
 800ccf2:	d1cc      	bne.n	800cc8e <_strtod_l+0x46>
 800ccf4:	3301      	adds	r3, #1
 800ccf6:	9317      	str	r3, [sp, #92]	; 0x5c
 800ccf8:	e7be      	b.n	800cc78 <_strtod_l+0x30>
 800ccfa:	2a2d      	cmp	r2, #45	; 0x2d
 800ccfc:	d1c7      	bne.n	800cc8e <_strtod_l+0x46>
 800ccfe:	2201      	movs	r2, #1
 800cd00:	920a      	str	r2, [sp, #40]	; 0x28
 800cd02:	1c5a      	adds	r2, r3, #1
 800cd04:	9217      	str	r2, [sp, #92]	; 0x5c
 800cd06:	785b      	ldrb	r3, [r3, #1]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d1c2      	bne.n	800cc92 <_strtod_l+0x4a>
 800cd0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cd0e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	f040 856e 	bne.w	800d7f4 <_strtod_l+0xbac>
 800cd18:	4652      	mov	r2, sl
 800cd1a:	465b      	mov	r3, fp
 800cd1c:	e7e1      	b.n	800cce2 <_strtod_l+0x9a>
 800cd1e:	2200      	movs	r2, #0
 800cd20:	e7ee      	b.n	800cd00 <_strtod_l+0xb8>
 800cd22:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cd24:	b13a      	cbz	r2, 800cd36 <_strtod_l+0xee>
 800cd26:	2135      	movs	r1, #53	; 0x35
 800cd28:	a81a      	add	r0, sp, #104	; 0x68
 800cd2a:	f002 fd9e 	bl	800f86a <__copybits>
 800cd2e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cd30:	4620      	mov	r0, r4
 800cd32:	f002 f95d 	bl	800eff0 <_Bfree>
 800cd36:	3f01      	subs	r7, #1
 800cd38:	2f04      	cmp	r7, #4
 800cd3a:	d806      	bhi.n	800cd4a <_strtod_l+0x102>
 800cd3c:	e8df f007 	tbb	[pc, r7]
 800cd40:	1714030a 	.word	0x1714030a
 800cd44:	0a          	.byte	0x0a
 800cd45:	00          	.byte	0x00
 800cd46:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800cd4a:	0728      	lsls	r0, r5, #28
 800cd4c:	d5c0      	bpl.n	800ccd0 <_strtod_l+0x88>
 800cd4e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800cd52:	e7bd      	b.n	800ccd0 <_strtod_l+0x88>
 800cd54:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800cd58:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800cd5a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800cd5e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800cd62:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cd66:	e7f0      	b.n	800cd4a <_strtod_l+0x102>
 800cd68:	f8df b180 	ldr.w	fp, [pc, #384]	; 800ceec <_strtod_l+0x2a4>
 800cd6c:	e7ed      	b.n	800cd4a <_strtod_l+0x102>
 800cd6e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800cd72:	f04f 3aff 	mov.w	sl, #4294967295
 800cd76:	e7e8      	b.n	800cd4a <_strtod_l+0x102>
 800cd78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cd7a:	1c5a      	adds	r2, r3, #1
 800cd7c:	9217      	str	r2, [sp, #92]	; 0x5c
 800cd7e:	785b      	ldrb	r3, [r3, #1]
 800cd80:	2b30      	cmp	r3, #48	; 0x30
 800cd82:	d0f9      	beq.n	800cd78 <_strtod_l+0x130>
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d0a3      	beq.n	800ccd0 <_strtod_l+0x88>
 800cd88:	2301      	movs	r3, #1
 800cd8a:	f04f 0900 	mov.w	r9, #0
 800cd8e:	9304      	str	r3, [sp, #16]
 800cd90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cd92:	9308      	str	r3, [sp, #32]
 800cd94:	f8cd 901c 	str.w	r9, [sp, #28]
 800cd98:	464f      	mov	r7, r9
 800cd9a:	220a      	movs	r2, #10
 800cd9c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800cd9e:	7806      	ldrb	r6, [r0, #0]
 800cda0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800cda4:	b2d9      	uxtb	r1, r3
 800cda6:	2909      	cmp	r1, #9
 800cda8:	d92a      	bls.n	800ce00 <_strtod_l+0x1b8>
 800cdaa:	9905      	ldr	r1, [sp, #20]
 800cdac:	462a      	mov	r2, r5
 800cdae:	f002 ff7b 	bl	800fca8 <strncmp>
 800cdb2:	b398      	cbz	r0, 800ce1c <_strtod_l+0x1d4>
 800cdb4:	2000      	movs	r0, #0
 800cdb6:	4632      	mov	r2, r6
 800cdb8:	463d      	mov	r5, r7
 800cdba:	9005      	str	r0, [sp, #20]
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	2a65      	cmp	r2, #101	; 0x65
 800cdc0:	d001      	beq.n	800cdc6 <_strtod_l+0x17e>
 800cdc2:	2a45      	cmp	r2, #69	; 0x45
 800cdc4:	d118      	bne.n	800cdf8 <_strtod_l+0x1b0>
 800cdc6:	b91d      	cbnz	r5, 800cdd0 <_strtod_l+0x188>
 800cdc8:	9a04      	ldr	r2, [sp, #16]
 800cdca:	4302      	orrs	r2, r0
 800cdcc:	d09e      	beq.n	800cd0c <_strtod_l+0xc4>
 800cdce:	2500      	movs	r5, #0
 800cdd0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800cdd4:	f108 0201 	add.w	r2, r8, #1
 800cdd8:	9217      	str	r2, [sp, #92]	; 0x5c
 800cdda:	f898 2001 	ldrb.w	r2, [r8, #1]
 800cdde:	2a2b      	cmp	r2, #43	; 0x2b
 800cde0:	d075      	beq.n	800cece <_strtod_l+0x286>
 800cde2:	2a2d      	cmp	r2, #45	; 0x2d
 800cde4:	d07b      	beq.n	800cede <_strtod_l+0x296>
 800cde6:	f04f 0c00 	mov.w	ip, #0
 800cdea:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800cdee:	2909      	cmp	r1, #9
 800cdf0:	f240 8082 	bls.w	800cef8 <_strtod_l+0x2b0>
 800cdf4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800cdf8:	2600      	movs	r6, #0
 800cdfa:	e09d      	b.n	800cf38 <_strtod_l+0x2f0>
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	e7c4      	b.n	800cd8a <_strtod_l+0x142>
 800ce00:	2f08      	cmp	r7, #8
 800ce02:	bfd8      	it	le
 800ce04:	9907      	ldrle	r1, [sp, #28]
 800ce06:	f100 0001 	add.w	r0, r0, #1
 800ce0a:	bfda      	itte	le
 800ce0c:	fb02 3301 	mlale	r3, r2, r1, r3
 800ce10:	9307      	strle	r3, [sp, #28]
 800ce12:	fb02 3909 	mlagt	r9, r2, r9, r3
 800ce16:	3701      	adds	r7, #1
 800ce18:	9017      	str	r0, [sp, #92]	; 0x5c
 800ce1a:	e7bf      	b.n	800cd9c <_strtod_l+0x154>
 800ce1c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ce1e:	195a      	adds	r2, r3, r5
 800ce20:	9217      	str	r2, [sp, #92]	; 0x5c
 800ce22:	5d5a      	ldrb	r2, [r3, r5]
 800ce24:	2f00      	cmp	r7, #0
 800ce26:	d037      	beq.n	800ce98 <_strtod_l+0x250>
 800ce28:	9005      	str	r0, [sp, #20]
 800ce2a:	463d      	mov	r5, r7
 800ce2c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ce30:	2b09      	cmp	r3, #9
 800ce32:	d912      	bls.n	800ce5a <_strtod_l+0x212>
 800ce34:	2301      	movs	r3, #1
 800ce36:	e7c2      	b.n	800cdbe <_strtod_l+0x176>
 800ce38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ce3a:	1c5a      	adds	r2, r3, #1
 800ce3c:	9217      	str	r2, [sp, #92]	; 0x5c
 800ce3e:	785a      	ldrb	r2, [r3, #1]
 800ce40:	3001      	adds	r0, #1
 800ce42:	2a30      	cmp	r2, #48	; 0x30
 800ce44:	d0f8      	beq.n	800ce38 <_strtod_l+0x1f0>
 800ce46:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ce4a:	2b08      	cmp	r3, #8
 800ce4c:	f200 84d9 	bhi.w	800d802 <_strtod_l+0xbba>
 800ce50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ce52:	9005      	str	r0, [sp, #20]
 800ce54:	2000      	movs	r0, #0
 800ce56:	9308      	str	r3, [sp, #32]
 800ce58:	4605      	mov	r5, r0
 800ce5a:	3a30      	subs	r2, #48	; 0x30
 800ce5c:	f100 0301 	add.w	r3, r0, #1
 800ce60:	d014      	beq.n	800ce8c <_strtod_l+0x244>
 800ce62:	9905      	ldr	r1, [sp, #20]
 800ce64:	4419      	add	r1, r3
 800ce66:	9105      	str	r1, [sp, #20]
 800ce68:	462b      	mov	r3, r5
 800ce6a:	eb00 0e05 	add.w	lr, r0, r5
 800ce6e:	210a      	movs	r1, #10
 800ce70:	4573      	cmp	r3, lr
 800ce72:	d113      	bne.n	800ce9c <_strtod_l+0x254>
 800ce74:	182b      	adds	r3, r5, r0
 800ce76:	2b08      	cmp	r3, #8
 800ce78:	f105 0501 	add.w	r5, r5, #1
 800ce7c:	4405      	add	r5, r0
 800ce7e:	dc1c      	bgt.n	800ceba <_strtod_l+0x272>
 800ce80:	9907      	ldr	r1, [sp, #28]
 800ce82:	230a      	movs	r3, #10
 800ce84:	fb03 2301 	mla	r3, r3, r1, r2
 800ce88:	9307      	str	r3, [sp, #28]
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ce8e:	1c51      	adds	r1, r2, #1
 800ce90:	9117      	str	r1, [sp, #92]	; 0x5c
 800ce92:	7852      	ldrb	r2, [r2, #1]
 800ce94:	4618      	mov	r0, r3
 800ce96:	e7c9      	b.n	800ce2c <_strtod_l+0x1e4>
 800ce98:	4638      	mov	r0, r7
 800ce9a:	e7d2      	b.n	800ce42 <_strtod_l+0x1fa>
 800ce9c:	2b08      	cmp	r3, #8
 800ce9e:	dc04      	bgt.n	800ceaa <_strtod_l+0x262>
 800cea0:	9e07      	ldr	r6, [sp, #28]
 800cea2:	434e      	muls	r6, r1
 800cea4:	9607      	str	r6, [sp, #28]
 800cea6:	3301      	adds	r3, #1
 800cea8:	e7e2      	b.n	800ce70 <_strtod_l+0x228>
 800ceaa:	f103 0c01 	add.w	ip, r3, #1
 800ceae:	f1bc 0f10 	cmp.w	ip, #16
 800ceb2:	bfd8      	it	le
 800ceb4:	fb01 f909 	mulle.w	r9, r1, r9
 800ceb8:	e7f5      	b.n	800cea6 <_strtod_l+0x25e>
 800ceba:	2d10      	cmp	r5, #16
 800cebc:	bfdc      	itt	le
 800cebe:	230a      	movle	r3, #10
 800cec0:	fb03 2909 	mlale	r9, r3, r9, r2
 800cec4:	e7e1      	b.n	800ce8a <_strtod_l+0x242>
 800cec6:	2300      	movs	r3, #0
 800cec8:	9305      	str	r3, [sp, #20]
 800ceca:	2301      	movs	r3, #1
 800cecc:	e77c      	b.n	800cdc8 <_strtod_l+0x180>
 800cece:	f04f 0c00 	mov.w	ip, #0
 800ced2:	f108 0202 	add.w	r2, r8, #2
 800ced6:	9217      	str	r2, [sp, #92]	; 0x5c
 800ced8:	f898 2002 	ldrb.w	r2, [r8, #2]
 800cedc:	e785      	b.n	800cdea <_strtod_l+0x1a2>
 800cede:	f04f 0c01 	mov.w	ip, #1
 800cee2:	e7f6      	b.n	800ced2 <_strtod_l+0x28a>
 800cee4:	08010840 	.word	0x08010840
 800cee8:	080105f8 	.word	0x080105f8
 800ceec:	7ff00000 	.word	0x7ff00000
 800cef0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cef2:	1c51      	adds	r1, r2, #1
 800cef4:	9117      	str	r1, [sp, #92]	; 0x5c
 800cef6:	7852      	ldrb	r2, [r2, #1]
 800cef8:	2a30      	cmp	r2, #48	; 0x30
 800cefa:	d0f9      	beq.n	800cef0 <_strtod_l+0x2a8>
 800cefc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800cf00:	2908      	cmp	r1, #8
 800cf02:	f63f af79 	bhi.w	800cdf8 <_strtod_l+0x1b0>
 800cf06:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800cf0a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cf0c:	9206      	str	r2, [sp, #24]
 800cf0e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cf10:	1c51      	adds	r1, r2, #1
 800cf12:	9117      	str	r1, [sp, #92]	; 0x5c
 800cf14:	7852      	ldrb	r2, [r2, #1]
 800cf16:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800cf1a:	2e09      	cmp	r6, #9
 800cf1c:	d937      	bls.n	800cf8e <_strtod_l+0x346>
 800cf1e:	9e06      	ldr	r6, [sp, #24]
 800cf20:	1b89      	subs	r1, r1, r6
 800cf22:	2908      	cmp	r1, #8
 800cf24:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800cf28:	dc02      	bgt.n	800cf30 <_strtod_l+0x2e8>
 800cf2a:	4576      	cmp	r6, lr
 800cf2c:	bfa8      	it	ge
 800cf2e:	4676      	movge	r6, lr
 800cf30:	f1bc 0f00 	cmp.w	ip, #0
 800cf34:	d000      	beq.n	800cf38 <_strtod_l+0x2f0>
 800cf36:	4276      	negs	r6, r6
 800cf38:	2d00      	cmp	r5, #0
 800cf3a:	d14d      	bne.n	800cfd8 <_strtod_l+0x390>
 800cf3c:	9904      	ldr	r1, [sp, #16]
 800cf3e:	4301      	orrs	r1, r0
 800cf40:	f47f aec6 	bne.w	800ccd0 <_strtod_l+0x88>
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	f47f aee1 	bne.w	800cd0c <_strtod_l+0xc4>
 800cf4a:	2a69      	cmp	r2, #105	; 0x69
 800cf4c:	d027      	beq.n	800cf9e <_strtod_l+0x356>
 800cf4e:	dc24      	bgt.n	800cf9a <_strtod_l+0x352>
 800cf50:	2a49      	cmp	r2, #73	; 0x49
 800cf52:	d024      	beq.n	800cf9e <_strtod_l+0x356>
 800cf54:	2a4e      	cmp	r2, #78	; 0x4e
 800cf56:	f47f aed9 	bne.w	800cd0c <_strtod_l+0xc4>
 800cf5a:	499f      	ldr	r1, [pc, #636]	; (800d1d8 <_strtod_l+0x590>)
 800cf5c:	a817      	add	r0, sp, #92	; 0x5c
 800cf5e:	f001 ff1b 	bl	800ed98 <__match>
 800cf62:	2800      	cmp	r0, #0
 800cf64:	f43f aed2 	beq.w	800cd0c <_strtod_l+0xc4>
 800cf68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cf6a:	781b      	ldrb	r3, [r3, #0]
 800cf6c:	2b28      	cmp	r3, #40	; 0x28
 800cf6e:	d12d      	bne.n	800cfcc <_strtod_l+0x384>
 800cf70:	499a      	ldr	r1, [pc, #616]	; (800d1dc <_strtod_l+0x594>)
 800cf72:	aa1a      	add	r2, sp, #104	; 0x68
 800cf74:	a817      	add	r0, sp, #92	; 0x5c
 800cf76:	f001 ff23 	bl	800edc0 <__hexnan>
 800cf7a:	2805      	cmp	r0, #5
 800cf7c:	d126      	bne.n	800cfcc <_strtod_l+0x384>
 800cf7e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cf80:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800cf84:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800cf88:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800cf8c:	e6a0      	b.n	800ccd0 <_strtod_l+0x88>
 800cf8e:	210a      	movs	r1, #10
 800cf90:	fb01 2e0e 	mla	lr, r1, lr, r2
 800cf94:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800cf98:	e7b9      	b.n	800cf0e <_strtod_l+0x2c6>
 800cf9a:	2a6e      	cmp	r2, #110	; 0x6e
 800cf9c:	e7db      	b.n	800cf56 <_strtod_l+0x30e>
 800cf9e:	4990      	ldr	r1, [pc, #576]	; (800d1e0 <_strtod_l+0x598>)
 800cfa0:	a817      	add	r0, sp, #92	; 0x5c
 800cfa2:	f001 fef9 	bl	800ed98 <__match>
 800cfa6:	2800      	cmp	r0, #0
 800cfa8:	f43f aeb0 	beq.w	800cd0c <_strtod_l+0xc4>
 800cfac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cfae:	498d      	ldr	r1, [pc, #564]	; (800d1e4 <_strtod_l+0x59c>)
 800cfb0:	3b01      	subs	r3, #1
 800cfb2:	a817      	add	r0, sp, #92	; 0x5c
 800cfb4:	9317      	str	r3, [sp, #92]	; 0x5c
 800cfb6:	f001 feef 	bl	800ed98 <__match>
 800cfba:	b910      	cbnz	r0, 800cfc2 <_strtod_l+0x37a>
 800cfbc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cfbe:	3301      	adds	r3, #1
 800cfc0:	9317      	str	r3, [sp, #92]	; 0x5c
 800cfc2:	f8df b230 	ldr.w	fp, [pc, #560]	; 800d1f4 <_strtod_l+0x5ac>
 800cfc6:	f04f 0a00 	mov.w	sl, #0
 800cfca:	e681      	b.n	800ccd0 <_strtod_l+0x88>
 800cfcc:	4886      	ldr	r0, [pc, #536]	; (800d1e8 <_strtod_l+0x5a0>)
 800cfce:	f002 fe63 	bl	800fc98 <nan>
 800cfd2:	ec5b ab10 	vmov	sl, fp, d0
 800cfd6:	e67b      	b.n	800ccd0 <_strtod_l+0x88>
 800cfd8:	9b05      	ldr	r3, [sp, #20]
 800cfda:	9807      	ldr	r0, [sp, #28]
 800cfdc:	1af3      	subs	r3, r6, r3
 800cfde:	2f00      	cmp	r7, #0
 800cfe0:	bf08      	it	eq
 800cfe2:	462f      	moveq	r7, r5
 800cfe4:	2d10      	cmp	r5, #16
 800cfe6:	9306      	str	r3, [sp, #24]
 800cfe8:	46a8      	mov	r8, r5
 800cfea:	bfa8      	it	ge
 800cfec:	f04f 0810 	movge.w	r8, #16
 800cff0:	f7f3 fb00 	bl	80005f4 <__aeabi_ui2d>
 800cff4:	2d09      	cmp	r5, #9
 800cff6:	4682      	mov	sl, r0
 800cff8:	468b      	mov	fp, r1
 800cffa:	dd13      	ble.n	800d024 <_strtod_l+0x3dc>
 800cffc:	4b7b      	ldr	r3, [pc, #492]	; (800d1ec <_strtod_l+0x5a4>)
 800cffe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d002:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d006:	f7f3 fb6f 	bl	80006e8 <__aeabi_dmul>
 800d00a:	4682      	mov	sl, r0
 800d00c:	4648      	mov	r0, r9
 800d00e:	468b      	mov	fp, r1
 800d010:	f7f3 faf0 	bl	80005f4 <__aeabi_ui2d>
 800d014:	4602      	mov	r2, r0
 800d016:	460b      	mov	r3, r1
 800d018:	4650      	mov	r0, sl
 800d01a:	4659      	mov	r1, fp
 800d01c:	f7f3 f9ae 	bl	800037c <__adddf3>
 800d020:	4682      	mov	sl, r0
 800d022:	468b      	mov	fp, r1
 800d024:	2d0f      	cmp	r5, #15
 800d026:	dc38      	bgt.n	800d09a <_strtod_l+0x452>
 800d028:	9b06      	ldr	r3, [sp, #24]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	f43f ae50 	beq.w	800ccd0 <_strtod_l+0x88>
 800d030:	dd24      	ble.n	800d07c <_strtod_l+0x434>
 800d032:	2b16      	cmp	r3, #22
 800d034:	dc0b      	bgt.n	800d04e <_strtod_l+0x406>
 800d036:	496d      	ldr	r1, [pc, #436]	; (800d1ec <_strtod_l+0x5a4>)
 800d038:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d03c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d040:	4652      	mov	r2, sl
 800d042:	465b      	mov	r3, fp
 800d044:	f7f3 fb50 	bl	80006e8 <__aeabi_dmul>
 800d048:	4682      	mov	sl, r0
 800d04a:	468b      	mov	fp, r1
 800d04c:	e640      	b.n	800ccd0 <_strtod_l+0x88>
 800d04e:	9a06      	ldr	r2, [sp, #24]
 800d050:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800d054:	4293      	cmp	r3, r2
 800d056:	db20      	blt.n	800d09a <_strtod_l+0x452>
 800d058:	4c64      	ldr	r4, [pc, #400]	; (800d1ec <_strtod_l+0x5a4>)
 800d05a:	f1c5 050f 	rsb	r5, r5, #15
 800d05e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d062:	4652      	mov	r2, sl
 800d064:	465b      	mov	r3, fp
 800d066:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d06a:	f7f3 fb3d 	bl	80006e8 <__aeabi_dmul>
 800d06e:	9b06      	ldr	r3, [sp, #24]
 800d070:	1b5d      	subs	r5, r3, r5
 800d072:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d076:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d07a:	e7e3      	b.n	800d044 <_strtod_l+0x3fc>
 800d07c:	9b06      	ldr	r3, [sp, #24]
 800d07e:	3316      	adds	r3, #22
 800d080:	db0b      	blt.n	800d09a <_strtod_l+0x452>
 800d082:	9b05      	ldr	r3, [sp, #20]
 800d084:	1b9e      	subs	r6, r3, r6
 800d086:	4b59      	ldr	r3, [pc, #356]	; (800d1ec <_strtod_l+0x5a4>)
 800d088:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800d08c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d090:	4650      	mov	r0, sl
 800d092:	4659      	mov	r1, fp
 800d094:	f7f3 fc52 	bl	800093c <__aeabi_ddiv>
 800d098:	e7d6      	b.n	800d048 <_strtod_l+0x400>
 800d09a:	9b06      	ldr	r3, [sp, #24]
 800d09c:	eba5 0808 	sub.w	r8, r5, r8
 800d0a0:	4498      	add	r8, r3
 800d0a2:	f1b8 0f00 	cmp.w	r8, #0
 800d0a6:	dd74      	ble.n	800d192 <_strtod_l+0x54a>
 800d0a8:	f018 030f 	ands.w	r3, r8, #15
 800d0ac:	d00a      	beq.n	800d0c4 <_strtod_l+0x47c>
 800d0ae:	494f      	ldr	r1, [pc, #316]	; (800d1ec <_strtod_l+0x5a4>)
 800d0b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d0b4:	4652      	mov	r2, sl
 800d0b6:	465b      	mov	r3, fp
 800d0b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d0bc:	f7f3 fb14 	bl	80006e8 <__aeabi_dmul>
 800d0c0:	4682      	mov	sl, r0
 800d0c2:	468b      	mov	fp, r1
 800d0c4:	f038 080f 	bics.w	r8, r8, #15
 800d0c8:	d04f      	beq.n	800d16a <_strtod_l+0x522>
 800d0ca:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d0ce:	dd22      	ble.n	800d116 <_strtod_l+0x4ce>
 800d0d0:	2500      	movs	r5, #0
 800d0d2:	462e      	mov	r6, r5
 800d0d4:	9507      	str	r5, [sp, #28]
 800d0d6:	9505      	str	r5, [sp, #20]
 800d0d8:	2322      	movs	r3, #34	; 0x22
 800d0da:	f8df b118 	ldr.w	fp, [pc, #280]	; 800d1f4 <_strtod_l+0x5ac>
 800d0de:	6023      	str	r3, [r4, #0]
 800d0e0:	f04f 0a00 	mov.w	sl, #0
 800d0e4:	9b07      	ldr	r3, [sp, #28]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	f43f adf2 	beq.w	800ccd0 <_strtod_l+0x88>
 800d0ec:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d0ee:	4620      	mov	r0, r4
 800d0f0:	f001 ff7e 	bl	800eff0 <_Bfree>
 800d0f4:	9905      	ldr	r1, [sp, #20]
 800d0f6:	4620      	mov	r0, r4
 800d0f8:	f001 ff7a 	bl	800eff0 <_Bfree>
 800d0fc:	4631      	mov	r1, r6
 800d0fe:	4620      	mov	r0, r4
 800d100:	f001 ff76 	bl	800eff0 <_Bfree>
 800d104:	9907      	ldr	r1, [sp, #28]
 800d106:	4620      	mov	r0, r4
 800d108:	f001 ff72 	bl	800eff0 <_Bfree>
 800d10c:	4629      	mov	r1, r5
 800d10e:	4620      	mov	r0, r4
 800d110:	f001 ff6e 	bl	800eff0 <_Bfree>
 800d114:	e5dc      	b.n	800ccd0 <_strtod_l+0x88>
 800d116:	4b36      	ldr	r3, [pc, #216]	; (800d1f0 <_strtod_l+0x5a8>)
 800d118:	9304      	str	r3, [sp, #16]
 800d11a:	2300      	movs	r3, #0
 800d11c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d120:	4650      	mov	r0, sl
 800d122:	4659      	mov	r1, fp
 800d124:	4699      	mov	r9, r3
 800d126:	f1b8 0f01 	cmp.w	r8, #1
 800d12a:	dc21      	bgt.n	800d170 <_strtod_l+0x528>
 800d12c:	b10b      	cbz	r3, 800d132 <_strtod_l+0x4ea>
 800d12e:	4682      	mov	sl, r0
 800d130:	468b      	mov	fp, r1
 800d132:	4b2f      	ldr	r3, [pc, #188]	; (800d1f0 <_strtod_l+0x5a8>)
 800d134:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d138:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800d13c:	4652      	mov	r2, sl
 800d13e:	465b      	mov	r3, fp
 800d140:	e9d9 0100 	ldrd	r0, r1, [r9]
 800d144:	f7f3 fad0 	bl	80006e8 <__aeabi_dmul>
 800d148:	4b2a      	ldr	r3, [pc, #168]	; (800d1f4 <_strtod_l+0x5ac>)
 800d14a:	460a      	mov	r2, r1
 800d14c:	400b      	ands	r3, r1
 800d14e:	492a      	ldr	r1, [pc, #168]	; (800d1f8 <_strtod_l+0x5b0>)
 800d150:	428b      	cmp	r3, r1
 800d152:	4682      	mov	sl, r0
 800d154:	d8bc      	bhi.n	800d0d0 <_strtod_l+0x488>
 800d156:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d15a:	428b      	cmp	r3, r1
 800d15c:	bf86      	itte	hi
 800d15e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800d1fc <_strtod_l+0x5b4>
 800d162:	f04f 3aff 	movhi.w	sl, #4294967295
 800d166:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d16a:	2300      	movs	r3, #0
 800d16c:	9304      	str	r3, [sp, #16]
 800d16e:	e084      	b.n	800d27a <_strtod_l+0x632>
 800d170:	f018 0f01 	tst.w	r8, #1
 800d174:	d005      	beq.n	800d182 <_strtod_l+0x53a>
 800d176:	9b04      	ldr	r3, [sp, #16]
 800d178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d17c:	f7f3 fab4 	bl	80006e8 <__aeabi_dmul>
 800d180:	2301      	movs	r3, #1
 800d182:	9a04      	ldr	r2, [sp, #16]
 800d184:	3208      	adds	r2, #8
 800d186:	f109 0901 	add.w	r9, r9, #1
 800d18a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d18e:	9204      	str	r2, [sp, #16]
 800d190:	e7c9      	b.n	800d126 <_strtod_l+0x4de>
 800d192:	d0ea      	beq.n	800d16a <_strtod_l+0x522>
 800d194:	f1c8 0800 	rsb	r8, r8, #0
 800d198:	f018 020f 	ands.w	r2, r8, #15
 800d19c:	d00a      	beq.n	800d1b4 <_strtod_l+0x56c>
 800d19e:	4b13      	ldr	r3, [pc, #76]	; (800d1ec <_strtod_l+0x5a4>)
 800d1a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d1a4:	4650      	mov	r0, sl
 800d1a6:	4659      	mov	r1, fp
 800d1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ac:	f7f3 fbc6 	bl	800093c <__aeabi_ddiv>
 800d1b0:	4682      	mov	sl, r0
 800d1b2:	468b      	mov	fp, r1
 800d1b4:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d1b8:	d0d7      	beq.n	800d16a <_strtod_l+0x522>
 800d1ba:	f1b8 0f1f 	cmp.w	r8, #31
 800d1be:	dd1f      	ble.n	800d200 <_strtod_l+0x5b8>
 800d1c0:	2500      	movs	r5, #0
 800d1c2:	462e      	mov	r6, r5
 800d1c4:	9507      	str	r5, [sp, #28]
 800d1c6:	9505      	str	r5, [sp, #20]
 800d1c8:	2322      	movs	r3, #34	; 0x22
 800d1ca:	f04f 0a00 	mov.w	sl, #0
 800d1ce:	f04f 0b00 	mov.w	fp, #0
 800d1d2:	6023      	str	r3, [r4, #0]
 800d1d4:	e786      	b.n	800d0e4 <_strtod_l+0x49c>
 800d1d6:	bf00      	nop
 800d1d8:	080105c9 	.word	0x080105c9
 800d1dc:	0801060c 	.word	0x0801060c
 800d1e0:	080105c1 	.word	0x080105c1
 800d1e4:	0801074c 	.word	0x0801074c
 800d1e8:	080109f8 	.word	0x080109f8
 800d1ec:	080108d8 	.word	0x080108d8
 800d1f0:	080108b0 	.word	0x080108b0
 800d1f4:	7ff00000 	.word	0x7ff00000
 800d1f8:	7ca00000 	.word	0x7ca00000
 800d1fc:	7fefffff 	.word	0x7fefffff
 800d200:	f018 0310 	ands.w	r3, r8, #16
 800d204:	bf18      	it	ne
 800d206:	236a      	movne	r3, #106	; 0x6a
 800d208:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800d5b8 <_strtod_l+0x970>
 800d20c:	9304      	str	r3, [sp, #16]
 800d20e:	4650      	mov	r0, sl
 800d210:	4659      	mov	r1, fp
 800d212:	2300      	movs	r3, #0
 800d214:	f018 0f01 	tst.w	r8, #1
 800d218:	d004      	beq.n	800d224 <_strtod_l+0x5dc>
 800d21a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d21e:	f7f3 fa63 	bl	80006e8 <__aeabi_dmul>
 800d222:	2301      	movs	r3, #1
 800d224:	ea5f 0868 	movs.w	r8, r8, asr #1
 800d228:	f109 0908 	add.w	r9, r9, #8
 800d22c:	d1f2      	bne.n	800d214 <_strtod_l+0x5cc>
 800d22e:	b10b      	cbz	r3, 800d234 <_strtod_l+0x5ec>
 800d230:	4682      	mov	sl, r0
 800d232:	468b      	mov	fp, r1
 800d234:	9b04      	ldr	r3, [sp, #16]
 800d236:	b1c3      	cbz	r3, 800d26a <_strtod_l+0x622>
 800d238:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d23c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d240:	2b00      	cmp	r3, #0
 800d242:	4659      	mov	r1, fp
 800d244:	dd11      	ble.n	800d26a <_strtod_l+0x622>
 800d246:	2b1f      	cmp	r3, #31
 800d248:	f340 8124 	ble.w	800d494 <_strtod_l+0x84c>
 800d24c:	2b34      	cmp	r3, #52	; 0x34
 800d24e:	bfde      	ittt	le
 800d250:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800d254:	f04f 33ff 	movle.w	r3, #4294967295
 800d258:	fa03 f202 	lslle.w	r2, r3, r2
 800d25c:	f04f 0a00 	mov.w	sl, #0
 800d260:	bfcc      	ite	gt
 800d262:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d266:	ea02 0b01 	andle.w	fp, r2, r1
 800d26a:	2200      	movs	r2, #0
 800d26c:	2300      	movs	r3, #0
 800d26e:	4650      	mov	r0, sl
 800d270:	4659      	mov	r1, fp
 800d272:	f7f3 fca1 	bl	8000bb8 <__aeabi_dcmpeq>
 800d276:	2800      	cmp	r0, #0
 800d278:	d1a2      	bne.n	800d1c0 <_strtod_l+0x578>
 800d27a:	9b07      	ldr	r3, [sp, #28]
 800d27c:	9300      	str	r3, [sp, #0]
 800d27e:	9908      	ldr	r1, [sp, #32]
 800d280:	462b      	mov	r3, r5
 800d282:	463a      	mov	r2, r7
 800d284:	4620      	mov	r0, r4
 800d286:	f001 ff1b 	bl	800f0c0 <__s2b>
 800d28a:	9007      	str	r0, [sp, #28]
 800d28c:	2800      	cmp	r0, #0
 800d28e:	f43f af1f 	beq.w	800d0d0 <_strtod_l+0x488>
 800d292:	9b05      	ldr	r3, [sp, #20]
 800d294:	1b9e      	subs	r6, r3, r6
 800d296:	9b06      	ldr	r3, [sp, #24]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	bfb4      	ite	lt
 800d29c:	4633      	movlt	r3, r6
 800d29e:	2300      	movge	r3, #0
 800d2a0:	930c      	str	r3, [sp, #48]	; 0x30
 800d2a2:	9b06      	ldr	r3, [sp, #24]
 800d2a4:	2500      	movs	r5, #0
 800d2a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d2aa:	9312      	str	r3, [sp, #72]	; 0x48
 800d2ac:	462e      	mov	r6, r5
 800d2ae:	9b07      	ldr	r3, [sp, #28]
 800d2b0:	4620      	mov	r0, r4
 800d2b2:	6859      	ldr	r1, [r3, #4]
 800d2b4:	f001 fe5c 	bl	800ef70 <_Balloc>
 800d2b8:	9005      	str	r0, [sp, #20]
 800d2ba:	2800      	cmp	r0, #0
 800d2bc:	f43f af0c 	beq.w	800d0d8 <_strtod_l+0x490>
 800d2c0:	9b07      	ldr	r3, [sp, #28]
 800d2c2:	691a      	ldr	r2, [r3, #16]
 800d2c4:	3202      	adds	r2, #2
 800d2c6:	f103 010c 	add.w	r1, r3, #12
 800d2ca:	0092      	lsls	r2, r2, #2
 800d2cc:	300c      	adds	r0, #12
 800d2ce:	f7fe fc94 	bl	800bbfa <memcpy>
 800d2d2:	ec4b ab10 	vmov	d0, sl, fp
 800d2d6:	aa1a      	add	r2, sp, #104	; 0x68
 800d2d8:	a919      	add	r1, sp, #100	; 0x64
 800d2da:	4620      	mov	r0, r4
 800d2dc:	f002 fa36 	bl	800f74c <__d2b>
 800d2e0:	ec4b ab18 	vmov	d8, sl, fp
 800d2e4:	9018      	str	r0, [sp, #96]	; 0x60
 800d2e6:	2800      	cmp	r0, #0
 800d2e8:	f43f aef6 	beq.w	800d0d8 <_strtod_l+0x490>
 800d2ec:	2101      	movs	r1, #1
 800d2ee:	4620      	mov	r0, r4
 800d2f0:	f001 ff80 	bl	800f1f4 <__i2b>
 800d2f4:	4606      	mov	r6, r0
 800d2f6:	2800      	cmp	r0, #0
 800d2f8:	f43f aeee 	beq.w	800d0d8 <_strtod_l+0x490>
 800d2fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d2fe:	9904      	ldr	r1, [sp, #16]
 800d300:	2b00      	cmp	r3, #0
 800d302:	bfab      	itete	ge
 800d304:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800d306:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800d308:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800d30a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800d30e:	bfac      	ite	ge
 800d310:	eb03 0902 	addge.w	r9, r3, r2
 800d314:	1ad7      	sublt	r7, r2, r3
 800d316:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d318:	eba3 0801 	sub.w	r8, r3, r1
 800d31c:	4490      	add	r8, r2
 800d31e:	4ba1      	ldr	r3, [pc, #644]	; (800d5a4 <_strtod_l+0x95c>)
 800d320:	f108 38ff 	add.w	r8, r8, #4294967295
 800d324:	4598      	cmp	r8, r3
 800d326:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d32a:	f280 80c7 	bge.w	800d4bc <_strtod_l+0x874>
 800d32e:	eba3 0308 	sub.w	r3, r3, r8
 800d332:	2b1f      	cmp	r3, #31
 800d334:	eba2 0203 	sub.w	r2, r2, r3
 800d338:	f04f 0101 	mov.w	r1, #1
 800d33c:	f300 80b1 	bgt.w	800d4a2 <_strtod_l+0x85a>
 800d340:	fa01 f303 	lsl.w	r3, r1, r3
 800d344:	930d      	str	r3, [sp, #52]	; 0x34
 800d346:	2300      	movs	r3, #0
 800d348:	9308      	str	r3, [sp, #32]
 800d34a:	eb09 0802 	add.w	r8, r9, r2
 800d34e:	9b04      	ldr	r3, [sp, #16]
 800d350:	45c1      	cmp	r9, r8
 800d352:	4417      	add	r7, r2
 800d354:	441f      	add	r7, r3
 800d356:	464b      	mov	r3, r9
 800d358:	bfa8      	it	ge
 800d35a:	4643      	movge	r3, r8
 800d35c:	42bb      	cmp	r3, r7
 800d35e:	bfa8      	it	ge
 800d360:	463b      	movge	r3, r7
 800d362:	2b00      	cmp	r3, #0
 800d364:	bfc2      	ittt	gt
 800d366:	eba8 0803 	subgt.w	r8, r8, r3
 800d36a:	1aff      	subgt	r7, r7, r3
 800d36c:	eba9 0903 	subgt.w	r9, r9, r3
 800d370:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d372:	2b00      	cmp	r3, #0
 800d374:	dd17      	ble.n	800d3a6 <_strtod_l+0x75e>
 800d376:	4631      	mov	r1, r6
 800d378:	461a      	mov	r2, r3
 800d37a:	4620      	mov	r0, r4
 800d37c:	f001 fffa 	bl	800f374 <__pow5mult>
 800d380:	4606      	mov	r6, r0
 800d382:	2800      	cmp	r0, #0
 800d384:	f43f aea8 	beq.w	800d0d8 <_strtod_l+0x490>
 800d388:	4601      	mov	r1, r0
 800d38a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d38c:	4620      	mov	r0, r4
 800d38e:	f001 ff47 	bl	800f220 <__multiply>
 800d392:	900b      	str	r0, [sp, #44]	; 0x2c
 800d394:	2800      	cmp	r0, #0
 800d396:	f43f ae9f 	beq.w	800d0d8 <_strtod_l+0x490>
 800d39a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d39c:	4620      	mov	r0, r4
 800d39e:	f001 fe27 	bl	800eff0 <_Bfree>
 800d3a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d3a4:	9318      	str	r3, [sp, #96]	; 0x60
 800d3a6:	f1b8 0f00 	cmp.w	r8, #0
 800d3aa:	f300 808c 	bgt.w	800d4c6 <_strtod_l+0x87e>
 800d3ae:	9b06      	ldr	r3, [sp, #24]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	dd08      	ble.n	800d3c6 <_strtod_l+0x77e>
 800d3b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d3b6:	9905      	ldr	r1, [sp, #20]
 800d3b8:	4620      	mov	r0, r4
 800d3ba:	f001 ffdb 	bl	800f374 <__pow5mult>
 800d3be:	9005      	str	r0, [sp, #20]
 800d3c0:	2800      	cmp	r0, #0
 800d3c2:	f43f ae89 	beq.w	800d0d8 <_strtod_l+0x490>
 800d3c6:	2f00      	cmp	r7, #0
 800d3c8:	dd08      	ble.n	800d3dc <_strtod_l+0x794>
 800d3ca:	9905      	ldr	r1, [sp, #20]
 800d3cc:	463a      	mov	r2, r7
 800d3ce:	4620      	mov	r0, r4
 800d3d0:	f002 f82a 	bl	800f428 <__lshift>
 800d3d4:	9005      	str	r0, [sp, #20]
 800d3d6:	2800      	cmp	r0, #0
 800d3d8:	f43f ae7e 	beq.w	800d0d8 <_strtod_l+0x490>
 800d3dc:	f1b9 0f00 	cmp.w	r9, #0
 800d3e0:	dd08      	ble.n	800d3f4 <_strtod_l+0x7ac>
 800d3e2:	4631      	mov	r1, r6
 800d3e4:	464a      	mov	r2, r9
 800d3e6:	4620      	mov	r0, r4
 800d3e8:	f002 f81e 	bl	800f428 <__lshift>
 800d3ec:	4606      	mov	r6, r0
 800d3ee:	2800      	cmp	r0, #0
 800d3f0:	f43f ae72 	beq.w	800d0d8 <_strtod_l+0x490>
 800d3f4:	9a05      	ldr	r2, [sp, #20]
 800d3f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d3f8:	4620      	mov	r0, r4
 800d3fa:	f002 f8a1 	bl	800f540 <__mdiff>
 800d3fe:	4605      	mov	r5, r0
 800d400:	2800      	cmp	r0, #0
 800d402:	f43f ae69 	beq.w	800d0d8 <_strtod_l+0x490>
 800d406:	68c3      	ldr	r3, [r0, #12]
 800d408:	930b      	str	r3, [sp, #44]	; 0x2c
 800d40a:	2300      	movs	r3, #0
 800d40c:	60c3      	str	r3, [r0, #12]
 800d40e:	4631      	mov	r1, r6
 800d410:	f002 f87a 	bl	800f508 <__mcmp>
 800d414:	2800      	cmp	r0, #0
 800d416:	da60      	bge.n	800d4da <_strtod_l+0x892>
 800d418:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d41a:	ea53 030a 	orrs.w	r3, r3, sl
 800d41e:	f040 8082 	bne.w	800d526 <_strtod_l+0x8de>
 800d422:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d426:	2b00      	cmp	r3, #0
 800d428:	d17d      	bne.n	800d526 <_strtod_l+0x8de>
 800d42a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d42e:	0d1b      	lsrs	r3, r3, #20
 800d430:	051b      	lsls	r3, r3, #20
 800d432:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d436:	d976      	bls.n	800d526 <_strtod_l+0x8de>
 800d438:	696b      	ldr	r3, [r5, #20]
 800d43a:	b913      	cbnz	r3, 800d442 <_strtod_l+0x7fa>
 800d43c:	692b      	ldr	r3, [r5, #16]
 800d43e:	2b01      	cmp	r3, #1
 800d440:	dd71      	ble.n	800d526 <_strtod_l+0x8de>
 800d442:	4629      	mov	r1, r5
 800d444:	2201      	movs	r2, #1
 800d446:	4620      	mov	r0, r4
 800d448:	f001 ffee 	bl	800f428 <__lshift>
 800d44c:	4631      	mov	r1, r6
 800d44e:	4605      	mov	r5, r0
 800d450:	f002 f85a 	bl	800f508 <__mcmp>
 800d454:	2800      	cmp	r0, #0
 800d456:	dd66      	ble.n	800d526 <_strtod_l+0x8de>
 800d458:	9904      	ldr	r1, [sp, #16]
 800d45a:	4a53      	ldr	r2, [pc, #332]	; (800d5a8 <_strtod_l+0x960>)
 800d45c:	465b      	mov	r3, fp
 800d45e:	2900      	cmp	r1, #0
 800d460:	f000 8081 	beq.w	800d566 <_strtod_l+0x91e>
 800d464:	ea02 010b 	and.w	r1, r2, fp
 800d468:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d46c:	dc7b      	bgt.n	800d566 <_strtod_l+0x91e>
 800d46e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d472:	f77f aea9 	ble.w	800d1c8 <_strtod_l+0x580>
 800d476:	4b4d      	ldr	r3, [pc, #308]	; (800d5ac <_strtod_l+0x964>)
 800d478:	4650      	mov	r0, sl
 800d47a:	4659      	mov	r1, fp
 800d47c:	2200      	movs	r2, #0
 800d47e:	f7f3 f933 	bl	80006e8 <__aeabi_dmul>
 800d482:	460b      	mov	r3, r1
 800d484:	4303      	orrs	r3, r0
 800d486:	bf08      	it	eq
 800d488:	2322      	moveq	r3, #34	; 0x22
 800d48a:	4682      	mov	sl, r0
 800d48c:	468b      	mov	fp, r1
 800d48e:	bf08      	it	eq
 800d490:	6023      	streq	r3, [r4, #0]
 800d492:	e62b      	b.n	800d0ec <_strtod_l+0x4a4>
 800d494:	f04f 32ff 	mov.w	r2, #4294967295
 800d498:	fa02 f303 	lsl.w	r3, r2, r3
 800d49c:	ea03 0a0a 	and.w	sl, r3, sl
 800d4a0:	e6e3      	b.n	800d26a <_strtod_l+0x622>
 800d4a2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800d4a6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800d4aa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800d4ae:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800d4b2:	fa01 f308 	lsl.w	r3, r1, r8
 800d4b6:	9308      	str	r3, [sp, #32]
 800d4b8:	910d      	str	r1, [sp, #52]	; 0x34
 800d4ba:	e746      	b.n	800d34a <_strtod_l+0x702>
 800d4bc:	2300      	movs	r3, #0
 800d4be:	9308      	str	r3, [sp, #32]
 800d4c0:	2301      	movs	r3, #1
 800d4c2:	930d      	str	r3, [sp, #52]	; 0x34
 800d4c4:	e741      	b.n	800d34a <_strtod_l+0x702>
 800d4c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d4c8:	4642      	mov	r2, r8
 800d4ca:	4620      	mov	r0, r4
 800d4cc:	f001 ffac 	bl	800f428 <__lshift>
 800d4d0:	9018      	str	r0, [sp, #96]	; 0x60
 800d4d2:	2800      	cmp	r0, #0
 800d4d4:	f47f af6b 	bne.w	800d3ae <_strtod_l+0x766>
 800d4d8:	e5fe      	b.n	800d0d8 <_strtod_l+0x490>
 800d4da:	465f      	mov	r7, fp
 800d4dc:	d16e      	bne.n	800d5bc <_strtod_l+0x974>
 800d4de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d4e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d4e4:	b342      	cbz	r2, 800d538 <_strtod_l+0x8f0>
 800d4e6:	4a32      	ldr	r2, [pc, #200]	; (800d5b0 <_strtod_l+0x968>)
 800d4e8:	4293      	cmp	r3, r2
 800d4ea:	d128      	bne.n	800d53e <_strtod_l+0x8f6>
 800d4ec:	9b04      	ldr	r3, [sp, #16]
 800d4ee:	4651      	mov	r1, sl
 800d4f0:	b1eb      	cbz	r3, 800d52e <_strtod_l+0x8e6>
 800d4f2:	4b2d      	ldr	r3, [pc, #180]	; (800d5a8 <_strtod_l+0x960>)
 800d4f4:	403b      	ands	r3, r7
 800d4f6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d4fa:	f04f 32ff 	mov.w	r2, #4294967295
 800d4fe:	d819      	bhi.n	800d534 <_strtod_l+0x8ec>
 800d500:	0d1b      	lsrs	r3, r3, #20
 800d502:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d506:	fa02 f303 	lsl.w	r3, r2, r3
 800d50a:	4299      	cmp	r1, r3
 800d50c:	d117      	bne.n	800d53e <_strtod_l+0x8f6>
 800d50e:	4b29      	ldr	r3, [pc, #164]	; (800d5b4 <_strtod_l+0x96c>)
 800d510:	429f      	cmp	r7, r3
 800d512:	d102      	bne.n	800d51a <_strtod_l+0x8d2>
 800d514:	3101      	adds	r1, #1
 800d516:	f43f addf 	beq.w	800d0d8 <_strtod_l+0x490>
 800d51a:	4b23      	ldr	r3, [pc, #140]	; (800d5a8 <_strtod_l+0x960>)
 800d51c:	403b      	ands	r3, r7
 800d51e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800d522:	f04f 0a00 	mov.w	sl, #0
 800d526:	9b04      	ldr	r3, [sp, #16]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d1a4      	bne.n	800d476 <_strtod_l+0x82e>
 800d52c:	e5de      	b.n	800d0ec <_strtod_l+0x4a4>
 800d52e:	f04f 33ff 	mov.w	r3, #4294967295
 800d532:	e7ea      	b.n	800d50a <_strtod_l+0x8c2>
 800d534:	4613      	mov	r3, r2
 800d536:	e7e8      	b.n	800d50a <_strtod_l+0x8c2>
 800d538:	ea53 030a 	orrs.w	r3, r3, sl
 800d53c:	d08c      	beq.n	800d458 <_strtod_l+0x810>
 800d53e:	9b08      	ldr	r3, [sp, #32]
 800d540:	b1db      	cbz	r3, 800d57a <_strtod_l+0x932>
 800d542:	423b      	tst	r3, r7
 800d544:	d0ef      	beq.n	800d526 <_strtod_l+0x8de>
 800d546:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d548:	9a04      	ldr	r2, [sp, #16]
 800d54a:	4650      	mov	r0, sl
 800d54c:	4659      	mov	r1, fp
 800d54e:	b1c3      	cbz	r3, 800d582 <_strtod_l+0x93a>
 800d550:	f7ff fb5b 	bl	800cc0a <sulp>
 800d554:	4602      	mov	r2, r0
 800d556:	460b      	mov	r3, r1
 800d558:	ec51 0b18 	vmov	r0, r1, d8
 800d55c:	f7f2 ff0e 	bl	800037c <__adddf3>
 800d560:	4682      	mov	sl, r0
 800d562:	468b      	mov	fp, r1
 800d564:	e7df      	b.n	800d526 <_strtod_l+0x8de>
 800d566:	4013      	ands	r3, r2
 800d568:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d56c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d570:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d574:	f04f 3aff 	mov.w	sl, #4294967295
 800d578:	e7d5      	b.n	800d526 <_strtod_l+0x8de>
 800d57a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d57c:	ea13 0f0a 	tst.w	r3, sl
 800d580:	e7e0      	b.n	800d544 <_strtod_l+0x8fc>
 800d582:	f7ff fb42 	bl	800cc0a <sulp>
 800d586:	4602      	mov	r2, r0
 800d588:	460b      	mov	r3, r1
 800d58a:	ec51 0b18 	vmov	r0, r1, d8
 800d58e:	f7f2 fef3 	bl	8000378 <__aeabi_dsub>
 800d592:	2200      	movs	r2, #0
 800d594:	2300      	movs	r3, #0
 800d596:	4682      	mov	sl, r0
 800d598:	468b      	mov	fp, r1
 800d59a:	f7f3 fb0d 	bl	8000bb8 <__aeabi_dcmpeq>
 800d59e:	2800      	cmp	r0, #0
 800d5a0:	d0c1      	beq.n	800d526 <_strtod_l+0x8de>
 800d5a2:	e611      	b.n	800d1c8 <_strtod_l+0x580>
 800d5a4:	fffffc02 	.word	0xfffffc02
 800d5a8:	7ff00000 	.word	0x7ff00000
 800d5ac:	39500000 	.word	0x39500000
 800d5b0:	000fffff 	.word	0x000fffff
 800d5b4:	7fefffff 	.word	0x7fefffff
 800d5b8:	08010620 	.word	0x08010620
 800d5bc:	4631      	mov	r1, r6
 800d5be:	4628      	mov	r0, r5
 800d5c0:	f002 f920 	bl	800f804 <__ratio>
 800d5c4:	ec59 8b10 	vmov	r8, r9, d0
 800d5c8:	ee10 0a10 	vmov	r0, s0
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d5d2:	4649      	mov	r1, r9
 800d5d4:	f7f3 fb04 	bl	8000be0 <__aeabi_dcmple>
 800d5d8:	2800      	cmp	r0, #0
 800d5da:	d07a      	beq.n	800d6d2 <_strtod_l+0xa8a>
 800d5dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d04a      	beq.n	800d678 <_strtod_l+0xa30>
 800d5e2:	4b95      	ldr	r3, [pc, #596]	; (800d838 <_strtod_l+0xbf0>)
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d5ea:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800d838 <_strtod_l+0xbf0>
 800d5ee:	f04f 0800 	mov.w	r8, #0
 800d5f2:	4b92      	ldr	r3, [pc, #584]	; (800d83c <_strtod_l+0xbf4>)
 800d5f4:	403b      	ands	r3, r7
 800d5f6:	930d      	str	r3, [sp, #52]	; 0x34
 800d5f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d5fa:	4b91      	ldr	r3, [pc, #580]	; (800d840 <_strtod_l+0xbf8>)
 800d5fc:	429a      	cmp	r2, r3
 800d5fe:	f040 80b0 	bne.w	800d762 <_strtod_l+0xb1a>
 800d602:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d606:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800d60a:	ec4b ab10 	vmov	d0, sl, fp
 800d60e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d612:	f002 f81f 	bl	800f654 <__ulp>
 800d616:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d61a:	ec53 2b10 	vmov	r2, r3, d0
 800d61e:	f7f3 f863 	bl	80006e8 <__aeabi_dmul>
 800d622:	4652      	mov	r2, sl
 800d624:	465b      	mov	r3, fp
 800d626:	f7f2 fea9 	bl	800037c <__adddf3>
 800d62a:	460b      	mov	r3, r1
 800d62c:	4983      	ldr	r1, [pc, #524]	; (800d83c <_strtod_l+0xbf4>)
 800d62e:	4a85      	ldr	r2, [pc, #532]	; (800d844 <_strtod_l+0xbfc>)
 800d630:	4019      	ands	r1, r3
 800d632:	4291      	cmp	r1, r2
 800d634:	4682      	mov	sl, r0
 800d636:	d960      	bls.n	800d6fa <_strtod_l+0xab2>
 800d638:	ee18 3a90 	vmov	r3, s17
 800d63c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d640:	4293      	cmp	r3, r2
 800d642:	d104      	bne.n	800d64e <_strtod_l+0xa06>
 800d644:	ee18 3a10 	vmov	r3, s16
 800d648:	3301      	adds	r3, #1
 800d64a:	f43f ad45 	beq.w	800d0d8 <_strtod_l+0x490>
 800d64e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800d850 <_strtod_l+0xc08>
 800d652:	f04f 3aff 	mov.w	sl, #4294967295
 800d656:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d658:	4620      	mov	r0, r4
 800d65a:	f001 fcc9 	bl	800eff0 <_Bfree>
 800d65e:	9905      	ldr	r1, [sp, #20]
 800d660:	4620      	mov	r0, r4
 800d662:	f001 fcc5 	bl	800eff0 <_Bfree>
 800d666:	4631      	mov	r1, r6
 800d668:	4620      	mov	r0, r4
 800d66a:	f001 fcc1 	bl	800eff0 <_Bfree>
 800d66e:	4629      	mov	r1, r5
 800d670:	4620      	mov	r0, r4
 800d672:	f001 fcbd 	bl	800eff0 <_Bfree>
 800d676:	e61a      	b.n	800d2ae <_strtod_l+0x666>
 800d678:	f1ba 0f00 	cmp.w	sl, #0
 800d67c:	d11b      	bne.n	800d6b6 <_strtod_l+0xa6e>
 800d67e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d682:	b9f3      	cbnz	r3, 800d6c2 <_strtod_l+0xa7a>
 800d684:	4b6c      	ldr	r3, [pc, #432]	; (800d838 <_strtod_l+0xbf0>)
 800d686:	2200      	movs	r2, #0
 800d688:	4640      	mov	r0, r8
 800d68a:	4649      	mov	r1, r9
 800d68c:	f7f3 fa9e 	bl	8000bcc <__aeabi_dcmplt>
 800d690:	b9d0      	cbnz	r0, 800d6c8 <_strtod_l+0xa80>
 800d692:	4640      	mov	r0, r8
 800d694:	4649      	mov	r1, r9
 800d696:	4b6c      	ldr	r3, [pc, #432]	; (800d848 <_strtod_l+0xc00>)
 800d698:	2200      	movs	r2, #0
 800d69a:	f7f3 f825 	bl	80006e8 <__aeabi_dmul>
 800d69e:	4680      	mov	r8, r0
 800d6a0:	4689      	mov	r9, r1
 800d6a2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d6a6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800d6aa:	9315      	str	r3, [sp, #84]	; 0x54
 800d6ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d6b0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d6b4:	e79d      	b.n	800d5f2 <_strtod_l+0x9aa>
 800d6b6:	f1ba 0f01 	cmp.w	sl, #1
 800d6ba:	d102      	bne.n	800d6c2 <_strtod_l+0xa7a>
 800d6bc:	2f00      	cmp	r7, #0
 800d6be:	f43f ad83 	beq.w	800d1c8 <_strtod_l+0x580>
 800d6c2:	4b62      	ldr	r3, [pc, #392]	; (800d84c <_strtod_l+0xc04>)
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	e78e      	b.n	800d5e6 <_strtod_l+0x99e>
 800d6c8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800d848 <_strtod_l+0xc00>
 800d6cc:	f04f 0800 	mov.w	r8, #0
 800d6d0:	e7e7      	b.n	800d6a2 <_strtod_l+0xa5a>
 800d6d2:	4b5d      	ldr	r3, [pc, #372]	; (800d848 <_strtod_l+0xc00>)
 800d6d4:	4640      	mov	r0, r8
 800d6d6:	4649      	mov	r1, r9
 800d6d8:	2200      	movs	r2, #0
 800d6da:	f7f3 f805 	bl	80006e8 <__aeabi_dmul>
 800d6de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d6e0:	4680      	mov	r8, r0
 800d6e2:	4689      	mov	r9, r1
 800d6e4:	b933      	cbnz	r3, 800d6f4 <_strtod_l+0xaac>
 800d6e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d6ea:	900e      	str	r0, [sp, #56]	; 0x38
 800d6ec:	930f      	str	r3, [sp, #60]	; 0x3c
 800d6ee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d6f2:	e7dd      	b.n	800d6b0 <_strtod_l+0xa68>
 800d6f4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800d6f8:	e7f9      	b.n	800d6ee <_strtod_l+0xaa6>
 800d6fa:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800d6fe:	9b04      	ldr	r3, [sp, #16]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d1a8      	bne.n	800d656 <_strtod_l+0xa0e>
 800d704:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d708:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d70a:	0d1b      	lsrs	r3, r3, #20
 800d70c:	051b      	lsls	r3, r3, #20
 800d70e:	429a      	cmp	r2, r3
 800d710:	d1a1      	bne.n	800d656 <_strtod_l+0xa0e>
 800d712:	4640      	mov	r0, r8
 800d714:	4649      	mov	r1, r9
 800d716:	f7f3 fb47 	bl	8000da8 <__aeabi_d2lz>
 800d71a:	f7f2 ffb7 	bl	800068c <__aeabi_l2d>
 800d71e:	4602      	mov	r2, r0
 800d720:	460b      	mov	r3, r1
 800d722:	4640      	mov	r0, r8
 800d724:	4649      	mov	r1, r9
 800d726:	f7f2 fe27 	bl	8000378 <__aeabi_dsub>
 800d72a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d72c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d730:	ea43 030a 	orr.w	r3, r3, sl
 800d734:	4313      	orrs	r3, r2
 800d736:	4680      	mov	r8, r0
 800d738:	4689      	mov	r9, r1
 800d73a:	d055      	beq.n	800d7e8 <_strtod_l+0xba0>
 800d73c:	a336      	add	r3, pc, #216	; (adr r3, 800d818 <_strtod_l+0xbd0>)
 800d73e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d742:	f7f3 fa43 	bl	8000bcc <__aeabi_dcmplt>
 800d746:	2800      	cmp	r0, #0
 800d748:	f47f acd0 	bne.w	800d0ec <_strtod_l+0x4a4>
 800d74c:	a334      	add	r3, pc, #208	; (adr r3, 800d820 <_strtod_l+0xbd8>)
 800d74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d752:	4640      	mov	r0, r8
 800d754:	4649      	mov	r1, r9
 800d756:	f7f3 fa57 	bl	8000c08 <__aeabi_dcmpgt>
 800d75a:	2800      	cmp	r0, #0
 800d75c:	f43f af7b 	beq.w	800d656 <_strtod_l+0xa0e>
 800d760:	e4c4      	b.n	800d0ec <_strtod_l+0x4a4>
 800d762:	9b04      	ldr	r3, [sp, #16]
 800d764:	b333      	cbz	r3, 800d7b4 <_strtod_l+0xb6c>
 800d766:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d768:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d76c:	d822      	bhi.n	800d7b4 <_strtod_l+0xb6c>
 800d76e:	a32e      	add	r3, pc, #184	; (adr r3, 800d828 <_strtod_l+0xbe0>)
 800d770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d774:	4640      	mov	r0, r8
 800d776:	4649      	mov	r1, r9
 800d778:	f7f3 fa32 	bl	8000be0 <__aeabi_dcmple>
 800d77c:	b1a0      	cbz	r0, 800d7a8 <_strtod_l+0xb60>
 800d77e:	4649      	mov	r1, r9
 800d780:	4640      	mov	r0, r8
 800d782:	f7f3 fa89 	bl	8000c98 <__aeabi_d2uiz>
 800d786:	2801      	cmp	r0, #1
 800d788:	bf38      	it	cc
 800d78a:	2001      	movcc	r0, #1
 800d78c:	f7f2 ff32 	bl	80005f4 <__aeabi_ui2d>
 800d790:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d792:	4680      	mov	r8, r0
 800d794:	4689      	mov	r9, r1
 800d796:	bb23      	cbnz	r3, 800d7e2 <_strtod_l+0xb9a>
 800d798:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d79c:	9010      	str	r0, [sp, #64]	; 0x40
 800d79e:	9311      	str	r3, [sp, #68]	; 0x44
 800d7a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d7a4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d7a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d7ac:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d7b0:	1a9b      	subs	r3, r3, r2
 800d7b2:	9309      	str	r3, [sp, #36]	; 0x24
 800d7b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d7b8:	eeb0 0a48 	vmov.f32	s0, s16
 800d7bc:	eef0 0a68 	vmov.f32	s1, s17
 800d7c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d7c4:	f001 ff46 	bl	800f654 <__ulp>
 800d7c8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d7cc:	ec53 2b10 	vmov	r2, r3, d0
 800d7d0:	f7f2 ff8a 	bl	80006e8 <__aeabi_dmul>
 800d7d4:	ec53 2b18 	vmov	r2, r3, d8
 800d7d8:	f7f2 fdd0 	bl	800037c <__adddf3>
 800d7dc:	4682      	mov	sl, r0
 800d7de:	468b      	mov	fp, r1
 800d7e0:	e78d      	b.n	800d6fe <_strtod_l+0xab6>
 800d7e2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800d7e6:	e7db      	b.n	800d7a0 <_strtod_l+0xb58>
 800d7e8:	a311      	add	r3, pc, #68	; (adr r3, 800d830 <_strtod_l+0xbe8>)
 800d7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7ee:	f7f3 f9ed 	bl	8000bcc <__aeabi_dcmplt>
 800d7f2:	e7b2      	b.n	800d75a <_strtod_l+0xb12>
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	930a      	str	r3, [sp, #40]	; 0x28
 800d7f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d7fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d7fc:	6013      	str	r3, [r2, #0]
 800d7fe:	f7ff ba6b 	b.w	800ccd8 <_strtod_l+0x90>
 800d802:	2a65      	cmp	r2, #101	; 0x65
 800d804:	f43f ab5f 	beq.w	800cec6 <_strtod_l+0x27e>
 800d808:	2a45      	cmp	r2, #69	; 0x45
 800d80a:	f43f ab5c 	beq.w	800cec6 <_strtod_l+0x27e>
 800d80e:	2301      	movs	r3, #1
 800d810:	f7ff bb94 	b.w	800cf3c <_strtod_l+0x2f4>
 800d814:	f3af 8000 	nop.w
 800d818:	94a03595 	.word	0x94a03595
 800d81c:	3fdfffff 	.word	0x3fdfffff
 800d820:	35afe535 	.word	0x35afe535
 800d824:	3fe00000 	.word	0x3fe00000
 800d828:	ffc00000 	.word	0xffc00000
 800d82c:	41dfffff 	.word	0x41dfffff
 800d830:	94a03595 	.word	0x94a03595
 800d834:	3fcfffff 	.word	0x3fcfffff
 800d838:	3ff00000 	.word	0x3ff00000
 800d83c:	7ff00000 	.word	0x7ff00000
 800d840:	7fe00000 	.word	0x7fe00000
 800d844:	7c9fffff 	.word	0x7c9fffff
 800d848:	3fe00000 	.word	0x3fe00000
 800d84c:	bff00000 	.word	0xbff00000
 800d850:	7fefffff 	.word	0x7fefffff

0800d854 <_strtod_r>:
 800d854:	4b01      	ldr	r3, [pc, #4]	; (800d85c <_strtod_r+0x8>)
 800d856:	f7ff b9f7 	b.w	800cc48 <_strtod_l>
 800d85a:	bf00      	nop
 800d85c:	20000078 	.word	0x20000078

0800d860 <strtod>:
 800d860:	460a      	mov	r2, r1
 800d862:	4601      	mov	r1, r0
 800d864:	4802      	ldr	r0, [pc, #8]	; (800d870 <strtod+0x10>)
 800d866:	4b03      	ldr	r3, [pc, #12]	; (800d874 <strtod+0x14>)
 800d868:	6800      	ldr	r0, [r0, #0]
 800d86a:	f7ff b9ed 	b.w	800cc48 <_strtod_l>
 800d86e:	bf00      	nop
 800d870:	20000010 	.word	0x20000010
 800d874:	20000078 	.word	0x20000078

0800d878 <_strtol_l.constprop.0>:
 800d878:	2b01      	cmp	r3, #1
 800d87a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d87e:	d001      	beq.n	800d884 <_strtol_l.constprop.0+0xc>
 800d880:	2b24      	cmp	r3, #36	; 0x24
 800d882:	d906      	bls.n	800d892 <_strtol_l.constprop.0+0x1a>
 800d884:	f7fe f886 	bl	800b994 <__errno>
 800d888:	2316      	movs	r3, #22
 800d88a:	6003      	str	r3, [r0, #0]
 800d88c:	2000      	movs	r0, #0
 800d88e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d892:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d978 <_strtol_l.constprop.0+0x100>
 800d896:	460d      	mov	r5, r1
 800d898:	462e      	mov	r6, r5
 800d89a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d89e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800d8a2:	f017 0708 	ands.w	r7, r7, #8
 800d8a6:	d1f7      	bne.n	800d898 <_strtol_l.constprop.0+0x20>
 800d8a8:	2c2d      	cmp	r4, #45	; 0x2d
 800d8aa:	d132      	bne.n	800d912 <_strtol_l.constprop.0+0x9a>
 800d8ac:	782c      	ldrb	r4, [r5, #0]
 800d8ae:	2701      	movs	r7, #1
 800d8b0:	1cb5      	adds	r5, r6, #2
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d05b      	beq.n	800d96e <_strtol_l.constprop.0+0xf6>
 800d8b6:	2b10      	cmp	r3, #16
 800d8b8:	d109      	bne.n	800d8ce <_strtol_l.constprop.0+0x56>
 800d8ba:	2c30      	cmp	r4, #48	; 0x30
 800d8bc:	d107      	bne.n	800d8ce <_strtol_l.constprop.0+0x56>
 800d8be:	782c      	ldrb	r4, [r5, #0]
 800d8c0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d8c4:	2c58      	cmp	r4, #88	; 0x58
 800d8c6:	d14d      	bne.n	800d964 <_strtol_l.constprop.0+0xec>
 800d8c8:	786c      	ldrb	r4, [r5, #1]
 800d8ca:	2310      	movs	r3, #16
 800d8cc:	3502      	adds	r5, #2
 800d8ce:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d8d2:	f108 38ff 	add.w	r8, r8, #4294967295
 800d8d6:	f04f 0c00 	mov.w	ip, #0
 800d8da:	fbb8 f9f3 	udiv	r9, r8, r3
 800d8de:	4666      	mov	r6, ip
 800d8e0:	fb03 8a19 	mls	sl, r3, r9, r8
 800d8e4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800d8e8:	f1be 0f09 	cmp.w	lr, #9
 800d8ec:	d816      	bhi.n	800d91c <_strtol_l.constprop.0+0xa4>
 800d8ee:	4674      	mov	r4, lr
 800d8f0:	42a3      	cmp	r3, r4
 800d8f2:	dd24      	ble.n	800d93e <_strtol_l.constprop.0+0xc6>
 800d8f4:	f1bc 0f00 	cmp.w	ip, #0
 800d8f8:	db1e      	blt.n	800d938 <_strtol_l.constprop.0+0xc0>
 800d8fa:	45b1      	cmp	r9, r6
 800d8fc:	d31c      	bcc.n	800d938 <_strtol_l.constprop.0+0xc0>
 800d8fe:	d101      	bne.n	800d904 <_strtol_l.constprop.0+0x8c>
 800d900:	45a2      	cmp	sl, r4
 800d902:	db19      	blt.n	800d938 <_strtol_l.constprop.0+0xc0>
 800d904:	fb06 4603 	mla	r6, r6, r3, r4
 800d908:	f04f 0c01 	mov.w	ip, #1
 800d90c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d910:	e7e8      	b.n	800d8e4 <_strtol_l.constprop.0+0x6c>
 800d912:	2c2b      	cmp	r4, #43	; 0x2b
 800d914:	bf04      	itt	eq
 800d916:	782c      	ldrbeq	r4, [r5, #0]
 800d918:	1cb5      	addeq	r5, r6, #2
 800d91a:	e7ca      	b.n	800d8b2 <_strtol_l.constprop.0+0x3a>
 800d91c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800d920:	f1be 0f19 	cmp.w	lr, #25
 800d924:	d801      	bhi.n	800d92a <_strtol_l.constprop.0+0xb2>
 800d926:	3c37      	subs	r4, #55	; 0x37
 800d928:	e7e2      	b.n	800d8f0 <_strtol_l.constprop.0+0x78>
 800d92a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800d92e:	f1be 0f19 	cmp.w	lr, #25
 800d932:	d804      	bhi.n	800d93e <_strtol_l.constprop.0+0xc6>
 800d934:	3c57      	subs	r4, #87	; 0x57
 800d936:	e7db      	b.n	800d8f0 <_strtol_l.constprop.0+0x78>
 800d938:	f04f 3cff 	mov.w	ip, #4294967295
 800d93c:	e7e6      	b.n	800d90c <_strtol_l.constprop.0+0x94>
 800d93e:	f1bc 0f00 	cmp.w	ip, #0
 800d942:	da05      	bge.n	800d950 <_strtol_l.constprop.0+0xd8>
 800d944:	2322      	movs	r3, #34	; 0x22
 800d946:	6003      	str	r3, [r0, #0]
 800d948:	4646      	mov	r6, r8
 800d94a:	b942      	cbnz	r2, 800d95e <_strtol_l.constprop.0+0xe6>
 800d94c:	4630      	mov	r0, r6
 800d94e:	e79e      	b.n	800d88e <_strtol_l.constprop.0+0x16>
 800d950:	b107      	cbz	r7, 800d954 <_strtol_l.constprop.0+0xdc>
 800d952:	4276      	negs	r6, r6
 800d954:	2a00      	cmp	r2, #0
 800d956:	d0f9      	beq.n	800d94c <_strtol_l.constprop.0+0xd4>
 800d958:	f1bc 0f00 	cmp.w	ip, #0
 800d95c:	d000      	beq.n	800d960 <_strtol_l.constprop.0+0xe8>
 800d95e:	1e69      	subs	r1, r5, #1
 800d960:	6011      	str	r1, [r2, #0]
 800d962:	e7f3      	b.n	800d94c <_strtol_l.constprop.0+0xd4>
 800d964:	2430      	movs	r4, #48	; 0x30
 800d966:	2b00      	cmp	r3, #0
 800d968:	d1b1      	bne.n	800d8ce <_strtol_l.constprop.0+0x56>
 800d96a:	2308      	movs	r3, #8
 800d96c:	e7af      	b.n	800d8ce <_strtol_l.constprop.0+0x56>
 800d96e:	2c30      	cmp	r4, #48	; 0x30
 800d970:	d0a5      	beq.n	800d8be <_strtol_l.constprop.0+0x46>
 800d972:	230a      	movs	r3, #10
 800d974:	e7ab      	b.n	800d8ce <_strtol_l.constprop.0+0x56>
 800d976:	bf00      	nop
 800d978:	08010649 	.word	0x08010649

0800d97c <_strtol_r>:
 800d97c:	f7ff bf7c 	b.w	800d878 <_strtol_l.constprop.0>

0800d980 <_close_r>:
 800d980:	b538      	push	{r3, r4, r5, lr}
 800d982:	4d06      	ldr	r5, [pc, #24]	; (800d99c <_close_r+0x1c>)
 800d984:	2300      	movs	r3, #0
 800d986:	4604      	mov	r4, r0
 800d988:	4608      	mov	r0, r1
 800d98a:	602b      	str	r3, [r5, #0]
 800d98c:	f7f4 f9e3 	bl	8001d56 <_close>
 800d990:	1c43      	adds	r3, r0, #1
 800d992:	d102      	bne.n	800d99a <_close_r+0x1a>
 800d994:	682b      	ldr	r3, [r5, #0]
 800d996:	b103      	cbz	r3, 800d99a <_close_r+0x1a>
 800d998:	6023      	str	r3, [r4, #0]
 800d99a:	bd38      	pop	{r3, r4, r5, pc}
 800d99c:	2000783c 	.word	0x2000783c

0800d9a0 <quorem>:
 800d9a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9a4:	6903      	ldr	r3, [r0, #16]
 800d9a6:	690c      	ldr	r4, [r1, #16]
 800d9a8:	42a3      	cmp	r3, r4
 800d9aa:	4607      	mov	r7, r0
 800d9ac:	f2c0 8081 	blt.w	800dab2 <quorem+0x112>
 800d9b0:	3c01      	subs	r4, #1
 800d9b2:	f101 0814 	add.w	r8, r1, #20
 800d9b6:	f100 0514 	add.w	r5, r0, #20
 800d9ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d9be:	9301      	str	r3, [sp, #4]
 800d9c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d9c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d9c8:	3301      	adds	r3, #1
 800d9ca:	429a      	cmp	r2, r3
 800d9cc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d9d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d9d4:	fbb2 f6f3 	udiv	r6, r2, r3
 800d9d8:	d331      	bcc.n	800da3e <quorem+0x9e>
 800d9da:	f04f 0e00 	mov.w	lr, #0
 800d9de:	4640      	mov	r0, r8
 800d9e0:	46ac      	mov	ip, r5
 800d9e2:	46f2      	mov	sl, lr
 800d9e4:	f850 2b04 	ldr.w	r2, [r0], #4
 800d9e8:	b293      	uxth	r3, r2
 800d9ea:	fb06 e303 	mla	r3, r6, r3, lr
 800d9ee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d9f2:	b29b      	uxth	r3, r3
 800d9f4:	ebaa 0303 	sub.w	r3, sl, r3
 800d9f8:	f8dc a000 	ldr.w	sl, [ip]
 800d9fc:	0c12      	lsrs	r2, r2, #16
 800d9fe:	fa13 f38a 	uxtah	r3, r3, sl
 800da02:	fb06 e202 	mla	r2, r6, r2, lr
 800da06:	9300      	str	r3, [sp, #0]
 800da08:	9b00      	ldr	r3, [sp, #0]
 800da0a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800da0e:	b292      	uxth	r2, r2
 800da10:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800da14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800da18:	f8bd 3000 	ldrh.w	r3, [sp]
 800da1c:	4581      	cmp	r9, r0
 800da1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800da22:	f84c 3b04 	str.w	r3, [ip], #4
 800da26:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800da2a:	d2db      	bcs.n	800d9e4 <quorem+0x44>
 800da2c:	f855 300b 	ldr.w	r3, [r5, fp]
 800da30:	b92b      	cbnz	r3, 800da3e <quorem+0x9e>
 800da32:	9b01      	ldr	r3, [sp, #4]
 800da34:	3b04      	subs	r3, #4
 800da36:	429d      	cmp	r5, r3
 800da38:	461a      	mov	r2, r3
 800da3a:	d32e      	bcc.n	800da9a <quorem+0xfa>
 800da3c:	613c      	str	r4, [r7, #16]
 800da3e:	4638      	mov	r0, r7
 800da40:	f001 fd62 	bl	800f508 <__mcmp>
 800da44:	2800      	cmp	r0, #0
 800da46:	db24      	blt.n	800da92 <quorem+0xf2>
 800da48:	3601      	adds	r6, #1
 800da4a:	4628      	mov	r0, r5
 800da4c:	f04f 0c00 	mov.w	ip, #0
 800da50:	f858 2b04 	ldr.w	r2, [r8], #4
 800da54:	f8d0 e000 	ldr.w	lr, [r0]
 800da58:	b293      	uxth	r3, r2
 800da5a:	ebac 0303 	sub.w	r3, ip, r3
 800da5e:	0c12      	lsrs	r2, r2, #16
 800da60:	fa13 f38e 	uxtah	r3, r3, lr
 800da64:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800da68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800da6c:	b29b      	uxth	r3, r3
 800da6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800da72:	45c1      	cmp	r9, r8
 800da74:	f840 3b04 	str.w	r3, [r0], #4
 800da78:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800da7c:	d2e8      	bcs.n	800da50 <quorem+0xb0>
 800da7e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800da82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800da86:	b922      	cbnz	r2, 800da92 <quorem+0xf2>
 800da88:	3b04      	subs	r3, #4
 800da8a:	429d      	cmp	r5, r3
 800da8c:	461a      	mov	r2, r3
 800da8e:	d30a      	bcc.n	800daa6 <quorem+0x106>
 800da90:	613c      	str	r4, [r7, #16]
 800da92:	4630      	mov	r0, r6
 800da94:	b003      	add	sp, #12
 800da96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da9a:	6812      	ldr	r2, [r2, #0]
 800da9c:	3b04      	subs	r3, #4
 800da9e:	2a00      	cmp	r2, #0
 800daa0:	d1cc      	bne.n	800da3c <quorem+0x9c>
 800daa2:	3c01      	subs	r4, #1
 800daa4:	e7c7      	b.n	800da36 <quorem+0x96>
 800daa6:	6812      	ldr	r2, [r2, #0]
 800daa8:	3b04      	subs	r3, #4
 800daaa:	2a00      	cmp	r2, #0
 800daac:	d1f0      	bne.n	800da90 <quorem+0xf0>
 800daae:	3c01      	subs	r4, #1
 800dab0:	e7eb      	b.n	800da8a <quorem+0xea>
 800dab2:	2000      	movs	r0, #0
 800dab4:	e7ee      	b.n	800da94 <quorem+0xf4>
	...

0800dab8 <_dtoa_r>:
 800dab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dabc:	ed2d 8b04 	vpush	{d8-d9}
 800dac0:	ec57 6b10 	vmov	r6, r7, d0
 800dac4:	b093      	sub	sp, #76	; 0x4c
 800dac6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800dac8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800dacc:	9106      	str	r1, [sp, #24]
 800dace:	ee10 aa10 	vmov	sl, s0
 800dad2:	4604      	mov	r4, r0
 800dad4:	9209      	str	r2, [sp, #36]	; 0x24
 800dad6:	930c      	str	r3, [sp, #48]	; 0x30
 800dad8:	46bb      	mov	fp, r7
 800dada:	b975      	cbnz	r5, 800dafa <_dtoa_r+0x42>
 800dadc:	2010      	movs	r0, #16
 800dade:	f001 fa21 	bl	800ef24 <malloc>
 800dae2:	4602      	mov	r2, r0
 800dae4:	6260      	str	r0, [r4, #36]	; 0x24
 800dae6:	b920      	cbnz	r0, 800daf2 <_dtoa_r+0x3a>
 800dae8:	4ba7      	ldr	r3, [pc, #668]	; (800dd88 <_dtoa_r+0x2d0>)
 800daea:	21ea      	movs	r1, #234	; 0xea
 800daec:	48a7      	ldr	r0, [pc, #668]	; (800dd8c <_dtoa_r+0x2d4>)
 800daee:	f002 f8fd 	bl	800fcec <__assert_func>
 800daf2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800daf6:	6005      	str	r5, [r0, #0]
 800daf8:	60c5      	str	r5, [r0, #12]
 800dafa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dafc:	6819      	ldr	r1, [r3, #0]
 800dafe:	b151      	cbz	r1, 800db16 <_dtoa_r+0x5e>
 800db00:	685a      	ldr	r2, [r3, #4]
 800db02:	604a      	str	r2, [r1, #4]
 800db04:	2301      	movs	r3, #1
 800db06:	4093      	lsls	r3, r2
 800db08:	608b      	str	r3, [r1, #8]
 800db0a:	4620      	mov	r0, r4
 800db0c:	f001 fa70 	bl	800eff0 <_Bfree>
 800db10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800db12:	2200      	movs	r2, #0
 800db14:	601a      	str	r2, [r3, #0]
 800db16:	1e3b      	subs	r3, r7, #0
 800db18:	bfaa      	itet	ge
 800db1a:	2300      	movge	r3, #0
 800db1c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800db20:	f8c8 3000 	strge.w	r3, [r8]
 800db24:	4b9a      	ldr	r3, [pc, #616]	; (800dd90 <_dtoa_r+0x2d8>)
 800db26:	bfbc      	itt	lt
 800db28:	2201      	movlt	r2, #1
 800db2a:	f8c8 2000 	strlt.w	r2, [r8]
 800db2e:	ea33 030b 	bics.w	r3, r3, fp
 800db32:	d11b      	bne.n	800db6c <_dtoa_r+0xb4>
 800db34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800db36:	f242 730f 	movw	r3, #9999	; 0x270f
 800db3a:	6013      	str	r3, [r2, #0]
 800db3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800db40:	4333      	orrs	r3, r6
 800db42:	f000 8592 	beq.w	800e66a <_dtoa_r+0xbb2>
 800db46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800db48:	b963      	cbnz	r3, 800db64 <_dtoa_r+0xac>
 800db4a:	4b92      	ldr	r3, [pc, #584]	; (800dd94 <_dtoa_r+0x2dc>)
 800db4c:	e022      	b.n	800db94 <_dtoa_r+0xdc>
 800db4e:	4b92      	ldr	r3, [pc, #584]	; (800dd98 <_dtoa_r+0x2e0>)
 800db50:	9301      	str	r3, [sp, #4]
 800db52:	3308      	adds	r3, #8
 800db54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800db56:	6013      	str	r3, [r2, #0]
 800db58:	9801      	ldr	r0, [sp, #4]
 800db5a:	b013      	add	sp, #76	; 0x4c
 800db5c:	ecbd 8b04 	vpop	{d8-d9}
 800db60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db64:	4b8b      	ldr	r3, [pc, #556]	; (800dd94 <_dtoa_r+0x2dc>)
 800db66:	9301      	str	r3, [sp, #4]
 800db68:	3303      	adds	r3, #3
 800db6a:	e7f3      	b.n	800db54 <_dtoa_r+0x9c>
 800db6c:	2200      	movs	r2, #0
 800db6e:	2300      	movs	r3, #0
 800db70:	4650      	mov	r0, sl
 800db72:	4659      	mov	r1, fp
 800db74:	f7f3 f820 	bl	8000bb8 <__aeabi_dcmpeq>
 800db78:	ec4b ab19 	vmov	d9, sl, fp
 800db7c:	4680      	mov	r8, r0
 800db7e:	b158      	cbz	r0, 800db98 <_dtoa_r+0xe0>
 800db80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800db82:	2301      	movs	r3, #1
 800db84:	6013      	str	r3, [r2, #0]
 800db86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800db88:	2b00      	cmp	r3, #0
 800db8a:	f000 856b 	beq.w	800e664 <_dtoa_r+0xbac>
 800db8e:	4883      	ldr	r0, [pc, #524]	; (800dd9c <_dtoa_r+0x2e4>)
 800db90:	6018      	str	r0, [r3, #0]
 800db92:	1e43      	subs	r3, r0, #1
 800db94:	9301      	str	r3, [sp, #4]
 800db96:	e7df      	b.n	800db58 <_dtoa_r+0xa0>
 800db98:	ec4b ab10 	vmov	d0, sl, fp
 800db9c:	aa10      	add	r2, sp, #64	; 0x40
 800db9e:	a911      	add	r1, sp, #68	; 0x44
 800dba0:	4620      	mov	r0, r4
 800dba2:	f001 fdd3 	bl	800f74c <__d2b>
 800dba6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800dbaa:	ee08 0a10 	vmov	s16, r0
 800dbae:	2d00      	cmp	r5, #0
 800dbb0:	f000 8084 	beq.w	800dcbc <_dtoa_r+0x204>
 800dbb4:	ee19 3a90 	vmov	r3, s19
 800dbb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dbbc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800dbc0:	4656      	mov	r6, sl
 800dbc2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800dbc6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800dbca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800dbce:	4b74      	ldr	r3, [pc, #464]	; (800dda0 <_dtoa_r+0x2e8>)
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	4630      	mov	r0, r6
 800dbd4:	4639      	mov	r1, r7
 800dbd6:	f7f2 fbcf 	bl	8000378 <__aeabi_dsub>
 800dbda:	a365      	add	r3, pc, #404	; (adr r3, 800dd70 <_dtoa_r+0x2b8>)
 800dbdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbe0:	f7f2 fd82 	bl	80006e8 <__aeabi_dmul>
 800dbe4:	a364      	add	r3, pc, #400	; (adr r3, 800dd78 <_dtoa_r+0x2c0>)
 800dbe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbea:	f7f2 fbc7 	bl	800037c <__adddf3>
 800dbee:	4606      	mov	r6, r0
 800dbf0:	4628      	mov	r0, r5
 800dbf2:	460f      	mov	r7, r1
 800dbf4:	f7f2 fd0e 	bl	8000614 <__aeabi_i2d>
 800dbf8:	a361      	add	r3, pc, #388	; (adr r3, 800dd80 <_dtoa_r+0x2c8>)
 800dbfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbfe:	f7f2 fd73 	bl	80006e8 <__aeabi_dmul>
 800dc02:	4602      	mov	r2, r0
 800dc04:	460b      	mov	r3, r1
 800dc06:	4630      	mov	r0, r6
 800dc08:	4639      	mov	r1, r7
 800dc0a:	f7f2 fbb7 	bl	800037c <__adddf3>
 800dc0e:	4606      	mov	r6, r0
 800dc10:	460f      	mov	r7, r1
 800dc12:	f7f3 f819 	bl	8000c48 <__aeabi_d2iz>
 800dc16:	2200      	movs	r2, #0
 800dc18:	9000      	str	r0, [sp, #0]
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	4630      	mov	r0, r6
 800dc1e:	4639      	mov	r1, r7
 800dc20:	f7f2 ffd4 	bl	8000bcc <__aeabi_dcmplt>
 800dc24:	b150      	cbz	r0, 800dc3c <_dtoa_r+0x184>
 800dc26:	9800      	ldr	r0, [sp, #0]
 800dc28:	f7f2 fcf4 	bl	8000614 <__aeabi_i2d>
 800dc2c:	4632      	mov	r2, r6
 800dc2e:	463b      	mov	r3, r7
 800dc30:	f7f2 ffc2 	bl	8000bb8 <__aeabi_dcmpeq>
 800dc34:	b910      	cbnz	r0, 800dc3c <_dtoa_r+0x184>
 800dc36:	9b00      	ldr	r3, [sp, #0]
 800dc38:	3b01      	subs	r3, #1
 800dc3a:	9300      	str	r3, [sp, #0]
 800dc3c:	9b00      	ldr	r3, [sp, #0]
 800dc3e:	2b16      	cmp	r3, #22
 800dc40:	d85a      	bhi.n	800dcf8 <_dtoa_r+0x240>
 800dc42:	9a00      	ldr	r2, [sp, #0]
 800dc44:	4b57      	ldr	r3, [pc, #348]	; (800dda4 <_dtoa_r+0x2ec>)
 800dc46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dc4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc4e:	ec51 0b19 	vmov	r0, r1, d9
 800dc52:	f7f2 ffbb 	bl	8000bcc <__aeabi_dcmplt>
 800dc56:	2800      	cmp	r0, #0
 800dc58:	d050      	beq.n	800dcfc <_dtoa_r+0x244>
 800dc5a:	9b00      	ldr	r3, [sp, #0]
 800dc5c:	3b01      	subs	r3, #1
 800dc5e:	9300      	str	r3, [sp, #0]
 800dc60:	2300      	movs	r3, #0
 800dc62:	930b      	str	r3, [sp, #44]	; 0x2c
 800dc64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dc66:	1b5d      	subs	r5, r3, r5
 800dc68:	1e6b      	subs	r3, r5, #1
 800dc6a:	9305      	str	r3, [sp, #20]
 800dc6c:	bf45      	ittet	mi
 800dc6e:	f1c5 0301 	rsbmi	r3, r5, #1
 800dc72:	9304      	strmi	r3, [sp, #16]
 800dc74:	2300      	movpl	r3, #0
 800dc76:	2300      	movmi	r3, #0
 800dc78:	bf4c      	ite	mi
 800dc7a:	9305      	strmi	r3, [sp, #20]
 800dc7c:	9304      	strpl	r3, [sp, #16]
 800dc7e:	9b00      	ldr	r3, [sp, #0]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	db3d      	blt.n	800dd00 <_dtoa_r+0x248>
 800dc84:	9b05      	ldr	r3, [sp, #20]
 800dc86:	9a00      	ldr	r2, [sp, #0]
 800dc88:	920a      	str	r2, [sp, #40]	; 0x28
 800dc8a:	4413      	add	r3, r2
 800dc8c:	9305      	str	r3, [sp, #20]
 800dc8e:	2300      	movs	r3, #0
 800dc90:	9307      	str	r3, [sp, #28]
 800dc92:	9b06      	ldr	r3, [sp, #24]
 800dc94:	2b09      	cmp	r3, #9
 800dc96:	f200 8089 	bhi.w	800ddac <_dtoa_r+0x2f4>
 800dc9a:	2b05      	cmp	r3, #5
 800dc9c:	bfc4      	itt	gt
 800dc9e:	3b04      	subgt	r3, #4
 800dca0:	9306      	strgt	r3, [sp, #24]
 800dca2:	9b06      	ldr	r3, [sp, #24]
 800dca4:	f1a3 0302 	sub.w	r3, r3, #2
 800dca8:	bfcc      	ite	gt
 800dcaa:	2500      	movgt	r5, #0
 800dcac:	2501      	movle	r5, #1
 800dcae:	2b03      	cmp	r3, #3
 800dcb0:	f200 8087 	bhi.w	800ddc2 <_dtoa_r+0x30a>
 800dcb4:	e8df f003 	tbb	[pc, r3]
 800dcb8:	59383a2d 	.word	0x59383a2d
 800dcbc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800dcc0:	441d      	add	r5, r3
 800dcc2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800dcc6:	2b20      	cmp	r3, #32
 800dcc8:	bfc1      	itttt	gt
 800dcca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800dcce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800dcd2:	fa0b f303 	lslgt.w	r3, fp, r3
 800dcd6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800dcda:	bfda      	itte	le
 800dcdc:	f1c3 0320 	rsble	r3, r3, #32
 800dce0:	fa06 f003 	lslle.w	r0, r6, r3
 800dce4:	4318      	orrgt	r0, r3
 800dce6:	f7f2 fc85 	bl	80005f4 <__aeabi_ui2d>
 800dcea:	2301      	movs	r3, #1
 800dcec:	4606      	mov	r6, r0
 800dcee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800dcf2:	3d01      	subs	r5, #1
 800dcf4:	930e      	str	r3, [sp, #56]	; 0x38
 800dcf6:	e76a      	b.n	800dbce <_dtoa_r+0x116>
 800dcf8:	2301      	movs	r3, #1
 800dcfa:	e7b2      	b.n	800dc62 <_dtoa_r+0x1aa>
 800dcfc:	900b      	str	r0, [sp, #44]	; 0x2c
 800dcfe:	e7b1      	b.n	800dc64 <_dtoa_r+0x1ac>
 800dd00:	9b04      	ldr	r3, [sp, #16]
 800dd02:	9a00      	ldr	r2, [sp, #0]
 800dd04:	1a9b      	subs	r3, r3, r2
 800dd06:	9304      	str	r3, [sp, #16]
 800dd08:	4253      	negs	r3, r2
 800dd0a:	9307      	str	r3, [sp, #28]
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	930a      	str	r3, [sp, #40]	; 0x28
 800dd10:	e7bf      	b.n	800dc92 <_dtoa_r+0x1da>
 800dd12:	2300      	movs	r3, #0
 800dd14:	9308      	str	r3, [sp, #32]
 800dd16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	dc55      	bgt.n	800ddc8 <_dtoa_r+0x310>
 800dd1c:	2301      	movs	r3, #1
 800dd1e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800dd22:	461a      	mov	r2, r3
 800dd24:	9209      	str	r2, [sp, #36]	; 0x24
 800dd26:	e00c      	b.n	800dd42 <_dtoa_r+0x28a>
 800dd28:	2301      	movs	r3, #1
 800dd2a:	e7f3      	b.n	800dd14 <_dtoa_r+0x25c>
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dd30:	9308      	str	r3, [sp, #32]
 800dd32:	9b00      	ldr	r3, [sp, #0]
 800dd34:	4413      	add	r3, r2
 800dd36:	9302      	str	r3, [sp, #8]
 800dd38:	3301      	adds	r3, #1
 800dd3a:	2b01      	cmp	r3, #1
 800dd3c:	9303      	str	r3, [sp, #12]
 800dd3e:	bfb8      	it	lt
 800dd40:	2301      	movlt	r3, #1
 800dd42:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800dd44:	2200      	movs	r2, #0
 800dd46:	6042      	str	r2, [r0, #4]
 800dd48:	2204      	movs	r2, #4
 800dd4a:	f102 0614 	add.w	r6, r2, #20
 800dd4e:	429e      	cmp	r6, r3
 800dd50:	6841      	ldr	r1, [r0, #4]
 800dd52:	d93d      	bls.n	800ddd0 <_dtoa_r+0x318>
 800dd54:	4620      	mov	r0, r4
 800dd56:	f001 f90b 	bl	800ef70 <_Balloc>
 800dd5a:	9001      	str	r0, [sp, #4]
 800dd5c:	2800      	cmp	r0, #0
 800dd5e:	d13b      	bne.n	800ddd8 <_dtoa_r+0x320>
 800dd60:	4b11      	ldr	r3, [pc, #68]	; (800dda8 <_dtoa_r+0x2f0>)
 800dd62:	4602      	mov	r2, r0
 800dd64:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800dd68:	e6c0      	b.n	800daec <_dtoa_r+0x34>
 800dd6a:	2301      	movs	r3, #1
 800dd6c:	e7df      	b.n	800dd2e <_dtoa_r+0x276>
 800dd6e:	bf00      	nop
 800dd70:	636f4361 	.word	0x636f4361
 800dd74:	3fd287a7 	.word	0x3fd287a7
 800dd78:	8b60c8b3 	.word	0x8b60c8b3
 800dd7c:	3fc68a28 	.word	0x3fc68a28
 800dd80:	509f79fb 	.word	0x509f79fb
 800dd84:	3fd34413 	.word	0x3fd34413
 800dd88:	08010756 	.word	0x08010756
 800dd8c:	0801076d 	.word	0x0801076d
 800dd90:	7ff00000 	.word	0x7ff00000
 800dd94:	08010752 	.word	0x08010752
 800dd98:	08010749 	.word	0x08010749
 800dd9c:	080105cd 	.word	0x080105cd
 800dda0:	3ff80000 	.word	0x3ff80000
 800dda4:	080108d8 	.word	0x080108d8
 800dda8:	080107c8 	.word	0x080107c8
 800ddac:	2501      	movs	r5, #1
 800ddae:	2300      	movs	r3, #0
 800ddb0:	9306      	str	r3, [sp, #24]
 800ddb2:	9508      	str	r5, [sp, #32]
 800ddb4:	f04f 33ff 	mov.w	r3, #4294967295
 800ddb8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	2312      	movs	r3, #18
 800ddc0:	e7b0      	b.n	800dd24 <_dtoa_r+0x26c>
 800ddc2:	2301      	movs	r3, #1
 800ddc4:	9308      	str	r3, [sp, #32]
 800ddc6:	e7f5      	b.n	800ddb4 <_dtoa_r+0x2fc>
 800ddc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ddce:	e7b8      	b.n	800dd42 <_dtoa_r+0x28a>
 800ddd0:	3101      	adds	r1, #1
 800ddd2:	6041      	str	r1, [r0, #4]
 800ddd4:	0052      	lsls	r2, r2, #1
 800ddd6:	e7b8      	b.n	800dd4a <_dtoa_r+0x292>
 800ddd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ddda:	9a01      	ldr	r2, [sp, #4]
 800dddc:	601a      	str	r2, [r3, #0]
 800ddde:	9b03      	ldr	r3, [sp, #12]
 800dde0:	2b0e      	cmp	r3, #14
 800dde2:	f200 809d 	bhi.w	800df20 <_dtoa_r+0x468>
 800dde6:	2d00      	cmp	r5, #0
 800dde8:	f000 809a 	beq.w	800df20 <_dtoa_r+0x468>
 800ddec:	9b00      	ldr	r3, [sp, #0]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	dd32      	ble.n	800de58 <_dtoa_r+0x3a0>
 800ddf2:	4ab7      	ldr	r2, [pc, #732]	; (800e0d0 <_dtoa_r+0x618>)
 800ddf4:	f003 030f 	and.w	r3, r3, #15
 800ddf8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ddfc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800de00:	9b00      	ldr	r3, [sp, #0]
 800de02:	05d8      	lsls	r0, r3, #23
 800de04:	ea4f 1723 	mov.w	r7, r3, asr #4
 800de08:	d516      	bpl.n	800de38 <_dtoa_r+0x380>
 800de0a:	4bb2      	ldr	r3, [pc, #712]	; (800e0d4 <_dtoa_r+0x61c>)
 800de0c:	ec51 0b19 	vmov	r0, r1, d9
 800de10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800de14:	f7f2 fd92 	bl	800093c <__aeabi_ddiv>
 800de18:	f007 070f 	and.w	r7, r7, #15
 800de1c:	4682      	mov	sl, r0
 800de1e:	468b      	mov	fp, r1
 800de20:	2503      	movs	r5, #3
 800de22:	4eac      	ldr	r6, [pc, #688]	; (800e0d4 <_dtoa_r+0x61c>)
 800de24:	b957      	cbnz	r7, 800de3c <_dtoa_r+0x384>
 800de26:	4642      	mov	r2, r8
 800de28:	464b      	mov	r3, r9
 800de2a:	4650      	mov	r0, sl
 800de2c:	4659      	mov	r1, fp
 800de2e:	f7f2 fd85 	bl	800093c <__aeabi_ddiv>
 800de32:	4682      	mov	sl, r0
 800de34:	468b      	mov	fp, r1
 800de36:	e028      	b.n	800de8a <_dtoa_r+0x3d2>
 800de38:	2502      	movs	r5, #2
 800de3a:	e7f2      	b.n	800de22 <_dtoa_r+0x36a>
 800de3c:	07f9      	lsls	r1, r7, #31
 800de3e:	d508      	bpl.n	800de52 <_dtoa_r+0x39a>
 800de40:	4640      	mov	r0, r8
 800de42:	4649      	mov	r1, r9
 800de44:	e9d6 2300 	ldrd	r2, r3, [r6]
 800de48:	f7f2 fc4e 	bl	80006e8 <__aeabi_dmul>
 800de4c:	3501      	adds	r5, #1
 800de4e:	4680      	mov	r8, r0
 800de50:	4689      	mov	r9, r1
 800de52:	107f      	asrs	r7, r7, #1
 800de54:	3608      	adds	r6, #8
 800de56:	e7e5      	b.n	800de24 <_dtoa_r+0x36c>
 800de58:	f000 809b 	beq.w	800df92 <_dtoa_r+0x4da>
 800de5c:	9b00      	ldr	r3, [sp, #0]
 800de5e:	4f9d      	ldr	r7, [pc, #628]	; (800e0d4 <_dtoa_r+0x61c>)
 800de60:	425e      	negs	r6, r3
 800de62:	4b9b      	ldr	r3, [pc, #620]	; (800e0d0 <_dtoa_r+0x618>)
 800de64:	f006 020f 	and.w	r2, r6, #15
 800de68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800de6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de70:	ec51 0b19 	vmov	r0, r1, d9
 800de74:	f7f2 fc38 	bl	80006e8 <__aeabi_dmul>
 800de78:	1136      	asrs	r6, r6, #4
 800de7a:	4682      	mov	sl, r0
 800de7c:	468b      	mov	fp, r1
 800de7e:	2300      	movs	r3, #0
 800de80:	2502      	movs	r5, #2
 800de82:	2e00      	cmp	r6, #0
 800de84:	d17a      	bne.n	800df7c <_dtoa_r+0x4c4>
 800de86:	2b00      	cmp	r3, #0
 800de88:	d1d3      	bne.n	800de32 <_dtoa_r+0x37a>
 800de8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	f000 8082 	beq.w	800df96 <_dtoa_r+0x4de>
 800de92:	4b91      	ldr	r3, [pc, #580]	; (800e0d8 <_dtoa_r+0x620>)
 800de94:	2200      	movs	r2, #0
 800de96:	4650      	mov	r0, sl
 800de98:	4659      	mov	r1, fp
 800de9a:	f7f2 fe97 	bl	8000bcc <__aeabi_dcmplt>
 800de9e:	2800      	cmp	r0, #0
 800dea0:	d079      	beq.n	800df96 <_dtoa_r+0x4de>
 800dea2:	9b03      	ldr	r3, [sp, #12]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d076      	beq.n	800df96 <_dtoa_r+0x4de>
 800dea8:	9b02      	ldr	r3, [sp, #8]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	dd36      	ble.n	800df1c <_dtoa_r+0x464>
 800deae:	9b00      	ldr	r3, [sp, #0]
 800deb0:	4650      	mov	r0, sl
 800deb2:	4659      	mov	r1, fp
 800deb4:	1e5f      	subs	r7, r3, #1
 800deb6:	2200      	movs	r2, #0
 800deb8:	4b88      	ldr	r3, [pc, #544]	; (800e0dc <_dtoa_r+0x624>)
 800deba:	f7f2 fc15 	bl	80006e8 <__aeabi_dmul>
 800debe:	9e02      	ldr	r6, [sp, #8]
 800dec0:	4682      	mov	sl, r0
 800dec2:	468b      	mov	fp, r1
 800dec4:	3501      	adds	r5, #1
 800dec6:	4628      	mov	r0, r5
 800dec8:	f7f2 fba4 	bl	8000614 <__aeabi_i2d>
 800decc:	4652      	mov	r2, sl
 800dece:	465b      	mov	r3, fp
 800ded0:	f7f2 fc0a 	bl	80006e8 <__aeabi_dmul>
 800ded4:	4b82      	ldr	r3, [pc, #520]	; (800e0e0 <_dtoa_r+0x628>)
 800ded6:	2200      	movs	r2, #0
 800ded8:	f7f2 fa50 	bl	800037c <__adddf3>
 800dedc:	46d0      	mov	r8, sl
 800dede:	46d9      	mov	r9, fp
 800dee0:	4682      	mov	sl, r0
 800dee2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800dee6:	2e00      	cmp	r6, #0
 800dee8:	d158      	bne.n	800df9c <_dtoa_r+0x4e4>
 800deea:	4b7e      	ldr	r3, [pc, #504]	; (800e0e4 <_dtoa_r+0x62c>)
 800deec:	2200      	movs	r2, #0
 800deee:	4640      	mov	r0, r8
 800def0:	4649      	mov	r1, r9
 800def2:	f7f2 fa41 	bl	8000378 <__aeabi_dsub>
 800def6:	4652      	mov	r2, sl
 800def8:	465b      	mov	r3, fp
 800defa:	4680      	mov	r8, r0
 800defc:	4689      	mov	r9, r1
 800defe:	f7f2 fe83 	bl	8000c08 <__aeabi_dcmpgt>
 800df02:	2800      	cmp	r0, #0
 800df04:	f040 8295 	bne.w	800e432 <_dtoa_r+0x97a>
 800df08:	4652      	mov	r2, sl
 800df0a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800df0e:	4640      	mov	r0, r8
 800df10:	4649      	mov	r1, r9
 800df12:	f7f2 fe5b 	bl	8000bcc <__aeabi_dcmplt>
 800df16:	2800      	cmp	r0, #0
 800df18:	f040 8289 	bne.w	800e42e <_dtoa_r+0x976>
 800df1c:	ec5b ab19 	vmov	sl, fp, d9
 800df20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800df22:	2b00      	cmp	r3, #0
 800df24:	f2c0 8148 	blt.w	800e1b8 <_dtoa_r+0x700>
 800df28:	9a00      	ldr	r2, [sp, #0]
 800df2a:	2a0e      	cmp	r2, #14
 800df2c:	f300 8144 	bgt.w	800e1b8 <_dtoa_r+0x700>
 800df30:	4b67      	ldr	r3, [pc, #412]	; (800e0d0 <_dtoa_r+0x618>)
 800df32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800df36:	e9d3 8900 	ldrd	r8, r9, [r3]
 800df3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	f280 80d5 	bge.w	800e0ec <_dtoa_r+0x634>
 800df42:	9b03      	ldr	r3, [sp, #12]
 800df44:	2b00      	cmp	r3, #0
 800df46:	f300 80d1 	bgt.w	800e0ec <_dtoa_r+0x634>
 800df4a:	f040 826f 	bne.w	800e42c <_dtoa_r+0x974>
 800df4e:	4b65      	ldr	r3, [pc, #404]	; (800e0e4 <_dtoa_r+0x62c>)
 800df50:	2200      	movs	r2, #0
 800df52:	4640      	mov	r0, r8
 800df54:	4649      	mov	r1, r9
 800df56:	f7f2 fbc7 	bl	80006e8 <__aeabi_dmul>
 800df5a:	4652      	mov	r2, sl
 800df5c:	465b      	mov	r3, fp
 800df5e:	f7f2 fe49 	bl	8000bf4 <__aeabi_dcmpge>
 800df62:	9e03      	ldr	r6, [sp, #12]
 800df64:	4637      	mov	r7, r6
 800df66:	2800      	cmp	r0, #0
 800df68:	f040 8245 	bne.w	800e3f6 <_dtoa_r+0x93e>
 800df6c:	9d01      	ldr	r5, [sp, #4]
 800df6e:	2331      	movs	r3, #49	; 0x31
 800df70:	f805 3b01 	strb.w	r3, [r5], #1
 800df74:	9b00      	ldr	r3, [sp, #0]
 800df76:	3301      	adds	r3, #1
 800df78:	9300      	str	r3, [sp, #0]
 800df7a:	e240      	b.n	800e3fe <_dtoa_r+0x946>
 800df7c:	07f2      	lsls	r2, r6, #31
 800df7e:	d505      	bpl.n	800df8c <_dtoa_r+0x4d4>
 800df80:	e9d7 2300 	ldrd	r2, r3, [r7]
 800df84:	f7f2 fbb0 	bl	80006e8 <__aeabi_dmul>
 800df88:	3501      	adds	r5, #1
 800df8a:	2301      	movs	r3, #1
 800df8c:	1076      	asrs	r6, r6, #1
 800df8e:	3708      	adds	r7, #8
 800df90:	e777      	b.n	800de82 <_dtoa_r+0x3ca>
 800df92:	2502      	movs	r5, #2
 800df94:	e779      	b.n	800de8a <_dtoa_r+0x3d2>
 800df96:	9f00      	ldr	r7, [sp, #0]
 800df98:	9e03      	ldr	r6, [sp, #12]
 800df9a:	e794      	b.n	800dec6 <_dtoa_r+0x40e>
 800df9c:	9901      	ldr	r1, [sp, #4]
 800df9e:	4b4c      	ldr	r3, [pc, #304]	; (800e0d0 <_dtoa_r+0x618>)
 800dfa0:	4431      	add	r1, r6
 800dfa2:	910d      	str	r1, [sp, #52]	; 0x34
 800dfa4:	9908      	ldr	r1, [sp, #32]
 800dfa6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800dfaa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800dfae:	2900      	cmp	r1, #0
 800dfb0:	d043      	beq.n	800e03a <_dtoa_r+0x582>
 800dfb2:	494d      	ldr	r1, [pc, #308]	; (800e0e8 <_dtoa_r+0x630>)
 800dfb4:	2000      	movs	r0, #0
 800dfb6:	f7f2 fcc1 	bl	800093c <__aeabi_ddiv>
 800dfba:	4652      	mov	r2, sl
 800dfbc:	465b      	mov	r3, fp
 800dfbe:	f7f2 f9db 	bl	8000378 <__aeabi_dsub>
 800dfc2:	9d01      	ldr	r5, [sp, #4]
 800dfc4:	4682      	mov	sl, r0
 800dfc6:	468b      	mov	fp, r1
 800dfc8:	4649      	mov	r1, r9
 800dfca:	4640      	mov	r0, r8
 800dfcc:	f7f2 fe3c 	bl	8000c48 <__aeabi_d2iz>
 800dfd0:	4606      	mov	r6, r0
 800dfd2:	f7f2 fb1f 	bl	8000614 <__aeabi_i2d>
 800dfd6:	4602      	mov	r2, r0
 800dfd8:	460b      	mov	r3, r1
 800dfda:	4640      	mov	r0, r8
 800dfdc:	4649      	mov	r1, r9
 800dfde:	f7f2 f9cb 	bl	8000378 <__aeabi_dsub>
 800dfe2:	3630      	adds	r6, #48	; 0x30
 800dfe4:	f805 6b01 	strb.w	r6, [r5], #1
 800dfe8:	4652      	mov	r2, sl
 800dfea:	465b      	mov	r3, fp
 800dfec:	4680      	mov	r8, r0
 800dfee:	4689      	mov	r9, r1
 800dff0:	f7f2 fdec 	bl	8000bcc <__aeabi_dcmplt>
 800dff4:	2800      	cmp	r0, #0
 800dff6:	d163      	bne.n	800e0c0 <_dtoa_r+0x608>
 800dff8:	4642      	mov	r2, r8
 800dffa:	464b      	mov	r3, r9
 800dffc:	4936      	ldr	r1, [pc, #216]	; (800e0d8 <_dtoa_r+0x620>)
 800dffe:	2000      	movs	r0, #0
 800e000:	f7f2 f9ba 	bl	8000378 <__aeabi_dsub>
 800e004:	4652      	mov	r2, sl
 800e006:	465b      	mov	r3, fp
 800e008:	f7f2 fde0 	bl	8000bcc <__aeabi_dcmplt>
 800e00c:	2800      	cmp	r0, #0
 800e00e:	f040 80b5 	bne.w	800e17c <_dtoa_r+0x6c4>
 800e012:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e014:	429d      	cmp	r5, r3
 800e016:	d081      	beq.n	800df1c <_dtoa_r+0x464>
 800e018:	4b30      	ldr	r3, [pc, #192]	; (800e0dc <_dtoa_r+0x624>)
 800e01a:	2200      	movs	r2, #0
 800e01c:	4650      	mov	r0, sl
 800e01e:	4659      	mov	r1, fp
 800e020:	f7f2 fb62 	bl	80006e8 <__aeabi_dmul>
 800e024:	4b2d      	ldr	r3, [pc, #180]	; (800e0dc <_dtoa_r+0x624>)
 800e026:	4682      	mov	sl, r0
 800e028:	468b      	mov	fp, r1
 800e02a:	4640      	mov	r0, r8
 800e02c:	4649      	mov	r1, r9
 800e02e:	2200      	movs	r2, #0
 800e030:	f7f2 fb5a 	bl	80006e8 <__aeabi_dmul>
 800e034:	4680      	mov	r8, r0
 800e036:	4689      	mov	r9, r1
 800e038:	e7c6      	b.n	800dfc8 <_dtoa_r+0x510>
 800e03a:	4650      	mov	r0, sl
 800e03c:	4659      	mov	r1, fp
 800e03e:	f7f2 fb53 	bl	80006e8 <__aeabi_dmul>
 800e042:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e044:	9d01      	ldr	r5, [sp, #4]
 800e046:	930f      	str	r3, [sp, #60]	; 0x3c
 800e048:	4682      	mov	sl, r0
 800e04a:	468b      	mov	fp, r1
 800e04c:	4649      	mov	r1, r9
 800e04e:	4640      	mov	r0, r8
 800e050:	f7f2 fdfa 	bl	8000c48 <__aeabi_d2iz>
 800e054:	4606      	mov	r6, r0
 800e056:	f7f2 fadd 	bl	8000614 <__aeabi_i2d>
 800e05a:	3630      	adds	r6, #48	; 0x30
 800e05c:	4602      	mov	r2, r0
 800e05e:	460b      	mov	r3, r1
 800e060:	4640      	mov	r0, r8
 800e062:	4649      	mov	r1, r9
 800e064:	f7f2 f988 	bl	8000378 <__aeabi_dsub>
 800e068:	f805 6b01 	strb.w	r6, [r5], #1
 800e06c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e06e:	429d      	cmp	r5, r3
 800e070:	4680      	mov	r8, r0
 800e072:	4689      	mov	r9, r1
 800e074:	f04f 0200 	mov.w	r2, #0
 800e078:	d124      	bne.n	800e0c4 <_dtoa_r+0x60c>
 800e07a:	4b1b      	ldr	r3, [pc, #108]	; (800e0e8 <_dtoa_r+0x630>)
 800e07c:	4650      	mov	r0, sl
 800e07e:	4659      	mov	r1, fp
 800e080:	f7f2 f97c 	bl	800037c <__adddf3>
 800e084:	4602      	mov	r2, r0
 800e086:	460b      	mov	r3, r1
 800e088:	4640      	mov	r0, r8
 800e08a:	4649      	mov	r1, r9
 800e08c:	f7f2 fdbc 	bl	8000c08 <__aeabi_dcmpgt>
 800e090:	2800      	cmp	r0, #0
 800e092:	d173      	bne.n	800e17c <_dtoa_r+0x6c4>
 800e094:	4652      	mov	r2, sl
 800e096:	465b      	mov	r3, fp
 800e098:	4913      	ldr	r1, [pc, #76]	; (800e0e8 <_dtoa_r+0x630>)
 800e09a:	2000      	movs	r0, #0
 800e09c:	f7f2 f96c 	bl	8000378 <__aeabi_dsub>
 800e0a0:	4602      	mov	r2, r0
 800e0a2:	460b      	mov	r3, r1
 800e0a4:	4640      	mov	r0, r8
 800e0a6:	4649      	mov	r1, r9
 800e0a8:	f7f2 fd90 	bl	8000bcc <__aeabi_dcmplt>
 800e0ac:	2800      	cmp	r0, #0
 800e0ae:	f43f af35 	beq.w	800df1c <_dtoa_r+0x464>
 800e0b2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e0b4:	1e6b      	subs	r3, r5, #1
 800e0b6:	930f      	str	r3, [sp, #60]	; 0x3c
 800e0b8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e0bc:	2b30      	cmp	r3, #48	; 0x30
 800e0be:	d0f8      	beq.n	800e0b2 <_dtoa_r+0x5fa>
 800e0c0:	9700      	str	r7, [sp, #0]
 800e0c2:	e049      	b.n	800e158 <_dtoa_r+0x6a0>
 800e0c4:	4b05      	ldr	r3, [pc, #20]	; (800e0dc <_dtoa_r+0x624>)
 800e0c6:	f7f2 fb0f 	bl	80006e8 <__aeabi_dmul>
 800e0ca:	4680      	mov	r8, r0
 800e0cc:	4689      	mov	r9, r1
 800e0ce:	e7bd      	b.n	800e04c <_dtoa_r+0x594>
 800e0d0:	080108d8 	.word	0x080108d8
 800e0d4:	080108b0 	.word	0x080108b0
 800e0d8:	3ff00000 	.word	0x3ff00000
 800e0dc:	40240000 	.word	0x40240000
 800e0e0:	401c0000 	.word	0x401c0000
 800e0e4:	40140000 	.word	0x40140000
 800e0e8:	3fe00000 	.word	0x3fe00000
 800e0ec:	9d01      	ldr	r5, [sp, #4]
 800e0ee:	4656      	mov	r6, sl
 800e0f0:	465f      	mov	r7, fp
 800e0f2:	4642      	mov	r2, r8
 800e0f4:	464b      	mov	r3, r9
 800e0f6:	4630      	mov	r0, r6
 800e0f8:	4639      	mov	r1, r7
 800e0fa:	f7f2 fc1f 	bl	800093c <__aeabi_ddiv>
 800e0fe:	f7f2 fda3 	bl	8000c48 <__aeabi_d2iz>
 800e102:	4682      	mov	sl, r0
 800e104:	f7f2 fa86 	bl	8000614 <__aeabi_i2d>
 800e108:	4642      	mov	r2, r8
 800e10a:	464b      	mov	r3, r9
 800e10c:	f7f2 faec 	bl	80006e8 <__aeabi_dmul>
 800e110:	4602      	mov	r2, r0
 800e112:	460b      	mov	r3, r1
 800e114:	4630      	mov	r0, r6
 800e116:	4639      	mov	r1, r7
 800e118:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800e11c:	f7f2 f92c 	bl	8000378 <__aeabi_dsub>
 800e120:	f805 6b01 	strb.w	r6, [r5], #1
 800e124:	9e01      	ldr	r6, [sp, #4]
 800e126:	9f03      	ldr	r7, [sp, #12]
 800e128:	1bae      	subs	r6, r5, r6
 800e12a:	42b7      	cmp	r7, r6
 800e12c:	4602      	mov	r2, r0
 800e12e:	460b      	mov	r3, r1
 800e130:	d135      	bne.n	800e19e <_dtoa_r+0x6e6>
 800e132:	f7f2 f923 	bl	800037c <__adddf3>
 800e136:	4642      	mov	r2, r8
 800e138:	464b      	mov	r3, r9
 800e13a:	4606      	mov	r6, r0
 800e13c:	460f      	mov	r7, r1
 800e13e:	f7f2 fd63 	bl	8000c08 <__aeabi_dcmpgt>
 800e142:	b9d0      	cbnz	r0, 800e17a <_dtoa_r+0x6c2>
 800e144:	4642      	mov	r2, r8
 800e146:	464b      	mov	r3, r9
 800e148:	4630      	mov	r0, r6
 800e14a:	4639      	mov	r1, r7
 800e14c:	f7f2 fd34 	bl	8000bb8 <__aeabi_dcmpeq>
 800e150:	b110      	cbz	r0, 800e158 <_dtoa_r+0x6a0>
 800e152:	f01a 0f01 	tst.w	sl, #1
 800e156:	d110      	bne.n	800e17a <_dtoa_r+0x6c2>
 800e158:	4620      	mov	r0, r4
 800e15a:	ee18 1a10 	vmov	r1, s16
 800e15e:	f000 ff47 	bl	800eff0 <_Bfree>
 800e162:	2300      	movs	r3, #0
 800e164:	9800      	ldr	r0, [sp, #0]
 800e166:	702b      	strb	r3, [r5, #0]
 800e168:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e16a:	3001      	adds	r0, #1
 800e16c:	6018      	str	r0, [r3, #0]
 800e16e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e170:	2b00      	cmp	r3, #0
 800e172:	f43f acf1 	beq.w	800db58 <_dtoa_r+0xa0>
 800e176:	601d      	str	r5, [r3, #0]
 800e178:	e4ee      	b.n	800db58 <_dtoa_r+0xa0>
 800e17a:	9f00      	ldr	r7, [sp, #0]
 800e17c:	462b      	mov	r3, r5
 800e17e:	461d      	mov	r5, r3
 800e180:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e184:	2a39      	cmp	r2, #57	; 0x39
 800e186:	d106      	bne.n	800e196 <_dtoa_r+0x6de>
 800e188:	9a01      	ldr	r2, [sp, #4]
 800e18a:	429a      	cmp	r2, r3
 800e18c:	d1f7      	bne.n	800e17e <_dtoa_r+0x6c6>
 800e18e:	9901      	ldr	r1, [sp, #4]
 800e190:	2230      	movs	r2, #48	; 0x30
 800e192:	3701      	adds	r7, #1
 800e194:	700a      	strb	r2, [r1, #0]
 800e196:	781a      	ldrb	r2, [r3, #0]
 800e198:	3201      	adds	r2, #1
 800e19a:	701a      	strb	r2, [r3, #0]
 800e19c:	e790      	b.n	800e0c0 <_dtoa_r+0x608>
 800e19e:	4ba6      	ldr	r3, [pc, #664]	; (800e438 <_dtoa_r+0x980>)
 800e1a0:	2200      	movs	r2, #0
 800e1a2:	f7f2 faa1 	bl	80006e8 <__aeabi_dmul>
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	4606      	mov	r6, r0
 800e1ac:	460f      	mov	r7, r1
 800e1ae:	f7f2 fd03 	bl	8000bb8 <__aeabi_dcmpeq>
 800e1b2:	2800      	cmp	r0, #0
 800e1b4:	d09d      	beq.n	800e0f2 <_dtoa_r+0x63a>
 800e1b6:	e7cf      	b.n	800e158 <_dtoa_r+0x6a0>
 800e1b8:	9a08      	ldr	r2, [sp, #32]
 800e1ba:	2a00      	cmp	r2, #0
 800e1bc:	f000 80d7 	beq.w	800e36e <_dtoa_r+0x8b6>
 800e1c0:	9a06      	ldr	r2, [sp, #24]
 800e1c2:	2a01      	cmp	r2, #1
 800e1c4:	f300 80ba 	bgt.w	800e33c <_dtoa_r+0x884>
 800e1c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e1ca:	2a00      	cmp	r2, #0
 800e1cc:	f000 80b2 	beq.w	800e334 <_dtoa_r+0x87c>
 800e1d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e1d4:	9e07      	ldr	r6, [sp, #28]
 800e1d6:	9d04      	ldr	r5, [sp, #16]
 800e1d8:	9a04      	ldr	r2, [sp, #16]
 800e1da:	441a      	add	r2, r3
 800e1dc:	9204      	str	r2, [sp, #16]
 800e1de:	9a05      	ldr	r2, [sp, #20]
 800e1e0:	2101      	movs	r1, #1
 800e1e2:	441a      	add	r2, r3
 800e1e4:	4620      	mov	r0, r4
 800e1e6:	9205      	str	r2, [sp, #20]
 800e1e8:	f001 f804 	bl	800f1f4 <__i2b>
 800e1ec:	4607      	mov	r7, r0
 800e1ee:	2d00      	cmp	r5, #0
 800e1f0:	dd0c      	ble.n	800e20c <_dtoa_r+0x754>
 800e1f2:	9b05      	ldr	r3, [sp, #20]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	dd09      	ble.n	800e20c <_dtoa_r+0x754>
 800e1f8:	42ab      	cmp	r3, r5
 800e1fa:	9a04      	ldr	r2, [sp, #16]
 800e1fc:	bfa8      	it	ge
 800e1fe:	462b      	movge	r3, r5
 800e200:	1ad2      	subs	r2, r2, r3
 800e202:	9204      	str	r2, [sp, #16]
 800e204:	9a05      	ldr	r2, [sp, #20]
 800e206:	1aed      	subs	r5, r5, r3
 800e208:	1ad3      	subs	r3, r2, r3
 800e20a:	9305      	str	r3, [sp, #20]
 800e20c:	9b07      	ldr	r3, [sp, #28]
 800e20e:	b31b      	cbz	r3, 800e258 <_dtoa_r+0x7a0>
 800e210:	9b08      	ldr	r3, [sp, #32]
 800e212:	2b00      	cmp	r3, #0
 800e214:	f000 80af 	beq.w	800e376 <_dtoa_r+0x8be>
 800e218:	2e00      	cmp	r6, #0
 800e21a:	dd13      	ble.n	800e244 <_dtoa_r+0x78c>
 800e21c:	4639      	mov	r1, r7
 800e21e:	4632      	mov	r2, r6
 800e220:	4620      	mov	r0, r4
 800e222:	f001 f8a7 	bl	800f374 <__pow5mult>
 800e226:	ee18 2a10 	vmov	r2, s16
 800e22a:	4601      	mov	r1, r0
 800e22c:	4607      	mov	r7, r0
 800e22e:	4620      	mov	r0, r4
 800e230:	f000 fff6 	bl	800f220 <__multiply>
 800e234:	ee18 1a10 	vmov	r1, s16
 800e238:	4680      	mov	r8, r0
 800e23a:	4620      	mov	r0, r4
 800e23c:	f000 fed8 	bl	800eff0 <_Bfree>
 800e240:	ee08 8a10 	vmov	s16, r8
 800e244:	9b07      	ldr	r3, [sp, #28]
 800e246:	1b9a      	subs	r2, r3, r6
 800e248:	d006      	beq.n	800e258 <_dtoa_r+0x7a0>
 800e24a:	ee18 1a10 	vmov	r1, s16
 800e24e:	4620      	mov	r0, r4
 800e250:	f001 f890 	bl	800f374 <__pow5mult>
 800e254:	ee08 0a10 	vmov	s16, r0
 800e258:	2101      	movs	r1, #1
 800e25a:	4620      	mov	r0, r4
 800e25c:	f000 ffca 	bl	800f1f4 <__i2b>
 800e260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e262:	2b00      	cmp	r3, #0
 800e264:	4606      	mov	r6, r0
 800e266:	f340 8088 	ble.w	800e37a <_dtoa_r+0x8c2>
 800e26a:	461a      	mov	r2, r3
 800e26c:	4601      	mov	r1, r0
 800e26e:	4620      	mov	r0, r4
 800e270:	f001 f880 	bl	800f374 <__pow5mult>
 800e274:	9b06      	ldr	r3, [sp, #24]
 800e276:	2b01      	cmp	r3, #1
 800e278:	4606      	mov	r6, r0
 800e27a:	f340 8081 	ble.w	800e380 <_dtoa_r+0x8c8>
 800e27e:	f04f 0800 	mov.w	r8, #0
 800e282:	6933      	ldr	r3, [r6, #16]
 800e284:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e288:	6918      	ldr	r0, [r3, #16]
 800e28a:	f000 ff63 	bl	800f154 <__hi0bits>
 800e28e:	f1c0 0020 	rsb	r0, r0, #32
 800e292:	9b05      	ldr	r3, [sp, #20]
 800e294:	4418      	add	r0, r3
 800e296:	f010 001f 	ands.w	r0, r0, #31
 800e29a:	f000 8092 	beq.w	800e3c2 <_dtoa_r+0x90a>
 800e29e:	f1c0 0320 	rsb	r3, r0, #32
 800e2a2:	2b04      	cmp	r3, #4
 800e2a4:	f340 808a 	ble.w	800e3bc <_dtoa_r+0x904>
 800e2a8:	f1c0 001c 	rsb	r0, r0, #28
 800e2ac:	9b04      	ldr	r3, [sp, #16]
 800e2ae:	4403      	add	r3, r0
 800e2b0:	9304      	str	r3, [sp, #16]
 800e2b2:	9b05      	ldr	r3, [sp, #20]
 800e2b4:	4403      	add	r3, r0
 800e2b6:	4405      	add	r5, r0
 800e2b8:	9305      	str	r3, [sp, #20]
 800e2ba:	9b04      	ldr	r3, [sp, #16]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	dd07      	ble.n	800e2d0 <_dtoa_r+0x818>
 800e2c0:	ee18 1a10 	vmov	r1, s16
 800e2c4:	461a      	mov	r2, r3
 800e2c6:	4620      	mov	r0, r4
 800e2c8:	f001 f8ae 	bl	800f428 <__lshift>
 800e2cc:	ee08 0a10 	vmov	s16, r0
 800e2d0:	9b05      	ldr	r3, [sp, #20]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	dd05      	ble.n	800e2e2 <_dtoa_r+0x82a>
 800e2d6:	4631      	mov	r1, r6
 800e2d8:	461a      	mov	r2, r3
 800e2da:	4620      	mov	r0, r4
 800e2dc:	f001 f8a4 	bl	800f428 <__lshift>
 800e2e0:	4606      	mov	r6, r0
 800e2e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d06e      	beq.n	800e3c6 <_dtoa_r+0x90e>
 800e2e8:	ee18 0a10 	vmov	r0, s16
 800e2ec:	4631      	mov	r1, r6
 800e2ee:	f001 f90b 	bl	800f508 <__mcmp>
 800e2f2:	2800      	cmp	r0, #0
 800e2f4:	da67      	bge.n	800e3c6 <_dtoa_r+0x90e>
 800e2f6:	9b00      	ldr	r3, [sp, #0]
 800e2f8:	3b01      	subs	r3, #1
 800e2fa:	ee18 1a10 	vmov	r1, s16
 800e2fe:	9300      	str	r3, [sp, #0]
 800e300:	220a      	movs	r2, #10
 800e302:	2300      	movs	r3, #0
 800e304:	4620      	mov	r0, r4
 800e306:	f000 fe95 	bl	800f034 <__multadd>
 800e30a:	9b08      	ldr	r3, [sp, #32]
 800e30c:	ee08 0a10 	vmov	s16, r0
 800e310:	2b00      	cmp	r3, #0
 800e312:	f000 81b1 	beq.w	800e678 <_dtoa_r+0xbc0>
 800e316:	2300      	movs	r3, #0
 800e318:	4639      	mov	r1, r7
 800e31a:	220a      	movs	r2, #10
 800e31c:	4620      	mov	r0, r4
 800e31e:	f000 fe89 	bl	800f034 <__multadd>
 800e322:	9b02      	ldr	r3, [sp, #8]
 800e324:	2b00      	cmp	r3, #0
 800e326:	4607      	mov	r7, r0
 800e328:	f300 808e 	bgt.w	800e448 <_dtoa_r+0x990>
 800e32c:	9b06      	ldr	r3, [sp, #24]
 800e32e:	2b02      	cmp	r3, #2
 800e330:	dc51      	bgt.n	800e3d6 <_dtoa_r+0x91e>
 800e332:	e089      	b.n	800e448 <_dtoa_r+0x990>
 800e334:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e336:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e33a:	e74b      	b.n	800e1d4 <_dtoa_r+0x71c>
 800e33c:	9b03      	ldr	r3, [sp, #12]
 800e33e:	1e5e      	subs	r6, r3, #1
 800e340:	9b07      	ldr	r3, [sp, #28]
 800e342:	42b3      	cmp	r3, r6
 800e344:	bfbf      	itttt	lt
 800e346:	9b07      	ldrlt	r3, [sp, #28]
 800e348:	9607      	strlt	r6, [sp, #28]
 800e34a:	1af2      	sublt	r2, r6, r3
 800e34c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800e34e:	bfb6      	itet	lt
 800e350:	189b      	addlt	r3, r3, r2
 800e352:	1b9e      	subge	r6, r3, r6
 800e354:	930a      	strlt	r3, [sp, #40]	; 0x28
 800e356:	9b03      	ldr	r3, [sp, #12]
 800e358:	bfb8      	it	lt
 800e35a:	2600      	movlt	r6, #0
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	bfb7      	itett	lt
 800e360:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800e364:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800e368:	1a9d      	sublt	r5, r3, r2
 800e36a:	2300      	movlt	r3, #0
 800e36c:	e734      	b.n	800e1d8 <_dtoa_r+0x720>
 800e36e:	9e07      	ldr	r6, [sp, #28]
 800e370:	9d04      	ldr	r5, [sp, #16]
 800e372:	9f08      	ldr	r7, [sp, #32]
 800e374:	e73b      	b.n	800e1ee <_dtoa_r+0x736>
 800e376:	9a07      	ldr	r2, [sp, #28]
 800e378:	e767      	b.n	800e24a <_dtoa_r+0x792>
 800e37a:	9b06      	ldr	r3, [sp, #24]
 800e37c:	2b01      	cmp	r3, #1
 800e37e:	dc18      	bgt.n	800e3b2 <_dtoa_r+0x8fa>
 800e380:	f1ba 0f00 	cmp.w	sl, #0
 800e384:	d115      	bne.n	800e3b2 <_dtoa_r+0x8fa>
 800e386:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e38a:	b993      	cbnz	r3, 800e3b2 <_dtoa_r+0x8fa>
 800e38c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e390:	0d1b      	lsrs	r3, r3, #20
 800e392:	051b      	lsls	r3, r3, #20
 800e394:	b183      	cbz	r3, 800e3b8 <_dtoa_r+0x900>
 800e396:	9b04      	ldr	r3, [sp, #16]
 800e398:	3301      	adds	r3, #1
 800e39a:	9304      	str	r3, [sp, #16]
 800e39c:	9b05      	ldr	r3, [sp, #20]
 800e39e:	3301      	adds	r3, #1
 800e3a0:	9305      	str	r3, [sp, #20]
 800e3a2:	f04f 0801 	mov.w	r8, #1
 800e3a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	f47f af6a 	bne.w	800e282 <_dtoa_r+0x7ca>
 800e3ae:	2001      	movs	r0, #1
 800e3b0:	e76f      	b.n	800e292 <_dtoa_r+0x7da>
 800e3b2:	f04f 0800 	mov.w	r8, #0
 800e3b6:	e7f6      	b.n	800e3a6 <_dtoa_r+0x8ee>
 800e3b8:	4698      	mov	r8, r3
 800e3ba:	e7f4      	b.n	800e3a6 <_dtoa_r+0x8ee>
 800e3bc:	f43f af7d 	beq.w	800e2ba <_dtoa_r+0x802>
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	301c      	adds	r0, #28
 800e3c4:	e772      	b.n	800e2ac <_dtoa_r+0x7f4>
 800e3c6:	9b03      	ldr	r3, [sp, #12]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	dc37      	bgt.n	800e43c <_dtoa_r+0x984>
 800e3cc:	9b06      	ldr	r3, [sp, #24]
 800e3ce:	2b02      	cmp	r3, #2
 800e3d0:	dd34      	ble.n	800e43c <_dtoa_r+0x984>
 800e3d2:	9b03      	ldr	r3, [sp, #12]
 800e3d4:	9302      	str	r3, [sp, #8]
 800e3d6:	9b02      	ldr	r3, [sp, #8]
 800e3d8:	b96b      	cbnz	r3, 800e3f6 <_dtoa_r+0x93e>
 800e3da:	4631      	mov	r1, r6
 800e3dc:	2205      	movs	r2, #5
 800e3de:	4620      	mov	r0, r4
 800e3e0:	f000 fe28 	bl	800f034 <__multadd>
 800e3e4:	4601      	mov	r1, r0
 800e3e6:	4606      	mov	r6, r0
 800e3e8:	ee18 0a10 	vmov	r0, s16
 800e3ec:	f001 f88c 	bl	800f508 <__mcmp>
 800e3f0:	2800      	cmp	r0, #0
 800e3f2:	f73f adbb 	bgt.w	800df6c <_dtoa_r+0x4b4>
 800e3f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3f8:	9d01      	ldr	r5, [sp, #4]
 800e3fa:	43db      	mvns	r3, r3
 800e3fc:	9300      	str	r3, [sp, #0]
 800e3fe:	f04f 0800 	mov.w	r8, #0
 800e402:	4631      	mov	r1, r6
 800e404:	4620      	mov	r0, r4
 800e406:	f000 fdf3 	bl	800eff0 <_Bfree>
 800e40a:	2f00      	cmp	r7, #0
 800e40c:	f43f aea4 	beq.w	800e158 <_dtoa_r+0x6a0>
 800e410:	f1b8 0f00 	cmp.w	r8, #0
 800e414:	d005      	beq.n	800e422 <_dtoa_r+0x96a>
 800e416:	45b8      	cmp	r8, r7
 800e418:	d003      	beq.n	800e422 <_dtoa_r+0x96a>
 800e41a:	4641      	mov	r1, r8
 800e41c:	4620      	mov	r0, r4
 800e41e:	f000 fde7 	bl	800eff0 <_Bfree>
 800e422:	4639      	mov	r1, r7
 800e424:	4620      	mov	r0, r4
 800e426:	f000 fde3 	bl	800eff0 <_Bfree>
 800e42a:	e695      	b.n	800e158 <_dtoa_r+0x6a0>
 800e42c:	2600      	movs	r6, #0
 800e42e:	4637      	mov	r7, r6
 800e430:	e7e1      	b.n	800e3f6 <_dtoa_r+0x93e>
 800e432:	9700      	str	r7, [sp, #0]
 800e434:	4637      	mov	r7, r6
 800e436:	e599      	b.n	800df6c <_dtoa_r+0x4b4>
 800e438:	40240000 	.word	0x40240000
 800e43c:	9b08      	ldr	r3, [sp, #32]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	f000 80ca 	beq.w	800e5d8 <_dtoa_r+0xb20>
 800e444:	9b03      	ldr	r3, [sp, #12]
 800e446:	9302      	str	r3, [sp, #8]
 800e448:	2d00      	cmp	r5, #0
 800e44a:	dd05      	ble.n	800e458 <_dtoa_r+0x9a0>
 800e44c:	4639      	mov	r1, r7
 800e44e:	462a      	mov	r2, r5
 800e450:	4620      	mov	r0, r4
 800e452:	f000 ffe9 	bl	800f428 <__lshift>
 800e456:	4607      	mov	r7, r0
 800e458:	f1b8 0f00 	cmp.w	r8, #0
 800e45c:	d05b      	beq.n	800e516 <_dtoa_r+0xa5e>
 800e45e:	6879      	ldr	r1, [r7, #4]
 800e460:	4620      	mov	r0, r4
 800e462:	f000 fd85 	bl	800ef70 <_Balloc>
 800e466:	4605      	mov	r5, r0
 800e468:	b928      	cbnz	r0, 800e476 <_dtoa_r+0x9be>
 800e46a:	4b87      	ldr	r3, [pc, #540]	; (800e688 <_dtoa_r+0xbd0>)
 800e46c:	4602      	mov	r2, r0
 800e46e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e472:	f7ff bb3b 	b.w	800daec <_dtoa_r+0x34>
 800e476:	693a      	ldr	r2, [r7, #16]
 800e478:	3202      	adds	r2, #2
 800e47a:	0092      	lsls	r2, r2, #2
 800e47c:	f107 010c 	add.w	r1, r7, #12
 800e480:	300c      	adds	r0, #12
 800e482:	f7fd fbba 	bl	800bbfa <memcpy>
 800e486:	2201      	movs	r2, #1
 800e488:	4629      	mov	r1, r5
 800e48a:	4620      	mov	r0, r4
 800e48c:	f000 ffcc 	bl	800f428 <__lshift>
 800e490:	9b01      	ldr	r3, [sp, #4]
 800e492:	f103 0901 	add.w	r9, r3, #1
 800e496:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800e49a:	4413      	add	r3, r2
 800e49c:	9305      	str	r3, [sp, #20]
 800e49e:	f00a 0301 	and.w	r3, sl, #1
 800e4a2:	46b8      	mov	r8, r7
 800e4a4:	9304      	str	r3, [sp, #16]
 800e4a6:	4607      	mov	r7, r0
 800e4a8:	4631      	mov	r1, r6
 800e4aa:	ee18 0a10 	vmov	r0, s16
 800e4ae:	f7ff fa77 	bl	800d9a0 <quorem>
 800e4b2:	4641      	mov	r1, r8
 800e4b4:	9002      	str	r0, [sp, #8]
 800e4b6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e4ba:	ee18 0a10 	vmov	r0, s16
 800e4be:	f001 f823 	bl	800f508 <__mcmp>
 800e4c2:	463a      	mov	r2, r7
 800e4c4:	9003      	str	r0, [sp, #12]
 800e4c6:	4631      	mov	r1, r6
 800e4c8:	4620      	mov	r0, r4
 800e4ca:	f001 f839 	bl	800f540 <__mdiff>
 800e4ce:	68c2      	ldr	r2, [r0, #12]
 800e4d0:	f109 3bff 	add.w	fp, r9, #4294967295
 800e4d4:	4605      	mov	r5, r0
 800e4d6:	bb02      	cbnz	r2, 800e51a <_dtoa_r+0xa62>
 800e4d8:	4601      	mov	r1, r0
 800e4da:	ee18 0a10 	vmov	r0, s16
 800e4de:	f001 f813 	bl	800f508 <__mcmp>
 800e4e2:	4602      	mov	r2, r0
 800e4e4:	4629      	mov	r1, r5
 800e4e6:	4620      	mov	r0, r4
 800e4e8:	9207      	str	r2, [sp, #28]
 800e4ea:	f000 fd81 	bl	800eff0 <_Bfree>
 800e4ee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800e4f2:	ea43 0102 	orr.w	r1, r3, r2
 800e4f6:	9b04      	ldr	r3, [sp, #16]
 800e4f8:	430b      	orrs	r3, r1
 800e4fa:	464d      	mov	r5, r9
 800e4fc:	d10f      	bne.n	800e51e <_dtoa_r+0xa66>
 800e4fe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e502:	d02a      	beq.n	800e55a <_dtoa_r+0xaa2>
 800e504:	9b03      	ldr	r3, [sp, #12]
 800e506:	2b00      	cmp	r3, #0
 800e508:	dd02      	ble.n	800e510 <_dtoa_r+0xa58>
 800e50a:	9b02      	ldr	r3, [sp, #8]
 800e50c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800e510:	f88b a000 	strb.w	sl, [fp]
 800e514:	e775      	b.n	800e402 <_dtoa_r+0x94a>
 800e516:	4638      	mov	r0, r7
 800e518:	e7ba      	b.n	800e490 <_dtoa_r+0x9d8>
 800e51a:	2201      	movs	r2, #1
 800e51c:	e7e2      	b.n	800e4e4 <_dtoa_r+0xa2c>
 800e51e:	9b03      	ldr	r3, [sp, #12]
 800e520:	2b00      	cmp	r3, #0
 800e522:	db04      	blt.n	800e52e <_dtoa_r+0xa76>
 800e524:	9906      	ldr	r1, [sp, #24]
 800e526:	430b      	orrs	r3, r1
 800e528:	9904      	ldr	r1, [sp, #16]
 800e52a:	430b      	orrs	r3, r1
 800e52c:	d122      	bne.n	800e574 <_dtoa_r+0xabc>
 800e52e:	2a00      	cmp	r2, #0
 800e530:	ddee      	ble.n	800e510 <_dtoa_r+0xa58>
 800e532:	ee18 1a10 	vmov	r1, s16
 800e536:	2201      	movs	r2, #1
 800e538:	4620      	mov	r0, r4
 800e53a:	f000 ff75 	bl	800f428 <__lshift>
 800e53e:	4631      	mov	r1, r6
 800e540:	ee08 0a10 	vmov	s16, r0
 800e544:	f000 ffe0 	bl	800f508 <__mcmp>
 800e548:	2800      	cmp	r0, #0
 800e54a:	dc03      	bgt.n	800e554 <_dtoa_r+0xa9c>
 800e54c:	d1e0      	bne.n	800e510 <_dtoa_r+0xa58>
 800e54e:	f01a 0f01 	tst.w	sl, #1
 800e552:	d0dd      	beq.n	800e510 <_dtoa_r+0xa58>
 800e554:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e558:	d1d7      	bne.n	800e50a <_dtoa_r+0xa52>
 800e55a:	2339      	movs	r3, #57	; 0x39
 800e55c:	f88b 3000 	strb.w	r3, [fp]
 800e560:	462b      	mov	r3, r5
 800e562:	461d      	mov	r5, r3
 800e564:	3b01      	subs	r3, #1
 800e566:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e56a:	2a39      	cmp	r2, #57	; 0x39
 800e56c:	d071      	beq.n	800e652 <_dtoa_r+0xb9a>
 800e56e:	3201      	adds	r2, #1
 800e570:	701a      	strb	r2, [r3, #0]
 800e572:	e746      	b.n	800e402 <_dtoa_r+0x94a>
 800e574:	2a00      	cmp	r2, #0
 800e576:	dd07      	ble.n	800e588 <_dtoa_r+0xad0>
 800e578:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e57c:	d0ed      	beq.n	800e55a <_dtoa_r+0xaa2>
 800e57e:	f10a 0301 	add.w	r3, sl, #1
 800e582:	f88b 3000 	strb.w	r3, [fp]
 800e586:	e73c      	b.n	800e402 <_dtoa_r+0x94a>
 800e588:	9b05      	ldr	r3, [sp, #20]
 800e58a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800e58e:	4599      	cmp	r9, r3
 800e590:	d047      	beq.n	800e622 <_dtoa_r+0xb6a>
 800e592:	ee18 1a10 	vmov	r1, s16
 800e596:	2300      	movs	r3, #0
 800e598:	220a      	movs	r2, #10
 800e59a:	4620      	mov	r0, r4
 800e59c:	f000 fd4a 	bl	800f034 <__multadd>
 800e5a0:	45b8      	cmp	r8, r7
 800e5a2:	ee08 0a10 	vmov	s16, r0
 800e5a6:	f04f 0300 	mov.w	r3, #0
 800e5aa:	f04f 020a 	mov.w	r2, #10
 800e5ae:	4641      	mov	r1, r8
 800e5b0:	4620      	mov	r0, r4
 800e5b2:	d106      	bne.n	800e5c2 <_dtoa_r+0xb0a>
 800e5b4:	f000 fd3e 	bl	800f034 <__multadd>
 800e5b8:	4680      	mov	r8, r0
 800e5ba:	4607      	mov	r7, r0
 800e5bc:	f109 0901 	add.w	r9, r9, #1
 800e5c0:	e772      	b.n	800e4a8 <_dtoa_r+0x9f0>
 800e5c2:	f000 fd37 	bl	800f034 <__multadd>
 800e5c6:	4639      	mov	r1, r7
 800e5c8:	4680      	mov	r8, r0
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	220a      	movs	r2, #10
 800e5ce:	4620      	mov	r0, r4
 800e5d0:	f000 fd30 	bl	800f034 <__multadd>
 800e5d4:	4607      	mov	r7, r0
 800e5d6:	e7f1      	b.n	800e5bc <_dtoa_r+0xb04>
 800e5d8:	9b03      	ldr	r3, [sp, #12]
 800e5da:	9302      	str	r3, [sp, #8]
 800e5dc:	9d01      	ldr	r5, [sp, #4]
 800e5de:	ee18 0a10 	vmov	r0, s16
 800e5e2:	4631      	mov	r1, r6
 800e5e4:	f7ff f9dc 	bl	800d9a0 <quorem>
 800e5e8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e5ec:	9b01      	ldr	r3, [sp, #4]
 800e5ee:	f805 ab01 	strb.w	sl, [r5], #1
 800e5f2:	1aea      	subs	r2, r5, r3
 800e5f4:	9b02      	ldr	r3, [sp, #8]
 800e5f6:	4293      	cmp	r3, r2
 800e5f8:	dd09      	ble.n	800e60e <_dtoa_r+0xb56>
 800e5fa:	ee18 1a10 	vmov	r1, s16
 800e5fe:	2300      	movs	r3, #0
 800e600:	220a      	movs	r2, #10
 800e602:	4620      	mov	r0, r4
 800e604:	f000 fd16 	bl	800f034 <__multadd>
 800e608:	ee08 0a10 	vmov	s16, r0
 800e60c:	e7e7      	b.n	800e5de <_dtoa_r+0xb26>
 800e60e:	9b02      	ldr	r3, [sp, #8]
 800e610:	2b00      	cmp	r3, #0
 800e612:	bfc8      	it	gt
 800e614:	461d      	movgt	r5, r3
 800e616:	9b01      	ldr	r3, [sp, #4]
 800e618:	bfd8      	it	le
 800e61a:	2501      	movle	r5, #1
 800e61c:	441d      	add	r5, r3
 800e61e:	f04f 0800 	mov.w	r8, #0
 800e622:	ee18 1a10 	vmov	r1, s16
 800e626:	2201      	movs	r2, #1
 800e628:	4620      	mov	r0, r4
 800e62a:	f000 fefd 	bl	800f428 <__lshift>
 800e62e:	4631      	mov	r1, r6
 800e630:	ee08 0a10 	vmov	s16, r0
 800e634:	f000 ff68 	bl	800f508 <__mcmp>
 800e638:	2800      	cmp	r0, #0
 800e63a:	dc91      	bgt.n	800e560 <_dtoa_r+0xaa8>
 800e63c:	d102      	bne.n	800e644 <_dtoa_r+0xb8c>
 800e63e:	f01a 0f01 	tst.w	sl, #1
 800e642:	d18d      	bne.n	800e560 <_dtoa_r+0xaa8>
 800e644:	462b      	mov	r3, r5
 800e646:	461d      	mov	r5, r3
 800e648:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e64c:	2a30      	cmp	r2, #48	; 0x30
 800e64e:	d0fa      	beq.n	800e646 <_dtoa_r+0xb8e>
 800e650:	e6d7      	b.n	800e402 <_dtoa_r+0x94a>
 800e652:	9a01      	ldr	r2, [sp, #4]
 800e654:	429a      	cmp	r2, r3
 800e656:	d184      	bne.n	800e562 <_dtoa_r+0xaaa>
 800e658:	9b00      	ldr	r3, [sp, #0]
 800e65a:	3301      	adds	r3, #1
 800e65c:	9300      	str	r3, [sp, #0]
 800e65e:	2331      	movs	r3, #49	; 0x31
 800e660:	7013      	strb	r3, [r2, #0]
 800e662:	e6ce      	b.n	800e402 <_dtoa_r+0x94a>
 800e664:	4b09      	ldr	r3, [pc, #36]	; (800e68c <_dtoa_r+0xbd4>)
 800e666:	f7ff ba95 	b.w	800db94 <_dtoa_r+0xdc>
 800e66a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	f47f aa6e 	bne.w	800db4e <_dtoa_r+0x96>
 800e672:	4b07      	ldr	r3, [pc, #28]	; (800e690 <_dtoa_r+0xbd8>)
 800e674:	f7ff ba8e 	b.w	800db94 <_dtoa_r+0xdc>
 800e678:	9b02      	ldr	r3, [sp, #8]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	dcae      	bgt.n	800e5dc <_dtoa_r+0xb24>
 800e67e:	9b06      	ldr	r3, [sp, #24]
 800e680:	2b02      	cmp	r3, #2
 800e682:	f73f aea8 	bgt.w	800e3d6 <_dtoa_r+0x91e>
 800e686:	e7a9      	b.n	800e5dc <_dtoa_r+0xb24>
 800e688:	080107c8 	.word	0x080107c8
 800e68c:	080105cc 	.word	0x080105cc
 800e690:	08010749 	.word	0x08010749

0800e694 <__sflush_r>:
 800e694:	898a      	ldrh	r2, [r1, #12]
 800e696:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e69a:	4605      	mov	r5, r0
 800e69c:	0710      	lsls	r0, r2, #28
 800e69e:	460c      	mov	r4, r1
 800e6a0:	d458      	bmi.n	800e754 <__sflush_r+0xc0>
 800e6a2:	684b      	ldr	r3, [r1, #4]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	dc05      	bgt.n	800e6b4 <__sflush_r+0x20>
 800e6a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	dc02      	bgt.n	800e6b4 <__sflush_r+0x20>
 800e6ae:	2000      	movs	r0, #0
 800e6b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e6b6:	2e00      	cmp	r6, #0
 800e6b8:	d0f9      	beq.n	800e6ae <__sflush_r+0x1a>
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e6c0:	682f      	ldr	r7, [r5, #0]
 800e6c2:	602b      	str	r3, [r5, #0]
 800e6c4:	d032      	beq.n	800e72c <__sflush_r+0x98>
 800e6c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e6c8:	89a3      	ldrh	r3, [r4, #12]
 800e6ca:	075a      	lsls	r2, r3, #29
 800e6cc:	d505      	bpl.n	800e6da <__sflush_r+0x46>
 800e6ce:	6863      	ldr	r3, [r4, #4]
 800e6d0:	1ac0      	subs	r0, r0, r3
 800e6d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e6d4:	b10b      	cbz	r3, 800e6da <__sflush_r+0x46>
 800e6d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e6d8:	1ac0      	subs	r0, r0, r3
 800e6da:	2300      	movs	r3, #0
 800e6dc:	4602      	mov	r2, r0
 800e6de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e6e0:	6a21      	ldr	r1, [r4, #32]
 800e6e2:	4628      	mov	r0, r5
 800e6e4:	47b0      	blx	r6
 800e6e6:	1c43      	adds	r3, r0, #1
 800e6e8:	89a3      	ldrh	r3, [r4, #12]
 800e6ea:	d106      	bne.n	800e6fa <__sflush_r+0x66>
 800e6ec:	6829      	ldr	r1, [r5, #0]
 800e6ee:	291d      	cmp	r1, #29
 800e6f0:	d82c      	bhi.n	800e74c <__sflush_r+0xb8>
 800e6f2:	4a2a      	ldr	r2, [pc, #168]	; (800e79c <__sflush_r+0x108>)
 800e6f4:	40ca      	lsrs	r2, r1
 800e6f6:	07d6      	lsls	r6, r2, #31
 800e6f8:	d528      	bpl.n	800e74c <__sflush_r+0xb8>
 800e6fa:	2200      	movs	r2, #0
 800e6fc:	6062      	str	r2, [r4, #4]
 800e6fe:	04d9      	lsls	r1, r3, #19
 800e700:	6922      	ldr	r2, [r4, #16]
 800e702:	6022      	str	r2, [r4, #0]
 800e704:	d504      	bpl.n	800e710 <__sflush_r+0x7c>
 800e706:	1c42      	adds	r2, r0, #1
 800e708:	d101      	bne.n	800e70e <__sflush_r+0x7a>
 800e70a:	682b      	ldr	r3, [r5, #0]
 800e70c:	b903      	cbnz	r3, 800e710 <__sflush_r+0x7c>
 800e70e:	6560      	str	r0, [r4, #84]	; 0x54
 800e710:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e712:	602f      	str	r7, [r5, #0]
 800e714:	2900      	cmp	r1, #0
 800e716:	d0ca      	beq.n	800e6ae <__sflush_r+0x1a>
 800e718:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e71c:	4299      	cmp	r1, r3
 800e71e:	d002      	beq.n	800e726 <__sflush_r+0x92>
 800e720:	4628      	mov	r0, r5
 800e722:	f001 f8fd 	bl	800f920 <_free_r>
 800e726:	2000      	movs	r0, #0
 800e728:	6360      	str	r0, [r4, #52]	; 0x34
 800e72a:	e7c1      	b.n	800e6b0 <__sflush_r+0x1c>
 800e72c:	6a21      	ldr	r1, [r4, #32]
 800e72e:	2301      	movs	r3, #1
 800e730:	4628      	mov	r0, r5
 800e732:	47b0      	blx	r6
 800e734:	1c41      	adds	r1, r0, #1
 800e736:	d1c7      	bne.n	800e6c8 <__sflush_r+0x34>
 800e738:	682b      	ldr	r3, [r5, #0]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d0c4      	beq.n	800e6c8 <__sflush_r+0x34>
 800e73e:	2b1d      	cmp	r3, #29
 800e740:	d001      	beq.n	800e746 <__sflush_r+0xb2>
 800e742:	2b16      	cmp	r3, #22
 800e744:	d101      	bne.n	800e74a <__sflush_r+0xb6>
 800e746:	602f      	str	r7, [r5, #0]
 800e748:	e7b1      	b.n	800e6ae <__sflush_r+0x1a>
 800e74a:	89a3      	ldrh	r3, [r4, #12]
 800e74c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e750:	81a3      	strh	r3, [r4, #12]
 800e752:	e7ad      	b.n	800e6b0 <__sflush_r+0x1c>
 800e754:	690f      	ldr	r7, [r1, #16]
 800e756:	2f00      	cmp	r7, #0
 800e758:	d0a9      	beq.n	800e6ae <__sflush_r+0x1a>
 800e75a:	0793      	lsls	r3, r2, #30
 800e75c:	680e      	ldr	r6, [r1, #0]
 800e75e:	bf08      	it	eq
 800e760:	694b      	ldreq	r3, [r1, #20]
 800e762:	600f      	str	r7, [r1, #0]
 800e764:	bf18      	it	ne
 800e766:	2300      	movne	r3, #0
 800e768:	eba6 0807 	sub.w	r8, r6, r7
 800e76c:	608b      	str	r3, [r1, #8]
 800e76e:	f1b8 0f00 	cmp.w	r8, #0
 800e772:	dd9c      	ble.n	800e6ae <__sflush_r+0x1a>
 800e774:	6a21      	ldr	r1, [r4, #32]
 800e776:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e778:	4643      	mov	r3, r8
 800e77a:	463a      	mov	r2, r7
 800e77c:	4628      	mov	r0, r5
 800e77e:	47b0      	blx	r6
 800e780:	2800      	cmp	r0, #0
 800e782:	dc06      	bgt.n	800e792 <__sflush_r+0xfe>
 800e784:	89a3      	ldrh	r3, [r4, #12]
 800e786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e78a:	81a3      	strh	r3, [r4, #12]
 800e78c:	f04f 30ff 	mov.w	r0, #4294967295
 800e790:	e78e      	b.n	800e6b0 <__sflush_r+0x1c>
 800e792:	4407      	add	r7, r0
 800e794:	eba8 0800 	sub.w	r8, r8, r0
 800e798:	e7e9      	b.n	800e76e <__sflush_r+0xda>
 800e79a:	bf00      	nop
 800e79c:	20400001 	.word	0x20400001

0800e7a0 <_fflush_r>:
 800e7a0:	b538      	push	{r3, r4, r5, lr}
 800e7a2:	690b      	ldr	r3, [r1, #16]
 800e7a4:	4605      	mov	r5, r0
 800e7a6:	460c      	mov	r4, r1
 800e7a8:	b913      	cbnz	r3, 800e7b0 <_fflush_r+0x10>
 800e7aa:	2500      	movs	r5, #0
 800e7ac:	4628      	mov	r0, r5
 800e7ae:	bd38      	pop	{r3, r4, r5, pc}
 800e7b0:	b118      	cbz	r0, 800e7ba <_fflush_r+0x1a>
 800e7b2:	6983      	ldr	r3, [r0, #24]
 800e7b4:	b90b      	cbnz	r3, 800e7ba <_fflush_r+0x1a>
 800e7b6:	f7fd f94b 	bl	800ba50 <__sinit>
 800e7ba:	4b14      	ldr	r3, [pc, #80]	; (800e80c <_fflush_r+0x6c>)
 800e7bc:	429c      	cmp	r4, r3
 800e7be:	d11b      	bne.n	800e7f8 <_fflush_r+0x58>
 800e7c0:	686c      	ldr	r4, [r5, #4]
 800e7c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d0ef      	beq.n	800e7aa <_fflush_r+0xa>
 800e7ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e7cc:	07d0      	lsls	r0, r2, #31
 800e7ce:	d404      	bmi.n	800e7da <_fflush_r+0x3a>
 800e7d0:	0599      	lsls	r1, r3, #22
 800e7d2:	d402      	bmi.n	800e7da <_fflush_r+0x3a>
 800e7d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e7d6:	f7fd f9fe 	bl	800bbd6 <__retarget_lock_acquire_recursive>
 800e7da:	4628      	mov	r0, r5
 800e7dc:	4621      	mov	r1, r4
 800e7de:	f7ff ff59 	bl	800e694 <__sflush_r>
 800e7e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e7e4:	07da      	lsls	r2, r3, #31
 800e7e6:	4605      	mov	r5, r0
 800e7e8:	d4e0      	bmi.n	800e7ac <_fflush_r+0xc>
 800e7ea:	89a3      	ldrh	r3, [r4, #12]
 800e7ec:	059b      	lsls	r3, r3, #22
 800e7ee:	d4dd      	bmi.n	800e7ac <_fflush_r+0xc>
 800e7f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e7f2:	f7fd f9f1 	bl	800bbd8 <__retarget_lock_release_recursive>
 800e7f6:	e7d9      	b.n	800e7ac <_fflush_r+0xc>
 800e7f8:	4b05      	ldr	r3, [pc, #20]	; (800e810 <_fflush_r+0x70>)
 800e7fa:	429c      	cmp	r4, r3
 800e7fc:	d101      	bne.n	800e802 <_fflush_r+0x62>
 800e7fe:	68ac      	ldr	r4, [r5, #8]
 800e800:	e7df      	b.n	800e7c2 <_fflush_r+0x22>
 800e802:	4b04      	ldr	r3, [pc, #16]	; (800e814 <_fflush_r+0x74>)
 800e804:	429c      	cmp	r4, r3
 800e806:	bf08      	it	eq
 800e808:	68ec      	ldreq	r4, [r5, #12]
 800e80a:	e7da      	b.n	800e7c2 <_fflush_r+0x22>
 800e80c:	08010578 	.word	0x08010578
 800e810:	08010598 	.word	0x08010598
 800e814:	08010558 	.word	0x08010558

0800e818 <rshift>:
 800e818:	6903      	ldr	r3, [r0, #16]
 800e81a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e81e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e822:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e826:	f100 0414 	add.w	r4, r0, #20
 800e82a:	dd45      	ble.n	800e8b8 <rshift+0xa0>
 800e82c:	f011 011f 	ands.w	r1, r1, #31
 800e830:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e834:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e838:	d10c      	bne.n	800e854 <rshift+0x3c>
 800e83a:	f100 0710 	add.w	r7, r0, #16
 800e83e:	4629      	mov	r1, r5
 800e840:	42b1      	cmp	r1, r6
 800e842:	d334      	bcc.n	800e8ae <rshift+0x96>
 800e844:	1a9b      	subs	r3, r3, r2
 800e846:	009b      	lsls	r3, r3, #2
 800e848:	1eea      	subs	r2, r5, #3
 800e84a:	4296      	cmp	r6, r2
 800e84c:	bf38      	it	cc
 800e84e:	2300      	movcc	r3, #0
 800e850:	4423      	add	r3, r4
 800e852:	e015      	b.n	800e880 <rshift+0x68>
 800e854:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e858:	f1c1 0820 	rsb	r8, r1, #32
 800e85c:	40cf      	lsrs	r7, r1
 800e85e:	f105 0e04 	add.w	lr, r5, #4
 800e862:	46a1      	mov	r9, r4
 800e864:	4576      	cmp	r6, lr
 800e866:	46f4      	mov	ip, lr
 800e868:	d815      	bhi.n	800e896 <rshift+0x7e>
 800e86a:	1a9a      	subs	r2, r3, r2
 800e86c:	0092      	lsls	r2, r2, #2
 800e86e:	3a04      	subs	r2, #4
 800e870:	3501      	adds	r5, #1
 800e872:	42ae      	cmp	r6, r5
 800e874:	bf38      	it	cc
 800e876:	2200      	movcc	r2, #0
 800e878:	18a3      	adds	r3, r4, r2
 800e87a:	50a7      	str	r7, [r4, r2]
 800e87c:	b107      	cbz	r7, 800e880 <rshift+0x68>
 800e87e:	3304      	adds	r3, #4
 800e880:	1b1a      	subs	r2, r3, r4
 800e882:	42a3      	cmp	r3, r4
 800e884:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e888:	bf08      	it	eq
 800e88a:	2300      	moveq	r3, #0
 800e88c:	6102      	str	r2, [r0, #16]
 800e88e:	bf08      	it	eq
 800e890:	6143      	streq	r3, [r0, #20]
 800e892:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e896:	f8dc c000 	ldr.w	ip, [ip]
 800e89a:	fa0c fc08 	lsl.w	ip, ip, r8
 800e89e:	ea4c 0707 	orr.w	r7, ip, r7
 800e8a2:	f849 7b04 	str.w	r7, [r9], #4
 800e8a6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e8aa:	40cf      	lsrs	r7, r1
 800e8ac:	e7da      	b.n	800e864 <rshift+0x4c>
 800e8ae:	f851 cb04 	ldr.w	ip, [r1], #4
 800e8b2:	f847 cf04 	str.w	ip, [r7, #4]!
 800e8b6:	e7c3      	b.n	800e840 <rshift+0x28>
 800e8b8:	4623      	mov	r3, r4
 800e8ba:	e7e1      	b.n	800e880 <rshift+0x68>

0800e8bc <__hexdig_fun>:
 800e8bc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e8c0:	2b09      	cmp	r3, #9
 800e8c2:	d802      	bhi.n	800e8ca <__hexdig_fun+0xe>
 800e8c4:	3820      	subs	r0, #32
 800e8c6:	b2c0      	uxtb	r0, r0
 800e8c8:	4770      	bx	lr
 800e8ca:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e8ce:	2b05      	cmp	r3, #5
 800e8d0:	d801      	bhi.n	800e8d6 <__hexdig_fun+0x1a>
 800e8d2:	3847      	subs	r0, #71	; 0x47
 800e8d4:	e7f7      	b.n	800e8c6 <__hexdig_fun+0xa>
 800e8d6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e8da:	2b05      	cmp	r3, #5
 800e8dc:	d801      	bhi.n	800e8e2 <__hexdig_fun+0x26>
 800e8de:	3827      	subs	r0, #39	; 0x27
 800e8e0:	e7f1      	b.n	800e8c6 <__hexdig_fun+0xa>
 800e8e2:	2000      	movs	r0, #0
 800e8e4:	4770      	bx	lr
	...

0800e8e8 <__gethex>:
 800e8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8ec:	ed2d 8b02 	vpush	{d8}
 800e8f0:	b089      	sub	sp, #36	; 0x24
 800e8f2:	ee08 0a10 	vmov	s16, r0
 800e8f6:	9304      	str	r3, [sp, #16]
 800e8f8:	4bb4      	ldr	r3, [pc, #720]	; (800ebcc <__gethex+0x2e4>)
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	9301      	str	r3, [sp, #4]
 800e8fe:	4618      	mov	r0, r3
 800e900:	468b      	mov	fp, r1
 800e902:	4690      	mov	r8, r2
 800e904:	f7f1 fcd6 	bl	80002b4 <strlen>
 800e908:	9b01      	ldr	r3, [sp, #4]
 800e90a:	f8db 2000 	ldr.w	r2, [fp]
 800e90e:	4403      	add	r3, r0
 800e910:	4682      	mov	sl, r0
 800e912:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e916:	9305      	str	r3, [sp, #20]
 800e918:	1c93      	adds	r3, r2, #2
 800e91a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e91e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e922:	32fe      	adds	r2, #254	; 0xfe
 800e924:	18d1      	adds	r1, r2, r3
 800e926:	461f      	mov	r7, r3
 800e928:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e92c:	9100      	str	r1, [sp, #0]
 800e92e:	2830      	cmp	r0, #48	; 0x30
 800e930:	d0f8      	beq.n	800e924 <__gethex+0x3c>
 800e932:	f7ff ffc3 	bl	800e8bc <__hexdig_fun>
 800e936:	4604      	mov	r4, r0
 800e938:	2800      	cmp	r0, #0
 800e93a:	d13a      	bne.n	800e9b2 <__gethex+0xca>
 800e93c:	9901      	ldr	r1, [sp, #4]
 800e93e:	4652      	mov	r2, sl
 800e940:	4638      	mov	r0, r7
 800e942:	f001 f9b1 	bl	800fca8 <strncmp>
 800e946:	4605      	mov	r5, r0
 800e948:	2800      	cmp	r0, #0
 800e94a:	d168      	bne.n	800ea1e <__gethex+0x136>
 800e94c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800e950:	eb07 060a 	add.w	r6, r7, sl
 800e954:	f7ff ffb2 	bl	800e8bc <__hexdig_fun>
 800e958:	2800      	cmp	r0, #0
 800e95a:	d062      	beq.n	800ea22 <__gethex+0x13a>
 800e95c:	4633      	mov	r3, r6
 800e95e:	7818      	ldrb	r0, [r3, #0]
 800e960:	2830      	cmp	r0, #48	; 0x30
 800e962:	461f      	mov	r7, r3
 800e964:	f103 0301 	add.w	r3, r3, #1
 800e968:	d0f9      	beq.n	800e95e <__gethex+0x76>
 800e96a:	f7ff ffa7 	bl	800e8bc <__hexdig_fun>
 800e96e:	2301      	movs	r3, #1
 800e970:	fab0 f480 	clz	r4, r0
 800e974:	0964      	lsrs	r4, r4, #5
 800e976:	4635      	mov	r5, r6
 800e978:	9300      	str	r3, [sp, #0]
 800e97a:	463a      	mov	r2, r7
 800e97c:	4616      	mov	r6, r2
 800e97e:	3201      	adds	r2, #1
 800e980:	7830      	ldrb	r0, [r6, #0]
 800e982:	f7ff ff9b 	bl	800e8bc <__hexdig_fun>
 800e986:	2800      	cmp	r0, #0
 800e988:	d1f8      	bne.n	800e97c <__gethex+0x94>
 800e98a:	9901      	ldr	r1, [sp, #4]
 800e98c:	4652      	mov	r2, sl
 800e98e:	4630      	mov	r0, r6
 800e990:	f001 f98a 	bl	800fca8 <strncmp>
 800e994:	b980      	cbnz	r0, 800e9b8 <__gethex+0xd0>
 800e996:	b94d      	cbnz	r5, 800e9ac <__gethex+0xc4>
 800e998:	eb06 050a 	add.w	r5, r6, sl
 800e99c:	462a      	mov	r2, r5
 800e99e:	4616      	mov	r6, r2
 800e9a0:	3201      	adds	r2, #1
 800e9a2:	7830      	ldrb	r0, [r6, #0]
 800e9a4:	f7ff ff8a 	bl	800e8bc <__hexdig_fun>
 800e9a8:	2800      	cmp	r0, #0
 800e9aa:	d1f8      	bne.n	800e99e <__gethex+0xb6>
 800e9ac:	1bad      	subs	r5, r5, r6
 800e9ae:	00ad      	lsls	r5, r5, #2
 800e9b0:	e004      	b.n	800e9bc <__gethex+0xd4>
 800e9b2:	2400      	movs	r4, #0
 800e9b4:	4625      	mov	r5, r4
 800e9b6:	e7e0      	b.n	800e97a <__gethex+0x92>
 800e9b8:	2d00      	cmp	r5, #0
 800e9ba:	d1f7      	bne.n	800e9ac <__gethex+0xc4>
 800e9bc:	7833      	ldrb	r3, [r6, #0]
 800e9be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e9c2:	2b50      	cmp	r3, #80	; 0x50
 800e9c4:	d13b      	bne.n	800ea3e <__gethex+0x156>
 800e9c6:	7873      	ldrb	r3, [r6, #1]
 800e9c8:	2b2b      	cmp	r3, #43	; 0x2b
 800e9ca:	d02c      	beq.n	800ea26 <__gethex+0x13e>
 800e9cc:	2b2d      	cmp	r3, #45	; 0x2d
 800e9ce:	d02e      	beq.n	800ea2e <__gethex+0x146>
 800e9d0:	1c71      	adds	r1, r6, #1
 800e9d2:	f04f 0900 	mov.w	r9, #0
 800e9d6:	7808      	ldrb	r0, [r1, #0]
 800e9d8:	f7ff ff70 	bl	800e8bc <__hexdig_fun>
 800e9dc:	1e43      	subs	r3, r0, #1
 800e9de:	b2db      	uxtb	r3, r3
 800e9e0:	2b18      	cmp	r3, #24
 800e9e2:	d82c      	bhi.n	800ea3e <__gethex+0x156>
 800e9e4:	f1a0 0210 	sub.w	r2, r0, #16
 800e9e8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e9ec:	f7ff ff66 	bl	800e8bc <__hexdig_fun>
 800e9f0:	1e43      	subs	r3, r0, #1
 800e9f2:	b2db      	uxtb	r3, r3
 800e9f4:	2b18      	cmp	r3, #24
 800e9f6:	d91d      	bls.n	800ea34 <__gethex+0x14c>
 800e9f8:	f1b9 0f00 	cmp.w	r9, #0
 800e9fc:	d000      	beq.n	800ea00 <__gethex+0x118>
 800e9fe:	4252      	negs	r2, r2
 800ea00:	4415      	add	r5, r2
 800ea02:	f8cb 1000 	str.w	r1, [fp]
 800ea06:	b1e4      	cbz	r4, 800ea42 <__gethex+0x15a>
 800ea08:	9b00      	ldr	r3, [sp, #0]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	bf14      	ite	ne
 800ea0e:	2700      	movne	r7, #0
 800ea10:	2706      	moveq	r7, #6
 800ea12:	4638      	mov	r0, r7
 800ea14:	b009      	add	sp, #36	; 0x24
 800ea16:	ecbd 8b02 	vpop	{d8}
 800ea1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea1e:	463e      	mov	r6, r7
 800ea20:	4625      	mov	r5, r4
 800ea22:	2401      	movs	r4, #1
 800ea24:	e7ca      	b.n	800e9bc <__gethex+0xd4>
 800ea26:	f04f 0900 	mov.w	r9, #0
 800ea2a:	1cb1      	adds	r1, r6, #2
 800ea2c:	e7d3      	b.n	800e9d6 <__gethex+0xee>
 800ea2e:	f04f 0901 	mov.w	r9, #1
 800ea32:	e7fa      	b.n	800ea2a <__gethex+0x142>
 800ea34:	230a      	movs	r3, #10
 800ea36:	fb03 0202 	mla	r2, r3, r2, r0
 800ea3a:	3a10      	subs	r2, #16
 800ea3c:	e7d4      	b.n	800e9e8 <__gethex+0x100>
 800ea3e:	4631      	mov	r1, r6
 800ea40:	e7df      	b.n	800ea02 <__gethex+0x11a>
 800ea42:	1bf3      	subs	r3, r6, r7
 800ea44:	3b01      	subs	r3, #1
 800ea46:	4621      	mov	r1, r4
 800ea48:	2b07      	cmp	r3, #7
 800ea4a:	dc0b      	bgt.n	800ea64 <__gethex+0x17c>
 800ea4c:	ee18 0a10 	vmov	r0, s16
 800ea50:	f000 fa8e 	bl	800ef70 <_Balloc>
 800ea54:	4604      	mov	r4, r0
 800ea56:	b940      	cbnz	r0, 800ea6a <__gethex+0x182>
 800ea58:	4b5d      	ldr	r3, [pc, #372]	; (800ebd0 <__gethex+0x2e8>)
 800ea5a:	4602      	mov	r2, r0
 800ea5c:	21de      	movs	r1, #222	; 0xde
 800ea5e:	485d      	ldr	r0, [pc, #372]	; (800ebd4 <__gethex+0x2ec>)
 800ea60:	f001 f944 	bl	800fcec <__assert_func>
 800ea64:	3101      	adds	r1, #1
 800ea66:	105b      	asrs	r3, r3, #1
 800ea68:	e7ee      	b.n	800ea48 <__gethex+0x160>
 800ea6a:	f100 0914 	add.w	r9, r0, #20
 800ea6e:	f04f 0b00 	mov.w	fp, #0
 800ea72:	f1ca 0301 	rsb	r3, sl, #1
 800ea76:	f8cd 9008 	str.w	r9, [sp, #8]
 800ea7a:	f8cd b000 	str.w	fp, [sp]
 800ea7e:	9306      	str	r3, [sp, #24]
 800ea80:	42b7      	cmp	r7, r6
 800ea82:	d340      	bcc.n	800eb06 <__gethex+0x21e>
 800ea84:	9802      	ldr	r0, [sp, #8]
 800ea86:	9b00      	ldr	r3, [sp, #0]
 800ea88:	f840 3b04 	str.w	r3, [r0], #4
 800ea8c:	eba0 0009 	sub.w	r0, r0, r9
 800ea90:	1080      	asrs	r0, r0, #2
 800ea92:	0146      	lsls	r6, r0, #5
 800ea94:	6120      	str	r0, [r4, #16]
 800ea96:	4618      	mov	r0, r3
 800ea98:	f000 fb5c 	bl	800f154 <__hi0bits>
 800ea9c:	1a30      	subs	r0, r6, r0
 800ea9e:	f8d8 6000 	ldr.w	r6, [r8]
 800eaa2:	42b0      	cmp	r0, r6
 800eaa4:	dd63      	ble.n	800eb6e <__gethex+0x286>
 800eaa6:	1b87      	subs	r7, r0, r6
 800eaa8:	4639      	mov	r1, r7
 800eaaa:	4620      	mov	r0, r4
 800eaac:	f000 ff00 	bl	800f8b0 <__any_on>
 800eab0:	4682      	mov	sl, r0
 800eab2:	b1a8      	cbz	r0, 800eae0 <__gethex+0x1f8>
 800eab4:	1e7b      	subs	r3, r7, #1
 800eab6:	1159      	asrs	r1, r3, #5
 800eab8:	f003 021f 	and.w	r2, r3, #31
 800eabc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800eac0:	f04f 0a01 	mov.w	sl, #1
 800eac4:	fa0a f202 	lsl.w	r2, sl, r2
 800eac8:	420a      	tst	r2, r1
 800eaca:	d009      	beq.n	800eae0 <__gethex+0x1f8>
 800eacc:	4553      	cmp	r3, sl
 800eace:	dd05      	ble.n	800eadc <__gethex+0x1f4>
 800ead0:	1eb9      	subs	r1, r7, #2
 800ead2:	4620      	mov	r0, r4
 800ead4:	f000 feec 	bl	800f8b0 <__any_on>
 800ead8:	2800      	cmp	r0, #0
 800eada:	d145      	bne.n	800eb68 <__gethex+0x280>
 800eadc:	f04f 0a02 	mov.w	sl, #2
 800eae0:	4639      	mov	r1, r7
 800eae2:	4620      	mov	r0, r4
 800eae4:	f7ff fe98 	bl	800e818 <rshift>
 800eae8:	443d      	add	r5, r7
 800eaea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800eaee:	42ab      	cmp	r3, r5
 800eaf0:	da4c      	bge.n	800eb8c <__gethex+0x2a4>
 800eaf2:	ee18 0a10 	vmov	r0, s16
 800eaf6:	4621      	mov	r1, r4
 800eaf8:	f000 fa7a 	bl	800eff0 <_Bfree>
 800eafc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800eafe:	2300      	movs	r3, #0
 800eb00:	6013      	str	r3, [r2, #0]
 800eb02:	27a3      	movs	r7, #163	; 0xa3
 800eb04:	e785      	b.n	800ea12 <__gethex+0x12a>
 800eb06:	1e73      	subs	r3, r6, #1
 800eb08:	9a05      	ldr	r2, [sp, #20]
 800eb0a:	9303      	str	r3, [sp, #12]
 800eb0c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800eb10:	4293      	cmp	r3, r2
 800eb12:	d019      	beq.n	800eb48 <__gethex+0x260>
 800eb14:	f1bb 0f20 	cmp.w	fp, #32
 800eb18:	d107      	bne.n	800eb2a <__gethex+0x242>
 800eb1a:	9b02      	ldr	r3, [sp, #8]
 800eb1c:	9a00      	ldr	r2, [sp, #0]
 800eb1e:	f843 2b04 	str.w	r2, [r3], #4
 800eb22:	9302      	str	r3, [sp, #8]
 800eb24:	2300      	movs	r3, #0
 800eb26:	9300      	str	r3, [sp, #0]
 800eb28:	469b      	mov	fp, r3
 800eb2a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800eb2e:	f7ff fec5 	bl	800e8bc <__hexdig_fun>
 800eb32:	9b00      	ldr	r3, [sp, #0]
 800eb34:	f000 000f 	and.w	r0, r0, #15
 800eb38:	fa00 f00b 	lsl.w	r0, r0, fp
 800eb3c:	4303      	orrs	r3, r0
 800eb3e:	9300      	str	r3, [sp, #0]
 800eb40:	f10b 0b04 	add.w	fp, fp, #4
 800eb44:	9b03      	ldr	r3, [sp, #12]
 800eb46:	e00d      	b.n	800eb64 <__gethex+0x27c>
 800eb48:	9b03      	ldr	r3, [sp, #12]
 800eb4a:	9a06      	ldr	r2, [sp, #24]
 800eb4c:	4413      	add	r3, r2
 800eb4e:	42bb      	cmp	r3, r7
 800eb50:	d3e0      	bcc.n	800eb14 <__gethex+0x22c>
 800eb52:	4618      	mov	r0, r3
 800eb54:	9901      	ldr	r1, [sp, #4]
 800eb56:	9307      	str	r3, [sp, #28]
 800eb58:	4652      	mov	r2, sl
 800eb5a:	f001 f8a5 	bl	800fca8 <strncmp>
 800eb5e:	9b07      	ldr	r3, [sp, #28]
 800eb60:	2800      	cmp	r0, #0
 800eb62:	d1d7      	bne.n	800eb14 <__gethex+0x22c>
 800eb64:	461e      	mov	r6, r3
 800eb66:	e78b      	b.n	800ea80 <__gethex+0x198>
 800eb68:	f04f 0a03 	mov.w	sl, #3
 800eb6c:	e7b8      	b.n	800eae0 <__gethex+0x1f8>
 800eb6e:	da0a      	bge.n	800eb86 <__gethex+0x29e>
 800eb70:	1a37      	subs	r7, r6, r0
 800eb72:	4621      	mov	r1, r4
 800eb74:	ee18 0a10 	vmov	r0, s16
 800eb78:	463a      	mov	r2, r7
 800eb7a:	f000 fc55 	bl	800f428 <__lshift>
 800eb7e:	1bed      	subs	r5, r5, r7
 800eb80:	4604      	mov	r4, r0
 800eb82:	f100 0914 	add.w	r9, r0, #20
 800eb86:	f04f 0a00 	mov.w	sl, #0
 800eb8a:	e7ae      	b.n	800eaea <__gethex+0x202>
 800eb8c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800eb90:	42a8      	cmp	r0, r5
 800eb92:	dd72      	ble.n	800ec7a <__gethex+0x392>
 800eb94:	1b45      	subs	r5, r0, r5
 800eb96:	42ae      	cmp	r6, r5
 800eb98:	dc36      	bgt.n	800ec08 <__gethex+0x320>
 800eb9a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800eb9e:	2b02      	cmp	r3, #2
 800eba0:	d02a      	beq.n	800ebf8 <__gethex+0x310>
 800eba2:	2b03      	cmp	r3, #3
 800eba4:	d02c      	beq.n	800ec00 <__gethex+0x318>
 800eba6:	2b01      	cmp	r3, #1
 800eba8:	d11c      	bne.n	800ebe4 <__gethex+0x2fc>
 800ebaa:	42ae      	cmp	r6, r5
 800ebac:	d11a      	bne.n	800ebe4 <__gethex+0x2fc>
 800ebae:	2e01      	cmp	r6, #1
 800ebb0:	d112      	bne.n	800ebd8 <__gethex+0x2f0>
 800ebb2:	9a04      	ldr	r2, [sp, #16]
 800ebb4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ebb8:	6013      	str	r3, [r2, #0]
 800ebba:	2301      	movs	r3, #1
 800ebbc:	6123      	str	r3, [r4, #16]
 800ebbe:	f8c9 3000 	str.w	r3, [r9]
 800ebc2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ebc4:	2762      	movs	r7, #98	; 0x62
 800ebc6:	601c      	str	r4, [r3, #0]
 800ebc8:	e723      	b.n	800ea12 <__gethex+0x12a>
 800ebca:	bf00      	nop
 800ebcc:	08010840 	.word	0x08010840
 800ebd0:	080107c8 	.word	0x080107c8
 800ebd4:	080107d9 	.word	0x080107d9
 800ebd8:	1e71      	subs	r1, r6, #1
 800ebda:	4620      	mov	r0, r4
 800ebdc:	f000 fe68 	bl	800f8b0 <__any_on>
 800ebe0:	2800      	cmp	r0, #0
 800ebe2:	d1e6      	bne.n	800ebb2 <__gethex+0x2ca>
 800ebe4:	ee18 0a10 	vmov	r0, s16
 800ebe8:	4621      	mov	r1, r4
 800ebea:	f000 fa01 	bl	800eff0 <_Bfree>
 800ebee:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	6013      	str	r3, [r2, #0]
 800ebf4:	2750      	movs	r7, #80	; 0x50
 800ebf6:	e70c      	b.n	800ea12 <__gethex+0x12a>
 800ebf8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d1f2      	bne.n	800ebe4 <__gethex+0x2fc>
 800ebfe:	e7d8      	b.n	800ebb2 <__gethex+0x2ca>
 800ec00:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d1d5      	bne.n	800ebb2 <__gethex+0x2ca>
 800ec06:	e7ed      	b.n	800ebe4 <__gethex+0x2fc>
 800ec08:	1e6f      	subs	r7, r5, #1
 800ec0a:	f1ba 0f00 	cmp.w	sl, #0
 800ec0e:	d131      	bne.n	800ec74 <__gethex+0x38c>
 800ec10:	b127      	cbz	r7, 800ec1c <__gethex+0x334>
 800ec12:	4639      	mov	r1, r7
 800ec14:	4620      	mov	r0, r4
 800ec16:	f000 fe4b 	bl	800f8b0 <__any_on>
 800ec1a:	4682      	mov	sl, r0
 800ec1c:	117b      	asrs	r3, r7, #5
 800ec1e:	2101      	movs	r1, #1
 800ec20:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ec24:	f007 071f 	and.w	r7, r7, #31
 800ec28:	fa01 f707 	lsl.w	r7, r1, r7
 800ec2c:	421f      	tst	r7, r3
 800ec2e:	4629      	mov	r1, r5
 800ec30:	4620      	mov	r0, r4
 800ec32:	bf18      	it	ne
 800ec34:	f04a 0a02 	orrne.w	sl, sl, #2
 800ec38:	1b76      	subs	r6, r6, r5
 800ec3a:	f7ff fded 	bl	800e818 <rshift>
 800ec3e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ec42:	2702      	movs	r7, #2
 800ec44:	f1ba 0f00 	cmp.w	sl, #0
 800ec48:	d048      	beq.n	800ecdc <__gethex+0x3f4>
 800ec4a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ec4e:	2b02      	cmp	r3, #2
 800ec50:	d015      	beq.n	800ec7e <__gethex+0x396>
 800ec52:	2b03      	cmp	r3, #3
 800ec54:	d017      	beq.n	800ec86 <__gethex+0x39e>
 800ec56:	2b01      	cmp	r3, #1
 800ec58:	d109      	bne.n	800ec6e <__gethex+0x386>
 800ec5a:	f01a 0f02 	tst.w	sl, #2
 800ec5e:	d006      	beq.n	800ec6e <__gethex+0x386>
 800ec60:	f8d9 0000 	ldr.w	r0, [r9]
 800ec64:	ea4a 0a00 	orr.w	sl, sl, r0
 800ec68:	f01a 0f01 	tst.w	sl, #1
 800ec6c:	d10e      	bne.n	800ec8c <__gethex+0x3a4>
 800ec6e:	f047 0710 	orr.w	r7, r7, #16
 800ec72:	e033      	b.n	800ecdc <__gethex+0x3f4>
 800ec74:	f04f 0a01 	mov.w	sl, #1
 800ec78:	e7d0      	b.n	800ec1c <__gethex+0x334>
 800ec7a:	2701      	movs	r7, #1
 800ec7c:	e7e2      	b.n	800ec44 <__gethex+0x35c>
 800ec7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ec80:	f1c3 0301 	rsb	r3, r3, #1
 800ec84:	9315      	str	r3, [sp, #84]	; 0x54
 800ec86:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d0f0      	beq.n	800ec6e <__gethex+0x386>
 800ec8c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ec90:	f104 0314 	add.w	r3, r4, #20
 800ec94:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ec98:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ec9c:	f04f 0c00 	mov.w	ip, #0
 800eca0:	4618      	mov	r0, r3
 800eca2:	f853 2b04 	ldr.w	r2, [r3], #4
 800eca6:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ecaa:	d01c      	beq.n	800ece6 <__gethex+0x3fe>
 800ecac:	3201      	adds	r2, #1
 800ecae:	6002      	str	r2, [r0, #0]
 800ecb0:	2f02      	cmp	r7, #2
 800ecb2:	f104 0314 	add.w	r3, r4, #20
 800ecb6:	d13f      	bne.n	800ed38 <__gethex+0x450>
 800ecb8:	f8d8 2000 	ldr.w	r2, [r8]
 800ecbc:	3a01      	subs	r2, #1
 800ecbe:	42b2      	cmp	r2, r6
 800ecc0:	d10a      	bne.n	800ecd8 <__gethex+0x3f0>
 800ecc2:	1171      	asrs	r1, r6, #5
 800ecc4:	2201      	movs	r2, #1
 800ecc6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ecca:	f006 061f 	and.w	r6, r6, #31
 800ecce:	fa02 f606 	lsl.w	r6, r2, r6
 800ecd2:	421e      	tst	r6, r3
 800ecd4:	bf18      	it	ne
 800ecd6:	4617      	movne	r7, r2
 800ecd8:	f047 0720 	orr.w	r7, r7, #32
 800ecdc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ecde:	601c      	str	r4, [r3, #0]
 800ece0:	9b04      	ldr	r3, [sp, #16]
 800ece2:	601d      	str	r5, [r3, #0]
 800ece4:	e695      	b.n	800ea12 <__gethex+0x12a>
 800ece6:	4299      	cmp	r1, r3
 800ece8:	f843 cc04 	str.w	ip, [r3, #-4]
 800ecec:	d8d8      	bhi.n	800eca0 <__gethex+0x3b8>
 800ecee:	68a3      	ldr	r3, [r4, #8]
 800ecf0:	459b      	cmp	fp, r3
 800ecf2:	db19      	blt.n	800ed28 <__gethex+0x440>
 800ecf4:	6861      	ldr	r1, [r4, #4]
 800ecf6:	ee18 0a10 	vmov	r0, s16
 800ecfa:	3101      	adds	r1, #1
 800ecfc:	f000 f938 	bl	800ef70 <_Balloc>
 800ed00:	4681      	mov	r9, r0
 800ed02:	b918      	cbnz	r0, 800ed0c <__gethex+0x424>
 800ed04:	4b1a      	ldr	r3, [pc, #104]	; (800ed70 <__gethex+0x488>)
 800ed06:	4602      	mov	r2, r0
 800ed08:	2184      	movs	r1, #132	; 0x84
 800ed0a:	e6a8      	b.n	800ea5e <__gethex+0x176>
 800ed0c:	6922      	ldr	r2, [r4, #16]
 800ed0e:	3202      	adds	r2, #2
 800ed10:	f104 010c 	add.w	r1, r4, #12
 800ed14:	0092      	lsls	r2, r2, #2
 800ed16:	300c      	adds	r0, #12
 800ed18:	f7fc ff6f 	bl	800bbfa <memcpy>
 800ed1c:	4621      	mov	r1, r4
 800ed1e:	ee18 0a10 	vmov	r0, s16
 800ed22:	f000 f965 	bl	800eff0 <_Bfree>
 800ed26:	464c      	mov	r4, r9
 800ed28:	6923      	ldr	r3, [r4, #16]
 800ed2a:	1c5a      	adds	r2, r3, #1
 800ed2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ed30:	6122      	str	r2, [r4, #16]
 800ed32:	2201      	movs	r2, #1
 800ed34:	615a      	str	r2, [r3, #20]
 800ed36:	e7bb      	b.n	800ecb0 <__gethex+0x3c8>
 800ed38:	6922      	ldr	r2, [r4, #16]
 800ed3a:	455a      	cmp	r2, fp
 800ed3c:	dd0b      	ble.n	800ed56 <__gethex+0x46e>
 800ed3e:	2101      	movs	r1, #1
 800ed40:	4620      	mov	r0, r4
 800ed42:	f7ff fd69 	bl	800e818 <rshift>
 800ed46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ed4a:	3501      	adds	r5, #1
 800ed4c:	42ab      	cmp	r3, r5
 800ed4e:	f6ff aed0 	blt.w	800eaf2 <__gethex+0x20a>
 800ed52:	2701      	movs	r7, #1
 800ed54:	e7c0      	b.n	800ecd8 <__gethex+0x3f0>
 800ed56:	f016 061f 	ands.w	r6, r6, #31
 800ed5a:	d0fa      	beq.n	800ed52 <__gethex+0x46a>
 800ed5c:	4453      	add	r3, sl
 800ed5e:	f1c6 0620 	rsb	r6, r6, #32
 800ed62:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ed66:	f000 f9f5 	bl	800f154 <__hi0bits>
 800ed6a:	42b0      	cmp	r0, r6
 800ed6c:	dbe7      	blt.n	800ed3e <__gethex+0x456>
 800ed6e:	e7f0      	b.n	800ed52 <__gethex+0x46a>
 800ed70:	080107c8 	.word	0x080107c8

0800ed74 <L_shift>:
 800ed74:	f1c2 0208 	rsb	r2, r2, #8
 800ed78:	0092      	lsls	r2, r2, #2
 800ed7a:	b570      	push	{r4, r5, r6, lr}
 800ed7c:	f1c2 0620 	rsb	r6, r2, #32
 800ed80:	6843      	ldr	r3, [r0, #4]
 800ed82:	6804      	ldr	r4, [r0, #0]
 800ed84:	fa03 f506 	lsl.w	r5, r3, r6
 800ed88:	432c      	orrs	r4, r5
 800ed8a:	40d3      	lsrs	r3, r2
 800ed8c:	6004      	str	r4, [r0, #0]
 800ed8e:	f840 3f04 	str.w	r3, [r0, #4]!
 800ed92:	4288      	cmp	r0, r1
 800ed94:	d3f4      	bcc.n	800ed80 <L_shift+0xc>
 800ed96:	bd70      	pop	{r4, r5, r6, pc}

0800ed98 <__match>:
 800ed98:	b530      	push	{r4, r5, lr}
 800ed9a:	6803      	ldr	r3, [r0, #0]
 800ed9c:	3301      	adds	r3, #1
 800ed9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eda2:	b914      	cbnz	r4, 800edaa <__match+0x12>
 800eda4:	6003      	str	r3, [r0, #0]
 800eda6:	2001      	movs	r0, #1
 800eda8:	bd30      	pop	{r4, r5, pc}
 800edaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800edae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800edb2:	2d19      	cmp	r5, #25
 800edb4:	bf98      	it	ls
 800edb6:	3220      	addls	r2, #32
 800edb8:	42a2      	cmp	r2, r4
 800edba:	d0f0      	beq.n	800ed9e <__match+0x6>
 800edbc:	2000      	movs	r0, #0
 800edbe:	e7f3      	b.n	800eda8 <__match+0x10>

0800edc0 <__hexnan>:
 800edc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edc4:	680b      	ldr	r3, [r1, #0]
 800edc6:	115e      	asrs	r6, r3, #5
 800edc8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800edcc:	f013 031f 	ands.w	r3, r3, #31
 800edd0:	b087      	sub	sp, #28
 800edd2:	bf18      	it	ne
 800edd4:	3604      	addne	r6, #4
 800edd6:	2500      	movs	r5, #0
 800edd8:	1f37      	subs	r7, r6, #4
 800edda:	4690      	mov	r8, r2
 800eddc:	6802      	ldr	r2, [r0, #0]
 800edde:	9301      	str	r3, [sp, #4]
 800ede0:	4682      	mov	sl, r0
 800ede2:	f846 5c04 	str.w	r5, [r6, #-4]
 800ede6:	46b9      	mov	r9, r7
 800ede8:	463c      	mov	r4, r7
 800edea:	9502      	str	r5, [sp, #8]
 800edec:	46ab      	mov	fp, r5
 800edee:	7851      	ldrb	r1, [r2, #1]
 800edf0:	1c53      	adds	r3, r2, #1
 800edf2:	9303      	str	r3, [sp, #12]
 800edf4:	b341      	cbz	r1, 800ee48 <__hexnan+0x88>
 800edf6:	4608      	mov	r0, r1
 800edf8:	9205      	str	r2, [sp, #20]
 800edfa:	9104      	str	r1, [sp, #16]
 800edfc:	f7ff fd5e 	bl	800e8bc <__hexdig_fun>
 800ee00:	2800      	cmp	r0, #0
 800ee02:	d14f      	bne.n	800eea4 <__hexnan+0xe4>
 800ee04:	9904      	ldr	r1, [sp, #16]
 800ee06:	9a05      	ldr	r2, [sp, #20]
 800ee08:	2920      	cmp	r1, #32
 800ee0a:	d818      	bhi.n	800ee3e <__hexnan+0x7e>
 800ee0c:	9b02      	ldr	r3, [sp, #8]
 800ee0e:	459b      	cmp	fp, r3
 800ee10:	dd13      	ble.n	800ee3a <__hexnan+0x7a>
 800ee12:	454c      	cmp	r4, r9
 800ee14:	d206      	bcs.n	800ee24 <__hexnan+0x64>
 800ee16:	2d07      	cmp	r5, #7
 800ee18:	dc04      	bgt.n	800ee24 <__hexnan+0x64>
 800ee1a:	462a      	mov	r2, r5
 800ee1c:	4649      	mov	r1, r9
 800ee1e:	4620      	mov	r0, r4
 800ee20:	f7ff ffa8 	bl	800ed74 <L_shift>
 800ee24:	4544      	cmp	r4, r8
 800ee26:	d950      	bls.n	800eeca <__hexnan+0x10a>
 800ee28:	2300      	movs	r3, #0
 800ee2a:	f1a4 0904 	sub.w	r9, r4, #4
 800ee2e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ee32:	f8cd b008 	str.w	fp, [sp, #8]
 800ee36:	464c      	mov	r4, r9
 800ee38:	461d      	mov	r5, r3
 800ee3a:	9a03      	ldr	r2, [sp, #12]
 800ee3c:	e7d7      	b.n	800edee <__hexnan+0x2e>
 800ee3e:	2929      	cmp	r1, #41	; 0x29
 800ee40:	d156      	bne.n	800eef0 <__hexnan+0x130>
 800ee42:	3202      	adds	r2, #2
 800ee44:	f8ca 2000 	str.w	r2, [sl]
 800ee48:	f1bb 0f00 	cmp.w	fp, #0
 800ee4c:	d050      	beq.n	800eef0 <__hexnan+0x130>
 800ee4e:	454c      	cmp	r4, r9
 800ee50:	d206      	bcs.n	800ee60 <__hexnan+0xa0>
 800ee52:	2d07      	cmp	r5, #7
 800ee54:	dc04      	bgt.n	800ee60 <__hexnan+0xa0>
 800ee56:	462a      	mov	r2, r5
 800ee58:	4649      	mov	r1, r9
 800ee5a:	4620      	mov	r0, r4
 800ee5c:	f7ff ff8a 	bl	800ed74 <L_shift>
 800ee60:	4544      	cmp	r4, r8
 800ee62:	d934      	bls.n	800eece <__hexnan+0x10e>
 800ee64:	f1a8 0204 	sub.w	r2, r8, #4
 800ee68:	4623      	mov	r3, r4
 800ee6a:	f853 1b04 	ldr.w	r1, [r3], #4
 800ee6e:	f842 1f04 	str.w	r1, [r2, #4]!
 800ee72:	429f      	cmp	r7, r3
 800ee74:	d2f9      	bcs.n	800ee6a <__hexnan+0xaa>
 800ee76:	1b3b      	subs	r3, r7, r4
 800ee78:	f023 0303 	bic.w	r3, r3, #3
 800ee7c:	3304      	adds	r3, #4
 800ee7e:	3401      	adds	r4, #1
 800ee80:	3e03      	subs	r6, #3
 800ee82:	42b4      	cmp	r4, r6
 800ee84:	bf88      	it	hi
 800ee86:	2304      	movhi	r3, #4
 800ee88:	4443      	add	r3, r8
 800ee8a:	2200      	movs	r2, #0
 800ee8c:	f843 2b04 	str.w	r2, [r3], #4
 800ee90:	429f      	cmp	r7, r3
 800ee92:	d2fb      	bcs.n	800ee8c <__hexnan+0xcc>
 800ee94:	683b      	ldr	r3, [r7, #0]
 800ee96:	b91b      	cbnz	r3, 800eea0 <__hexnan+0xe0>
 800ee98:	4547      	cmp	r7, r8
 800ee9a:	d127      	bne.n	800eeec <__hexnan+0x12c>
 800ee9c:	2301      	movs	r3, #1
 800ee9e:	603b      	str	r3, [r7, #0]
 800eea0:	2005      	movs	r0, #5
 800eea2:	e026      	b.n	800eef2 <__hexnan+0x132>
 800eea4:	3501      	adds	r5, #1
 800eea6:	2d08      	cmp	r5, #8
 800eea8:	f10b 0b01 	add.w	fp, fp, #1
 800eeac:	dd06      	ble.n	800eebc <__hexnan+0xfc>
 800eeae:	4544      	cmp	r4, r8
 800eeb0:	d9c3      	bls.n	800ee3a <__hexnan+0x7a>
 800eeb2:	2300      	movs	r3, #0
 800eeb4:	f844 3c04 	str.w	r3, [r4, #-4]
 800eeb8:	2501      	movs	r5, #1
 800eeba:	3c04      	subs	r4, #4
 800eebc:	6822      	ldr	r2, [r4, #0]
 800eebe:	f000 000f 	and.w	r0, r0, #15
 800eec2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800eec6:	6022      	str	r2, [r4, #0]
 800eec8:	e7b7      	b.n	800ee3a <__hexnan+0x7a>
 800eeca:	2508      	movs	r5, #8
 800eecc:	e7b5      	b.n	800ee3a <__hexnan+0x7a>
 800eece:	9b01      	ldr	r3, [sp, #4]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d0df      	beq.n	800ee94 <__hexnan+0xd4>
 800eed4:	f04f 32ff 	mov.w	r2, #4294967295
 800eed8:	f1c3 0320 	rsb	r3, r3, #32
 800eedc:	fa22 f303 	lsr.w	r3, r2, r3
 800eee0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800eee4:	401a      	ands	r2, r3
 800eee6:	f846 2c04 	str.w	r2, [r6, #-4]
 800eeea:	e7d3      	b.n	800ee94 <__hexnan+0xd4>
 800eeec:	3f04      	subs	r7, #4
 800eeee:	e7d1      	b.n	800ee94 <__hexnan+0xd4>
 800eef0:	2004      	movs	r0, #4
 800eef2:	b007      	add	sp, #28
 800eef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800eef8 <_localeconv_r>:
 800eef8:	4800      	ldr	r0, [pc, #0]	; (800eefc <_localeconv_r+0x4>)
 800eefa:	4770      	bx	lr
 800eefc:	20000168 	.word	0x20000168

0800ef00 <_lseek_r>:
 800ef00:	b538      	push	{r3, r4, r5, lr}
 800ef02:	4d07      	ldr	r5, [pc, #28]	; (800ef20 <_lseek_r+0x20>)
 800ef04:	4604      	mov	r4, r0
 800ef06:	4608      	mov	r0, r1
 800ef08:	4611      	mov	r1, r2
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	602a      	str	r2, [r5, #0]
 800ef0e:	461a      	mov	r2, r3
 800ef10:	f7f2 ff48 	bl	8001da4 <_lseek>
 800ef14:	1c43      	adds	r3, r0, #1
 800ef16:	d102      	bne.n	800ef1e <_lseek_r+0x1e>
 800ef18:	682b      	ldr	r3, [r5, #0]
 800ef1a:	b103      	cbz	r3, 800ef1e <_lseek_r+0x1e>
 800ef1c:	6023      	str	r3, [r4, #0]
 800ef1e:	bd38      	pop	{r3, r4, r5, pc}
 800ef20:	2000783c 	.word	0x2000783c

0800ef24 <malloc>:
 800ef24:	4b02      	ldr	r3, [pc, #8]	; (800ef30 <malloc+0xc>)
 800ef26:	4601      	mov	r1, r0
 800ef28:	6818      	ldr	r0, [r3, #0]
 800ef2a:	f7fc be9d 	b.w	800bc68 <_malloc_r>
 800ef2e:	bf00      	nop
 800ef30:	20000010 	.word	0x20000010

0800ef34 <__ascii_mbtowc>:
 800ef34:	b082      	sub	sp, #8
 800ef36:	b901      	cbnz	r1, 800ef3a <__ascii_mbtowc+0x6>
 800ef38:	a901      	add	r1, sp, #4
 800ef3a:	b142      	cbz	r2, 800ef4e <__ascii_mbtowc+0x1a>
 800ef3c:	b14b      	cbz	r3, 800ef52 <__ascii_mbtowc+0x1e>
 800ef3e:	7813      	ldrb	r3, [r2, #0]
 800ef40:	600b      	str	r3, [r1, #0]
 800ef42:	7812      	ldrb	r2, [r2, #0]
 800ef44:	1e10      	subs	r0, r2, #0
 800ef46:	bf18      	it	ne
 800ef48:	2001      	movne	r0, #1
 800ef4a:	b002      	add	sp, #8
 800ef4c:	4770      	bx	lr
 800ef4e:	4610      	mov	r0, r2
 800ef50:	e7fb      	b.n	800ef4a <__ascii_mbtowc+0x16>
 800ef52:	f06f 0001 	mvn.w	r0, #1
 800ef56:	e7f8      	b.n	800ef4a <__ascii_mbtowc+0x16>

0800ef58 <__malloc_lock>:
 800ef58:	4801      	ldr	r0, [pc, #4]	; (800ef60 <__malloc_lock+0x8>)
 800ef5a:	f7fc be3c 	b.w	800bbd6 <__retarget_lock_acquire_recursive>
 800ef5e:	bf00      	nop
 800ef60:	2000782f 	.word	0x2000782f

0800ef64 <__malloc_unlock>:
 800ef64:	4801      	ldr	r0, [pc, #4]	; (800ef6c <__malloc_unlock+0x8>)
 800ef66:	f7fc be37 	b.w	800bbd8 <__retarget_lock_release_recursive>
 800ef6a:	bf00      	nop
 800ef6c:	2000782f 	.word	0x2000782f

0800ef70 <_Balloc>:
 800ef70:	b570      	push	{r4, r5, r6, lr}
 800ef72:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ef74:	4604      	mov	r4, r0
 800ef76:	460d      	mov	r5, r1
 800ef78:	b976      	cbnz	r6, 800ef98 <_Balloc+0x28>
 800ef7a:	2010      	movs	r0, #16
 800ef7c:	f7ff ffd2 	bl	800ef24 <malloc>
 800ef80:	4602      	mov	r2, r0
 800ef82:	6260      	str	r0, [r4, #36]	; 0x24
 800ef84:	b920      	cbnz	r0, 800ef90 <_Balloc+0x20>
 800ef86:	4b18      	ldr	r3, [pc, #96]	; (800efe8 <_Balloc+0x78>)
 800ef88:	4818      	ldr	r0, [pc, #96]	; (800efec <_Balloc+0x7c>)
 800ef8a:	2166      	movs	r1, #102	; 0x66
 800ef8c:	f000 feae 	bl	800fcec <__assert_func>
 800ef90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ef94:	6006      	str	r6, [r0, #0]
 800ef96:	60c6      	str	r6, [r0, #12]
 800ef98:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ef9a:	68f3      	ldr	r3, [r6, #12]
 800ef9c:	b183      	cbz	r3, 800efc0 <_Balloc+0x50>
 800ef9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800efa0:	68db      	ldr	r3, [r3, #12]
 800efa2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800efa6:	b9b8      	cbnz	r0, 800efd8 <_Balloc+0x68>
 800efa8:	2101      	movs	r1, #1
 800efaa:	fa01 f605 	lsl.w	r6, r1, r5
 800efae:	1d72      	adds	r2, r6, #5
 800efb0:	0092      	lsls	r2, r2, #2
 800efb2:	4620      	mov	r0, r4
 800efb4:	f000 fc9d 	bl	800f8f2 <_calloc_r>
 800efb8:	b160      	cbz	r0, 800efd4 <_Balloc+0x64>
 800efba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800efbe:	e00e      	b.n	800efde <_Balloc+0x6e>
 800efc0:	2221      	movs	r2, #33	; 0x21
 800efc2:	2104      	movs	r1, #4
 800efc4:	4620      	mov	r0, r4
 800efc6:	f000 fc94 	bl	800f8f2 <_calloc_r>
 800efca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800efcc:	60f0      	str	r0, [r6, #12]
 800efce:	68db      	ldr	r3, [r3, #12]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d1e4      	bne.n	800ef9e <_Balloc+0x2e>
 800efd4:	2000      	movs	r0, #0
 800efd6:	bd70      	pop	{r4, r5, r6, pc}
 800efd8:	6802      	ldr	r2, [r0, #0]
 800efda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800efde:	2300      	movs	r3, #0
 800efe0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800efe4:	e7f7      	b.n	800efd6 <_Balloc+0x66>
 800efe6:	bf00      	nop
 800efe8:	08010756 	.word	0x08010756
 800efec:	08010854 	.word	0x08010854

0800eff0 <_Bfree>:
 800eff0:	b570      	push	{r4, r5, r6, lr}
 800eff2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800eff4:	4605      	mov	r5, r0
 800eff6:	460c      	mov	r4, r1
 800eff8:	b976      	cbnz	r6, 800f018 <_Bfree+0x28>
 800effa:	2010      	movs	r0, #16
 800effc:	f7ff ff92 	bl	800ef24 <malloc>
 800f000:	4602      	mov	r2, r0
 800f002:	6268      	str	r0, [r5, #36]	; 0x24
 800f004:	b920      	cbnz	r0, 800f010 <_Bfree+0x20>
 800f006:	4b09      	ldr	r3, [pc, #36]	; (800f02c <_Bfree+0x3c>)
 800f008:	4809      	ldr	r0, [pc, #36]	; (800f030 <_Bfree+0x40>)
 800f00a:	218a      	movs	r1, #138	; 0x8a
 800f00c:	f000 fe6e 	bl	800fcec <__assert_func>
 800f010:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f014:	6006      	str	r6, [r0, #0]
 800f016:	60c6      	str	r6, [r0, #12]
 800f018:	b13c      	cbz	r4, 800f02a <_Bfree+0x3a>
 800f01a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f01c:	6862      	ldr	r2, [r4, #4]
 800f01e:	68db      	ldr	r3, [r3, #12]
 800f020:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f024:	6021      	str	r1, [r4, #0]
 800f026:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f02a:	bd70      	pop	{r4, r5, r6, pc}
 800f02c:	08010756 	.word	0x08010756
 800f030:	08010854 	.word	0x08010854

0800f034 <__multadd>:
 800f034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f038:	690d      	ldr	r5, [r1, #16]
 800f03a:	4607      	mov	r7, r0
 800f03c:	460c      	mov	r4, r1
 800f03e:	461e      	mov	r6, r3
 800f040:	f101 0c14 	add.w	ip, r1, #20
 800f044:	2000      	movs	r0, #0
 800f046:	f8dc 3000 	ldr.w	r3, [ip]
 800f04a:	b299      	uxth	r1, r3
 800f04c:	fb02 6101 	mla	r1, r2, r1, r6
 800f050:	0c1e      	lsrs	r6, r3, #16
 800f052:	0c0b      	lsrs	r3, r1, #16
 800f054:	fb02 3306 	mla	r3, r2, r6, r3
 800f058:	b289      	uxth	r1, r1
 800f05a:	3001      	adds	r0, #1
 800f05c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f060:	4285      	cmp	r5, r0
 800f062:	f84c 1b04 	str.w	r1, [ip], #4
 800f066:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f06a:	dcec      	bgt.n	800f046 <__multadd+0x12>
 800f06c:	b30e      	cbz	r6, 800f0b2 <__multadd+0x7e>
 800f06e:	68a3      	ldr	r3, [r4, #8]
 800f070:	42ab      	cmp	r3, r5
 800f072:	dc19      	bgt.n	800f0a8 <__multadd+0x74>
 800f074:	6861      	ldr	r1, [r4, #4]
 800f076:	4638      	mov	r0, r7
 800f078:	3101      	adds	r1, #1
 800f07a:	f7ff ff79 	bl	800ef70 <_Balloc>
 800f07e:	4680      	mov	r8, r0
 800f080:	b928      	cbnz	r0, 800f08e <__multadd+0x5a>
 800f082:	4602      	mov	r2, r0
 800f084:	4b0c      	ldr	r3, [pc, #48]	; (800f0b8 <__multadd+0x84>)
 800f086:	480d      	ldr	r0, [pc, #52]	; (800f0bc <__multadd+0x88>)
 800f088:	21b5      	movs	r1, #181	; 0xb5
 800f08a:	f000 fe2f 	bl	800fcec <__assert_func>
 800f08e:	6922      	ldr	r2, [r4, #16]
 800f090:	3202      	adds	r2, #2
 800f092:	f104 010c 	add.w	r1, r4, #12
 800f096:	0092      	lsls	r2, r2, #2
 800f098:	300c      	adds	r0, #12
 800f09a:	f7fc fdae 	bl	800bbfa <memcpy>
 800f09e:	4621      	mov	r1, r4
 800f0a0:	4638      	mov	r0, r7
 800f0a2:	f7ff ffa5 	bl	800eff0 <_Bfree>
 800f0a6:	4644      	mov	r4, r8
 800f0a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f0ac:	3501      	adds	r5, #1
 800f0ae:	615e      	str	r6, [r3, #20]
 800f0b0:	6125      	str	r5, [r4, #16]
 800f0b2:	4620      	mov	r0, r4
 800f0b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0b8:	080107c8 	.word	0x080107c8
 800f0bc:	08010854 	.word	0x08010854

0800f0c0 <__s2b>:
 800f0c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f0c4:	460c      	mov	r4, r1
 800f0c6:	4615      	mov	r5, r2
 800f0c8:	461f      	mov	r7, r3
 800f0ca:	2209      	movs	r2, #9
 800f0cc:	3308      	adds	r3, #8
 800f0ce:	4606      	mov	r6, r0
 800f0d0:	fb93 f3f2 	sdiv	r3, r3, r2
 800f0d4:	2100      	movs	r1, #0
 800f0d6:	2201      	movs	r2, #1
 800f0d8:	429a      	cmp	r2, r3
 800f0da:	db09      	blt.n	800f0f0 <__s2b+0x30>
 800f0dc:	4630      	mov	r0, r6
 800f0de:	f7ff ff47 	bl	800ef70 <_Balloc>
 800f0e2:	b940      	cbnz	r0, 800f0f6 <__s2b+0x36>
 800f0e4:	4602      	mov	r2, r0
 800f0e6:	4b19      	ldr	r3, [pc, #100]	; (800f14c <__s2b+0x8c>)
 800f0e8:	4819      	ldr	r0, [pc, #100]	; (800f150 <__s2b+0x90>)
 800f0ea:	21ce      	movs	r1, #206	; 0xce
 800f0ec:	f000 fdfe 	bl	800fcec <__assert_func>
 800f0f0:	0052      	lsls	r2, r2, #1
 800f0f2:	3101      	adds	r1, #1
 800f0f4:	e7f0      	b.n	800f0d8 <__s2b+0x18>
 800f0f6:	9b08      	ldr	r3, [sp, #32]
 800f0f8:	6143      	str	r3, [r0, #20]
 800f0fa:	2d09      	cmp	r5, #9
 800f0fc:	f04f 0301 	mov.w	r3, #1
 800f100:	6103      	str	r3, [r0, #16]
 800f102:	dd16      	ble.n	800f132 <__s2b+0x72>
 800f104:	f104 0909 	add.w	r9, r4, #9
 800f108:	46c8      	mov	r8, r9
 800f10a:	442c      	add	r4, r5
 800f10c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f110:	4601      	mov	r1, r0
 800f112:	3b30      	subs	r3, #48	; 0x30
 800f114:	220a      	movs	r2, #10
 800f116:	4630      	mov	r0, r6
 800f118:	f7ff ff8c 	bl	800f034 <__multadd>
 800f11c:	45a0      	cmp	r8, r4
 800f11e:	d1f5      	bne.n	800f10c <__s2b+0x4c>
 800f120:	f1a5 0408 	sub.w	r4, r5, #8
 800f124:	444c      	add	r4, r9
 800f126:	1b2d      	subs	r5, r5, r4
 800f128:	1963      	adds	r3, r4, r5
 800f12a:	42bb      	cmp	r3, r7
 800f12c:	db04      	blt.n	800f138 <__s2b+0x78>
 800f12e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f132:	340a      	adds	r4, #10
 800f134:	2509      	movs	r5, #9
 800f136:	e7f6      	b.n	800f126 <__s2b+0x66>
 800f138:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f13c:	4601      	mov	r1, r0
 800f13e:	3b30      	subs	r3, #48	; 0x30
 800f140:	220a      	movs	r2, #10
 800f142:	4630      	mov	r0, r6
 800f144:	f7ff ff76 	bl	800f034 <__multadd>
 800f148:	e7ee      	b.n	800f128 <__s2b+0x68>
 800f14a:	bf00      	nop
 800f14c:	080107c8 	.word	0x080107c8
 800f150:	08010854 	.word	0x08010854

0800f154 <__hi0bits>:
 800f154:	0c03      	lsrs	r3, r0, #16
 800f156:	041b      	lsls	r3, r3, #16
 800f158:	b9d3      	cbnz	r3, 800f190 <__hi0bits+0x3c>
 800f15a:	0400      	lsls	r0, r0, #16
 800f15c:	2310      	movs	r3, #16
 800f15e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f162:	bf04      	itt	eq
 800f164:	0200      	lsleq	r0, r0, #8
 800f166:	3308      	addeq	r3, #8
 800f168:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f16c:	bf04      	itt	eq
 800f16e:	0100      	lsleq	r0, r0, #4
 800f170:	3304      	addeq	r3, #4
 800f172:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f176:	bf04      	itt	eq
 800f178:	0080      	lsleq	r0, r0, #2
 800f17a:	3302      	addeq	r3, #2
 800f17c:	2800      	cmp	r0, #0
 800f17e:	db05      	blt.n	800f18c <__hi0bits+0x38>
 800f180:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f184:	f103 0301 	add.w	r3, r3, #1
 800f188:	bf08      	it	eq
 800f18a:	2320      	moveq	r3, #32
 800f18c:	4618      	mov	r0, r3
 800f18e:	4770      	bx	lr
 800f190:	2300      	movs	r3, #0
 800f192:	e7e4      	b.n	800f15e <__hi0bits+0xa>

0800f194 <__lo0bits>:
 800f194:	6803      	ldr	r3, [r0, #0]
 800f196:	f013 0207 	ands.w	r2, r3, #7
 800f19a:	4601      	mov	r1, r0
 800f19c:	d00b      	beq.n	800f1b6 <__lo0bits+0x22>
 800f19e:	07da      	lsls	r2, r3, #31
 800f1a0:	d423      	bmi.n	800f1ea <__lo0bits+0x56>
 800f1a2:	0798      	lsls	r0, r3, #30
 800f1a4:	bf49      	itett	mi
 800f1a6:	085b      	lsrmi	r3, r3, #1
 800f1a8:	089b      	lsrpl	r3, r3, #2
 800f1aa:	2001      	movmi	r0, #1
 800f1ac:	600b      	strmi	r3, [r1, #0]
 800f1ae:	bf5c      	itt	pl
 800f1b0:	600b      	strpl	r3, [r1, #0]
 800f1b2:	2002      	movpl	r0, #2
 800f1b4:	4770      	bx	lr
 800f1b6:	b298      	uxth	r0, r3
 800f1b8:	b9a8      	cbnz	r0, 800f1e6 <__lo0bits+0x52>
 800f1ba:	0c1b      	lsrs	r3, r3, #16
 800f1bc:	2010      	movs	r0, #16
 800f1be:	b2da      	uxtb	r2, r3
 800f1c0:	b90a      	cbnz	r2, 800f1c6 <__lo0bits+0x32>
 800f1c2:	3008      	adds	r0, #8
 800f1c4:	0a1b      	lsrs	r3, r3, #8
 800f1c6:	071a      	lsls	r2, r3, #28
 800f1c8:	bf04      	itt	eq
 800f1ca:	091b      	lsreq	r3, r3, #4
 800f1cc:	3004      	addeq	r0, #4
 800f1ce:	079a      	lsls	r2, r3, #30
 800f1d0:	bf04      	itt	eq
 800f1d2:	089b      	lsreq	r3, r3, #2
 800f1d4:	3002      	addeq	r0, #2
 800f1d6:	07da      	lsls	r2, r3, #31
 800f1d8:	d403      	bmi.n	800f1e2 <__lo0bits+0x4e>
 800f1da:	085b      	lsrs	r3, r3, #1
 800f1dc:	f100 0001 	add.w	r0, r0, #1
 800f1e0:	d005      	beq.n	800f1ee <__lo0bits+0x5a>
 800f1e2:	600b      	str	r3, [r1, #0]
 800f1e4:	4770      	bx	lr
 800f1e6:	4610      	mov	r0, r2
 800f1e8:	e7e9      	b.n	800f1be <__lo0bits+0x2a>
 800f1ea:	2000      	movs	r0, #0
 800f1ec:	4770      	bx	lr
 800f1ee:	2020      	movs	r0, #32
 800f1f0:	4770      	bx	lr
	...

0800f1f4 <__i2b>:
 800f1f4:	b510      	push	{r4, lr}
 800f1f6:	460c      	mov	r4, r1
 800f1f8:	2101      	movs	r1, #1
 800f1fa:	f7ff feb9 	bl	800ef70 <_Balloc>
 800f1fe:	4602      	mov	r2, r0
 800f200:	b928      	cbnz	r0, 800f20e <__i2b+0x1a>
 800f202:	4b05      	ldr	r3, [pc, #20]	; (800f218 <__i2b+0x24>)
 800f204:	4805      	ldr	r0, [pc, #20]	; (800f21c <__i2b+0x28>)
 800f206:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f20a:	f000 fd6f 	bl	800fcec <__assert_func>
 800f20e:	2301      	movs	r3, #1
 800f210:	6144      	str	r4, [r0, #20]
 800f212:	6103      	str	r3, [r0, #16]
 800f214:	bd10      	pop	{r4, pc}
 800f216:	bf00      	nop
 800f218:	080107c8 	.word	0x080107c8
 800f21c:	08010854 	.word	0x08010854

0800f220 <__multiply>:
 800f220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f224:	4691      	mov	r9, r2
 800f226:	690a      	ldr	r2, [r1, #16]
 800f228:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f22c:	429a      	cmp	r2, r3
 800f22e:	bfb8      	it	lt
 800f230:	460b      	movlt	r3, r1
 800f232:	460c      	mov	r4, r1
 800f234:	bfbc      	itt	lt
 800f236:	464c      	movlt	r4, r9
 800f238:	4699      	movlt	r9, r3
 800f23a:	6927      	ldr	r7, [r4, #16]
 800f23c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f240:	68a3      	ldr	r3, [r4, #8]
 800f242:	6861      	ldr	r1, [r4, #4]
 800f244:	eb07 060a 	add.w	r6, r7, sl
 800f248:	42b3      	cmp	r3, r6
 800f24a:	b085      	sub	sp, #20
 800f24c:	bfb8      	it	lt
 800f24e:	3101      	addlt	r1, #1
 800f250:	f7ff fe8e 	bl	800ef70 <_Balloc>
 800f254:	b930      	cbnz	r0, 800f264 <__multiply+0x44>
 800f256:	4602      	mov	r2, r0
 800f258:	4b44      	ldr	r3, [pc, #272]	; (800f36c <__multiply+0x14c>)
 800f25a:	4845      	ldr	r0, [pc, #276]	; (800f370 <__multiply+0x150>)
 800f25c:	f240 115d 	movw	r1, #349	; 0x15d
 800f260:	f000 fd44 	bl	800fcec <__assert_func>
 800f264:	f100 0514 	add.w	r5, r0, #20
 800f268:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f26c:	462b      	mov	r3, r5
 800f26e:	2200      	movs	r2, #0
 800f270:	4543      	cmp	r3, r8
 800f272:	d321      	bcc.n	800f2b8 <__multiply+0x98>
 800f274:	f104 0314 	add.w	r3, r4, #20
 800f278:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f27c:	f109 0314 	add.w	r3, r9, #20
 800f280:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f284:	9202      	str	r2, [sp, #8]
 800f286:	1b3a      	subs	r2, r7, r4
 800f288:	3a15      	subs	r2, #21
 800f28a:	f022 0203 	bic.w	r2, r2, #3
 800f28e:	3204      	adds	r2, #4
 800f290:	f104 0115 	add.w	r1, r4, #21
 800f294:	428f      	cmp	r7, r1
 800f296:	bf38      	it	cc
 800f298:	2204      	movcc	r2, #4
 800f29a:	9201      	str	r2, [sp, #4]
 800f29c:	9a02      	ldr	r2, [sp, #8]
 800f29e:	9303      	str	r3, [sp, #12]
 800f2a0:	429a      	cmp	r2, r3
 800f2a2:	d80c      	bhi.n	800f2be <__multiply+0x9e>
 800f2a4:	2e00      	cmp	r6, #0
 800f2a6:	dd03      	ble.n	800f2b0 <__multiply+0x90>
 800f2a8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d05a      	beq.n	800f366 <__multiply+0x146>
 800f2b0:	6106      	str	r6, [r0, #16]
 800f2b2:	b005      	add	sp, #20
 800f2b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2b8:	f843 2b04 	str.w	r2, [r3], #4
 800f2bc:	e7d8      	b.n	800f270 <__multiply+0x50>
 800f2be:	f8b3 a000 	ldrh.w	sl, [r3]
 800f2c2:	f1ba 0f00 	cmp.w	sl, #0
 800f2c6:	d024      	beq.n	800f312 <__multiply+0xf2>
 800f2c8:	f104 0e14 	add.w	lr, r4, #20
 800f2cc:	46a9      	mov	r9, r5
 800f2ce:	f04f 0c00 	mov.w	ip, #0
 800f2d2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f2d6:	f8d9 1000 	ldr.w	r1, [r9]
 800f2da:	fa1f fb82 	uxth.w	fp, r2
 800f2de:	b289      	uxth	r1, r1
 800f2e0:	fb0a 110b 	mla	r1, sl, fp, r1
 800f2e4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f2e8:	f8d9 2000 	ldr.w	r2, [r9]
 800f2ec:	4461      	add	r1, ip
 800f2ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f2f2:	fb0a c20b 	mla	r2, sl, fp, ip
 800f2f6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f2fa:	b289      	uxth	r1, r1
 800f2fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f300:	4577      	cmp	r7, lr
 800f302:	f849 1b04 	str.w	r1, [r9], #4
 800f306:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f30a:	d8e2      	bhi.n	800f2d2 <__multiply+0xb2>
 800f30c:	9a01      	ldr	r2, [sp, #4]
 800f30e:	f845 c002 	str.w	ip, [r5, r2]
 800f312:	9a03      	ldr	r2, [sp, #12]
 800f314:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f318:	3304      	adds	r3, #4
 800f31a:	f1b9 0f00 	cmp.w	r9, #0
 800f31e:	d020      	beq.n	800f362 <__multiply+0x142>
 800f320:	6829      	ldr	r1, [r5, #0]
 800f322:	f104 0c14 	add.w	ip, r4, #20
 800f326:	46ae      	mov	lr, r5
 800f328:	f04f 0a00 	mov.w	sl, #0
 800f32c:	f8bc b000 	ldrh.w	fp, [ip]
 800f330:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f334:	fb09 220b 	mla	r2, r9, fp, r2
 800f338:	4492      	add	sl, r2
 800f33a:	b289      	uxth	r1, r1
 800f33c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f340:	f84e 1b04 	str.w	r1, [lr], #4
 800f344:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f348:	f8be 1000 	ldrh.w	r1, [lr]
 800f34c:	0c12      	lsrs	r2, r2, #16
 800f34e:	fb09 1102 	mla	r1, r9, r2, r1
 800f352:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f356:	4567      	cmp	r7, ip
 800f358:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f35c:	d8e6      	bhi.n	800f32c <__multiply+0x10c>
 800f35e:	9a01      	ldr	r2, [sp, #4]
 800f360:	50a9      	str	r1, [r5, r2]
 800f362:	3504      	adds	r5, #4
 800f364:	e79a      	b.n	800f29c <__multiply+0x7c>
 800f366:	3e01      	subs	r6, #1
 800f368:	e79c      	b.n	800f2a4 <__multiply+0x84>
 800f36a:	bf00      	nop
 800f36c:	080107c8 	.word	0x080107c8
 800f370:	08010854 	.word	0x08010854

0800f374 <__pow5mult>:
 800f374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f378:	4615      	mov	r5, r2
 800f37a:	f012 0203 	ands.w	r2, r2, #3
 800f37e:	4606      	mov	r6, r0
 800f380:	460f      	mov	r7, r1
 800f382:	d007      	beq.n	800f394 <__pow5mult+0x20>
 800f384:	4c25      	ldr	r4, [pc, #148]	; (800f41c <__pow5mult+0xa8>)
 800f386:	3a01      	subs	r2, #1
 800f388:	2300      	movs	r3, #0
 800f38a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f38e:	f7ff fe51 	bl	800f034 <__multadd>
 800f392:	4607      	mov	r7, r0
 800f394:	10ad      	asrs	r5, r5, #2
 800f396:	d03d      	beq.n	800f414 <__pow5mult+0xa0>
 800f398:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f39a:	b97c      	cbnz	r4, 800f3bc <__pow5mult+0x48>
 800f39c:	2010      	movs	r0, #16
 800f39e:	f7ff fdc1 	bl	800ef24 <malloc>
 800f3a2:	4602      	mov	r2, r0
 800f3a4:	6270      	str	r0, [r6, #36]	; 0x24
 800f3a6:	b928      	cbnz	r0, 800f3b4 <__pow5mult+0x40>
 800f3a8:	4b1d      	ldr	r3, [pc, #116]	; (800f420 <__pow5mult+0xac>)
 800f3aa:	481e      	ldr	r0, [pc, #120]	; (800f424 <__pow5mult+0xb0>)
 800f3ac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f3b0:	f000 fc9c 	bl	800fcec <__assert_func>
 800f3b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f3b8:	6004      	str	r4, [r0, #0]
 800f3ba:	60c4      	str	r4, [r0, #12]
 800f3bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f3c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f3c4:	b94c      	cbnz	r4, 800f3da <__pow5mult+0x66>
 800f3c6:	f240 2171 	movw	r1, #625	; 0x271
 800f3ca:	4630      	mov	r0, r6
 800f3cc:	f7ff ff12 	bl	800f1f4 <__i2b>
 800f3d0:	2300      	movs	r3, #0
 800f3d2:	f8c8 0008 	str.w	r0, [r8, #8]
 800f3d6:	4604      	mov	r4, r0
 800f3d8:	6003      	str	r3, [r0, #0]
 800f3da:	f04f 0900 	mov.w	r9, #0
 800f3de:	07eb      	lsls	r3, r5, #31
 800f3e0:	d50a      	bpl.n	800f3f8 <__pow5mult+0x84>
 800f3e2:	4639      	mov	r1, r7
 800f3e4:	4622      	mov	r2, r4
 800f3e6:	4630      	mov	r0, r6
 800f3e8:	f7ff ff1a 	bl	800f220 <__multiply>
 800f3ec:	4639      	mov	r1, r7
 800f3ee:	4680      	mov	r8, r0
 800f3f0:	4630      	mov	r0, r6
 800f3f2:	f7ff fdfd 	bl	800eff0 <_Bfree>
 800f3f6:	4647      	mov	r7, r8
 800f3f8:	106d      	asrs	r5, r5, #1
 800f3fa:	d00b      	beq.n	800f414 <__pow5mult+0xa0>
 800f3fc:	6820      	ldr	r0, [r4, #0]
 800f3fe:	b938      	cbnz	r0, 800f410 <__pow5mult+0x9c>
 800f400:	4622      	mov	r2, r4
 800f402:	4621      	mov	r1, r4
 800f404:	4630      	mov	r0, r6
 800f406:	f7ff ff0b 	bl	800f220 <__multiply>
 800f40a:	6020      	str	r0, [r4, #0]
 800f40c:	f8c0 9000 	str.w	r9, [r0]
 800f410:	4604      	mov	r4, r0
 800f412:	e7e4      	b.n	800f3de <__pow5mult+0x6a>
 800f414:	4638      	mov	r0, r7
 800f416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f41a:	bf00      	nop
 800f41c:	080109a0 	.word	0x080109a0
 800f420:	08010756 	.word	0x08010756
 800f424:	08010854 	.word	0x08010854

0800f428 <__lshift>:
 800f428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f42c:	460c      	mov	r4, r1
 800f42e:	6849      	ldr	r1, [r1, #4]
 800f430:	6923      	ldr	r3, [r4, #16]
 800f432:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f436:	68a3      	ldr	r3, [r4, #8]
 800f438:	4607      	mov	r7, r0
 800f43a:	4691      	mov	r9, r2
 800f43c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f440:	f108 0601 	add.w	r6, r8, #1
 800f444:	42b3      	cmp	r3, r6
 800f446:	db0b      	blt.n	800f460 <__lshift+0x38>
 800f448:	4638      	mov	r0, r7
 800f44a:	f7ff fd91 	bl	800ef70 <_Balloc>
 800f44e:	4605      	mov	r5, r0
 800f450:	b948      	cbnz	r0, 800f466 <__lshift+0x3e>
 800f452:	4602      	mov	r2, r0
 800f454:	4b2a      	ldr	r3, [pc, #168]	; (800f500 <__lshift+0xd8>)
 800f456:	482b      	ldr	r0, [pc, #172]	; (800f504 <__lshift+0xdc>)
 800f458:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f45c:	f000 fc46 	bl	800fcec <__assert_func>
 800f460:	3101      	adds	r1, #1
 800f462:	005b      	lsls	r3, r3, #1
 800f464:	e7ee      	b.n	800f444 <__lshift+0x1c>
 800f466:	2300      	movs	r3, #0
 800f468:	f100 0114 	add.w	r1, r0, #20
 800f46c:	f100 0210 	add.w	r2, r0, #16
 800f470:	4618      	mov	r0, r3
 800f472:	4553      	cmp	r3, sl
 800f474:	db37      	blt.n	800f4e6 <__lshift+0xbe>
 800f476:	6920      	ldr	r0, [r4, #16]
 800f478:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f47c:	f104 0314 	add.w	r3, r4, #20
 800f480:	f019 091f 	ands.w	r9, r9, #31
 800f484:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f488:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f48c:	d02f      	beq.n	800f4ee <__lshift+0xc6>
 800f48e:	f1c9 0e20 	rsb	lr, r9, #32
 800f492:	468a      	mov	sl, r1
 800f494:	f04f 0c00 	mov.w	ip, #0
 800f498:	681a      	ldr	r2, [r3, #0]
 800f49a:	fa02 f209 	lsl.w	r2, r2, r9
 800f49e:	ea42 020c 	orr.w	r2, r2, ip
 800f4a2:	f84a 2b04 	str.w	r2, [sl], #4
 800f4a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4aa:	4298      	cmp	r0, r3
 800f4ac:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f4b0:	d8f2      	bhi.n	800f498 <__lshift+0x70>
 800f4b2:	1b03      	subs	r3, r0, r4
 800f4b4:	3b15      	subs	r3, #21
 800f4b6:	f023 0303 	bic.w	r3, r3, #3
 800f4ba:	3304      	adds	r3, #4
 800f4bc:	f104 0215 	add.w	r2, r4, #21
 800f4c0:	4290      	cmp	r0, r2
 800f4c2:	bf38      	it	cc
 800f4c4:	2304      	movcc	r3, #4
 800f4c6:	f841 c003 	str.w	ip, [r1, r3]
 800f4ca:	f1bc 0f00 	cmp.w	ip, #0
 800f4ce:	d001      	beq.n	800f4d4 <__lshift+0xac>
 800f4d0:	f108 0602 	add.w	r6, r8, #2
 800f4d4:	3e01      	subs	r6, #1
 800f4d6:	4638      	mov	r0, r7
 800f4d8:	612e      	str	r6, [r5, #16]
 800f4da:	4621      	mov	r1, r4
 800f4dc:	f7ff fd88 	bl	800eff0 <_Bfree>
 800f4e0:	4628      	mov	r0, r5
 800f4e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4e6:	f842 0f04 	str.w	r0, [r2, #4]!
 800f4ea:	3301      	adds	r3, #1
 800f4ec:	e7c1      	b.n	800f472 <__lshift+0x4a>
 800f4ee:	3904      	subs	r1, #4
 800f4f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4f4:	f841 2f04 	str.w	r2, [r1, #4]!
 800f4f8:	4298      	cmp	r0, r3
 800f4fa:	d8f9      	bhi.n	800f4f0 <__lshift+0xc8>
 800f4fc:	e7ea      	b.n	800f4d4 <__lshift+0xac>
 800f4fe:	bf00      	nop
 800f500:	080107c8 	.word	0x080107c8
 800f504:	08010854 	.word	0x08010854

0800f508 <__mcmp>:
 800f508:	b530      	push	{r4, r5, lr}
 800f50a:	6902      	ldr	r2, [r0, #16]
 800f50c:	690c      	ldr	r4, [r1, #16]
 800f50e:	1b12      	subs	r2, r2, r4
 800f510:	d10e      	bne.n	800f530 <__mcmp+0x28>
 800f512:	f100 0314 	add.w	r3, r0, #20
 800f516:	3114      	adds	r1, #20
 800f518:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f51c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f520:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f524:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f528:	42a5      	cmp	r5, r4
 800f52a:	d003      	beq.n	800f534 <__mcmp+0x2c>
 800f52c:	d305      	bcc.n	800f53a <__mcmp+0x32>
 800f52e:	2201      	movs	r2, #1
 800f530:	4610      	mov	r0, r2
 800f532:	bd30      	pop	{r4, r5, pc}
 800f534:	4283      	cmp	r3, r0
 800f536:	d3f3      	bcc.n	800f520 <__mcmp+0x18>
 800f538:	e7fa      	b.n	800f530 <__mcmp+0x28>
 800f53a:	f04f 32ff 	mov.w	r2, #4294967295
 800f53e:	e7f7      	b.n	800f530 <__mcmp+0x28>

0800f540 <__mdiff>:
 800f540:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f544:	460c      	mov	r4, r1
 800f546:	4606      	mov	r6, r0
 800f548:	4611      	mov	r1, r2
 800f54a:	4620      	mov	r0, r4
 800f54c:	4690      	mov	r8, r2
 800f54e:	f7ff ffdb 	bl	800f508 <__mcmp>
 800f552:	1e05      	subs	r5, r0, #0
 800f554:	d110      	bne.n	800f578 <__mdiff+0x38>
 800f556:	4629      	mov	r1, r5
 800f558:	4630      	mov	r0, r6
 800f55a:	f7ff fd09 	bl	800ef70 <_Balloc>
 800f55e:	b930      	cbnz	r0, 800f56e <__mdiff+0x2e>
 800f560:	4b3a      	ldr	r3, [pc, #232]	; (800f64c <__mdiff+0x10c>)
 800f562:	4602      	mov	r2, r0
 800f564:	f240 2132 	movw	r1, #562	; 0x232
 800f568:	4839      	ldr	r0, [pc, #228]	; (800f650 <__mdiff+0x110>)
 800f56a:	f000 fbbf 	bl	800fcec <__assert_func>
 800f56e:	2301      	movs	r3, #1
 800f570:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f574:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f578:	bfa4      	itt	ge
 800f57a:	4643      	movge	r3, r8
 800f57c:	46a0      	movge	r8, r4
 800f57e:	4630      	mov	r0, r6
 800f580:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f584:	bfa6      	itte	ge
 800f586:	461c      	movge	r4, r3
 800f588:	2500      	movge	r5, #0
 800f58a:	2501      	movlt	r5, #1
 800f58c:	f7ff fcf0 	bl	800ef70 <_Balloc>
 800f590:	b920      	cbnz	r0, 800f59c <__mdiff+0x5c>
 800f592:	4b2e      	ldr	r3, [pc, #184]	; (800f64c <__mdiff+0x10c>)
 800f594:	4602      	mov	r2, r0
 800f596:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f59a:	e7e5      	b.n	800f568 <__mdiff+0x28>
 800f59c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f5a0:	6926      	ldr	r6, [r4, #16]
 800f5a2:	60c5      	str	r5, [r0, #12]
 800f5a4:	f104 0914 	add.w	r9, r4, #20
 800f5a8:	f108 0514 	add.w	r5, r8, #20
 800f5ac:	f100 0e14 	add.w	lr, r0, #20
 800f5b0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f5b4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f5b8:	f108 0210 	add.w	r2, r8, #16
 800f5bc:	46f2      	mov	sl, lr
 800f5be:	2100      	movs	r1, #0
 800f5c0:	f859 3b04 	ldr.w	r3, [r9], #4
 800f5c4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f5c8:	fa1f f883 	uxth.w	r8, r3
 800f5cc:	fa11 f18b 	uxtah	r1, r1, fp
 800f5d0:	0c1b      	lsrs	r3, r3, #16
 800f5d2:	eba1 0808 	sub.w	r8, r1, r8
 800f5d6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f5da:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f5de:	fa1f f888 	uxth.w	r8, r8
 800f5e2:	1419      	asrs	r1, r3, #16
 800f5e4:	454e      	cmp	r6, r9
 800f5e6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f5ea:	f84a 3b04 	str.w	r3, [sl], #4
 800f5ee:	d8e7      	bhi.n	800f5c0 <__mdiff+0x80>
 800f5f0:	1b33      	subs	r3, r6, r4
 800f5f2:	3b15      	subs	r3, #21
 800f5f4:	f023 0303 	bic.w	r3, r3, #3
 800f5f8:	3304      	adds	r3, #4
 800f5fa:	3415      	adds	r4, #21
 800f5fc:	42a6      	cmp	r6, r4
 800f5fe:	bf38      	it	cc
 800f600:	2304      	movcc	r3, #4
 800f602:	441d      	add	r5, r3
 800f604:	4473      	add	r3, lr
 800f606:	469e      	mov	lr, r3
 800f608:	462e      	mov	r6, r5
 800f60a:	4566      	cmp	r6, ip
 800f60c:	d30e      	bcc.n	800f62c <__mdiff+0xec>
 800f60e:	f10c 0203 	add.w	r2, ip, #3
 800f612:	1b52      	subs	r2, r2, r5
 800f614:	f022 0203 	bic.w	r2, r2, #3
 800f618:	3d03      	subs	r5, #3
 800f61a:	45ac      	cmp	ip, r5
 800f61c:	bf38      	it	cc
 800f61e:	2200      	movcc	r2, #0
 800f620:	441a      	add	r2, r3
 800f622:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f626:	b17b      	cbz	r3, 800f648 <__mdiff+0x108>
 800f628:	6107      	str	r7, [r0, #16]
 800f62a:	e7a3      	b.n	800f574 <__mdiff+0x34>
 800f62c:	f856 8b04 	ldr.w	r8, [r6], #4
 800f630:	fa11 f288 	uxtah	r2, r1, r8
 800f634:	1414      	asrs	r4, r2, #16
 800f636:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f63a:	b292      	uxth	r2, r2
 800f63c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f640:	f84e 2b04 	str.w	r2, [lr], #4
 800f644:	1421      	asrs	r1, r4, #16
 800f646:	e7e0      	b.n	800f60a <__mdiff+0xca>
 800f648:	3f01      	subs	r7, #1
 800f64a:	e7ea      	b.n	800f622 <__mdiff+0xe2>
 800f64c:	080107c8 	.word	0x080107c8
 800f650:	08010854 	.word	0x08010854

0800f654 <__ulp>:
 800f654:	b082      	sub	sp, #8
 800f656:	ed8d 0b00 	vstr	d0, [sp]
 800f65a:	9b01      	ldr	r3, [sp, #4]
 800f65c:	4912      	ldr	r1, [pc, #72]	; (800f6a8 <__ulp+0x54>)
 800f65e:	4019      	ands	r1, r3
 800f660:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800f664:	2900      	cmp	r1, #0
 800f666:	dd05      	ble.n	800f674 <__ulp+0x20>
 800f668:	2200      	movs	r2, #0
 800f66a:	460b      	mov	r3, r1
 800f66c:	ec43 2b10 	vmov	d0, r2, r3
 800f670:	b002      	add	sp, #8
 800f672:	4770      	bx	lr
 800f674:	4249      	negs	r1, r1
 800f676:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800f67a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800f67e:	f04f 0200 	mov.w	r2, #0
 800f682:	f04f 0300 	mov.w	r3, #0
 800f686:	da04      	bge.n	800f692 <__ulp+0x3e>
 800f688:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800f68c:	fa41 f300 	asr.w	r3, r1, r0
 800f690:	e7ec      	b.n	800f66c <__ulp+0x18>
 800f692:	f1a0 0114 	sub.w	r1, r0, #20
 800f696:	291e      	cmp	r1, #30
 800f698:	bfda      	itte	le
 800f69a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800f69e:	fa20 f101 	lsrle.w	r1, r0, r1
 800f6a2:	2101      	movgt	r1, #1
 800f6a4:	460a      	mov	r2, r1
 800f6a6:	e7e1      	b.n	800f66c <__ulp+0x18>
 800f6a8:	7ff00000 	.word	0x7ff00000

0800f6ac <__b2d>:
 800f6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6ae:	6905      	ldr	r5, [r0, #16]
 800f6b0:	f100 0714 	add.w	r7, r0, #20
 800f6b4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800f6b8:	1f2e      	subs	r6, r5, #4
 800f6ba:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f6be:	4620      	mov	r0, r4
 800f6c0:	f7ff fd48 	bl	800f154 <__hi0bits>
 800f6c4:	f1c0 0320 	rsb	r3, r0, #32
 800f6c8:	280a      	cmp	r0, #10
 800f6ca:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800f748 <__b2d+0x9c>
 800f6ce:	600b      	str	r3, [r1, #0]
 800f6d0:	dc14      	bgt.n	800f6fc <__b2d+0x50>
 800f6d2:	f1c0 0e0b 	rsb	lr, r0, #11
 800f6d6:	fa24 f10e 	lsr.w	r1, r4, lr
 800f6da:	42b7      	cmp	r7, r6
 800f6dc:	ea41 030c 	orr.w	r3, r1, ip
 800f6e0:	bf34      	ite	cc
 800f6e2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f6e6:	2100      	movcs	r1, #0
 800f6e8:	3015      	adds	r0, #21
 800f6ea:	fa04 f000 	lsl.w	r0, r4, r0
 800f6ee:	fa21 f10e 	lsr.w	r1, r1, lr
 800f6f2:	ea40 0201 	orr.w	r2, r0, r1
 800f6f6:	ec43 2b10 	vmov	d0, r2, r3
 800f6fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f6fc:	42b7      	cmp	r7, r6
 800f6fe:	bf3a      	itte	cc
 800f700:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f704:	f1a5 0608 	subcc.w	r6, r5, #8
 800f708:	2100      	movcs	r1, #0
 800f70a:	380b      	subs	r0, #11
 800f70c:	d017      	beq.n	800f73e <__b2d+0x92>
 800f70e:	f1c0 0c20 	rsb	ip, r0, #32
 800f712:	fa04 f500 	lsl.w	r5, r4, r0
 800f716:	42be      	cmp	r6, r7
 800f718:	fa21 f40c 	lsr.w	r4, r1, ip
 800f71c:	ea45 0504 	orr.w	r5, r5, r4
 800f720:	bf8c      	ite	hi
 800f722:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800f726:	2400      	movls	r4, #0
 800f728:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800f72c:	fa01 f000 	lsl.w	r0, r1, r0
 800f730:	fa24 f40c 	lsr.w	r4, r4, ip
 800f734:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f738:	ea40 0204 	orr.w	r2, r0, r4
 800f73c:	e7db      	b.n	800f6f6 <__b2d+0x4a>
 800f73e:	ea44 030c 	orr.w	r3, r4, ip
 800f742:	460a      	mov	r2, r1
 800f744:	e7d7      	b.n	800f6f6 <__b2d+0x4a>
 800f746:	bf00      	nop
 800f748:	3ff00000 	.word	0x3ff00000

0800f74c <__d2b>:
 800f74c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f750:	4689      	mov	r9, r1
 800f752:	2101      	movs	r1, #1
 800f754:	ec57 6b10 	vmov	r6, r7, d0
 800f758:	4690      	mov	r8, r2
 800f75a:	f7ff fc09 	bl	800ef70 <_Balloc>
 800f75e:	4604      	mov	r4, r0
 800f760:	b930      	cbnz	r0, 800f770 <__d2b+0x24>
 800f762:	4602      	mov	r2, r0
 800f764:	4b25      	ldr	r3, [pc, #148]	; (800f7fc <__d2b+0xb0>)
 800f766:	4826      	ldr	r0, [pc, #152]	; (800f800 <__d2b+0xb4>)
 800f768:	f240 310a 	movw	r1, #778	; 0x30a
 800f76c:	f000 fabe 	bl	800fcec <__assert_func>
 800f770:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f774:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f778:	bb35      	cbnz	r5, 800f7c8 <__d2b+0x7c>
 800f77a:	2e00      	cmp	r6, #0
 800f77c:	9301      	str	r3, [sp, #4]
 800f77e:	d028      	beq.n	800f7d2 <__d2b+0x86>
 800f780:	4668      	mov	r0, sp
 800f782:	9600      	str	r6, [sp, #0]
 800f784:	f7ff fd06 	bl	800f194 <__lo0bits>
 800f788:	9900      	ldr	r1, [sp, #0]
 800f78a:	b300      	cbz	r0, 800f7ce <__d2b+0x82>
 800f78c:	9a01      	ldr	r2, [sp, #4]
 800f78e:	f1c0 0320 	rsb	r3, r0, #32
 800f792:	fa02 f303 	lsl.w	r3, r2, r3
 800f796:	430b      	orrs	r3, r1
 800f798:	40c2      	lsrs	r2, r0
 800f79a:	6163      	str	r3, [r4, #20]
 800f79c:	9201      	str	r2, [sp, #4]
 800f79e:	9b01      	ldr	r3, [sp, #4]
 800f7a0:	61a3      	str	r3, [r4, #24]
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	bf14      	ite	ne
 800f7a6:	2202      	movne	r2, #2
 800f7a8:	2201      	moveq	r2, #1
 800f7aa:	6122      	str	r2, [r4, #16]
 800f7ac:	b1d5      	cbz	r5, 800f7e4 <__d2b+0x98>
 800f7ae:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f7b2:	4405      	add	r5, r0
 800f7b4:	f8c9 5000 	str.w	r5, [r9]
 800f7b8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f7bc:	f8c8 0000 	str.w	r0, [r8]
 800f7c0:	4620      	mov	r0, r4
 800f7c2:	b003      	add	sp, #12
 800f7c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f7c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f7cc:	e7d5      	b.n	800f77a <__d2b+0x2e>
 800f7ce:	6161      	str	r1, [r4, #20]
 800f7d0:	e7e5      	b.n	800f79e <__d2b+0x52>
 800f7d2:	a801      	add	r0, sp, #4
 800f7d4:	f7ff fcde 	bl	800f194 <__lo0bits>
 800f7d8:	9b01      	ldr	r3, [sp, #4]
 800f7da:	6163      	str	r3, [r4, #20]
 800f7dc:	2201      	movs	r2, #1
 800f7de:	6122      	str	r2, [r4, #16]
 800f7e0:	3020      	adds	r0, #32
 800f7e2:	e7e3      	b.n	800f7ac <__d2b+0x60>
 800f7e4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f7e8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f7ec:	f8c9 0000 	str.w	r0, [r9]
 800f7f0:	6918      	ldr	r0, [r3, #16]
 800f7f2:	f7ff fcaf 	bl	800f154 <__hi0bits>
 800f7f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f7fa:	e7df      	b.n	800f7bc <__d2b+0x70>
 800f7fc:	080107c8 	.word	0x080107c8
 800f800:	08010854 	.word	0x08010854

0800f804 <__ratio>:
 800f804:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f808:	4688      	mov	r8, r1
 800f80a:	4669      	mov	r1, sp
 800f80c:	4681      	mov	r9, r0
 800f80e:	f7ff ff4d 	bl	800f6ac <__b2d>
 800f812:	a901      	add	r1, sp, #4
 800f814:	4640      	mov	r0, r8
 800f816:	ec55 4b10 	vmov	r4, r5, d0
 800f81a:	f7ff ff47 	bl	800f6ac <__b2d>
 800f81e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f822:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f826:	eba3 0c02 	sub.w	ip, r3, r2
 800f82a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f82e:	1a9b      	subs	r3, r3, r2
 800f830:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f834:	ec51 0b10 	vmov	r0, r1, d0
 800f838:	2b00      	cmp	r3, #0
 800f83a:	bfd6      	itet	le
 800f83c:	460a      	movle	r2, r1
 800f83e:	462a      	movgt	r2, r5
 800f840:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f844:	468b      	mov	fp, r1
 800f846:	462f      	mov	r7, r5
 800f848:	bfd4      	ite	le
 800f84a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f84e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f852:	4620      	mov	r0, r4
 800f854:	ee10 2a10 	vmov	r2, s0
 800f858:	465b      	mov	r3, fp
 800f85a:	4639      	mov	r1, r7
 800f85c:	f7f1 f86e 	bl	800093c <__aeabi_ddiv>
 800f860:	ec41 0b10 	vmov	d0, r0, r1
 800f864:	b003      	add	sp, #12
 800f866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f86a <__copybits>:
 800f86a:	3901      	subs	r1, #1
 800f86c:	b570      	push	{r4, r5, r6, lr}
 800f86e:	1149      	asrs	r1, r1, #5
 800f870:	6914      	ldr	r4, [r2, #16]
 800f872:	3101      	adds	r1, #1
 800f874:	f102 0314 	add.w	r3, r2, #20
 800f878:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f87c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f880:	1f05      	subs	r5, r0, #4
 800f882:	42a3      	cmp	r3, r4
 800f884:	d30c      	bcc.n	800f8a0 <__copybits+0x36>
 800f886:	1aa3      	subs	r3, r4, r2
 800f888:	3b11      	subs	r3, #17
 800f88a:	f023 0303 	bic.w	r3, r3, #3
 800f88e:	3211      	adds	r2, #17
 800f890:	42a2      	cmp	r2, r4
 800f892:	bf88      	it	hi
 800f894:	2300      	movhi	r3, #0
 800f896:	4418      	add	r0, r3
 800f898:	2300      	movs	r3, #0
 800f89a:	4288      	cmp	r0, r1
 800f89c:	d305      	bcc.n	800f8aa <__copybits+0x40>
 800f89e:	bd70      	pop	{r4, r5, r6, pc}
 800f8a0:	f853 6b04 	ldr.w	r6, [r3], #4
 800f8a4:	f845 6f04 	str.w	r6, [r5, #4]!
 800f8a8:	e7eb      	b.n	800f882 <__copybits+0x18>
 800f8aa:	f840 3b04 	str.w	r3, [r0], #4
 800f8ae:	e7f4      	b.n	800f89a <__copybits+0x30>

0800f8b0 <__any_on>:
 800f8b0:	f100 0214 	add.w	r2, r0, #20
 800f8b4:	6900      	ldr	r0, [r0, #16]
 800f8b6:	114b      	asrs	r3, r1, #5
 800f8b8:	4298      	cmp	r0, r3
 800f8ba:	b510      	push	{r4, lr}
 800f8bc:	db11      	blt.n	800f8e2 <__any_on+0x32>
 800f8be:	dd0a      	ble.n	800f8d6 <__any_on+0x26>
 800f8c0:	f011 011f 	ands.w	r1, r1, #31
 800f8c4:	d007      	beq.n	800f8d6 <__any_on+0x26>
 800f8c6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f8ca:	fa24 f001 	lsr.w	r0, r4, r1
 800f8ce:	fa00 f101 	lsl.w	r1, r0, r1
 800f8d2:	428c      	cmp	r4, r1
 800f8d4:	d10b      	bne.n	800f8ee <__any_on+0x3e>
 800f8d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f8da:	4293      	cmp	r3, r2
 800f8dc:	d803      	bhi.n	800f8e6 <__any_on+0x36>
 800f8de:	2000      	movs	r0, #0
 800f8e0:	bd10      	pop	{r4, pc}
 800f8e2:	4603      	mov	r3, r0
 800f8e4:	e7f7      	b.n	800f8d6 <__any_on+0x26>
 800f8e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f8ea:	2900      	cmp	r1, #0
 800f8ec:	d0f5      	beq.n	800f8da <__any_on+0x2a>
 800f8ee:	2001      	movs	r0, #1
 800f8f0:	e7f6      	b.n	800f8e0 <__any_on+0x30>

0800f8f2 <_calloc_r>:
 800f8f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f8f4:	fba1 2402 	umull	r2, r4, r1, r2
 800f8f8:	b94c      	cbnz	r4, 800f90e <_calloc_r+0x1c>
 800f8fa:	4611      	mov	r1, r2
 800f8fc:	9201      	str	r2, [sp, #4]
 800f8fe:	f7fc f9b3 	bl	800bc68 <_malloc_r>
 800f902:	9a01      	ldr	r2, [sp, #4]
 800f904:	4605      	mov	r5, r0
 800f906:	b930      	cbnz	r0, 800f916 <_calloc_r+0x24>
 800f908:	4628      	mov	r0, r5
 800f90a:	b003      	add	sp, #12
 800f90c:	bd30      	pop	{r4, r5, pc}
 800f90e:	220c      	movs	r2, #12
 800f910:	6002      	str	r2, [r0, #0]
 800f912:	2500      	movs	r5, #0
 800f914:	e7f8      	b.n	800f908 <_calloc_r+0x16>
 800f916:	4621      	mov	r1, r4
 800f918:	f7fc f97d 	bl	800bc16 <memset>
 800f91c:	e7f4      	b.n	800f908 <_calloc_r+0x16>
	...

0800f920 <_free_r>:
 800f920:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f922:	2900      	cmp	r1, #0
 800f924:	d044      	beq.n	800f9b0 <_free_r+0x90>
 800f926:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f92a:	9001      	str	r0, [sp, #4]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	f1a1 0404 	sub.w	r4, r1, #4
 800f932:	bfb8      	it	lt
 800f934:	18e4      	addlt	r4, r4, r3
 800f936:	f7ff fb0f 	bl	800ef58 <__malloc_lock>
 800f93a:	4a1e      	ldr	r2, [pc, #120]	; (800f9b4 <_free_r+0x94>)
 800f93c:	9801      	ldr	r0, [sp, #4]
 800f93e:	6813      	ldr	r3, [r2, #0]
 800f940:	b933      	cbnz	r3, 800f950 <_free_r+0x30>
 800f942:	6063      	str	r3, [r4, #4]
 800f944:	6014      	str	r4, [r2, #0]
 800f946:	b003      	add	sp, #12
 800f948:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f94c:	f7ff bb0a 	b.w	800ef64 <__malloc_unlock>
 800f950:	42a3      	cmp	r3, r4
 800f952:	d908      	bls.n	800f966 <_free_r+0x46>
 800f954:	6825      	ldr	r5, [r4, #0]
 800f956:	1961      	adds	r1, r4, r5
 800f958:	428b      	cmp	r3, r1
 800f95a:	bf01      	itttt	eq
 800f95c:	6819      	ldreq	r1, [r3, #0]
 800f95e:	685b      	ldreq	r3, [r3, #4]
 800f960:	1949      	addeq	r1, r1, r5
 800f962:	6021      	streq	r1, [r4, #0]
 800f964:	e7ed      	b.n	800f942 <_free_r+0x22>
 800f966:	461a      	mov	r2, r3
 800f968:	685b      	ldr	r3, [r3, #4]
 800f96a:	b10b      	cbz	r3, 800f970 <_free_r+0x50>
 800f96c:	42a3      	cmp	r3, r4
 800f96e:	d9fa      	bls.n	800f966 <_free_r+0x46>
 800f970:	6811      	ldr	r1, [r2, #0]
 800f972:	1855      	adds	r5, r2, r1
 800f974:	42a5      	cmp	r5, r4
 800f976:	d10b      	bne.n	800f990 <_free_r+0x70>
 800f978:	6824      	ldr	r4, [r4, #0]
 800f97a:	4421      	add	r1, r4
 800f97c:	1854      	adds	r4, r2, r1
 800f97e:	42a3      	cmp	r3, r4
 800f980:	6011      	str	r1, [r2, #0]
 800f982:	d1e0      	bne.n	800f946 <_free_r+0x26>
 800f984:	681c      	ldr	r4, [r3, #0]
 800f986:	685b      	ldr	r3, [r3, #4]
 800f988:	6053      	str	r3, [r2, #4]
 800f98a:	4421      	add	r1, r4
 800f98c:	6011      	str	r1, [r2, #0]
 800f98e:	e7da      	b.n	800f946 <_free_r+0x26>
 800f990:	d902      	bls.n	800f998 <_free_r+0x78>
 800f992:	230c      	movs	r3, #12
 800f994:	6003      	str	r3, [r0, #0]
 800f996:	e7d6      	b.n	800f946 <_free_r+0x26>
 800f998:	6825      	ldr	r5, [r4, #0]
 800f99a:	1961      	adds	r1, r4, r5
 800f99c:	428b      	cmp	r3, r1
 800f99e:	bf04      	itt	eq
 800f9a0:	6819      	ldreq	r1, [r3, #0]
 800f9a2:	685b      	ldreq	r3, [r3, #4]
 800f9a4:	6063      	str	r3, [r4, #4]
 800f9a6:	bf04      	itt	eq
 800f9a8:	1949      	addeq	r1, r1, r5
 800f9aa:	6021      	streq	r1, [r4, #0]
 800f9ac:	6054      	str	r4, [r2, #4]
 800f9ae:	e7ca      	b.n	800f946 <_free_r+0x26>
 800f9b0:	b003      	add	sp, #12
 800f9b2:	bd30      	pop	{r4, r5, pc}
 800f9b4:	20007834 	.word	0x20007834

0800f9b8 <__ssputs_r>:
 800f9b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9bc:	688e      	ldr	r6, [r1, #8]
 800f9be:	429e      	cmp	r6, r3
 800f9c0:	4682      	mov	sl, r0
 800f9c2:	460c      	mov	r4, r1
 800f9c4:	4690      	mov	r8, r2
 800f9c6:	461f      	mov	r7, r3
 800f9c8:	d838      	bhi.n	800fa3c <__ssputs_r+0x84>
 800f9ca:	898a      	ldrh	r2, [r1, #12]
 800f9cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f9d0:	d032      	beq.n	800fa38 <__ssputs_r+0x80>
 800f9d2:	6825      	ldr	r5, [r4, #0]
 800f9d4:	6909      	ldr	r1, [r1, #16]
 800f9d6:	eba5 0901 	sub.w	r9, r5, r1
 800f9da:	6965      	ldr	r5, [r4, #20]
 800f9dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f9e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f9e4:	3301      	adds	r3, #1
 800f9e6:	444b      	add	r3, r9
 800f9e8:	106d      	asrs	r5, r5, #1
 800f9ea:	429d      	cmp	r5, r3
 800f9ec:	bf38      	it	cc
 800f9ee:	461d      	movcc	r5, r3
 800f9f0:	0553      	lsls	r3, r2, #21
 800f9f2:	d531      	bpl.n	800fa58 <__ssputs_r+0xa0>
 800f9f4:	4629      	mov	r1, r5
 800f9f6:	f7fc f937 	bl	800bc68 <_malloc_r>
 800f9fa:	4606      	mov	r6, r0
 800f9fc:	b950      	cbnz	r0, 800fa14 <__ssputs_r+0x5c>
 800f9fe:	230c      	movs	r3, #12
 800fa00:	f8ca 3000 	str.w	r3, [sl]
 800fa04:	89a3      	ldrh	r3, [r4, #12]
 800fa06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa0a:	81a3      	strh	r3, [r4, #12]
 800fa0c:	f04f 30ff 	mov.w	r0, #4294967295
 800fa10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa14:	6921      	ldr	r1, [r4, #16]
 800fa16:	464a      	mov	r2, r9
 800fa18:	f7fc f8ef 	bl	800bbfa <memcpy>
 800fa1c:	89a3      	ldrh	r3, [r4, #12]
 800fa1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fa22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa26:	81a3      	strh	r3, [r4, #12]
 800fa28:	6126      	str	r6, [r4, #16]
 800fa2a:	6165      	str	r5, [r4, #20]
 800fa2c:	444e      	add	r6, r9
 800fa2e:	eba5 0509 	sub.w	r5, r5, r9
 800fa32:	6026      	str	r6, [r4, #0]
 800fa34:	60a5      	str	r5, [r4, #8]
 800fa36:	463e      	mov	r6, r7
 800fa38:	42be      	cmp	r6, r7
 800fa3a:	d900      	bls.n	800fa3e <__ssputs_r+0x86>
 800fa3c:	463e      	mov	r6, r7
 800fa3e:	6820      	ldr	r0, [r4, #0]
 800fa40:	4632      	mov	r2, r6
 800fa42:	4641      	mov	r1, r8
 800fa44:	f000 f982 	bl	800fd4c <memmove>
 800fa48:	68a3      	ldr	r3, [r4, #8]
 800fa4a:	1b9b      	subs	r3, r3, r6
 800fa4c:	60a3      	str	r3, [r4, #8]
 800fa4e:	6823      	ldr	r3, [r4, #0]
 800fa50:	4433      	add	r3, r6
 800fa52:	6023      	str	r3, [r4, #0]
 800fa54:	2000      	movs	r0, #0
 800fa56:	e7db      	b.n	800fa10 <__ssputs_r+0x58>
 800fa58:	462a      	mov	r2, r5
 800fa5a:	f000 f991 	bl	800fd80 <_realloc_r>
 800fa5e:	4606      	mov	r6, r0
 800fa60:	2800      	cmp	r0, #0
 800fa62:	d1e1      	bne.n	800fa28 <__ssputs_r+0x70>
 800fa64:	6921      	ldr	r1, [r4, #16]
 800fa66:	4650      	mov	r0, sl
 800fa68:	f7ff ff5a 	bl	800f920 <_free_r>
 800fa6c:	e7c7      	b.n	800f9fe <__ssputs_r+0x46>
	...

0800fa70 <_svfiprintf_r>:
 800fa70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa74:	4698      	mov	r8, r3
 800fa76:	898b      	ldrh	r3, [r1, #12]
 800fa78:	061b      	lsls	r3, r3, #24
 800fa7a:	b09d      	sub	sp, #116	; 0x74
 800fa7c:	4607      	mov	r7, r0
 800fa7e:	460d      	mov	r5, r1
 800fa80:	4614      	mov	r4, r2
 800fa82:	d50e      	bpl.n	800faa2 <_svfiprintf_r+0x32>
 800fa84:	690b      	ldr	r3, [r1, #16]
 800fa86:	b963      	cbnz	r3, 800faa2 <_svfiprintf_r+0x32>
 800fa88:	2140      	movs	r1, #64	; 0x40
 800fa8a:	f7fc f8ed 	bl	800bc68 <_malloc_r>
 800fa8e:	6028      	str	r0, [r5, #0]
 800fa90:	6128      	str	r0, [r5, #16]
 800fa92:	b920      	cbnz	r0, 800fa9e <_svfiprintf_r+0x2e>
 800fa94:	230c      	movs	r3, #12
 800fa96:	603b      	str	r3, [r7, #0]
 800fa98:	f04f 30ff 	mov.w	r0, #4294967295
 800fa9c:	e0d1      	b.n	800fc42 <_svfiprintf_r+0x1d2>
 800fa9e:	2340      	movs	r3, #64	; 0x40
 800faa0:	616b      	str	r3, [r5, #20]
 800faa2:	2300      	movs	r3, #0
 800faa4:	9309      	str	r3, [sp, #36]	; 0x24
 800faa6:	2320      	movs	r3, #32
 800faa8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800faac:	f8cd 800c 	str.w	r8, [sp, #12]
 800fab0:	2330      	movs	r3, #48	; 0x30
 800fab2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800fc5c <_svfiprintf_r+0x1ec>
 800fab6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800faba:	f04f 0901 	mov.w	r9, #1
 800fabe:	4623      	mov	r3, r4
 800fac0:	469a      	mov	sl, r3
 800fac2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fac6:	b10a      	cbz	r2, 800facc <_svfiprintf_r+0x5c>
 800fac8:	2a25      	cmp	r2, #37	; 0x25
 800faca:	d1f9      	bne.n	800fac0 <_svfiprintf_r+0x50>
 800facc:	ebba 0b04 	subs.w	fp, sl, r4
 800fad0:	d00b      	beq.n	800faea <_svfiprintf_r+0x7a>
 800fad2:	465b      	mov	r3, fp
 800fad4:	4622      	mov	r2, r4
 800fad6:	4629      	mov	r1, r5
 800fad8:	4638      	mov	r0, r7
 800fada:	f7ff ff6d 	bl	800f9b8 <__ssputs_r>
 800fade:	3001      	adds	r0, #1
 800fae0:	f000 80aa 	beq.w	800fc38 <_svfiprintf_r+0x1c8>
 800fae4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fae6:	445a      	add	r2, fp
 800fae8:	9209      	str	r2, [sp, #36]	; 0x24
 800faea:	f89a 3000 	ldrb.w	r3, [sl]
 800faee:	2b00      	cmp	r3, #0
 800faf0:	f000 80a2 	beq.w	800fc38 <_svfiprintf_r+0x1c8>
 800faf4:	2300      	movs	r3, #0
 800faf6:	f04f 32ff 	mov.w	r2, #4294967295
 800fafa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fafe:	f10a 0a01 	add.w	sl, sl, #1
 800fb02:	9304      	str	r3, [sp, #16]
 800fb04:	9307      	str	r3, [sp, #28]
 800fb06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fb0a:	931a      	str	r3, [sp, #104]	; 0x68
 800fb0c:	4654      	mov	r4, sl
 800fb0e:	2205      	movs	r2, #5
 800fb10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb14:	4851      	ldr	r0, [pc, #324]	; (800fc5c <_svfiprintf_r+0x1ec>)
 800fb16:	f7f0 fbdb 	bl	80002d0 <memchr>
 800fb1a:	9a04      	ldr	r2, [sp, #16]
 800fb1c:	b9d8      	cbnz	r0, 800fb56 <_svfiprintf_r+0xe6>
 800fb1e:	06d0      	lsls	r0, r2, #27
 800fb20:	bf44      	itt	mi
 800fb22:	2320      	movmi	r3, #32
 800fb24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fb28:	0711      	lsls	r1, r2, #28
 800fb2a:	bf44      	itt	mi
 800fb2c:	232b      	movmi	r3, #43	; 0x2b
 800fb2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fb32:	f89a 3000 	ldrb.w	r3, [sl]
 800fb36:	2b2a      	cmp	r3, #42	; 0x2a
 800fb38:	d015      	beq.n	800fb66 <_svfiprintf_r+0xf6>
 800fb3a:	9a07      	ldr	r2, [sp, #28]
 800fb3c:	4654      	mov	r4, sl
 800fb3e:	2000      	movs	r0, #0
 800fb40:	f04f 0c0a 	mov.w	ip, #10
 800fb44:	4621      	mov	r1, r4
 800fb46:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fb4a:	3b30      	subs	r3, #48	; 0x30
 800fb4c:	2b09      	cmp	r3, #9
 800fb4e:	d94e      	bls.n	800fbee <_svfiprintf_r+0x17e>
 800fb50:	b1b0      	cbz	r0, 800fb80 <_svfiprintf_r+0x110>
 800fb52:	9207      	str	r2, [sp, #28]
 800fb54:	e014      	b.n	800fb80 <_svfiprintf_r+0x110>
 800fb56:	eba0 0308 	sub.w	r3, r0, r8
 800fb5a:	fa09 f303 	lsl.w	r3, r9, r3
 800fb5e:	4313      	orrs	r3, r2
 800fb60:	9304      	str	r3, [sp, #16]
 800fb62:	46a2      	mov	sl, r4
 800fb64:	e7d2      	b.n	800fb0c <_svfiprintf_r+0x9c>
 800fb66:	9b03      	ldr	r3, [sp, #12]
 800fb68:	1d19      	adds	r1, r3, #4
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	9103      	str	r1, [sp, #12]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	bfbb      	ittet	lt
 800fb72:	425b      	neglt	r3, r3
 800fb74:	f042 0202 	orrlt.w	r2, r2, #2
 800fb78:	9307      	strge	r3, [sp, #28]
 800fb7a:	9307      	strlt	r3, [sp, #28]
 800fb7c:	bfb8      	it	lt
 800fb7e:	9204      	strlt	r2, [sp, #16]
 800fb80:	7823      	ldrb	r3, [r4, #0]
 800fb82:	2b2e      	cmp	r3, #46	; 0x2e
 800fb84:	d10c      	bne.n	800fba0 <_svfiprintf_r+0x130>
 800fb86:	7863      	ldrb	r3, [r4, #1]
 800fb88:	2b2a      	cmp	r3, #42	; 0x2a
 800fb8a:	d135      	bne.n	800fbf8 <_svfiprintf_r+0x188>
 800fb8c:	9b03      	ldr	r3, [sp, #12]
 800fb8e:	1d1a      	adds	r2, r3, #4
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	9203      	str	r2, [sp, #12]
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	bfb8      	it	lt
 800fb98:	f04f 33ff 	movlt.w	r3, #4294967295
 800fb9c:	3402      	adds	r4, #2
 800fb9e:	9305      	str	r3, [sp, #20]
 800fba0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800fc6c <_svfiprintf_r+0x1fc>
 800fba4:	7821      	ldrb	r1, [r4, #0]
 800fba6:	2203      	movs	r2, #3
 800fba8:	4650      	mov	r0, sl
 800fbaa:	f7f0 fb91 	bl	80002d0 <memchr>
 800fbae:	b140      	cbz	r0, 800fbc2 <_svfiprintf_r+0x152>
 800fbb0:	2340      	movs	r3, #64	; 0x40
 800fbb2:	eba0 000a 	sub.w	r0, r0, sl
 800fbb6:	fa03 f000 	lsl.w	r0, r3, r0
 800fbba:	9b04      	ldr	r3, [sp, #16]
 800fbbc:	4303      	orrs	r3, r0
 800fbbe:	3401      	adds	r4, #1
 800fbc0:	9304      	str	r3, [sp, #16]
 800fbc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fbc6:	4826      	ldr	r0, [pc, #152]	; (800fc60 <_svfiprintf_r+0x1f0>)
 800fbc8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fbcc:	2206      	movs	r2, #6
 800fbce:	f7f0 fb7f 	bl	80002d0 <memchr>
 800fbd2:	2800      	cmp	r0, #0
 800fbd4:	d038      	beq.n	800fc48 <_svfiprintf_r+0x1d8>
 800fbd6:	4b23      	ldr	r3, [pc, #140]	; (800fc64 <_svfiprintf_r+0x1f4>)
 800fbd8:	bb1b      	cbnz	r3, 800fc22 <_svfiprintf_r+0x1b2>
 800fbda:	9b03      	ldr	r3, [sp, #12]
 800fbdc:	3307      	adds	r3, #7
 800fbde:	f023 0307 	bic.w	r3, r3, #7
 800fbe2:	3308      	adds	r3, #8
 800fbe4:	9303      	str	r3, [sp, #12]
 800fbe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fbe8:	4433      	add	r3, r6
 800fbea:	9309      	str	r3, [sp, #36]	; 0x24
 800fbec:	e767      	b.n	800fabe <_svfiprintf_r+0x4e>
 800fbee:	fb0c 3202 	mla	r2, ip, r2, r3
 800fbf2:	460c      	mov	r4, r1
 800fbf4:	2001      	movs	r0, #1
 800fbf6:	e7a5      	b.n	800fb44 <_svfiprintf_r+0xd4>
 800fbf8:	2300      	movs	r3, #0
 800fbfa:	3401      	adds	r4, #1
 800fbfc:	9305      	str	r3, [sp, #20]
 800fbfe:	4619      	mov	r1, r3
 800fc00:	f04f 0c0a 	mov.w	ip, #10
 800fc04:	4620      	mov	r0, r4
 800fc06:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fc0a:	3a30      	subs	r2, #48	; 0x30
 800fc0c:	2a09      	cmp	r2, #9
 800fc0e:	d903      	bls.n	800fc18 <_svfiprintf_r+0x1a8>
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d0c5      	beq.n	800fba0 <_svfiprintf_r+0x130>
 800fc14:	9105      	str	r1, [sp, #20]
 800fc16:	e7c3      	b.n	800fba0 <_svfiprintf_r+0x130>
 800fc18:	fb0c 2101 	mla	r1, ip, r1, r2
 800fc1c:	4604      	mov	r4, r0
 800fc1e:	2301      	movs	r3, #1
 800fc20:	e7f0      	b.n	800fc04 <_svfiprintf_r+0x194>
 800fc22:	ab03      	add	r3, sp, #12
 800fc24:	9300      	str	r3, [sp, #0]
 800fc26:	462a      	mov	r2, r5
 800fc28:	4b0f      	ldr	r3, [pc, #60]	; (800fc68 <_svfiprintf_r+0x1f8>)
 800fc2a:	a904      	add	r1, sp, #16
 800fc2c:	4638      	mov	r0, r7
 800fc2e:	f7fc f92f 	bl	800be90 <_printf_float>
 800fc32:	1c42      	adds	r2, r0, #1
 800fc34:	4606      	mov	r6, r0
 800fc36:	d1d6      	bne.n	800fbe6 <_svfiprintf_r+0x176>
 800fc38:	89ab      	ldrh	r3, [r5, #12]
 800fc3a:	065b      	lsls	r3, r3, #25
 800fc3c:	f53f af2c 	bmi.w	800fa98 <_svfiprintf_r+0x28>
 800fc40:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fc42:	b01d      	add	sp, #116	; 0x74
 800fc44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc48:	ab03      	add	r3, sp, #12
 800fc4a:	9300      	str	r3, [sp, #0]
 800fc4c:	462a      	mov	r2, r5
 800fc4e:	4b06      	ldr	r3, [pc, #24]	; (800fc68 <_svfiprintf_r+0x1f8>)
 800fc50:	a904      	add	r1, sp, #16
 800fc52:	4638      	mov	r0, r7
 800fc54:	f7fc fbc0 	bl	800c3d8 <_printf_i>
 800fc58:	e7eb      	b.n	800fc32 <_svfiprintf_r+0x1c2>
 800fc5a:	bf00      	nop
 800fc5c:	080109ac 	.word	0x080109ac
 800fc60:	080109b6 	.word	0x080109b6
 800fc64:	0800be91 	.word	0x0800be91
 800fc68:	0800f9b9 	.word	0x0800f9b9
 800fc6c:	080109b2 	.word	0x080109b2

0800fc70 <_read_r>:
 800fc70:	b538      	push	{r3, r4, r5, lr}
 800fc72:	4d07      	ldr	r5, [pc, #28]	; (800fc90 <_read_r+0x20>)
 800fc74:	4604      	mov	r4, r0
 800fc76:	4608      	mov	r0, r1
 800fc78:	4611      	mov	r1, r2
 800fc7a:	2200      	movs	r2, #0
 800fc7c:	602a      	str	r2, [r5, #0]
 800fc7e:	461a      	mov	r2, r3
 800fc80:	f7f2 f84c 	bl	8001d1c <_read>
 800fc84:	1c43      	adds	r3, r0, #1
 800fc86:	d102      	bne.n	800fc8e <_read_r+0x1e>
 800fc88:	682b      	ldr	r3, [r5, #0]
 800fc8a:	b103      	cbz	r3, 800fc8e <_read_r+0x1e>
 800fc8c:	6023      	str	r3, [r4, #0]
 800fc8e:	bd38      	pop	{r3, r4, r5, pc}
 800fc90:	2000783c 	.word	0x2000783c
 800fc94:	00000000 	.word	0x00000000

0800fc98 <nan>:
 800fc98:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800fca0 <nan+0x8>
 800fc9c:	4770      	bx	lr
 800fc9e:	bf00      	nop
 800fca0:	00000000 	.word	0x00000000
 800fca4:	7ff80000 	.word	0x7ff80000

0800fca8 <strncmp>:
 800fca8:	b510      	push	{r4, lr}
 800fcaa:	b17a      	cbz	r2, 800fccc <strncmp+0x24>
 800fcac:	4603      	mov	r3, r0
 800fcae:	3901      	subs	r1, #1
 800fcb0:	1884      	adds	r4, r0, r2
 800fcb2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fcb6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800fcba:	4290      	cmp	r0, r2
 800fcbc:	d101      	bne.n	800fcc2 <strncmp+0x1a>
 800fcbe:	42a3      	cmp	r3, r4
 800fcc0:	d101      	bne.n	800fcc6 <strncmp+0x1e>
 800fcc2:	1a80      	subs	r0, r0, r2
 800fcc4:	bd10      	pop	{r4, pc}
 800fcc6:	2800      	cmp	r0, #0
 800fcc8:	d1f3      	bne.n	800fcb2 <strncmp+0xa>
 800fcca:	e7fa      	b.n	800fcc2 <strncmp+0x1a>
 800fccc:	4610      	mov	r0, r2
 800fcce:	e7f9      	b.n	800fcc4 <strncmp+0x1c>

0800fcd0 <__ascii_wctomb>:
 800fcd0:	b149      	cbz	r1, 800fce6 <__ascii_wctomb+0x16>
 800fcd2:	2aff      	cmp	r2, #255	; 0xff
 800fcd4:	bf85      	ittet	hi
 800fcd6:	238a      	movhi	r3, #138	; 0x8a
 800fcd8:	6003      	strhi	r3, [r0, #0]
 800fcda:	700a      	strbls	r2, [r1, #0]
 800fcdc:	f04f 30ff 	movhi.w	r0, #4294967295
 800fce0:	bf98      	it	ls
 800fce2:	2001      	movls	r0, #1
 800fce4:	4770      	bx	lr
 800fce6:	4608      	mov	r0, r1
 800fce8:	4770      	bx	lr
	...

0800fcec <__assert_func>:
 800fcec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fcee:	4614      	mov	r4, r2
 800fcf0:	461a      	mov	r2, r3
 800fcf2:	4b09      	ldr	r3, [pc, #36]	; (800fd18 <__assert_func+0x2c>)
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	4605      	mov	r5, r0
 800fcf8:	68d8      	ldr	r0, [r3, #12]
 800fcfa:	b14c      	cbz	r4, 800fd10 <__assert_func+0x24>
 800fcfc:	4b07      	ldr	r3, [pc, #28]	; (800fd1c <__assert_func+0x30>)
 800fcfe:	9100      	str	r1, [sp, #0]
 800fd00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fd04:	4906      	ldr	r1, [pc, #24]	; (800fd20 <__assert_func+0x34>)
 800fd06:	462b      	mov	r3, r5
 800fd08:	f000 f80e 	bl	800fd28 <fiprintf>
 800fd0c:	f000 fa80 	bl	8010210 <abort>
 800fd10:	4b04      	ldr	r3, [pc, #16]	; (800fd24 <__assert_func+0x38>)
 800fd12:	461c      	mov	r4, r3
 800fd14:	e7f3      	b.n	800fcfe <__assert_func+0x12>
 800fd16:	bf00      	nop
 800fd18:	20000010 	.word	0x20000010
 800fd1c:	080109bd 	.word	0x080109bd
 800fd20:	080109ca 	.word	0x080109ca
 800fd24:	080109f8 	.word	0x080109f8

0800fd28 <fiprintf>:
 800fd28:	b40e      	push	{r1, r2, r3}
 800fd2a:	b503      	push	{r0, r1, lr}
 800fd2c:	4601      	mov	r1, r0
 800fd2e:	ab03      	add	r3, sp, #12
 800fd30:	4805      	ldr	r0, [pc, #20]	; (800fd48 <fiprintf+0x20>)
 800fd32:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd36:	6800      	ldr	r0, [r0, #0]
 800fd38:	9301      	str	r3, [sp, #4]
 800fd3a:	f000 f879 	bl	800fe30 <_vfiprintf_r>
 800fd3e:	b002      	add	sp, #8
 800fd40:	f85d eb04 	ldr.w	lr, [sp], #4
 800fd44:	b003      	add	sp, #12
 800fd46:	4770      	bx	lr
 800fd48:	20000010 	.word	0x20000010

0800fd4c <memmove>:
 800fd4c:	4288      	cmp	r0, r1
 800fd4e:	b510      	push	{r4, lr}
 800fd50:	eb01 0402 	add.w	r4, r1, r2
 800fd54:	d902      	bls.n	800fd5c <memmove+0x10>
 800fd56:	4284      	cmp	r4, r0
 800fd58:	4623      	mov	r3, r4
 800fd5a:	d807      	bhi.n	800fd6c <memmove+0x20>
 800fd5c:	1e43      	subs	r3, r0, #1
 800fd5e:	42a1      	cmp	r1, r4
 800fd60:	d008      	beq.n	800fd74 <memmove+0x28>
 800fd62:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fd66:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fd6a:	e7f8      	b.n	800fd5e <memmove+0x12>
 800fd6c:	4402      	add	r2, r0
 800fd6e:	4601      	mov	r1, r0
 800fd70:	428a      	cmp	r2, r1
 800fd72:	d100      	bne.n	800fd76 <memmove+0x2a>
 800fd74:	bd10      	pop	{r4, pc}
 800fd76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fd7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fd7e:	e7f7      	b.n	800fd70 <memmove+0x24>

0800fd80 <_realloc_r>:
 800fd80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd84:	4680      	mov	r8, r0
 800fd86:	4614      	mov	r4, r2
 800fd88:	460e      	mov	r6, r1
 800fd8a:	b921      	cbnz	r1, 800fd96 <_realloc_r+0x16>
 800fd8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fd90:	4611      	mov	r1, r2
 800fd92:	f7fb bf69 	b.w	800bc68 <_malloc_r>
 800fd96:	b92a      	cbnz	r2, 800fda4 <_realloc_r+0x24>
 800fd98:	f7ff fdc2 	bl	800f920 <_free_r>
 800fd9c:	4625      	mov	r5, r4
 800fd9e:	4628      	mov	r0, r5
 800fda0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fda4:	f000 faa0 	bl	80102e8 <_malloc_usable_size_r>
 800fda8:	4284      	cmp	r4, r0
 800fdaa:	4607      	mov	r7, r0
 800fdac:	d802      	bhi.n	800fdb4 <_realloc_r+0x34>
 800fdae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fdb2:	d812      	bhi.n	800fdda <_realloc_r+0x5a>
 800fdb4:	4621      	mov	r1, r4
 800fdb6:	4640      	mov	r0, r8
 800fdb8:	f7fb ff56 	bl	800bc68 <_malloc_r>
 800fdbc:	4605      	mov	r5, r0
 800fdbe:	2800      	cmp	r0, #0
 800fdc0:	d0ed      	beq.n	800fd9e <_realloc_r+0x1e>
 800fdc2:	42bc      	cmp	r4, r7
 800fdc4:	4622      	mov	r2, r4
 800fdc6:	4631      	mov	r1, r6
 800fdc8:	bf28      	it	cs
 800fdca:	463a      	movcs	r2, r7
 800fdcc:	f7fb ff15 	bl	800bbfa <memcpy>
 800fdd0:	4631      	mov	r1, r6
 800fdd2:	4640      	mov	r0, r8
 800fdd4:	f7ff fda4 	bl	800f920 <_free_r>
 800fdd8:	e7e1      	b.n	800fd9e <_realloc_r+0x1e>
 800fdda:	4635      	mov	r5, r6
 800fddc:	e7df      	b.n	800fd9e <_realloc_r+0x1e>

0800fdde <__sfputc_r>:
 800fdde:	6893      	ldr	r3, [r2, #8]
 800fde0:	3b01      	subs	r3, #1
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	b410      	push	{r4}
 800fde6:	6093      	str	r3, [r2, #8]
 800fde8:	da08      	bge.n	800fdfc <__sfputc_r+0x1e>
 800fdea:	6994      	ldr	r4, [r2, #24]
 800fdec:	42a3      	cmp	r3, r4
 800fdee:	db01      	blt.n	800fdf4 <__sfputc_r+0x16>
 800fdf0:	290a      	cmp	r1, #10
 800fdf2:	d103      	bne.n	800fdfc <__sfputc_r+0x1e>
 800fdf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fdf8:	f000 b94a 	b.w	8010090 <__swbuf_r>
 800fdfc:	6813      	ldr	r3, [r2, #0]
 800fdfe:	1c58      	adds	r0, r3, #1
 800fe00:	6010      	str	r0, [r2, #0]
 800fe02:	7019      	strb	r1, [r3, #0]
 800fe04:	4608      	mov	r0, r1
 800fe06:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fe0a:	4770      	bx	lr

0800fe0c <__sfputs_r>:
 800fe0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe0e:	4606      	mov	r6, r0
 800fe10:	460f      	mov	r7, r1
 800fe12:	4614      	mov	r4, r2
 800fe14:	18d5      	adds	r5, r2, r3
 800fe16:	42ac      	cmp	r4, r5
 800fe18:	d101      	bne.n	800fe1e <__sfputs_r+0x12>
 800fe1a:	2000      	movs	r0, #0
 800fe1c:	e007      	b.n	800fe2e <__sfputs_r+0x22>
 800fe1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe22:	463a      	mov	r2, r7
 800fe24:	4630      	mov	r0, r6
 800fe26:	f7ff ffda 	bl	800fdde <__sfputc_r>
 800fe2a:	1c43      	adds	r3, r0, #1
 800fe2c:	d1f3      	bne.n	800fe16 <__sfputs_r+0xa>
 800fe2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fe30 <_vfiprintf_r>:
 800fe30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe34:	460d      	mov	r5, r1
 800fe36:	b09d      	sub	sp, #116	; 0x74
 800fe38:	4614      	mov	r4, r2
 800fe3a:	4698      	mov	r8, r3
 800fe3c:	4606      	mov	r6, r0
 800fe3e:	b118      	cbz	r0, 800fe48 <_vfiprintf_r+0x18>
 800fe40:	6983      	ldr	r3, [r0, #24]
 800fe42:	b90b      	cbnz	r3, 800fe48 <_vfiprintf_r+0x18>
 800fe44:	f7fb fe04 	bl	800ba50 <__sinit>
 800fe48:	4b89      	ldr	r3, [pc, #548]	; (8010070 <_vfiprintf_r+0x240>)
 800fe4a:	429d      	cmp	r5, r3
 800fe4c:	d11b      	bne.n	800fe86 <_vfiprintf_r+0x56>
 800fe4e:	6875      	ldr	r5, [r6, #4]
 800fe50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fe52:	07d9      	lsls	r1, r3, #31
 800fe54:	d405      	bmi.n	800fe62 <_vfiprintf_r+0x32>
 800fe56:	89ab      	ldrh	r3, [r5, #12]
 800fe58:	059a      	lsls	r2, r3, #22
 800fe5a:	d402      	bmi.n	800fe62 <_vfiprintf_r+0x32>
 800fe5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fe5e:	f7fb feba 	bl	800bbd6 <__retarget_lock_acquire_recursive>
 800fe62:	89ab      	ldrh	r3, [r5, #12]
 800fe64:	071b      	lsls	r3, r3, #28
 800fe66:	d501      	bpl.n	800fe6c <_vfiprintf_r+0x3c>
 800fe68:	692b      	ldr	r3, [r5, #16]
 800fe6a:	b9eb      	cbnz	r3, 800fea8 <_vfiprintf_r+0x78>
 800fe6c:	4629      	mov	r1, r5
 800fe6e:	4630      	mov	r0, r6
 800fe70:	f000 f960 	bl	8010134 <__swsetup_r>
 800fe74:	b1c0      	cbz	r0, 800fea8 <_vfiprintf_r+0x78>
 800fe76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fe78:	07dc      	lsls	r4, r3, #31
 800fe7a:	d50e      	bpl.n	800fe9a <_vfiprintf_r+0x6a>
 800fe7c:	f04f 30ff 	mov.w	r0, #4294967295
 800fe80:	b01d      	add	sp, #116	; 0x74
 800fe82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe86:	4b7b      	ldr	r3, [pc, #492]	; (8010074 <_vfiprintf_r+0x244>)
 800fe88:	429d      	cmp	r5, r3
 800fe8a:	d101      	bne.n	800fe90 <_vfiprintf_r+0x60>
 800fe8c:	68b5      	ldr	r5, [r6, #8]
 800fe8e:	e7df      	b.n	800fe50 <_vfiprintf_r+0x20>
 800fe90:	4b79      	ldr	r3, [pc, #484]	; (8010078 <_vfiprintf_r+0x248>)
 800fe92:	429d      	cmp	r5, r3
 800fe94:	bf08      	it	eq
 800fe96:	68f5      	ldreq	r5, [r6, #12]
 800fe98:	e7da      	b.n	800fe50 <_vfiprintf_r+0x20>
 800fe9a:	89ab      	ldrh	r3, [r5, #12]
 800fe9c:	0598      	lsls	r0, r3, #22
 800fe9e:	d4ed      	bmi.n	800fe7c <_vfiprintf_r+0x4c>
 800fea0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fea2:	f7fb fe99 	bl	800bbd8 <__retarget_lock_release_recursive>
 800fea6:	e7e9      	b.n	800fe7c <_vfiprintf_r+0x4c>
 800fea8:	2300      	movs	r3, #0
 800feaa:	9309      	str	r3, [sp, #36]	; 0x24
 800feac:	2320      	movs	r3, #32
 800feae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800feb2:	f8cd 800c 	str.w	r8, [sp, #12]
 800feb6:	2330      	movs	r3, #48	; 0x30
 800feb8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801007c <_vfiprintf_r+0x24c>
 800febc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fec0:	f04f 0901 	mov.w	r9, #1
 800fec4:	4623      	mov	r3, r4
 800fec6:	469a      	mov	sl, r3
 800fec8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fecc:	b10a      	cbz	r2, 800fed2 <_vfiprintf_r+0xa2>
 800fece:	2a25      	cmp	r2, #37	; 0x25
 800fed0:	d1f9      	bne.n	800fec6 <_vfiprintf_r+0x96>
 800fed2:	ebba 0b04 	subs.w	fp, sl, r4
 800fed6:	d00b      	beq.n	800fef0 <_vfiprintf_r+0xc0>
 800fed8:	465b      	mov	r3, fp
 800feda:	4622      	mov	r2, r4
 800fedc:	4629      	mov	r1, r5
 800fede:	4630      	mov	r0, r6
 800fee0:	f7ff ff94 	bl	800fe0c <__sfputs_r>
 800fee4:	3001      	adds	r0, #1
 800fee6:	f000 80aa 	beq.w	801003e <_vfiprintf_r+0x20e>
 800feea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800feec:	445a      	add	r2, fp
 800feee:	9209      	str	r2, [sp, #36]	; 0x24
 800fef0:	f89a 3000 	ldrb.w	r3, [sl]
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	f000 80a2 	beq.w	801003e <_vfiprintf_r+0x20e>
 800fefa:	2300      	movs	r3, #0
 800fefc:	f04f 32ff 	mov.w	r2, #4294967295
 800ff00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ff04:	f10a 0a01 	add.w	sl, sl, #1
 800ff08:	9304      	str	r3, [sp, #16]
 800ff0a:	9307      	str	r3, [sp, #28]
 800ff0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ff10:	931a      	str	r3, [sp, #104]	; 0x68
 800ff12:	4654      	mov	r4, sl
 800ff14:	2205      	movs	r2, #5
 800ff16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff1a:	4858      	ldr	r0, [pc, #352]	; (801007c <_vfiprintf_r+0x24c>)
 800ff1c:	f7f0 f9d8 	bl	80002d0 <memchr>
 800ff20:	9a04      	ldr	r2, [sp, #16]
 800ff22:	b9d8      	cbnz	r0, 800ff5c <_vfiprintf_r+0x12c>
 800ff24:	06d1      	lsls	r1, r2, #27
 800ff26:	bf44      	itt	mi
 800ff28:	2320      	movmi	r3, #32
 800ff2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ff2e:	0713      	lsls	r3, r2, #28
 800ff30:	bf44      	itt	mi
 800ff32:	232b      	movmi	r3, #43	; 0x2b
 800ff34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ff38:	f89a 3000 	ldrb.w	r3, [sl]
 800ff3c:	2b2a      	cmp	r3, #42	; 0x2a
 800ff3e:	d015      	beq.n	800ff6c <_vfiprintf_r+0x13c>
 800ff40:	9a07      	ldr	r2, [sp, #28]
 800ff42:	4654      	mov	r4, sl
 800ff44:	2000      	movs	r0, #0
 800ff46:	f04f 0c0a 	mov.w	ip, #10
 800ff4a:	4621      	mov	r1, r4
 800ff4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ff50:	3b30      	subs	r3, #48	; 0x30
 800ff52:	2b09      	cmp	r3, #9
 800ff54:	d94e      	bls.n	800fff4 <_vfiprintf_r+0x1c4>
 800ff56:	b1b0      	cbz	r0, 800ff86 <_vfiprintf_r+0x156>
 800ff58:	9207      	str	r2, [sp, #28]
 800ff5a:	e014      	b.n	800ff86 <_vfiprintf_r+0x156>
 800ff5c:	eba0 0308 	sub.w	r3, r0, r8
 800ff60:	fa09 f303 	lsl.w	r3, r9, r3
 800ff64:	4313      	orrs	r3, r2
 800ff66:	9304      	str	r3, [sp, #16]
 800ff68:	46a2      	mov	sl, r4
 800ff6a:	e7d2      	b.n	800ff12 <_vfiprintf_r+0xe2>
 800ff6c:	9b03      	ldr	r3, [sp, #12]
 800ff6e:	1d19      	adds	r1, r3, #4
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	9103      	str	r1, [sp, #12]
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	bfbb      	ittet	lt
 800ff78:	425b      	neglt	r3, r3
 800ff7a:	f042 0202 	orrlt.w	r2, r2, #2
 800ff7e:	9307      	strge	r3, [sp, #28]
 800ff80:	9307      	strlt	r3, [sp, #28]
 800ff82:	bfb8      	it	lt
 800ff84:	9204      	strlt	r2, [sp, #16]
 800ff86:	7823      	ldrb	r3, [r4, #0]
 800ff88:	2b2e      	cmp	r3, #46	; 0x2e
 800ff8a:	d10c      	bne.n	800ffa6 <_vfiprintf_r+0x176>
 800ff8c:	7863      	ldrb	r3, [r4, #1]
 800ff8e:	2b2a      	cmp	r3, #42	; 0x2a
 800ff90:	d135      	bne.n	800fffe <_vfiprintf_r+0x1ce>
 800ff92:	9b03      	ldr	r3, [sp, #12]
 800ff94:	1d1a      	adds	r2, r3, #4
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	9203      	str	r2, [sp, #12]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	bfb8      	it	lt
 800ff9e:	f04f 33ff 	movlt.w	r3, #4294967295
 800ffa2:	3402      	adds	r4, #2
 800ffa4:	9305      	str	r3, [sp, #20]
 800ffa6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801008c <_vfiprintf_r+0x25c>
 800ffaa:	7821      	ldrb	r1, [r4, #0]
 800ffac:	2203      	movs	r2, #3
 800ffae:	4650      	mov	r0, sl
 800ffb0:	f7f0 f98e 	bl	80002d0 <memchr>
 800ffb4:	b140      	cbz	r0, 800ffc8 <_vfiprintf_r+0x198>
 800ffb6:	2340      	movs	r3, #64	; 0x40
 800ffb8:	eba0 000a 	sub.w	r0, r0, sl
 800ffbc:	fa03 f000 	lsl.w	r0, r3, r0
 800ffc0:	9b04      	ldr	r3, [sp, #16]
 800ffc2:	4303      	orrs	r3, r0
 800ffc4:	3401      	adds	r4, #1
 800ffc6:	9304      	str	r3, [sp, #16]
 800ffc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ffcc:	482c      	ldr	r0, [pc, #176]	; (8010080 <_vfiprintf_r+0x250>)
 800ffce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ffd2:	2206      	movs	r2, #6
 800ffd4:	f7f0 f97c 	bl	80002d0 <memchr>
 800ffd8:	2800      	cmp	r0, #0
 800ffda:	d03f      	beq.n	801005c <_vfiprintf_r+0x22c>
 800ffdc:	4b29      	ldr	r3, [pc, #164]	; (8010084 <_vfiprintf_r+0x254>)
 800ffde:	bb1b      	cbnz	r3, 8010028 <_vfiprintf_r+0x1f8>
 800ffe0:	9b03      	ldr	r3, [sp, #12]
 800ffe2:	3307      	adds	r3, #7
 800ffe4:	f023 0307 	bic.w	r3, r3, #7
 800ffe8:	3308      	adds	r3, #8
 800ffea:	9303      	str	r3, [sp, #12]
 800ffec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffee:	443b      	add	r3, r7
 800fff0:	9309      	str	r3, [sp, #36]	; 0x24
 800fff2:	e767      	b.n	800fec4 <_vfiprintf_r+0x94>
 800fff4:	fb0c 3202 	mla	r2, ip, r2, r3
 800fff8:	460c      	mov	r4, r1
 800fffa:	2001      	movs	r0, #1
 800fffc:	e7a5      	b.n	800ff4a <_vfiprintf_r+0x11a>
 800fffe:	2300      	movs	r3, #0
 8010000:	3401      	adds	r4, #1
 8010002:	9305      	str	r3, [sp, #20]
 8010004:	4619      	mov	r1, r3
 8010006:	f04f 0c0a 	mov.w	ip, #10
 801000a:	4620      	mov	r0, r4
 801000c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010010:	3a30      	subs	r2, #48	; 0x30
 8010012:	2a09      	cmp	r2, #9
 8010014:	d903      	bls.n	801001e <_vfiprintf_r+0x1ee>
 8010016:	2b00      	cmp	r3, #0
 8010018:	d0c5      	beq.n	800ffa6 <_vfiprintf_r+0x176>
 801001a:	9105      	str	r1, [sp, #20]
 801001c:	e7c3      	b.n	800ffa6 <_vfiprintf_r+0x176>
 801001e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010022:	4604      	mov	r4, r0
 8010024:	2301      	movs	r3, #1
 8010026:	e7f0      	b.n	801000a <_vfiprintf_r+0x1da>
 8010028:	ab03      	add	r3, sp, #12
 801002a:	9300      	str	r3, [sp, #0]
 801002c:	462a      	mov	r2, r5
 801002e:	4b16      	ldr	r3, [pc, #88]	; (8010088 <_vfiprintf_r+0x258>)
 8010030:	a904      	add	r1, sp, #16
 8010032:	4630      	mov	r0, r6
 8010034:	f7fb ff2c 	bl	800be90 <_printf_float>
 8010038:	4607      	mov	r7, r0
 801003a:	1c78      	adds	r0, r7, #1
 801003c:	d1d6      	bne.n	800ffec <_vfiprintf_r+0x1bc>
 801003e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010040:	07d9      	lsls	r1, r3, #31
 8010042:	d405      	bmi.n	8010050 <_vfiprintf_r+0x220>
 8010044:	89ab      	ldrh	r3, [r5, #12]
 8010046:	059a      	lsls	r2, r3, #22
 8010048:	d402      	bmi.n	8010050 <_vfiprintf_r+0x220>
 801004a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801004c:	f7fb fdc4 	bl	800bbd8 <__retarget_lock_release_recursive>
 8010050:	89ab      	ldrh	r3, [r5, #12]
 8010052:	065b      	lsls	r3, r3, #25
 8010054:	f53f af12 	bmi.w	800fe7c <_vfiprintf_r+0x4c>
 8010058:	9809      	ldr	r0, [sp, #36]	; 0x24
 801005a:	e711      	b.n	800fe80 <_vfiprintf_r+0x50>
 801005c:	ab03      	add	r3, sp, #12
 801005e:	9300      	str	r3, [sp, #0]
 8010060:	462a      	mov	r2, r5
 8010062:	4b09      	ldr	r3, [pc, #36]	; (8010088 <_vfiprintf_r+0x258>)
 8010064:	a904      	add	r1, sp, #16
 8010066:	4630      	mov	r0, r6
 8010068:	f7fc f9b6 	bl	800c3d8 <_printf_i>
 801006c:	e7e4      	b.n	8010038 <_vfiprintf_r+0x208>
 801006e:	bf00      	nop
 8010070:	08010578 	.word	0x08010578
 8010074:	08010598 	.word	0x08010598
 8010078:	08010558 	.word	0x08010558
 801007c:	080109ac 	.word	0x080109ac
 8010080:	080109b6 	.word	0x080109b6
 8010084:	0800be91 	.word	0x0800be91
 8010088:	0800fe0d 	.word	0x0800fe0d
 801008c:	080109b2 	.word	0x080109b2

08010090 <__swbuf_r>:
 8010090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010092:	460e      	mov	r6, r1
 8010094:	4614      	mov	r4, r2
 8010096:	4605      	mov	r5, r0
 8010098:	b118      	cbz	r0, 80100a2 <__swbuf_r+0x12>
 801009a:	6983      	ldr	r3, [r0, #24]
 801009c:	b90b      	cbnz	r3, 80100a2 <__swbuf_r+0x12>
 801009e:	f7fb fcd7 	bl	800ba50 <__sinit>
 80100a2:	4b21      	ldr	r3, [pc, #132]	; (8010128 <__swbuf_r+0x98>)
 80100a4:	429c      	cmp	r4, r3
 80100a6:	d12b      	bne.n	8010100 <__swbuf_r+0x70>
 80100a8:	686c      	ldr	r4, [r5, #4]
 80100aa:	69a3      	ldr	r3, [r4, #24]
 80100ac:	60a3      	str	r3, [r4, #8]
 80100ae:	89a3      	ldrh	r3, [r4, #12]
 80100b0:	071a      	lsls	r2, r3, #28
 80100b2:	d52f      	bpl.n	8010114 <__swbuf_r+0x84>
 80100b4:	6923      	ldr	r3, [r4, #16]
 80100b6:	b36b      	cbz	r3, 8010114 <__swbuf_r+0x84>
 80100b8:	6923      	ldr	r3, [r4, #16]
 80100ba:	6820      	ldr	r0, [r4, #0]
 80100bc:	1ac0      	subs	r0, r0, r3
 80100be:	6963      	ldr	r3, [r4, #20]
 80100c0:	b2f6      	uxtb	r6, r6
 80100c2:	4283      	cmp	r3, r0
 80100c4:	4637      	mov	r7, r6
 80100c6:	dc04      	bgt.n	80100d2 <__swbuf_r+0x42>
 80100c8:	4621      	mov	r1, r4
 80100ca:	4628      	mov	r0, r5
 80100cc:	f7fe fb68 	bl	800e7a0 <_fflush_r>
 80100d0:	bb30      	cbnz	r0, 8010120 <__swbuf_r+0x90>
 80100d2:	68a3      	ldr	r3, [r4, #8]
 80100d4:	3b01      	subs	r3, #1
 80100d6:	60a3      	str	r3, [r4, #8]
 80100d8:	6823      	ldr	r3, [r4, #0]
 80100da:	1c5a      	adds	r2, r3, #1
 80100dc:	6022      	str	r2, [r4, #0]
 80100de:	701e      	strb	r6, [r3, #0]
 80100e0:	6963      	ldr	r3, [r4, #20]
 80100e2:	3001      	adds	r0, #1
 80100e4:	4283      	cmp	r3, r0
 80100e6:	d004      	beq.n	80100f2 <__swbuf_r+0x62>
 80100e8:	89a3      	ldrh	r3, [r4, #12]
 80100ea:	07db      	lsls	r3, r3, #31
 80100ec:	d506      	bpl.n	80100fc <__swbuf_r+0x6c>
 80100ee:	2e0a      	cmp	r6, #10
 80100f0:	d104      	bne.n	80100fc <__swbuf_r+0x6c>
 80100f2:	4621      	mov	r1, r4
 80100f4:	4628      	mov	r0, r5
 80100f6:	f7fe fb53 	bl	800e7a0 <_fflush_r>
 80100fa:	b988      	cbnz	r0, 8010120 <__swbuf_r+0x90>
 80100fc:	4638      	mov	r0, r7
 80100fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010100:	4b0a      	ldr	r3, [pc, #40]	; (801012c <__swbuf_r+0x9c>)
 8010102:	429c      	cmp	r4, r3
 8010104:	d101      	bne.n	801010a <__swbuf_r+0x7a>
 8010106:	68ac      	ldr	r4, [r5, #8]
 8010108:	e7cf      	b.n	80100aa <__swbuf_r+0x1a>
 801010a:	4b09      	ldr	r3, [pc, #36]	; (8010130 <__swbuf_r+0xa0>)
 801010c:	429c      	cmp	r4, r3
 801010e:	bf08      	it	eq
 8010110:	68ec      	ldreq	r4, [r5, #12]
 8010112:	e7ca      	b.n	80100aa <__swbuf_r+0x1a>
 8010114:	4621      	mov	r1, r4
 8010116:	4628      	mov	r0, r5
 8010118:	f000 f80c 	bl	8010134 <__swsetup_r>
 801011c:	2800      	cmp	r0, #0
 801011e:	d0cb      	beq.n	80100b8 <__swbuf_r+0x28>
 8010120:	f04f 37ff 	mov.w	r7, #4294967295
 8010124:	e7ea      	b.n	80100fc <__swbuf_r+0x6c>
 8010126:	bf00      	nop
 8010128:	08010578 	.word	0x08010578
 801012c:	08010598 	.word	0x08010598
 8010130:	08010558 	.word	0x08010558

08010134 <__swsetup_r>:
 8010134:	4b32      	ldr	r3, [pc, #200]	; (8010200 <__swsetup_r+0xcc>)
 8010136:	b570      	push	{r4, r5, r6, lr}
 8010138:	681d      	ldr	r5, [r3, #0]
 801013a:	4606      	mov	r6, r0
 801013c:	460c      	mov	r4, r1
 801013e:	b125      	cbz	r5, 801014a <__swsetup_r+0x16>
 8010140:	69ab      	ldr	r3, [r5, #24]
 8010142:	b913      	cbnz	r3, 801014a <__swsetup_r+0x16>
 8010144:	4628      	mov	r0, r5
 8010146:	f7fb fc83 	bl	800ba50 <__sinit>
 801014a:	4b2e      	ldr	r3, [pc, #184]	; (8010204 <__swsetup_r+0xd0>)
 801014c:	429c      	cmp	r4, r3
 801014e:	d10f      	bne.n	8010170 <__swsetup_r+0x3c>
 8010150:	686c      	ldr	r4, [r5, #4]
 8010152:	89a3      	ldrh	r3, [r4, #12]
 8010154:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010158:	0719      	lsls	r1, r3, #28
 801015a:	d42c      	bmi.n	80101b6 <__swsetup_r+0x82>
 801015c:	06dd      	lsls	r5, r3, #27
 801015e:	d411      	bmi.n	8010184 <__swsetup_r+0x50>
 8010160:	2309      	movs	r3, #9
 8010162:	6033      	str	r3, [r6, #0]
 8010164:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010168:	81a3      	strh	r3, [r4, #12]
 801016a:	f04f 30ff 	mov.w	r0, #4294967295
 801016e:	e03e      	b.n	80101ee <__swsetup_r+0xba>
 8010170:	4b25      	ldr	r3, [pc, #148]	; (8010208 <__swsetup_r+0xd4>)
 8010172:	429c      	cmp	r4, r3
 8010174:	d101      	bne.n	801017a <__swsetup_r+0x46>
 8010176:	68ac      	ldr	r4, [r5, #8]
 8010178:	e7eb      	b.n	8010152 <__swsetup_r+0x1e>
 801017a:	4b24      	ldr	r3, [pc, #144]	; (801020c <__swsetup_r+0xd8>)
 801017c:	429c      	cmp	r4, r3
 801017e:	bf08      	it	eq
 8010180:	68ec      	ldreq	r4, [r5, #12]
 8010182:	e7e6      	b.n	8010152 <__swsetup_r+0x1e>
 8010184:	0758      	lsls	r0, r3, #29
 8010186:	d512      	bpl.n	80101ae <__swsetup_r+0x7a>
 8010188:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801018a:	b141      	cbz	r1, 801019e <__swsetup_r+0x6a>
 801018c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010190:	4299      	cmp	r1, r3
 8010192:	d002      	beq.n	801019a <__swsetup_r+0x66>
 8010194:	4630      	mov	r0, r6
 8010196:	f7ff fbc3 	bl	800f920 <_free_r>
 801019a:	2300      	movs	r3, #0
 801019c:	6363      	str	r3, [r4, #52]	; 0x34
 801019e:	89a3      	ldrh	r3, [r4, #12]
 80101a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80101a4:	81a3      	strh	r3, [r4, #12]
 80101a6:	2300      	movs	r3, #0
 80101a8:	6063      	str	r3, [r4, #4]
 80101aa:	6923      	ldr	r3, [r4, #16]
 80101ac:	6023      	str	r3, [r4, #0]
 80101ae:	89a3      	ldrh	r3, [r4, #12]
 80101b0:	f043 0308 	orr.w	r3, r3, #8
 80101b4:	81a3      	strh	r3, [r4, #12]
 80101b6:	6923      	ldr	r3, [r4, #16]
 80101b8:	b94b      	cbnz	r3, 80101ce <__swsetup_r+0x9a>
 80101ba:	89a3      	ldrh	r3, [r4, #12]
 80101bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80101c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80101c4:	d003      	beq.n	80101ce <__swsetup_r+0x9a>
 80101c6:	4621      	mov	r1, r4
 80101c8:	4630      	mov	r0, r6
 80101ca:	f000 f84d 	bl	8010268 <__smakebuf_r>
 80101ce:	89a0      	ldrh	r0, [r4, #12]
 80101d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80101d4:	f010 0301 	ands.w	r3, r0, #1
 80101d8:	d00a      	beq.n	80101f0 <__swsetup_r+0xbc>
 80101da:	2300      	movs	r3, #0
 80101dc:	60a3      	str	r3, [r4, #8]
 80101de:	6963      	ldr	r3, [r4, #20]
 80101e0:	425b      	negs	r3, r3
 80101e2:	61a3      	str	r3, [r4, #24]
 80101e4:	6923      	ldr	r3, [r4, #16]
 80101e6:	b943      	cbnz	r3, 80101fa <__swsetup_r+0xc6>
 80101e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80101ec:	d1ba      	bne.n	8010164 <__swsetup_r+0x30>
 80101ee:	bd70      	pop	{r4, r5, r6, pc}
 80101f0:	0781      	lsls	r1, r0, #30
 80101f2:	bf58      	it	pl
 80101f4:	6963      	ldrpl	r3, [r4, #20]
 80101f6:	60a3      	str	r3, [r4, #8]
 80101f8:	e7f4      	b.n	80101e4 <__swsetup_r+0xb0>
 80101fa:	2000      	movs	r0, #0
 80101fc:	e7f7      	b.n	80101ee <__swsetup_r+0xba>
 80101fe:	bf00      	nop
 8010200:	20000010 	.word	0x20000010
 8010204:	08010578 	.word	0x08010578
 8010208:	08010598 	.word	0x08010598
 801020c:	08010558 	.word	0x08010558

08010210 <abort>:
 8010210:	b508      	push	{r3, lr}
 8010212:	2006      	movs	r0, #6
 8010214:	f000 f898 	bl	8010348 <raise>
 8010218:	2001      	movs	r0, #1
 801021a:	f7f1 fd75 	bl	8001d08 <_exit>

0801021e <__swhatbuf_r>:
 801021e:	b570      	push	{r4, r5, r6, lr}
 8010220:	460e      	mov	r6, r1
 8010222:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010226:	2900      	cmp	r1, #0
 8010228:	b096      	sub	sp, #88	; 0x58
 801022a:	4614      	mov	r4, r2
 801022c:	461d      	mov	r5, r3
 801022e:	da08      	bge.n	8010242 <__swhatbuf_r+0x24>
 8010230:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010234:	2200      	movs	r2, #0
 8010236:	602a      	str	r2, [r5, #0]
 8010238:	061a      	lsls	r2, r3, #24
 801023a:	d410      	bmi.n	801025e <__swhatbuf_r+0x40>
 801023c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010240:	e00e      	b.n	8010260 <__swhatbuf_r+0x42>
 8010242:	466a      	mov	r2, sp
 8010244:	f000 f89c 	bl	8010380 <_fstat_r>
 8010248:	2800      	cmp	r0, #0
 801024a:	dbf1      	blt.n	8010230 <__swhatbuf_r+0x12>
 801024c:	9a01      	ldr	r2, [sp, #4]
 801024e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010252:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010256:	425a      	negs	r2, r3
 8010258:	415a      	adcs	r2, r3
 801025a:	602a      	str	r2, [r5, #0]
 801025c:	e7ee      	b.n	801023c <__swhatbuf_r+0x1e>
 801025e:	2340      	movs	r3, #64	; 0x40
 8010260:	2000      	movs	r0, #0
 8010262:	6023      	str	r3, [r4, #0]
 8010264:	b016      	add	sp, #88	; 0x58
 8010266:	bd70      	pop	{r4, r5, r6, pc}

08010268 <__smakebuf_r>:
 8010268:	898b      	ldrh	r3, [r1, #12]
 801026a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801026c:	079d      	lsls	r5, r3, #30
 801026e:	4606      	mov	r6, r0
 8010270:	460c      	mov	r4, r1
 8010272:	d507      	bpl.n	8010284 <__smakebuf_r+0x1c>
 8010274:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010278:	6023      	str	r3, [r4, #0]
 801027a:	6123      	str	r3, [r4, #16]
 801027c:	2301      	movs	r3, #1
 801027e:	6163      	str	r3, [r4, #20]
 8010280:	b002      	add	sp, #8
 8010282:	bd70      	pop	{r4, r5, r6, pc}
 8010284:	ab01      	add	r3, sp, #4
 8010286:	466a      	mov	r2, sp
 8010288:	f7ff ffc9 	bl	801021e <__swhatbuf_r>
 801028c:	9900      	ldr	r1, [sp, #0]
 801028e:	4605      	mov	r5, r0
 8010290:	4630      	mov	r0, r6
 8010292:	f7fb fce9 	bl	800bc68 <_malloc_r>
 8010296:	b948      	cbnz	r0, 80102ac <__smakebuf_r+0x44>
 8010298:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801029c:	059a      	lsls	r2, r3, #22
 801029e:	d4ef      	bmi.n	8010280 <__smakebuf_r+0x18>
 80102a0:	f023 0303 	bic.w	r3, r3, #3
 80102a4:	f043 0302 	orr.w	r3, r3, #2
 80102a8:	81a3      	strh	r3, [r4, #12]
 80102aa:	e7e3      	b.n	8010274 <__smakebuf_r+0xc>
 80102ac:	4b0d      	ldr	r3, [pc, #52]	; (80102e4 <__smakebuf_r+0x7c>)
 80102ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80102b0:	89a3      	ldrh	r3, [r4, #12]
 80102b2:	6020      	str	r0, [r4, #0]
 80102b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80102b8:	81a3      	strh	r3, [r4, #12]
 80102ba:	9b00      	ldr	r3, [sp, #0]
 80102bc:	6163      	str	r3, [r4, #20]
 80102be:	9b01      	ldr	r3, [sp, #4]
 80102c0:	6120      	str	r0, [r4, #16]
 80102c2:	b15b      	cbz	r3, 80102dc <__smakebuf_r+0x74>
 80102c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80102c8:	4630      	mov	r0, r6
 80102ca:	f000 f86b 	bl	80103a4 <_isatty_r>
 80102ce:	b128      	cbz	r0, 80102dc <__smakebuf_r+0x74>
 80102d0:	89a3      	ldrh	r3, [r4, #12]
 80102d2:	f023 0303 	bic.w	r3, r3, #3
 80102d6:	f043 0301 	orr.w	r3, r3, #1
 80102da:	81a3      	strh	r3, [r4, #12]
 80102dc:	89a0      	ldrh	r0, [r4, #12]
 80102de:	4305      	orrs	r5, r0
 80102e0:	81a5      	strh	r5, [r4, #12]
 80102e2:	e7cd      	b.n	8010280 <__smakebuf_r+0x18>
 80102e4:	0800b9e9 	.word	0x0800b9e9

080102e8 <_malloc_usable_size_r>:
 80102e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80102ec:	1f18      	subs	r0, r3, #4
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	bfbc      	itt	lt
 80102f2:	580b      	ldrlt	r3, [r1, r0]
 80102f4:	18c0      	addlt	r0, r0, r3
 80102f6:	4770      	bx	lr

080102f8 <_raise_r>:
 80102f8:	291f      	cmp	r1, #31
 80102fa:	b538      	push	{r3, r4, r5, lr}
 80102fc:	4604      	mov	r4, r0
 80102fe:	460d      	mov	r5, r1
 8010300:	d904      	bls.n	801030c <_raise_r+0x14>
 8010302:	2316      	movs	r3, #22
 8010304:	6003      	str	r3, [r0, #0]
 8010306:	f04f 30ff 	mov.w	r0, #4294967295
 801030a:	bd38      	pop	{r3, r4, r5, pc}
 801030c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801030e:	b112      	cbz	r2, 8010316 <_raise_r+0x1e>
 8010310:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010314:	b94b      	cbnz	r3, 801032a <_raise_r+0x32>
 8010316:	4620      	mov	r0, r4
 8010318:	f000 f830 	bl	801037c <_getpid_r>
 801031c:	462a      	mov	r2, r5
 801031e:	4601      	mov	r1, r0
 8010320:	4620      	mov	r0, r4
 8010322:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010326:	f000 b817 	b.w	8010358 <_kill_r>
 801032a:	2b01      	cmp	r3, #1
 801032c:	d00a      	beq.n	8010344 <_raise_r+0x4c>
 801032e:	1c59      	adds	r1, r3, #1
 8010330:	d103      	bne.n	801033a <_raise_r+0x42>
 8010332:	2316      	movs	r3, #22
 8010334:	6003      	str	r3, [r0, #0]
 8010336:	2001      	movs	r0, #1
 8010338:	e7e7      	b.n	801030a <_raise_r+0x12>
 801033a:	2400      	movs	r4, #0
 801033c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010340:	4628      	mov	r0, r5
 8010342:	4798      	blx	r3
 8010344:	2000      	movs	r0, #0
 8010346:	e7e0      	b.n	801030a <_raise_r+0x12>

08010348 <raise>:
 8010348:	4b02      	ldr	r3, [pc, #8]	; (8010354 <raise+0xc>)
 801034a:	4601      	mov	r1, r0
 801034c:	6818      	ldr	r0, [r3, #0]
 801034e:	f7ff bfd3 	b.w	80102f8 <_raise_r>
 8010352:	bf00      	nop
 8010354:	20000010 	.word	0x20000010

08010358 <_kill_r>:
 8010358:	b538      	push	{r3, r4, r5, lr}
 801035a:	4d07      	ldr	r5, [pc, #28]	; (8010378 <_kill_r+0x20>)
 801035c:	2300      	movs	r3, #0
 801035e:	4604      	mov	r4, r0
 8010360:	4608      	mov	r0, r1
 8010362:	4611      	mov	r1, r2
 8010364:	602b      	str	r3, [r5, #0]
 8010366:	f7f1 fcbf 	bl	8001ce8 <_kill>
 801036a:	1c43      	adds	r3, r0, #1
 801036c:	d102      	bne.n	8010374 <_kill_r+0x1c>
 801036e:	682b      	ldr	r3, [r5, #0]
 8010370:	b103      	cbz	r3, 8010374 <_kill_r+0x1c>
 8010372:	6023      	str	r3, [r4, #0]
 8010374:	bd38      	pop	{r3, r4, r5, pc}
 8010376:	bf00      	nop
 8010378:	2000783c 	.word	0x2000783c

0801037c <_getpid_r>:
 801037c:	f7f1 bcac 	b.w	8001cd8 <_getpid>

08010380 <_fstat_r>:
 8010380:	b538      	push	{r3, r4, r5, lr}
 8010382:	4d07      	ldr	r5, [pc, #28]	; (80103a0 <_fstat_r+0x20>)
 8010384:	2300      	movs	r3, #0
 8010386:	4604      	mov	r4, r0
 8010388:	4608      	mov	r0, r1
 801038a:	4611      	mov	r1, r2
 801038c:	602b      	str	r3, [r5, #0]
 801038e:	f7f1 fcee 	bl	8001d6e <_fstat>
 8010392:	1c43      	adds	r3, r0, #1
 8010394:	d102      	bne.n	801039c <_fstat_r+0x1c>
 8010396:	682b      	ldr	r3, [r5, #0]
 8010398:	b103      	cbz	r3, 801039c <_fstat_r+0x1c>
 801039a:	6023      	str	r3, [r4, #0]
 801039c:	bd38      	pop	{r3, r4, r5, pc}
 801039e:	bf00      	nop
 80103a0:	2000783c 	.word	0x2000783c

080103a4 <_isatty_r>:
 80103a4:	b538      	push	{r3, r4, r5, lr}
 80103a6:	4d06      	ldr	r5, [pc, #24]	; (80103c0 <_isatty_r+0x1c>)
 80103a8:	2300      	movs	r3, #0
 80103aa:	4604      	mov	r4, r0
 80103ac:	4608      	mov	r0, r1
 80103ae:	602b      	str	r3, [r5, #0]
 80103b0:	f7f1 fced 	bl	8001d8e <_isatty>
 80103b4:	1c43      	adds	r3, r0, #1
 80103b6:	d102      	bne.n	80103be <_isatty_r+0x1a>
 80103b8:	682b      	ldr	r3, [r5, #0]
 80103ba:	b103      	cbz	r3, 80103be <_isatty_r+0x1a>
 80103bc:	6023      	str	r3, [r4, #0]
 80103be:	bd38      	pop	{r3, r4, r5, pc}
 80103c0:	2000783c 	.word	0x2000783c

080103c4 <_init>:
 80103c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103c6:	bf00      	nop
 80103c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80103ca:	bc08      	pop	{r3}
 80103cc:	469e      	mov	lr, r3
 80103ce:	4770      	bx	lr

080103d0 <_fini>:
 80103d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103d2:	bf00      	nop
 80103d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80103d6:	bc08      	pop	{r3}
 80103d8:	469e      	mov	lr, r3
 80103da:	4770      	bx	lr
